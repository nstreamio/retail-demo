// @swim/retail-demo v0.1.0 (c) 2015-2022 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@swim/domain"), require("@swim/util"), require("@swim/model"), require("@swim/client"), require("@swim/graphics"), require("@swim/controller"), require("@swim/panel"), require("@swim/uri"), require("@swim/dom"), require("@swim/view"), require("@swim/widget"), require("@swim/table"), require("@swim/math"), require("@swim/theme"), require("@swim/component"), require("@swim/structure"), require("@swim/pie"), require("@swim/style"), require("@swim/time"), require("@swim/chart")) : typeof define === "function" && define.amd ? define([ "exports", "@swim/domain", "@swim/util", "@swim/model", "@swim/client", "@swim/graphics", "@swim/controller", "@swim/panel", "@swim/uri", "@swim/dom", "@swim/view", "@swim/widget", "@swim/table", "@swim/math", "@swim/theme", "@swim/component", "@swim/structure", "@swim/pie", "@swim/style", "@swim/time", "@swim/chart" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim.retaildemo = global.swim.retaildemo || {}), global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, domain, util, model, client, graphics, controller, panel, uri, dom, view, widget, table, math, theme, component, structure, pie, style, time, chart) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let OrderBoardController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class OrderBoardController extends panel.BoardController {
      constructor() {
        super();
        this.sheet = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _sheet_initializers, void 0));
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.initBoard();
      }
      initBoard() {
        const boardView = this.sheet.attachView();
        boardView.appendChild(panel.PanelView).style.set({
          margin: 6
        });
      }
    }, (() => {
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        }
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        }
      }, _entity_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let OrderAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class OrderAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(OrderAspectTrait.icon);
      }
      createTabController() {
        return new OrderBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let OrderEntityTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    return _a = class OrderEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.icon.setIntrinsic(OrderEntityTrait.icon);
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M20,2L4,2C3,2,2,2.9,2,4L2,7C2,7.7,2.4,8.3,3,8.7L3,20C3,21.1,4.1,22,5,22L19,22C19.9,22,21,21.1,21,20L21,8.7C21.6,8.3,22,7.7,22,7L22,4C22,2.9,21,2,20,2ZM15,14L9,14L9,12L15,12L15,14ZM20,7L4,7L4,4L20,4L20,7Z");
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: OrderAspectTrait,
        traitKey: "aspect"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let OrdersRelationTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _orders_decorators;
    let _orders_initializers = [];
    return _a = class OrdersRelationTrait extends domain.RelationTrait {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.orders = __runInitializers(this, _orders_initializers, void 0);
        this.title.setIntrinsic("Orders");
        this.id.setIntrinsic("order");
      }
    }, (() => {
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: OrderEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(orderTrait) {
          const orderId = orderTrait.id.value;
          orderTrait.title.setIntrinsic(orderId);
          orderTrait.nodeUri.setIntrinsic("/order/" + orderId);
          orderTrait.portal.insertModel();
        },
        compareTraits(a, b) {
          return util.Strings.compare(a.title.value, b.title.value);
        }
      }) ];
      _orders_decorators = [ client.MapDownlink({
        laneUri: "orders",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let orderTrait = this.owner.entities.get(nodeUri.pathName);
          if (orderTrait === null) {
            orderTrait = this.owner.entities.createTrait(nodeUri.pathName);
            orderTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(orderTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        }
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orders_decorators, {
        kind: "field",
        name: "orders",
        static: false,
        private: false,
        access: {
          has: obj => "orders" in obj,
          get: obj => obj.orders,
          set: (obj, value) => {
            obj.orders = value;
          }
        }
      }, _orders_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  var OrderType;
  (function(OrderType) {
    OrderType["OrderA"] = "A";
    OrderType["OrderB"] = "B";
    OrderType["OrderC"] = "C";
    OrderType["Unknown"] = "Unknown";
  })(OrderType || (OrderType = {}));
  var OrderStatus;
  (function(OrderStatus) {
    OrderStatus["orderPlaced"] = "orderPlaced";
    OrderStatus["orderProcessed"] = "orderProcessed";
    OrderStatus["readyForPickup"] = "readyForPickup";
    OrderStatus["pickupCompleted"] = "pickupCompleted";
  })(OrderStatus || (OrderStatus = {}));
  let OrderStatusPieController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _totalMonetaryValue_decorators;
    let _totalMonetaryValue_initializers = [];
    let _aSlice_decorators;
    let _aSlice_initializers = [];
    let _bSlice_decorators;
    let _bSlice_initializers = [];
    let _cSlice_decorators;
    let _cSlice_initializers = [];
    let _pie_decorators;
    let _pie_initializers = [];
    let _statusDownlink_decorators;
    let _statusDownlink_initializers = [];
    return _a = class OrderStatusPieController extends widget.TimePieController {
      constructor(orderStatus, headerTitle) {
        super();
        this.orderStatus = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.totalMonetaryValue = __runInitializers(this, _totalMonetaryValue_initializers, void 0);
        this.aSlice = __runInitializers(this, _aSlice_initializers, void 0);
        this.bSlice = __runInitializers(this, _bSlice_initializers, void 0);
        this.cSlice = __runInitializers(this, _cSlice_initializers, void 0);
        this.pie = __runInitializers(this, _pie_initializers, void 0);
        this.statusDownlink = __runInitializers(this, _statusDownlink_initializers, void 0);
        this.orderStatus = orderStatus;
        this.headerTitle = headerTitle;
        window.setTimeout((() => {
          var _a, _b;
          this.statusDownlink.setNodeUri((_b = (_a = this.nodeUri.value) === null || _a === void 0 ? void 0 : _a.stringValue) !== null && _b !== void 0 ? _b : "");
          this.statusDownlink.open();
        }), 300);
      }
      getEmptyStateText() {
        if (this.orderStatus === OrderStatus.orderPlaced) {
          return "No new orders";
        } else if (this.orderStatus === OrderStatus.orderProcessed) {
          return "No orders being processed";
        } else {
          return "No orders ready for pickup";
        }
      }
      updateSlice(storeStatus, slice, type) {
        const value = storeStatus[this.orderStatus][type].value;
        const label = `$${storeStatus[this.orderStatus][type].value}`;
        if (!value) {
          slice.removeView();
        } else {
          slice.insertView(this.pie.attachView()).set({
            value: value,
            label: value / storeStatus[this.orderStatus].total.value > .2 ? label : ""
          });
        }
      }
    }, (() => {
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(panelView) {
          super.initView(panelView);
          panelView.set({
            headerTitle: this.owner.headerTitle
          });
          this.owner.piePanel.insertView().setIntrinsic({
            unitHeight: 1,
            style: {
              marginTop: 24,
              marginBottom: 24
            }
          });
          this.owner.pie.insertView();
          this.owner.totalMonetaryValue.insertView(panelView);
        }
      }) ];
      _totalMonetaryValue_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        viewKey: "totalMonetaryValue",
        extends: true,
        createView() {
          const el = document.createElement("h2");
          el.innerText = "33%";
          const htmlView = dom.HtmlView.fromNode(el).set({
            style: {
              position: "absolute",
              top: "50%",
              left: "50%",
              margin: 0,
              transform: "translate(-50%, -50%)",
              font: "sans-serif",
              fontSize: "16px",
              fontWeight: "500",
              textAlign: "center",
              color: "#CCCCCC"
            },
            classList: [ "total-monetary-value" ]
          });
          return htmlView;
        }
      }) ];
      _aSlice_decorators = [ view.ViewRef({
        viewType: pie.SliceView,
        viewKey: OrderStatus.orderPlaced,
        extends: true,
        initView(sliceView) {
          sliceView.set({
            sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderA),
            font: "14px sans-serif",
            textColor: theme.Look.backgroundColor,
            innerRadius: 30,
            outerRadius: 80,
            value: 1 / 3,
            legend: "A"
          });
          sliceView.modifyMood(theme.Feel.default, domain.Status.Normal.moodModifier);
          sliceView.legend.attachView().modifyMood(theme.Feel.default, [ [ theme.Feel.selected, 2 ] ]);
        }
      }) ];
      _bSlice_decorators = [ view.ViewRef({
        viewType: pie.SliceView,
        viewKey: OrderStatus.orderProcessed,
        extends: true,
        initView(sliceView) {
          sliceView.set({
            sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderB),
            font: "14px sans-serif",
            textColor: theme.Look.backgroundColor,
            innerRadius: 30,
            outerRadius: 80,
            value: 1 / 3,
            legend: "B"
          });
          sliceView.modifyMood(theme.Feel.default, domain.Status.Warning.moodModifier);
          sliceView.legend.attachView().modifyMood(theme.Feel.default, [ [ theme.Feel.selected, 2 ] ]);
        }
      }) ];
      _cSlice_decorators = [ view.ViewRef({
        viewType: pie.SliceView,
        viewKey: OrderStatus.readyForPickup,
        extends: true,
        initView(sliceView) {
          sliceView.set({
            sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderC),
            font: "14px sans-serif",
            textColor: theme.Look.backgroundColor,
            innerRadius: 30,
            outerRadius: 80,
            value: 1 / 3,
            legend: "C"
          });
          sliceView.modifyMood(theme.Feel.default, domain.Status.Unknown.moodModifier);
          sliceView.legend.attachView().modifyMood(theme.Feel.default, [ [ theme.Feel.selected, 2 ] ]);
        }
      }) ];
      _pie_decorators = [ view.ViewRef({
        viewType: pie.PieView,
        viewKey: "pie",
        extends: true,
        initView(pieView) {
          this.owner.aSlice.insertView(pieView);
          this.owner.bSlice.insertView(pieView);
          this.owner.cSlice.insertView(pieView);
        }
      }) ];
      _statusDownlink_decorators = [ client.ValueDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "status",
        consumed: true,
        didSet(value) {
          const storeStatus = OrderListController.parseStoreStatus(value);
          this.owner.updateSlice(storeStatus, this.owner.aSlice, OrderType.OrderA);
          this.owner.updateSlice(storeStatus, this.owner.bSlice, OrderType.OrderB);
          this.owner.updateSlice(storeStatus, this.owner.cSlice, OrderType.OrderC);
          const totalValue = storeStatus[this.owner.orderStatus].total.value;
          this.owner.totalMonetaryValue.view.node.innerText = totalValue ? `$${totalValue}` : this.owner.getEmptyStateText();
        }
      }) ];
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        }
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _totalMonetaryValue_decorators, {
        kind: "field",
        name: "totalMonetaryValue",
        static: false,
        private: false,
        access: {
          has: obj => "totalMonetaryValue" in obj,
          get: obj => obj.totalMonetaryValue,
          set: (obj, value) => {
            obj.totalMonetaryValue = value;
          }
        }
      }, _totalMonetaryValue_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _aSlice_decorators, {
        kind: "field",
        name: "aSlice",
        static: false,
        private: false,
        access: {
          has: obj => "aSlice" in obj,
          get: obj => obj.aSlice,
          set: (obj, value) => {
            obj.aSlice = value;
          }
        }
      }, _aSlice_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _bSlice_decorators, {
        kind: "field",
        name: "bSlice",
        static: false,
        private: false,
        access: {
          has: obj => "bSlice" in obj,
          get: obj => obj.bSlice,
          set: (obj, value) => {
            obj.bSlice = value;
          }
        }
      }, _bSlice_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _cSlice_decorators, {
        kind: "field",
        name: "cSlice",
        static: false,
        private: false,
        access: {
          has: obj => "cSlice" in obj,
          get: obj => obj.cSlice,
          set: (obj, value) => {
            obj.cSlice = value;
          }
        }
      }, _cSlice_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _pie_decorators, {
        kind: "field",
        name: "pie",
        static: false,
        private: false,
        access: {
          has: obj => "pie" in obj,
          get: obj => obj.pie,
          set: (obj, value) => {
            obj.pie = value;
          }
        }
      }, _pie_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusDownlink_decorators, {
        kind: "field",
        name: "statusDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statusDownlink" in obj,
          get: obj => obj.statusDownlink,
          set: (obj, value) => {
            obj.statusDownlink = value;
          }
        }
      }, _statusDownlink_initializers, _instanceExtraInitializers);
    })(), _a.alertStatus = domain.Status.improving(0, 2.5, 3.5, 4.5, 5), _a.sliceColors = new Map([ [ OrderType.OrderA, "#5CA0E7" ], [ OrderType.OrderB, "#A40E4C" ], [ OrderType.OrderC, "#5A945E" ] ]), 
    _a;
  })();
  let OrderKanbanBoardController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _focusedCustomerId_decorators;
    let _focusedCustomerId_initializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _entity_decorators;
    let _entity_initializers = [];
    return _a = class OrderKanbanBoardController extends panel.BoardController {
      constructor() {
        super();
        this.focusedCustomerId = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _focusedCustomerId_initializers, void 0));
        this.sheet = __runInitializers(this, _sheet_initializers, void 0);
        this.entity = __runInitializers(this, _entity_initializers, void 0);
        this.initBoard();
      }
      initBoard() {
        const boardView = this.sheet.attachView();
        const rootPanelView = boardView.appendChild(panel.PanelView).style.set({
          margin: 6
        });
        const orderPlacedPanelController = this.appendChild(new panel.PanelController, `Panel${OrderStatus.orderPlaced}`);
        const orderPlacedPanelView = orderPlacedPanelController.panel.insertView(rootPanelView).set({
          unitWidth: 1 / 3,
          unitHeight: 1,
          style: {
            margin: 6
          }
        });
        const orderPlacedPieController = orderPlacedPanelController.appendChild(new OrderStatusPieController(OrderStatus.orderPlaced, "New Orders"), `Pie${OrderStatus.orderPlaced}`);
        orderPlacedPieController.panel.insertView(orderPlacedPanelView).set({
          unitWidth: 1,
          unitHeight: 1 / 3,
          style: {
            margin: 0
          }
        });
        const orderPlacedListController = orderPlacedPanelController.appendChild(new OrderListController(OrderStatus.orderPlaced, this), `List${OrderStatus.orderPlaced}`);
        orderPlacedListController.panel.insertView(orderPlacedPanelView).set({
          unitWidth: 1,
          unitHeight: 2 / 3,
          style: {
            margin: 0
          }
        });
        const orderProcessedPanelController = this.appendChild(new panel.PanelController, `Panel${OrderStatus.orderProcessed}`);
        const orderProcessedPanelView = orderProcessedPanelController.panel.insertView(rootPanelView).set({
          unitWidth: 1 / 3,
          unitHeight: 1,
          style: {
            margin: 6
          }
        });
        const orderProcessedPieController = orderProcessedPanelController.appendChild(new OrderStatusPieController(OrderStatus.orderProcessed, "Processing"), `Pie${OrderStatus.orderProcessed}`);
        orderProcessedPieController.panel.insertView(orderProcessedPanelView).set({
          unitWidth: 1,
          unitHeight: 1 / 3,
          style: {
            margin: 0
          }
        });
        const orderProcessedListController = orderProcessedPanelController.appendChild(new OrderListController(OrderStatus.orderProcessed, this), `List${OrderStatus.orderProcessed}`);
        orderProcessedListController.panel.insertView(orderProcessedPanelView).set({
          unitWidth: 1,
          unitHeight: 2 / 3,
          style: {
            margin: 0
          }
        });
        const orderReadyPanelController = this.appendChild(new panel.PanelController, `Panel${OrderStatus.readyForPickup}`);
        const orderReadyPanelView = orderReadyPanelController.panel.insertView(rootPanelView).set({
          unitWidth: 1 / 3,
          unitHeight: 1,
          style: {
            margin: 6
          }
        });
        const orderReadyPieController = orderReadyPanelController.appendChild(new OrderStatusPieController(OrderStatus.readyForPickup, "Ready Orders"), `Pie${OrderStatus.readyForPickup}`);
        orderReadyPieController.panel.insertView(orderReadyPanelView).set({
          unitWidth: 1,
          unitHeight: 1 / 3,
          style: {
            margin: 0
          }
        });
        const orderReadyListController = orderReadyPanelController.appendChild(new OrderListController(OrderStatus.readyForPickup, this), `List${OrderStatus.readyForPickup}`);
        orderReadyListController.panel.insertView(orderReadyPanelView).set({
          unitWidth: 1,
          unitHeight: 2 / 3,
          style: {
            margin: 0
          }
        });
      }
    }, (() => {
      _focusedCustomerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        viewDidMount(boardView) {
          this.owner.consume(boardView);
        },
        viewWillUnmount(boardView) {
          this.owner.unconsume(boardView);
        }
      }) ];
      _entity_decorators = [ model.TraitRef({
        traitType: domain.EntityTrait,
        inherits: true,
        initTrait(entityTrait) {
          this.owner.hostUri.bindInlet(entityTrait.hostUri);
          this.owner.nodeUri.bindInlet(entityTrait.nodeUri);
        }
      }) ];
      __esDecorate(null, null, _focusedCustomerId_decorators, {
        kind: "field",
        name: "focusedCustomerId",
        static: false,
        private: false,
        access: {
          has: obj => "focusedCustomerId" in obj,
          get: obj => obj.focusedCustomerId,
          set: (obj, value) => {
            obj.focusedCustomerId = value;
          }
        }
      }, _focusedCustomerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        }
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _entity_decorators, {
        kind: "field",
        name: "entity",
        static: false,
        private: false,
        access: {
          has: obj => "entity" in obj,
          get: obj => obj.entity,
          set: (obj, value) => {
            obj.entity = value;
          }
        }
      }, _entity_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let OrderController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _row_decorators;
    let _row_initializers = [];
    let _leaf_decorators;
    let _leaf_initializers = [];
    let _customerCell_decorators;
    let _customerCell_initializers = [];
    let _orderCell_decorators;
    let _orderCell_initializers = [];
    let _timeInProcessingCell_decorators;
    let _timeInProcessingCell_initializers = [];
    let _stats_decorators;
    let _stats_initializers = [];
    let _hovered_decorators;
    let _hovered_initializers = [];
    let _customerId_decorators;
    let _customerId_initializers = [];
    let _focusedCustomerId_decorators;
    let _focusedCustomerId_initializers = [];
    let _updateOrderDownlink_decorators;
    let _updateOrderDownlink_initializers = [];
    return _a = class OrderController extends widget.TimeSeriesController {
      constructor(nodeUri, orderStatus, olc) {
        super();
        this.eventKey = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.row = __runInitializers(this, _row_initializers, void 0);
        this.leaf = __runInitializers(this, _leaf_initializers, void 0);
        this.customerCell = __runInitializers(this, _customerCell_initializers, void 0);
        this.orderCell = __runInitializers(this, _orderCell_initializers, void 0);
        this.timeInProcessingCell = __runInitializers(this, _timeInProcessingCell_initializers, void 0);
        this.stats = __runInitializers(this, _stats_initializers, void 0);
        this.hovered = __runInitializers(this, _hovered_initializers, void 0);
        this.customerId = __runInitializers(this, _customerId_initializers, void 0);
        this.focusedCustomerId = __runInitializers(this, _focusedCustomerId_initializers, void 0);
        this.updateOrderDownlink = __runInitializers(this, _updateOrderDownlink_initializers, void 0);
        this.setKey(nodeUri);
        this.eventKey = orderStatus;
        this.updateOrderDownlink.setNodeUri(nodeUri);
        this.updateOrderDownlink.open();
        this.focusedCustomerId.bindInlet(olc.focusedCustomerId);
      }
      updateOrder(orderId) {
        const idx = OrderController.orderStatusProgression.indexOf(this.eventKey);
        const newStatus = OrderController.orderStatusProgression[idx + 1];
        if (!this.updateOrderDownlink.opened) {
          this.updateOrderDownlink.open();
        }
        this.updateOrderDownlink.command(`{status:${newStatus}}`);
      }
    }, (() => {
      _row_decorators = [ view.ViewRef({
        viewType: table.RowView,
        initView(rowView) {
          const that = this;
          const handleClick = function(orderId) {
            return function() {
              that.owner.updateOrder(orderId);
            };
          };
          rowView.set({
            style: {
              cursor: "pointer"
            }
          });
          rowView.addEventListener("click", handleClick(this.owner.key));
        }
      }) ];
      _leaf_decorators = [ view.ViewRef({
        viewType: table.LeafView,
        extends: true,
        initView(leafView) {
          leafView.node.addEventListener("mouseenter", (() => {
            if (this.owner.focusedCustomerId.value === this.owner.customerId.value) {
              return;
            }
            const kbController = this.owner.getAncestor(OrderKanbanBoardController);
            const futureValue = this.owner.customerId.value;
            if (kbController) {
              kbController.focusedCustomerId.setValue(futureValue);
            } else {
              console.warn("No OrderKanbanBoardController found for some reason!");
            }
          }));
          return;
        }
      }) ];
      _customerCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "customer",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _orderCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "order",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _timeInProcessingCell_decorators = [ view.ViewRef({
        viewType: table.CellView,
        viewKey: "timeInProcessing",
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _stats_decorators = [ component.Property({
        valueType: structure.Value,
        value: structure.Value.absent(),
        didSetValue(value) {
          var _a, _b, _c, _d;
          let moodStatus = OrderController.orderStatusMood.get(this.owner.eventKey);
          const customerCellView = this.owner.customerCell.view;
          if (customerCellView !== null) {
            const customerId = value.get("customerId").stringValue("");
            this.owner.customerId.setValue(customerId);
            customerCellView.set({
              content: `/${customerId}`,
              classList: [ "customer-cell-view" ]
            });
            if (customerId === this.owner.focusedCustomerId.value) {
              this.owner.leaf.attachView().set({
                style: {
                  backgroundColor: "#555555"
                }
              });
            }
            customerCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
          const orderCellView = this.owner.orderCell.view;
          if (orderCellView !== null) {
            let orderType = OrderType.Unknown;
            if ((_a = value.get("products").get("A").numberValue()) !== null && _a !== void 0 ? _a : 0) {
              orderType = OrderType.OrderA;
            } else if ((_b = value.get("products").get("B").numberValue()) !== null && _b !== void 0 ? _b : 0) {
              orderType = OrderType.OrderB;
            } else if ((_c = value.get("products").get("C").numberValue()) !== null && _c !== void 0 ? _c : 0) {
              orderType = OrderType.OrderC;
            }
            orderCellView.content.set(`Order ${orderType}`);
            orderCellView.set({
              classList: [ "order-cell-view" ]
            });
            orderCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
          const timeInProcessingCellView = this.owner.timeInProcessingCell.view;
          if (timeInProcessingCellView !== null) {
            timeInProcessingCellView.content.set(new Date((_d = value.get("timestamp").numberValue()) !== null && _d !== void 0 ? _d : 0).toString());
            timeInProcessingCellView.set({
              classList: [ "time-in-processing-cell-view" ]
            });
            timeInProcessingCellView.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          }
        }
      }) ];
      _hovered_decorators = [ component.Property({
        valueType: String,
        value: false
      }) ];
      _customerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _focusedCustomerId_decorators = [ component.Property({
        valueType: String,
        value: "",
        didSetValue(newValue, oldValue) {
          var _a;
          if (((_a = this.owner.nodeUri.value) === null || _a === void 0 ? void 0 : _a.stringValue) !== "/store/main") {
            return;
          }
          const leaf = this.owner.leaf.attachView();
          const customerId = this.owner.customerId.value;
          if (newValue && newValue === customerId) {
            leaf.set({
              style: {
                backgroundColor: "#555555"
              }
            });
          } else if (newValue !== customerId) {
            leaf.set({
              style: {
                backgroundColor: "transparent"
              }
            });
          }
        }
      }) ];
      _updateOrderDownlink_decorators = [ client.MapDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "updateOrder",
        consumed: true,
        keyForm: uri.Uri.form()
      }) ];
      __esDecorate(null, null, _row_decorators, {
        kind: "field",
        name: "row",
        static: false,
        private: false,
        access: {
          has: obj => "row" in obj,
          get: obj => obj.row,
          set: (obj, value) => {
            obj.row = value;
          }
        }
      }, _row_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaf_decorators, {
        kind: "field",
        name: "leaf",
        static: false,
        private: false,
        access: {
          has: obj => "leaf" in obj,
          get: obj => obj.leaf,
          set: (obj, value) => {
            obj.leaf = value;
          }
        }
      }, _leaf_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _customerCell_decorators, {
        kind: "field",
        name: "customerCell",
        static: false,
        private: false,
        access: {
          has: obj => "customerCell" in obj,
          get: obj => obj.customerCell,
          set: (obj, value) => {
            obj.customerCell = value;
          }
        }
      }, _customerCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderCell_decorators, {
        kind: "field",
        name: "orderCell",
        static: false,
        private: false,
        access: {
          has: obj => "orderCell" in obj,
          get: obj => obj.orderCell,
          set: (obj, value) => {
            obj.orderCell = value;
          }
        }
      }, _orderCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeInProcessingCell_decorators, {
        kind: "field",
        name: "timeInProcessingCell",
        static: false,
        private: false,
        access: {
          has: obj => "timeInProcessingCell" in obj,
          get: obj => obj.timeInProcessingCell,
          set: (obj, value) => {
            obj.timeInProcessingCell = value;
          }
        }
      }, _timeInProcessingCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _stats_decorators, {
        kind: "field",
        name: "stats",
        static: false,
        private: false,
        access: {
          has: obj => "stats" in obj,
          get: obj => obj.stats,
          set: (obj, value) => {
            obj.stats = value;
          }
        }
      }, _stats_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _hovered_decorators, {
        kind: "field",
        name: "hovered",
        static: false,
        private: false,
        access: {
          has: obj => "hovered" in obj,
          get: obj => obj.hovered,
          set: (obj, value) => {
            obj.hovered = value;
          }
        }
      }, _hovered_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _customerId_decorators, {
        kind: "field",
        name: "customerId",
        static: false,
        private: false,
        access: {
          has: obj => "customerId" in obj,
          get: obj => obj.customerId,
          set: (obj, value) => {
            obj.customerId = value;
          }
        }
      }, _customerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _focusedCustomerId_decorators, {
        kind: "field",
        name: "focusedCustomerId",
        static: false,
        private: false,
        access: {
          has: obj => "focusedCustomerId" in obj,
          get: obj => obj.focusedCustomerId,
          set: (obj, value) => {
            obj.focusedCustomerId = value;
          }
        }
      }, _focusedCustomerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _updateOrderDownlink_decorators, {
        kind: "field",
        name: "updateOrderDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "updateOrderDownlink" in obj,
          get: obj => obj.updateOrderDownlink,
          set: (obj, value) => {
            obj.updateOrderDownlink = value;
          }
        }
      }, _updateOrderDownlink_initializers, _instanceExtraInitializers);
    })(), _a.orderStatusProgression = [ OrderStatus.orderPlaced, OrderStatus.orderProcessed, OrderStatus.readyForPickup, OrderStatus.pickupCompleted ], 
    _a.orderStatusMood = new Map([ [ OrderStatus.orderPlaced, domain.Status.improving(0, 1, 2, 3, 4)(1.4) ], [ OrderStatus.orderProcessed, domain.Status.improving(0, 1, 2, 3, 4)(2) ], [ OrderStatus.readyForPickup, domain.Status.improving(0, 1, 2, 3, 4)(3) ], [ OrderStatus.pickupCompleted, domain.Status.unknown() ] ]), 
    _a;
  })();
  let OrderTypeChartController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _plot_decorators;
    let _plot_initializers = [];
    let _fakeTimestamp_decorators;
    let _fakeTimestamp_initializers = [];
    return _a = class OrderTypeChartController extends widget.TimeSeriesController {
      constructor(orderStatus, orderType) {
        super();
        this.orderStatus = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.plot = __runInitializers(this, _plot_initializers, void 0);
        this.fakeTimestamp = __runInitializers(this, _fakeTimestamp_initializers, void 0);
        this.orderStatus = orderStatus;
        this.orderType = orderType;
        if (this.orderStatus === OrderStatus.orderPlaced) ;
      }
      stats(storeStatus) {
        const timestamp = this.fakeTimestamp.getNextTimestamp();
        const t = new time.DateTime(timestamp * 1e3, time.TimeZone.local());
        const dataPointKey = "" + t.time;
        const plotView = this.plot.attachView();
        const value = storeStatus[this.orderStatus][this.orderType].value;
        let dataPointView = plotView.getChild(dataPointKey, chart.DataPointView);
        if (this.orderStatus === OrderStatus.orderPlaced) ;
        if (dataPointView === null) {
          dataPointView = (new chart.DataPointView).set({
            x: t,
            y: value,
            color: OrderStatusPieController.sliceColors.get(this.orderType)
          });
          plotView.dataPoints.insertView(null, dataPointView, null, "" + t.time);
          if (this.orderStatus === OrderStatus.orderPlaced) ;
        } else {
          const timing = dataPointView.getLookOr(theme.Look.timing, true);
          dataPointView.y.set(value, timing);
          if (this.orderStatus === OrderStatus.orderPlaced) ;
        }
      }
    }, (() => {
      _plot_decorators = [ view.ViewRef({
        viewType: chart.SeriesPlotView,
        extends: true,
        get parentView() {
          const parent = this.owner.parent.graph.attachView();
          return parent;
        },
        createView() {
          return chart.LinePlotView.create();
        },
        initView(seriesPlotView) {
          super.initView(seriesPlotView);
          seriesPlotView.setKey(this.owner.orderType);
        }
      }) ];
      _fakeTimestamp_decorators = [ component.Property({
        valueType: Number,
        value: 0,
        extends: true,
        getNextTimestamp() {
          let currentTimestamp = this.value.valueOf();
          this.setValue(currentTimestamp + 1);
          return currentTimestamp;
        }
      }) ];
      __esDecorate(null, null, _plot_decorators, {
        kind: "field",
        name: "plot",
        static: false,
        private: false,
        access: {
          has: obj => "plot" in obj,
          get: obj => obj.plot,
          set: (obj, value) => {
            obj.plot = value;
          }
        }
      }, _plot_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _fakeTimestamp_decorators, {
        kind: "field",
        name: "fakeTimestamp",
        static: false,
        private: false,
        access: {
          has: obj => "fakeTimestamp" in obj,
          get: obj => obj.fakeTimestamp,
          set: (obj, value) => {
            obj.fakeTimestamp = value;
          }
        }
      }, _fakeTimestamp_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let CumulativeOrdersSectionController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    return _a = class CumulativeOrdersSectionController extends widget.TimeTableController {
      constructor() {
        super();
        this.panel = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _panel_initializers, void 0));
      }
    }, (() => {
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(rootPanelView) {
          rootPanelView.set({
            style: {
              paddingTop: "16px"
            }
          });
          const cumulativeOrdersAController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderA), `CumulativeOrders${OrderType.OrderA}`);
          cumulativeOrdersAController.panel.insertView(rootPanelView).set({
            unitWidth: 1 / 2,
            unitHeight: 1 / 2,
            style: {
              margin: 0
            }
          });
          const cumulativeOrdersBController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderB), `CumulativeOrders${OrderType.OrderB}`);
          cumulativeOrdersBController.panel.insertView(rootPanelView).set({
            unitWidth: 1 / 2,
            unitHeight: 1 / 2,
            style: {
              margin: 0
            }
          });
          const cumulativeOrdersCController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderC), `CumulativeOrders${OrderType.OrderC}`);
          cumulativeOrdersCController.panel.insertView(rootPanelView).set({
            unitWidth: 1 / 2,
            unitHeight: 1 / 2,
            style: {
              margin: 0
            }
          });
          const cumulativeOrdersTotalController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.Unknown, true), `CumulativeOrdersTotal`);
          cumulativeOrdersTotalController.panel.insertView(rootPanelView).set({
            unitWidth: 1 / 2,
            unitHeight: 1 / 2,
            style: {
              margin: 0
            }
          });
        }
      }) ];
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        }
      }, _panel_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let OrderListController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _focusedCustomerId_decorators;
    let _focusedCustomerId_initializers = [];
    let _chartPanel_decorators;
    let _chartPanel_initializers = [];
    let _chart_decorators;
    let _chart_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _customerCol_decorators;
    let _customerCol_initializers = [];
    let _orderCol_decorators;
    let _orderCol_initializers = [];
    let _timeInProcessingCol_decorators;
    let _timeInProcessingCol_initializers = [];
    let _orderDownlink_decorators;
    let _orderDownlink_initializers = [];
    let _statusDownlink_decorators;
    let _statusDownlink_initializers = [];
    return _a = class OrderListController extends widget.TimeTableController {
      constructor(key, kbController) {
        super();
        this.eventKey = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.focusedCustomerId = __runInitializers(this, _focusedCustomerId_initializers, void 0);
        this.chartPanel = __runInitializers(this, _chartPanel_initializers, void 0);
        this.chart = __runInitializers(this, _chart_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.customerCol = __runInitializers(this, _customerCol_initializers, void 0);
        this.orderCol = __runInitializers(this, _orderCol_initializers, void 0);
        this.timeInProcessingCol = __runInitializers(this, _timeInProcessingCol_initializers, void 0);
        this.orderDownlink = __runInitializers(this, _orderDownlink_initializers, void 0);
        this.statusDownlink = __runInitializers(this, _statusDownlink_initializers, void 0);
        this.setKey(`orderListController-${key}`);
        this.eventKey = key;
        if (kbController) {
          this.focusedCustomerId.bindInlet(kbController.focusedCustomerId);
        }
      }
      static parseStoreStatus(v) {
        return [ OrderStatus.orderPlaced, OrderStatus.orderProcessed, OrderStatus.readyForPickup, OrderStatus.pickupCompleted ].reduce(((acc, s) => {
          [ OrderType.OrderA, OrderType.OrderB, OrderType.OrderC ].forEach((t => {
            let count = v.get(s).get(t).numberValue(0);
            let value = count * OrderListController.valuePerOrderType[t];
            if (!acc[s]) {
              acc[s] = {
                total: {
                  count: 0,
                  value: 0
                }
              };
            }
            acc[s][t] = {
              count: count,
              value: value
            };
            acc[s].total.count += count;
            acc[s].total.value += value;
          }));
          return acc;
        }), {});
      }
    }, (() => {
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(panelView) {
          var _a;
          super.initView(panelView);
          this.owner.chartPanel.attachView();
          this.owner.chart.insertView();
          const graphView = this.owner.graph.insertView();
          (_a = this.owner.chartCanvas.view) === null || _a === void 0 ? void 0 : _a.classList.add("olc-chart-canvas");
          const orderTypeChartControllerA = this.owner.series.addController(new OrderTypeChartController(this.owner.eventKey, OrderType.OrderA), null, OrderType.OrderA);
          orderTypeChartControllerA.plot.insertView(graphView, void 0, void 0, OrderType.OrderA);
          const orderTypeChartControllerB = this.owner.series.addController(new OrderTypeChartController(this.owner.eventKey, OrderType.OrderB), null, OrderType.OrderB);
          orderTypeChartControllerB.plot.insertView(graphView, void 0, void 0, OrderType.OrderB);
          const orderTypeChartControllerC = this.owner.series.addController(new OrderTypeChartController(this.owner.eventKey, OrderType.OrderC), null, OrderType.OrderC);
          orderTypeChartControllerC.plot.insertView(graphView, void 0, void 0, OrderType.OrderC);
          const tablePanel = this.owner.tablePanel.insertView().set({
            unitWidth: 1,
            unitHeight: (this.owner.eventKey === OrderStatus.readyForPickup ? 3 : 5) / 6,
            minFrameHeight: 0,
            minFrameWidth: 0,
            style: {
              margin: 0
            }
          });
          tablePanel.classList.add("olc-table-panel");
          this.owner.table.insertView();
          this.owner.header.insertView();
          if (this.owner.eventKey === OrderStatus.readyForPickup) {
            const cumulativeOrdersSectionController = this.owner.appendChild(new CumulativeOrdersSectionController);
            cumulativeOrdersSectionController.panel.insertView(this.owner.panel.attachView()).set({
              unitWidth: 1,
              unitHeight: 2 / 6,
              style: {
                margin: 0
              }
            });
          }
          window.setTimeout((() => {
            var _a, _b;
            this.owner.statusDownlink.setNodeUri((_b = (_a = this.owner.nodeUri.value) === null || _a === void 0 ? void 0 : _a.stringValue) !== null && _b !== void 0 ? _b : "");
            this.owner.statusDownlink.open();
          }), 300);
        }
      }) ];
      _focusedCustomerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _chartPanel_decorators = [ view.ViewRef({
        viewType: panel.PanelView,
        extends: true,
        initView(chartPanelView) {
          chartPanelView.set({
            unitWidth: 1,
            unitHeight: 1 / 6,
            minFrameHeight: 200,
            minFrameWidth: 0,
            style: {
              margin: 0
            },
            classList: [ "olc-chart-panel" ]
          });
        }
      }) ];
      _chart_decorators = [ view.ViewRef({
        viewType: chart.ChartView,
        extends: true,
        initView(chartView) {
          chartView.setIntrinsic({
            gutterTop: 0,
            gutterRight: 12,
            gutterBottom: 12,
            gutterLeft: 18
          });
        }
      }) ];
      _header_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          const headerView = super.createView();
          this.owner.customerCol.insertView(headerView);
          this.owner.orderCol.insertView(headerView);
          this.owner.timeInProcessingCol.insertView(headerView);
          return headerView;
        },
        initView(headerView) {
          headerView.node.addEventListener("mouseenter", (() => {
            const kbController = this.owner.getAncestor(OrderKanbanBoardController);
            if (kbController) {
              kbController.focusedCustomerId.setValue("");
            } else {
              console.warn("No OrderKanbanBoardController found for some reason!");
            }
          }));
        }
      }) ];
      _table_decorators = [ view.ViewRef({
        extends: true,
        createLayout() {
          const cols = new Array;
          cols.push(table.ColLayout.create("customer", 1, 1, 0, false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("order", 1, 0, 0, false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("timeInProcessing", 0, 0, "124px", false, false, theme.Look.accentColor));
          return new table.TableLayout(null, null, null, math.Length.px(12), cols);
        },
        initView(tableView) {
          tableView.node.addEventListener("mouseleave", (() => {
            const kbController = this.owner.getAncestor(OrderKanbanBoardController);
            if (kbController) {
              kbController.focusedCustomerId.setValue("");
            } else {
              console.warn("No OrderKanbanBoardController found for some reason!");
            }
          }));
        }
      }) ];
      _customerCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "customer",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Customer"
          });
        }
      }) ];
      _orderCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "order",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Order"
          });
        }
      }) ];
      _timeInProcessingCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "timeInProcessing",
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Time In Processing"
          });
        }
      }) ];
      _orderDownlink_decorators = [ client.MapDownlink({
        laneUri: "orders",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, value) {
          let orderController = this.owner.getChild(nodeUri.pathName, OrderController);
          let orderStatus = value.get("status").stringValue("");
          if (orderController === null && this.owner.eventKey === orderStatus) {
            orderController = new OrderController(nodeUri.toString(), this.owner.eventKey, this.owner);
            orderController.leaf.insertView().set({
              style: {
                cursor: "pointer"
              }
            });
            orderController.customerCell.insertView();
            orderController.orderCell.insertView();
            orderController.timeInProcessingCell.insertView();
            orderController.stats.set(value);
            this.owner.series.addController(orderController, null, nodeUri.pathName);
          }
          if (orderController !== null && this.owner.eventKey !== orderStatus) {
            this.owner.removeChild(nodeUri.pathName);
          }
        },
        didRemove(nodeUri) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      _statusDownlink_decorators = [ client.ValueDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "status",
        consumed: true,
        didSet(value) {
          const storeStatus = OrderListController.parseStoreStatus(value);
          [ OrderType.OrderA, OrderType.OrderB, OrderType.OrderC ].forEach((t => {
            const orderTypeChartController = this.owner.getChild(t, OrderTypeChartController);
            if (orderTypeChartController !== null) {
              orderTypeChartController.stats(storeStatus);
            } else {
              console.log("orderTypeChartController is null for some reason!");
            }
          }));
        }
      }) ];
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        }
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _focusedCustomerId_decorators, {
        kind: "field",
        name: "focusedCustomerId",
        static: false,
        private: false,
        access: {
          has: obj => "focusedCustomerId" in obj,
          get: obj => obj.focusedCustomerId,
          set: (obj, value) => {
            obj.focusedCustomerId = value;
          }
        }
      }, _focusedCustomerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _chartPanel_decorators, {
        kind: "field",
        name: "chartPanel",
        static: false,
        private: false,
        access: {
          has: obj => "chartPanel" in obj,
          get: obj => obj.chartPanel,
          set: (obj, value) => {
            obj.chartPanel = value;
          }
        }
      }, _chartPanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _chart_decorators, {
        kind: "field",
        name: "chart",
        static: false,
        private: false,
        access: {
          has: obj => "chart" in obj,
          get: obj => obj.chart,
          set: (obj, value) => {
            obj.chart = value;
          }
        }
      }, _chart_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        }
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        }
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _customerCol_decorators, {
        kind: "field",
        name: "customerCol",
        static: false,
        private: false,
        access: {
          has: obj => "customerCol" in obj,
          get: obj => obj.customerCol,
          set: (obj, value) => {
            obj.customerCol = value;
          }
        }
      }, _customerCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderCol_decorators, {
        kind: "field",
        name: "orderCol",
        static: false,
        private: false,
        access: {
          has: obj => "orderCol" in obj,
          get: obj => obj.orderCol,
          set: (obj, value) => {
            obj.orderCol = value;
          }
        }
      }, _orderCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _timeInProcessingCol_decorators, {
        kind: "field",
        name: "timeInProcessingCol",
        static: false,
        private: false,
        access: {
          has: obj => "timeInProcessingCol" in obj,
          get: obj => obj.timeInProcessingCol,
          set: (obj, value) => {
            obj.timeInProcessingCol = value;
          }
        }
      }, _timeInProcessingCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderDownlink_decorators, {
        kind: "field",
        name: "orderDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "orderDownlink" in obj,
          get: obj => obj.orderDownlink,
          set: (obj, value) => {
            obj.orderDownlink = value;
          }
        }
      }, _orderDownlink_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusDownlink_decorators, {
        kind: "field",
        name: "statusDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statusDownlink" in obj,
          get: obj => obj.statusDownlink,
          set: (obj, value) => {
            obj.statusDownlink = value;
          }
        }
      }, _statusDownlink_initializers, _instanceExtraInitializers);
    })(), _a.valuePerOrderType = {
      [OrderType.OrderA]: 10,
      [OrderType.OrderB]: 20,
      [OrderType.OrderC]: 30,
      [OrderType.Unknown]: 0
    }, _a.plotStrokes = {
      [OrderType.OrderA]: style.Color.parse("#00EE11"),
      [OrderType.OrderB]: style.Color.parse("#DD2200"),
      [OrderType.OrderC]: style.Color.parse("#0000FF"),
      [OrderType.Unknown]: style.Color.parse("#FFFFFF")
    }, _a;
  })();
  let CumulativeOrdersPanelController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _count_decorators;
    let _count_initializers = [];
    let _value_decorators;
    let _value_initializers = [];
    let _statusDownlink_decorators;
    let _statusDownlink_initializers = [];
    return _a = class CumulativeOrdersPanelController extends panel.PanelController {
      constructor(orderType, isCumulative = false) {
        super();
        this.orderType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.count = __runInitializers(this, _count_initializers, void 0);
        this.value = __runInitializers(this, _value_initializers, void 0);
        this.statusDownlink = __runInitializers(this, _statusDownlink_initializers, void 0);
        this.orderType = orderType;
        this.isCumulative = isCumulative;
        window.setTimeout((() => {
          var _a, _b;
          this.statusDownlink.setNodeUri((_b = (_a = this.nodeUri.value) === null || _a === void 0 ? void 0 : _a.stringValue) !== null && _b !== void 0 ? _b : "");
          this.statusDownlink.open();
        }), 300);
        this.initView();
      }
      initView() {
        const panelView = this.panel.insertView().set({
          minPanelHeight: 106,
          style: {
            backgroundColor: "#212121",
            display: "flex",
            flexDirection: "column",
            justifyContent: "center",
            alignItems: "flex-start",
            paddingTop: "0px",
            paddingLeft: "16px",
            paddingBottom: "16px",
            paddingRight: "16px"
          }
        });
        this.header.insertView(panelView);
        this.count.insertView(panelView);
        this.value.insertView(panelView);
      }
    }, (() => {
      _header_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        viewKey: "header",
        extends: true,
        createView() {
          const el = document.createElement("h2");
          el.innerText = `Processed ${this.owner.isCumulative ? "All" : this.owner.orderType} Orders`;
          return dom.HtmlView.fromNode(el).set({
            style: {
              fontFamily: "sans-serif",
              fontSize: "16px",
              fontWeight: "400",
              textAlign: "center",
              margin: 0,
              marginBottom: "16px",
              color: "#CCCCCC"
            }
          });
        }
      }) ];
      _count_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        viewKey: "count",
        extends: true,
        createView() {
          const el = document.createElement("p");
          el.innerText = `Count: 0`;
          return dom.HtmlView.fromNode(el).set({
            style: {
              margin: 0,
              marginBottom: "4px",
              fontFamily: "sans-serif",
              fontSize: "14px",
              fontWeight: "400",
              textAlign: "center",
              whiteSpace: "nowrap",
              color: "#CCCCCC"
            }
          });
        }
      }) ];
      _value_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        viewKey: "value",
        extends: true,
        createView() {
          const el = document.createElement("p");
          el.innerText = `Value: $0.00`;
          return dom.HtmlView.fromNode(el).set({
            style: {
              margin: "0px",
              fontFamily: "sans-serif",
              fontSize: "14px",
              fontWeight: "400",
              textAlign: "center",
              whiteSpace: "nowrap",
              color: "#CCCCCC"
            }
          });
        }
      }) ];
      _statusDownlink_decorators = [ client.ValueDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "status",
        consumed: true,
        didSet(value) {
          const storeStatus = OrderListController.parseStoreStatus(value);
          if (this.owner.orderType !== OrderType.Unknown) {
            const readyCount = storeStatus[OrderStatus.readyForPickup][this.owner.orderType].count;
            const pickedUpCount = storeStatus[OrderStatus.pickupCompleted][this.owner.orderType].count;
            this.owner.count.attachView().node.innerText = `Count: ${readyCount + pickedUpCount}`;
            const readyValue = storeStatus[OrderStatus.readyForPickup][this.owner.orderType].value;
            const pickedUpValue = storeStatus[OrderStatus.pickupCompleted][this.owner.orderType].value;
            this.owner.value.attachView().node.innerText = `Value: $${readyValue + pickedUpValue}.00`;
          } else {
            const totalCount = storeStatus[OrderStatus.readyForPickup].total.count + storeStatus[OrderStatus.pickupCompleted].total.count;
            this.owner.count.attachView().node.innerText = `Count: ${totalCount}`;
            const totalValue = storeStatus[OrderStatus.readyForPickup].total.value + storeStatus[OrderStatus.pickupCompleted].total.value;
            this.owner.value.attachView().node.innerText = `Value: $${totalValue}.00`;
          }
        }
      }) ];
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        }
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _count_decorators, {
        kind: "field",
        name: "count",
        static: false,
        private: false,
        access: {
          has: obj => "count" in obj,
          get: obj => obj.count,
          set: (obj, value) => {
            obj.count = value;
          }
        }
      }, _count_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _value_decorators, {
        kind: "field",
        name: "value",
        static: false,
        private: false,
        access: {
          has: obj => "value" in obj,
          get: obj => obj.value,
          set: (obj, value) => {
            obj.value = value;
          }
        }
      }, _value_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusDownlink_decorators, {
        kind: "field",
        name: "statusDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statusDownlink" in obj,
          get: obj => obj.statusDownlink,
          set: (obj, value) => {
            obj.statusDownlink = value;
          }
        }
      }, _statusDownlink_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let CustomerAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class CustomerAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(CustomerAspectTrait.icon);
      }
      createTabController() {
        return new OrderKanbanBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let CustomerEntityTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _instanceExtraInitializers = [];
    let _static_get_icon_decorators;
    let _portal_decorators;
    let _portal_initializers = [];
    let _ordersRelation_decorators;
    let _ordersRelation_initializers = [];
    return _a = class CustomerEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.observerType = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.portal = __runInitializers(this, _portal_initializers, void 0);
        this.ordersRelation = __runInitializers(this, _ordersRelation_initializers, void 0);
        this.icon.setIntrinsic(CustomerEntityTrait.icon);
      }
      static get icon() {
        return graphics.PolygonIcon.create(3);
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: CustomerAspectTrait,
        traitKey: "aspect"
      }) ];
      _ordersRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "orders",
        traitType: OrdersRelationTrait,
        traitKey: "relation"
      }) ];
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _ordersRelation_decorators, {
        kind: "field",
        name: "ordersRelation",
        static: false,
        private: false,
        access: {
          has: obj => "ordersRelation" in obj,
          get: obj => obj.ordersRelation,
          set: (obj, value) => {
            obj.ordersRelation = value;
          }
        }
      }, _ordersRelation_initializers, _instanceExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let CustomersRelationTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _entities_decorators;
    let _entities_initializers = [];
    let _customers_decorators;
    let _customers_initializers = [];
    return _a = class CustomersRelationTrait extends domain.RelationTrait {
      constructor() {
        super();
        this.entities = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _entities_initializers, void 0));
        this.customers = __runInitializers(this, _customers_initializers, void 0);
        this.title.setIntrinsic("Customers");
        this.id.setIntrinsic("customer");
      }
    }, (() => {
      _entities_decorators = [ model.TraitModelSet({
        extends: true,
        traitType: CustomerEntityTrait,
        observesTrait: true,
        sorted: true,
        initTrait(customerTrait) {
          const customerId = customerTrait.id.value;
          customerTrait.title.setIntrinsic(customerId);
          customerTrait.nodeUri.setIntrinsic("/customer/" + customerId);
          customerTrait.portal.insertModel();
          customerTrait.ordersRelation.insertModel();
        },
        compareTraits(a, b) {
          return util.Strings.compare(a.title.value, b.title.value);
        }
      }) ];
      _customers_decorators = [ client.MapDownlink({
        laneUri: "customers",
        keyForm: uri.Uri.form(),
        consumed: true,
        didUpdate(nodeUri, status) {
          let customerTrait = this.owner.entities.get(nodeUri.pathName);
          if (customerTrait === null) {
            customerTrait = this.owner.entities.createTrait(nodeUri.pathName);
            customerTrait.nodeUri.set(nodeUri);
            this.owner.entities.addTrait(customerTrait);
          }
        },
        didRemove(nodeUri, status) {
          this.owner.removeChild(nodeUri.pathName);
        }
      }) ];
      __esDecorate(null, null, _entities_decorators, {
        kind: "field",
        name: "entities",
        static: false,
        private: false,
        access: {
          has: obj => "entities" in obj,
          get: obj => obj.entities,
          set: (obj, value) => {
            obj.entities = value;
          }
        }
      }, _entities_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _customers_decorators, {
        kind: "field",
        name: "customers",
        static: false,
        private: false,
        access: {
          has: obj => "customers" in obj,
          get: obj => obj.customers,
          set: (obj, value) => {
            obj.customers = value;
          }
        }
      }, _customers_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  let StoreAspectTrait = (() => {
    var _a;
    let _staticExtraInitializers = [];
    let _static_get_icon_decorators;
    return _a = class StoreAspectTrait extends domain.AspectTrait {
      constructor() {
        super();
        this.id.setIntrinsic("portal");
        this.title.setIntrinsic("Portal");
        this.icon.setIntrinsic(StoreAspectTrait.icon);
      }
      createTabController() {
        return new OrderKanbanBoardController;
      }
      static get icon() {
        return graphics.VectorIcon.create(24, 24, "M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z");
      }
    }, (() => {
      _static_get_icon_decorators = [ util.Lazy ];
      __esDecorate(_a, null, _static_get_icon_decorators, {
        kind: "getter",
        name: "icon",
        static: true,
        private: false,
        access: {
          has: obj => "icon" in obj,
          get: obj => obj.icon
        }
      }, null, _staticExtraInitializers);
      __runInitializers(_a, _staticExtraInitializers);
    })(), _a;
  })();
  let StoreEntityTrait = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _portal_decorators;
    let _portal_initializers = [];
    let _customersRelation_decorators;
    let _customersRelation_initializers = [];
    return _a = class StoreEntityTrait extends domain.EntityTrait {
      constructor() {
        super();
        this.portal = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _portal_initializers, void 0));
        this.customersRelation = __runInitializers(this, _customersRelation_initializers, void 0);
        this.title.setIntrinsic("Main Store");
      }
    }, (() => {
      _portal_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "portal",
        traitType: StoreAspectTrait,
        traitKey: "aspect"
      }) ];
      _customersRelation_decorators = [ model.TraitModelRef({
        modelType: model.Model,
        modelKey: "customers",
        traitType: CustomersRelationTrait,
        traitKey: "relation"
      }) ];
      __esDecorate(null, null, _portal_decorators, {
        kind: "field",
        name: "portal",
        static: false,
        private: false,
        access: {
          has: obj => "portal" in obj,
          get: obj => obj.portal,
          set: (obj, value) => {
            obj.portal = value;
          }
        }
      }, _portal_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _customersRelation_decorators, {
        kind: "field",
        name: "customersRelation",
        static: false,
        private: false,
        access: {
          has: obj => "customersRelation" in obj,
          get: obj => obj.customersRelation,
          set: (obj, value) => {
            obj.customersRelation = value;
          }
        }
      }, _customersRelation_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  exports.CumulativeOrdersPanelController = CumulativeOrdersPanelController;
  exports.CustomerAspectTrait = CustomerAspectTrait;
  exports.CustomerEntityTrait = CustomerEntityTrait;
  exports.CustomersRelationTrait = CustomersRelationTrait;
  exports.OrderAspectTrait = OrderAspectTrait;
  exports.OrderBoardController = OrderBoardController;
  exports.OrderController = OrderController;
  exports.OrderEntityTrait = OrderEntityTrait;
  exports.OrderKanbanBoardController = OrderKanbanBoardController;
  exports.OrderListController = OrderListController;
  exports.OrderStatusPieController = OrderStatusPieController;
  exports.OrdersRelationTrait = OrdersRelationTrait;
  exports.StoreAspectTrait = StoreAspectTrait;
  exports.StoreEntityTrait = StoreEntityTrait;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=retail-demo.min.js.map
