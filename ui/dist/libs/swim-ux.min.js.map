{"version":3,"file":"swim-ux.min.js","sources":["../../../node_modules/tslib/tslib.es6.mjs","../swim-button/src/main/ButtonGlow.ts","../swim-button/src/main/ButtonMembrane.ts","../swim-button/src/main/FloatingButton.ts","../swim-button/src/main/ButtonItem.ts","../swim-button/src/main/ButtonStack.ts","../swim-button/src/main/IconButton.ts","../swim-button/src/main/DisclosureButton.ts","../swim-toolbar/src/main/ToolLayout.ts","../swim-toolbar/src/main/BarLayout.ts","../swim-toolbar/src/main/ToolView.ts","../swim-toolbar/src/main/TitleToolView.ts","../swim-toolbar/src/main/ButtonToolView.ts","../swim-toolbar/src/main/SearchToolView.ts","../swim-toolbar/src/main/ToolController.ts","../swim-toolbar/src/main/TitleToolController.ts","../swim-toolbar/src/main/ButtonToolController.ts","../swim-toolbar/src/main/SearchToolController.ts","../swim-toolbar/src/main/BarView.ts","../swim-toolbar/src/main/BarController.ts","../swim-token/src/main/TokenView.ts","../swim-token/src/main/InputTokenView.ts","../swim-table/src/main/ColLayout.ts","../swim-table/src/main/TableLayout.ts","../swim-table/src/main/CellView.ts","../swim-table/src/main/TextCellView.ts","../swim-table/src/main/IconCellView.ts","../swim-table/src/main/DisclosureCellView.ts","../swim-table/src/main/CellTrait.ts","../swim-table/src/main/TextCellTrait.ts","../swim-table/src/main/IconCellTrait.ts","../swim-table/src/main/CellController.ts","../swim-table/src/main/TextCellController.ts","../swim-table/src/main/IconCellController.ts","../swim-table/src/main/LeafView.ts","../swim-table/src/main/LeafTrait.ts","../swim-table/src/main/LeafController.ts","../swim-table/src/main/RowView.ts","../swim-table/src/main/RowTrait.ts","../swim-table/src/main/RowController.ts","../swim-table/src/main/ColView.ts","../swim-table/src/main/TextColView.ts","../swim-table/src/main/IconColView.ts","../swim-table/src/main/DisclosureColView.ts","../swim-table/src/main/ColTrait.ts","../swim-table/src/main/TextColTrait.ts","../swim-table/src/main/IconColTrait.ts","../swim-table/src/main/ColController.ts","../swim-table/src/main/TextColController.ts","../swim-table/src/main/IconColController.ts","../swim-table/src/main/HeaderView.ts","../swim-table/src/main/HeaderTrait.ts","../swim-table/src/main/HeaderController.ts","../swim-table/src/main/TableView.ts","../swim-table/src/main/TableTrait.ts","../swim-table/src/main/TableController.ts","../swim-window/src/main/ScrimView.ts","../swim-window/src/main/PopoverView.ts","../swim-window/src/main/DrawerView.ts","../swim-window/src/main/DrawerButton.ts","../swim-sheet/src/main/SheetView.ts","../swim-sheet/src/main/SheetController.ts","../swim-sheet/src/main/NavBarController.ts","../swim-sheet/src/main/StackView.ts","../swim-sheet/src/main/StackController.ts","../swim-sheet/src/main/AppBarController.ts","../swim-sheet/src/main/FolioView.ts","../swim-sheet/src/main/FolioController.ts","../swim-sheet/src/main/TabBarController.ts","../swim-sheet/src/main/BinderView.ts","../swim-sheet/src/main/BinderController.ts","../swim-panel/src/main/PanelView.ts","../swim-panel/src/main/PanelController.ts","../swim-panel/src/main/BoardView.ts","../swim-panel/src/main/BoardController.ts"],"sourcesContent":["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {Look} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {HtmlView} from \"@swim/dom\";\n\n/** @public */\nexport type ButtonGlowState = \"ready\" | \"glowing\" | \"pulsing\" | \"fading\";\n\n/** @public */\nexport class ButtonGlow extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.glowState = \"ready\";\n    this.glowTimer = 0;\n    this.initGlow();\n  }\n\n  protected initGlow(): void {\n    this.setIntrinsic<ButtonGlow>({\n      classList: [\"button-glow\"],\n      style: {\n        position: \"absolute\",\n        width: Length.zero(),\n        height: Length.zero(),\n        borderRadius: Length.pct(50),\n        pointerEvents: \"none\",\n      },\n    });\n  }\n\n  readonly glowState: ButtonGlowState;\n\n  /** @internal */\n  glowTimer: number;\n\n  @Animator({\n    inherits: true,\n    get parent(): Animator<any, Length | null, any> {\n      return this.owner.style.left;\n    },\n    didTransition(): void {\n      this.owner.didGlow();\n    },\n  })\n  readonly left!: Animator<this, Length | null>;\n\n  @Animator({\n    inherits: true,\n    get parent(): Animator<any, number | undefined, any> {\n      return this.owner.style.opacity;\n    },\n    didTransition(opacity: number | undefined): void {\n      if (this.owner.glowState === \"pulsing\" && opacity === 0) {\n        this.owner.didPulse();\n      } else if (this.owner.glowState === \"fading\" && opacity === 0) {\n        this.owner.didFade();\n      }\n    },\n  })\n  readonly opacity!: Animator<this, number | undefined>;\n\n  protected override didMount(): void {\n    if (this.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n      let highlightColor = this.getLookOr(Look.highlightColor, null);\n      if (highlightColor !== null) {\n        highlightColor = highlightColor.alpha(1);\n      }\n      this.style.backgroundColor.setIntrinsic(highlightColor);\n    }\n    super.didMount();\n  }\n\n  protected override onUnmount(): void {\n    (this as Mutable<this>).glowState = \"ready\";\n    this.cancelGlow();\n    this.remove();\n    super.onUnmount();\n  }\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    if (this.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n      let highlightColor = theme.getOr(Look.highlightColor, mood, null);\n      if (highlightColor !== null) {\n        highlightColor = highlightColor.alpha(1);\n      }\n      this.style.backgroundColor.setIntrinsic(highlightColor);\n    }\n  }\n\n  glow(clientX: number, clientY: number, timing?: TimingLike | boolean, delay: number = 0): void {\n    if (this.glowState !== \"ready\") {\n      return;\n    }\n    this.cancelGlow();\n    if (delay !== 0) {\n      const glow = this.glow.bind(this, clientX, clientY, timing, 0);\n      this.glowTimer = setTimeout(glow, delay) as any;\n      return;\n    } else if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    this.willGlow();\n    const offsetParent = this.node.offsetParent;\n    if (offsetParent === null) {\n      return;\n    }\n    const clientBounds = offsetParent.getBoundingClientRect();\n    const cx = clientX - clientBounds.left;\n    const cy = clientY - clientBounds.top;\n    const rx = Math.max(cx, clientBounds.width - cx);\n    const ry = Math.max(cy, clientBounds.height - cy);\n    const r = Math.sqrt(rx * rx + ry * ry);\n    const highlightColor = this.getLook(Look.highlightColor);\n    const opacity = highlightColor !== void 0 ? highlightColor.alpha() : 0.1;\n    this.style.opacity.setIntrinsic(opacity);\n    if (timing !== false) {\n      this.style.setIntrinsic({\n        left: cx,\n        top: cy,\n      });\n      this.style.setIntrinsic({\n        left: cx - r,\n        top: cy - r,\n        width: 2 * r,\n        height: 2 * r,\n      }, timing);\n    } else {\n      this.style.setIntrinsic({\n        left: cx - r,\n        top: cy - r,\n        width: 2 * r,\n        height: 2 * r,\n      });\n      this.didGlow();\n    }\n    (this as Mutable<this>).glowState = \"glowing\";\n  }\n\n  protected willGlow(): void {\n    // hook\n  }\n\n  protected didGlow(): void {\n    // hook\n  }\n\n  cancelGlow(): void {\n    if (this.glowTimer !== 0) {\n      clearTimeout(this.glowTimer);\n      this.glowTimer = 0;\n    }\n  }\n\n  pulse(clientX: number, clientY: number, timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    if (this.glowState === \"ready\") {\n      this.glow(clientX, clientY, timing);\n    }\n    if (this.glowState === \"glowing\") {\n      this.willPulse();\n      if (timing !== false) {\n        this.style.opacity.setIntrinsic(0, timing);\n      } else {\n        this.style.opacity.setIntrinsic(0);\n        this.didPulse();\n      }\n      (this as Mutable<this>).glowState = \"pulsing\";\n    }\n  }\n\n  protected willPulse(): void {\n    // hook\n  }\n\n  protected didPulse(): void {\n    this.remove();\n  }\n\n  fade(clientX: number, clientY: number, timing?: TimingLike | boolean): void {\n    if (this.glowState === \"ready\") {\n      this.cancelGlow();\n      this.didFade();\n    } else if (this.glowState === \"glowing\") {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      this.willFade();\n      if (timing !== false) {\n        this.style.opacity.setIntrinsic(0, timing);\n      } else {\n        this.style.opacity.setIntrinsic(0);\n        this.didFade();\n      }\n    }\n    (this as Mutable<this>).glowState = \"fading\";\n  }\n\n  protected willFade(): void {\n    // hook\n  }\n\n  protected didFade(): void {\n    this.remove();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Property} from \"@swim/component\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport {ButtonGlow} from \"./ButtonGlow\";\n\n/** @public */\nexport class ButtonMembrane extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initMembrane(node);\n  }\n\n  protected initMembrane(node: HTMLElement): void {\n    this.classList.add(\"membrane\");\n  }\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly glows!: Property<this, boolean>;\n\n  protected glow(input: PositionGestureInput): void {\n    if (input.detail instanceof ButtonGlow) {\n      input.detail.fade(input.x, input.y);\n      input.detail = void 0;\n    }\n    if (input.detail === void 0) {\n      const delay = input.inputType === \"mouse\" ? 0 : 100;\n      input.detail = this.prependChild(ButtonGlow);\n      (input.detail as ButtonGlow).glow(input.x, input.y, void 0, delay);\n    }\n  }\n\n  @PositionGesture({\n    bindsOwner: true,\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (this.owner.glows.value) {\n        this.owner.glow(input);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      } else if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        input.clearHoldTimer();\n        this.beginHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      } else if (input.detail instanceof ButtonGlow) {\n        input.detail.pulse(input.x, input.y);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n      if (input.detail instanceof ButtonGlow) {\n        input.detail.fade(input.x, input.y);\n        input.detail = void 0;\n      }\n    },\n  })\n  readonly gesture!: PositionGesture<this, HtmlView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {Angle} from \"@swim/math\";\nimport {Transform} from \"@swim/math\";\nimport type {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {HtmlIconView} from \"@swim/graphics\";\nimport {ButtonMembrane} from \"./ButtonMembrane\";\n\n/** @public */\nexport type FloatingButtonType = \"regular\" | \"mini\";\n\n/** @public */\nexport class FloatingButton extends ButtonMembrane {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initButton();\n  }\n\n  protected initButton(): void {\n    this.setIntrinsic<FloatingButton>({\n      classList: [\"floating-button\"],\n      style: {\n        position: \"relative\",\n        borderRadius: Length.pct(50),\n        overflow: \"hidden\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n      },\n    });\n  }\n\n  @Property({\n    valueType: String,\n    value: \"regular\",\n    init(): void {\n      this.updateButtonType(this.value);\n    },\n    didSetValue(newButtonType: FloatingButtonType, oldButtonType: FloatingButtonType): void {\n      if (newButtonType === oldButtonType) {\n        return;\n      }\n      this.updateButtonType(newButtonType);\n    },\n    updateButtonType(buttonType: FloatingButtonType): void {\n      if (buttonType === \"regular\") {\n        this.owner.style.setIntrinsic({\n          width: 56,\n          height: 56,\n        });\n      } else if (buttonType === \"mini\") {\n        this.owner.style.setIntrinsic({\n          width: 40,\n          height: 40,\n        });\n      }\n    },\n  })\n  readonly buttonType!: Property<this, FloatingButtonType> & {\n    updateButtonType(buttonType: FloatingButtonType): void;\n  };\n\n  @ViewSet({\n    viewType: HtmlIconView,\n    observes: true,\n    viewDidApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean, iconView: HtmlIconView): void {\n      const iconColor = theme.getOr(Look.backgroundColor, mood, null);\n      iconView.iconColor.set(iconColor, timing);\n    },\n    viewDidAnimate(iconView: HtmlIconView): void {\n      if (!iconView.style.opacity.tweening && iconView !== this.owner.icon.view) {\n        this.deleteView(iconView);\n      }\n    },\n  })\n  readonly icons!: ViewSet<this, HtmlIconView> & Observes<HtmlIconView>;\n\n  @ViewRef({\n    viewType: HtmlIconView,\n    createView(): HtmlIconView {\n      const iconView = HtmlIconView.create().setIntrinsic({\n        style: {\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          width: this.owner.style.width.state,\n          height: this.owner.style.height.state,\n          opacity: 0,\n          transform: Transform.rotate(Angle.deg(-90)),\n          pointerEvents: \"none\",\n        },\n        iconLayout: {width: 24, height: 24},\n      });\n      iconView.iconColor.setAffinity(Affinity.Extrinsic);\n      return iconView;\n    },\n    push(icon: Graphics, timing?: TimingLike | boolean): HtmlIconView {\n      if (timing === void 0 && this.owner.icons.viewCount === 0) {\n        timing = false;\n      } else if (timing === void 0 || timing === true) {\n        timing = this.owner.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n\n      const oldIconView = this.view;\n      if (oldIconView !== null) {\n        if (timing !== false) {\n          oldIconView.style.setIntrinsic({\n            opacity: 0,\n            transform: Transform.rotate(Angle.deg(90)),\n          }, timing);\n        } else {\n          this.owner.icons.deleteView(oldIconView);\n        }\n      }\n\n      const newIconView = this.createView().setIntrinsic({\n        graphics: icon,\n      });\n      this.owner.icons.attachView(newIconView);\n      this.insertView(void 0, newIconView);\n      newIconView.style.setIntrinsic({\n        opacity: 1,\n        transform: Transform.rotate(Angle.deg(0)),\n      }, timing);\n\n      return newIconView;\n    },\n    pop(timing?: TimingLike | boolean): HtmlIconView | null {\n      if (timing === void 0 || timing === true) {\n        timing = this.owner.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n\n      const oldIconView = this.view;\n      let newIconView: HtmlIconView | null = null;\n      const iconViews = this.owner.icons.views;\n      for (const viewId in iconViews) {\n        const iconView = iconViews[viewId]!;\n        if (iconView !== oldIconView) {\n          newIconView = iconView;\n        }\n      }\n\n      if (oldIconView !== null) {\n        if (timing !== false) {\n          oldIconView.style.setIntrinsic({\n            opacity: 0,\n            transform: Transform.rotate(Angle.deg(-90)),\n          }, timing);\n          this.owner.icons.insertView(void 0, oldIconView);\n        } else {\n          this.owner.icons.deleteView(oldIconView);\n        }\n      }\n\n      if (newIconView !== null) {\n        this.insertView(void 0, newIconView);\n        newIconView.style.setIntrinsic({\n          opacity: 1,\n          transform: Transform.rotate(Angle.deg(0)),\n        }, timing);\n      }\n\n      return oldIconView;\n    },\n  })\n  readonly icon!: ViewRef<this, HtmlIconView> & {\n    push(icon: Graphics, timing?: TimingLike | boolean): HtmlIconView;\n    pop(timing?: TimingLike | boolean): HtmlIconView | null;\n  };\n\n  @PresenceAnimator({\n    inherits: true,\n  })\n  readonly presence!: PresenceAnimator<this, Presence | undefined>;\n\n  @PositionGesture({\n    extends: true,\n    didStartHovering(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.hovering, 1]]);\n      if (this.owner.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n        const timing = this.owner.getLook(Look.timing);\n        this.owner.style.backgroundColor.setIntrinsic(this.owner.getLookOr(Look.accentColor, null), timing);\n      }\n    },\n    didStopHovering(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.hovering, void 0]]);\n      if (this.owner.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n        const timing = this.owner.getLook(Look.timing);\n        this.owner.style.backgroundColor.setIntrinsic(this.owner.getLookOr(Look.accentColor, null), timing);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      // nop\n    },\n  })\n  override readonly gesture!: PositionGesture<this, HtmlView>;\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n\n    this.style.backgroundColor.setIntrinsic(theme.getOr(Look.accentColor, mood, null), timing);\n\n    let shadow = theme.getOr(Look.shadow, Mood.floating, null);\n    if (shadow !== null) {\n      const shadowColor = shadow.color;\n      const phase = this.presence.getPhaseOr(1);\n      shadow = shadow.withColor(shadowColor.alpha(shadowColor.alpha() * phase));\n    }\n    this.style.boxShadow.setIntrinsic(shadow, timing);\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    let shadow = this.getLookOr(Look.shadow, Mood.floating, null);\n    if (shadow !== null) {\n      const shadowColor = shadow.color;\n      const phase = this.presence.getPhaseOr(1);\n      shadow = shadow.withColor(shadowColor.alpha(shadowColor.alpha() * phase));\n    }\n    this.style.boxShadow.setIntrinsic(shadow);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {HtmlIconView} from \"@swim/graphics\";\nimport {FloatingButton} from \"./FloatingButton\";\n\n/** @public */\nexport class ButtonItem extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initButtonItem();\n  }\n\n  protected initButtonItem(): void {\n    this.classList.add(\"button-item\");\n    this.style.position.setIntrinsic(\"relative\");\n    const button = this.createButton();\n    if (button !== null) {\n      this.setChild(\"button\", button);\n    }\n  }\n\n  protected createButton(): FloatingButton | null {\n    const button = FloatingButton.create();\n    button.buttonType.setIntrinsic(\"mini\");\n    return button;\n  }\n\n  get button(): FloatingButton | null {\n    const childView = this.getChild(\"button\");\n    return childView instanceof FloatingButton ? childView : null;\n  }\n\n  get icon(): HtmlIconView | null {\n    const button = this.button;\n    const buttonIcon = button !== null ? button.icon : null;\n    return buttonIcon !== null ? buttonIcon.view : null;\n  }\n\n  get label(): HtmlView | null {\n    const childView = this.getChild(\"label\");\n    return childView instanceof HtmlView ? childView : null;\n  }\n\n  @PresenceAnimator({inherits: true})\n  readonly presence!: PresenceAnimator<this, Presence | undefined>;\n\n  protected override onLayout(): void {\n    super.onLayout();\n    const phase = this.presence.getPhaseOr(1);\n    const button = this.button;\n    if (button !== null) {\n      this.style.width.setIntrinsic(button.style.width.state);\n      this.style.height.setIntrinsic(button.style.height.state);\n    }\n    const label = this.label;\n    if (label !== null) {\n      label.style.opacity.setIntrinsic(phase);\n    }\n  }\n\n  protected override onInsertChild(childView: View, targetView: View | null): void {\n    super.onInsertChild(childView, targetView);\n    const childKey = childView.key;\n    if (childKey === \"button\" && childView instanceof FloatingButton) {\n      this.onInsertButton(childView);\n    } else if (childKey === \"label\" && childView instanceof HtmlView) {\n      this.onInsertLabel(childView);\n    }\n  }\n\n  protected override onRemoveChild(childView: View): void {\n    const childKey = childView.key;\n    if (childKey === \"button\" && childView instanceof FloatingButton) {\n      this.onRemoveButton(childView);\n    } else if (childKey === \"label\" && childView instanceof HtmlView) {\n      this.onRemoveLabel(childView);\n    }\n    super.onRemoveChild(childView);\n  }\n\n  protected onInsertButton(button: FloatingButton): void {\n    // hook\n  }\n\n  protected onRemoveButton(button: FloatingButton): void {\n    // hook\n  }\n\n  protected onInsertLabel(label: HtmlView): void {\n    label.style.setIntrinsic({\n      display: \"block\",\n      position: \"absolute\",\n      top: 0,\n      right: 40 + 16,\n      bottom: 0,\n      fontSize: 17,\n      fontWeight: \"500\",\n      lineHeight: 40,\n      whiteSpace: \"nowrap\",\n      color: Look.labelColor,\n      opacity: this.presence.getPhaseOr(0),\n    });\n  }\n\n  protected onRemoveLabel(label: HtmlView): void {\n    // hook\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {EventHandler} from \"@swim/component\";\nimport {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport {NodeView} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ModalView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport {FloatingButton} from \"./FloatingButton\";\nimport {ButtonItem} from \"./ButtonItem\";\nimport type {ButtonStackObserver} from \"./ButtonStackObserver\";\n\n/** @public */\nexport class ButtonStack extends HtmlView implements ModalView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initButtonStack();\n  }\n\n  protected initButtonStack(): void {\n    this.setIntrinsic<ButtonStack>({\n      classList: [\"button-stack\"],\n      style: {\n        display: \"block\",\n        position: \"relative\",\n        width: 56,\n        height: 56,\n        opacity: 1,\n        userSelect: \"none\",\n        cursor: \"pointer\",\n      },\n    });\n    this.button.insertView();\n  }\n\n  declare readonly observerType?: Class<ButtonStackObserver>;\n\n  /** @internal */\n  @Property({valueType: Number, value: 0})\n  readonly stackHeight!: Property<this, number>;\n\n  @ThemeAnimator({valueType: Number, value: 28, updateFlags: View.NeedsLayout})\n  readonly buttonSpacing!: ThemeAnimator<this, number>;\n\n  @ThemeAnimator({valueType: Number, value: 20, updateFlags: View.NeedsLayout})\n  readonly itemSpacing!: ThemeAnimator<this, number>;\n\n  @Animator({\n    inherits: true,\n    get parent(): Animator<any, number | undefined, any> {\n      return this.owner.style.opacity;\n    },\n    didTransition(opacity: number | undefined): void {\n      if (opacity === 1) {\n        this.owner.didShowStack();\n      } else if (opacity === 0) {\n        this.owner.didHideStack();\n      }\n    },\n  })\n  readonly opacity!: Animator<this, number | undefined>;\n\n  get closeIcon(): Graphics {\n    return ButtonStack.closeIcon;\n  }\n\n  @ViewRef({\n    viewType: FloatingButton,\n    viewKey: true,\n    binds: true,\n    willAttachView(buttonView: FloatingButton, target: View | null): void {\n      buttonView.presence.setIntrinsic(Presence.presented());\n      if (this.owner.presence.presented || this.owner.presence.presenting) {\n        buttonView.icon.push(this.owner.closeIcon);\n      }\n    },\n    initView(buttonView: FloatingButton): void {\n      buttonView.style.zIndex.setIntrinsic(0);\n    },\n  })\n  readonly button!: ViewRef<this, FloatingButton>;\n\n  @ViewSet({\n    viewType: ButtonItem,\n    binds: true,\n    willAttachView(itemView: ButtonItem, target: View | null): void {\n      itemView.style.setIntrinsic({\n        position: \"absolute\",\n        right: 8,\n        bottom: 8,\n        left: 8,\n        zIndex: 0,\n      });\n    },\n  })\n  readonly items!: ViewSet<this, ButtonItem>;\n\n  insertItem(item: ButtonItem, index?: number, key?: string): void {\n    if (index === void 0) {\n      index = this.node.childNodes.length - 1;\n    }\n    this.insertChild(item.node, this.node.childNodes[1 + index] || null, key);\n  }\n\n  removeItems(): void {\n    const childNodes = this.node.childNodes;\n    for (let i = childNodes.length - 1; i >= 0; i -= 1) {\n      const childView = NodeView.get(childNodes[i]);\n      if (childView instanceof ButtonItem) {\n        this.removeChild(childView);\n      }\n    }\n  }\n\n  /** @override */\n  @PresenceAnimator({\n    value: Presence.dismissed(),\n    updateFlags: View.NeedsLayout,\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    didSetValue(presence: Presence): void {\n      this.owner.callObservers(\"viewDidSetPresence\", presence, this.owner);\n      this.owner.modality.setIntrinsic(presence.phase);\n    },\n    willPresent(): void {\n      this.owner.callObservers(\"viewWillPresent\", this.owner);\n      const buttonView = this.owner.button.view;\n      if (buttonView !== null) {\n        const timing = this.timing;\n        buttonView.icon.push(this.owner.closeIcon, timing !== null ? timing : void 0);\n      }\n      this.owner.modal.present();\n    },\n    didPresent(): void {\n      this.owner.callObservers(\"viewDidPresent\", this.owner);\n    },\n    willDismiss(): void {\n      this.owner.callObservers(\"viewWillDismiss\", this.owner);\n      const buttonView = this.owner.button.view;\n      if (buttonView !== null && buttonView.icons.viewCount > 1) {\n        const timing = this.timing;\n        buttonView.icon.pop(timing !== null ? timing : void 0);\n      }\n    },\n    didDismiss(): void {\n      this.owner.callObservers(\"viewDidDismiss\", this.owner);\n    },\n  })\n  readonly presence!: PresenceAnimator<this, Presence>;\n\n  /** @override */\n  @Property({\n    valueType: Number,\n    value: 0,\n    didSetValue(modality: number): void {\n      this.owner.callObservers(\"viewDidSetModality\", modality, this.owner);\n    },\n  })\n  readonly modality!: Property<this, number>;\n\n  @PositionGesture({\n    binds: true,\n    viewKey: \"button\",\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.defaultPrevented || this.owner.presence.presented) {\n        return;\n      }\n      const stackHeight = this.owner.stackHeight.value;\n      const phase = Math.min(Math.max(0, -(input.y - input.y0) / (0.5 * stackHeight)), 1);\n      this.owner.presence.setPhase(phase);\n      if (phase > 0.1) {\n        input.clearHoldTimer();\n        if (!this.owner.presence.presenting) {\n          this.owner.presence.set(this.owner.presence.value.asPresenting());\n        }\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      const phase = this.owner.presence.getPhase();\n      if (input.t - input.t0 < input.holdDelay) {\n        if (phase < 0.1 || this.owner.presence.presented) {\n          this.owner.presence.dismiss();\n        } else {\n          this.owner.presence.present();\n        }\n      } else {\n        if (phase < 0.5) {\n          this.owner.presence.dismiss();\n        } else if (phase >= 0.5) {\n          this.owner.presence.present();\n        }\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.buttons === 2) {\n        this.owner.presence.toggle();\n      } else {\n        const phase = this.owner.presence.getPhase();\n        if (phase < 0.1 || this.owner.presence.presented) {\n          this.owner.presence.dismiss();\n        } else {\n          this.owner.presence.present();\n        }\n      }\n    },\n    didLongPress(input: PositionGestureInput): void {\n      input.preventDefault();\n      this.owner.presence.toggle();\n    },\n  })\n  readonly gesture!: PositionGesture<this, HtmlView>;\n\n  @EventHandler({\n    eventType: \"click\",\n    handle(event: MouseEvent): void {\n      if (event.target === this.owner.button.view?.node) {\n        event.stopPropagation();\n      }\n    },\n  })\n  readonly click!: EventHandler<this>;\n\n  @EventHandler({\n    eventType: \"contextmenu\",\n    handle(event: MouseEvent): void {\n      event.preventDefault();\n    },\n  })\n  readonly contextmenu!: EventHandler<this>;\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutStack();\n  }\n\n  protected layoutStack(): void {\n    const phase = this.presence.getPhase();\n    const childNodes = this.node.childNodes;\n    const childCount = childNodes.length;\n    const buttonView = this.button.view;\n    let zIndex = childCount - 1;\n    let itemIndex = 0;\n    let stackHeight = 0;\n    let y: number;\n    if (buttonView !== null) {\n      buttonView.style.zIndex.setIntrinsic(childCount);\n      y = buttonView.style.height.pxValue();\n    } else {\n      y = 0;\n    }\n    const buttonSpacing = this.buttonSpacing.value;\n    const itemSpacing = this.itemSpacing.value;\n    for (let i = 0; i < childCount; i += 1) {\n      const childView = NodeView.get(childNodes[i]);\n      if (childView instanceof ButtonItem) {\n        if (itemIndex === 0) {\n          stackHeight += buttonSpacing;\n          y += buttonSpacing;\n        } else {\n          stackHeight += itemSpacing;\n          y += itemSpacing;\n        }\n        const dy = childView.style.height.pxValue();\n        childView.style.setIntrinsic({\n          display: phase === 0 ? \"none\" : \"flex\",\n          bottom: phase * y,\n          zIndex,\n        });\n        y += dy;\n        stackHeight += dy;\n        itemIndex += 1;\n        zIndex -= 1;\n      }\n    }\n    this.stackHeight.set(stackHeight);\n  }\n\n  show(timing?: TimingLike | boolean): void {\n    if (this.opacity.state !== 1) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      this.willShowStack();\n      if (timing !== false) {\n        this.opacity.setIntrinsic(1, timing);\n      } else {\n        this.opacity.setIntrinsic(1);\n        this.didShowStack();\n      }\n    }\n  }\n\n  protected willShowStack(): void {\n    this.callObservers(\"buttonStackWillShow\", this);\n    this.style.display.set(\"block\");\n  }\n\n  protected didShowStack(): void {\n    this.requireUpdate(View.NeedsLayout);\n    this.callObservers(\"buttonStackDidShow\", this);\n  }\n\n  hide(timing?: TimingLike | boolean): void {\n    if (this.opacity.state !== 0) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      this.willHideStack();\n      if (timing !== false) {\n        this.opacity.setIntrinsic(0, timing);\n      } else {\n        this.opacity.setIntrinsic(0);\n        this.didHideStack();\n      }\n    }\n  }\n\n  protected willHideStack(): void {\n    this.callObservers(\"buttonStackWillHide\", this);\n  }\n\n  protected didHideStack(): void {\n    this.style.display.set(\"none\");\n    this.requireUpdate(View.NeedsLayout);\n    this.callObservers(\"buttonStackDidHide\", this);\n  }\n\n  @Lazy\n  static get closeIcon(): Graphics {\n    return VectorIcon.create(24, 24, \"M19,6.4L17.6,5L12,10.6L6.4,5L5,6.4L10.6,12L5,17.6L6.4,19L12,13.4L17.6,19L19,17.6L13.4,12Z\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {EventHandler} from \"@swim/component\";\nimport {Angle} from \"@swim/math\";\nimport {Transform} from \"@swim/math\";\nimport {Color} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport type {HtmlView} from \"@swim/dom\";\nimport {Graphics} from \"@swim/graphics\";\nimport {IconLayout} from \"@swim/graphics\";\nimport {Icon} from \"@swim/graphics\";\nimport type {IconView} from \"@swim/graphics\";\nimport {IconGraphicsAnimator} from \"@swim/graphics\";\nimport {SvgIconView} from \"@swim/graphics\";\nimport type {ButtonObserver} from \"./ButtonObserver\";\nimport {ButtonMembrane} from \"./ButtonMembrane\";\n\n/** @public */\nexport class IconButton extends ButtonMembrane implements IconView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initButton();\n    this.initTheme();\n  }\n\n  declare readonly observerType?: Class<HtmlViewObserver & ButtonObserver>;\n\n  protected initButton(): void {\n    this.setIntrinsic<IconButton>({\n      classList: [\"icon-button\"],\n      style: {\n        position: \"relative\",\n        width: 44,\n        height: 44,\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        borderRadius: 4,\n        overflow: \"hidden\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n      },\n    });\n  }\n\n  protected initTheme(): void {\n    this.modifyTheme(Feel.default, [[Feel.translucent, 1]]);\n  }\n\n  /** @override */\n  @Animator({\n    valueType: IconLayout,\n    initValue(): IconLayout | null {\n      return IconLayout.of(24, 24);\n    },\n    updateFlags: View.NeedsLayout\n  })\n  readonly iconLayout!: Animator<this, IconLayout | null>;\n\n  /** @override */\n  @ThemeAnimator({\n    valueType: Color,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetState(iconColor: Color | null): void {\n      const timing = this.timing !== null ? this.timing : false;\n      this.owner.graphics.setIntrinsic(this.owner.graphics.state, timing);\n    },\n  })\n  readonly iconColor!: ThemeAnimator<this, Color | null>;\n\n  /** @override */\n  @ThemeAnimator({\n    extends: IconGraphicsAnimator,\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n  })\n  readonly graphics!: ThemeAnimator<this, Graphics | null>;\n\n  @ViewSet({\n    viewType: SvgIconView,\n    observes: true,\n    viewDidApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean, iconView: SvgIconView): void {\n      const iconColor = theme.getOr(Look.backgroundColor, mood, null);\n      iconView.iconColor.set(iconColor, timing);\n    },\n    viewDidAnimate(iconView: SvgIconView): void {\n      if (!iconView.attributes.opacity.tweening && iconView !== this.owner.icon.view) {\n        this.deleteView(iconView);\n      }\n    },\n    viewWillLayout(iconView: SvgIconView): void {\n      const width = this.owner.style.width.pxValue();\n      const height = this.owner.style.height.pxValue();\n      iconView.attributes.setIntrinsic({\n        width, height,\n        viewBox: \"0 0 \" + width + \" \" + height,\n      });\n    },\n  })\n  readonly icons!: ViewSet<this, SvgIconView> & Observes<SvgIconView>;\n\n  @ViewRef({\n    viewType: SvgIconView,\n    createView(): SvgIconView {\n      const iconView = SvgIconView.create().setIntrinsic({\n        attributes: {\n          opacity: 0,\n          pointerEvents: \"none\",\n        },\n        style: {\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          transform: Transform.rotate(Angle.deg(-90)),\n        },\n      });\n      iconView.iconLayout.setInherits(true);\n      iconView.iconColor.setInherits(true);\n      return iconView;\n    },\n    push(icon: Graphics, timing?: TimingLike | boolean): SvgIconView {\n      if (timing === void 0 && this.owner.icons.viewCount === 0) {\n        timing = false;\n      } else if (timing === void 0 || timing === true) {\n        timing = this.owner.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n\n      const oldIconView = this.view;\n      if (oldIconView !== null) {\n        if (timing !== false) {\n          oldIconView.attributes.setIntrinsic({\n            opacity: 0,\n            transform: Transform.rotate(Angle.deg(90)),\n          }, timing);\n        } else {\n          this.owner.icons.deleteView(oldIconView);\n        }\n      }\n\n      const newIconView = this.createView().setIntrinsic({\n        graphics: icon,\n      });\n      this.owner.icons.attachView(newIconView);\n      this.insertView(void 0, newIconView);\n      newIconView.attributes.setIntrinsic({\n        opacity: 1,\n        transform: Transform.rotate(Angle.deg(0)),\n      }, timing);\n\n      return newIconView;\n    },\n    pop(timing?: TimingLike | boolean): SvgIconView | null {\n      if (timing === void 0 || timing === true) {\n        timing = this.owner.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n\n      const oldIconView = this.view;\n      let newIconView: SvgIconView | null = null;\n      const iconViews = this.owner.icons.views;\n      for (const viewId in iconViews) {\n        const iconView = iconViews[viewId]!;\n        if (iconView !== oldIconView) {\n          newIconView = iconView;\n        }\n      }\n\n      if (oldIconView !== null) {\n        if (timing !== false) {\n          oldIconView.attributes.setIntrinsic({\n            opacity: 0,\n            transform: Transform.rotate(Angle.deg(-90)),\n          }, timing);\n          this.owner.icons.insertView(void 0, oldIconView);\n        } else {\n          this.owner.icons.deleteView(oldIconView);\n        }\n      }\n\n      if (newIconView !== null) {\n        this.insertView(void 0, newIconView);\n        newIconView.attributes.setIntrinsic({\n          opacity: 1,\n          transform: Transform.rotate(Angle.deg(0)),\n        }, timing);\n      }\n\n      return oldIconView;\n    },\n  })\n  readonly icon!: ViewRef<this, SvgIconView> & {\n    push(icon: Graphics, timing?: TimingLike | boolean): SvgIconView;\n    pop(timing?: TimingLike | boolean): SvgIconView | null;\n  };\n\n  @Property({valueType: Boolean, value: true})\n  readonly hovers!: Property<this, boolean>;\n\n  @PositionGesture({\n    extends: true,\n    didStartHovering(): void {\n      if (this.owner.hovers.value) {\n        this.owner.modifyMood(Feel.default, [[Feel.hovering, 1]]);\n        const timing = this.owner.getLook(Look.timing);\n        if (this.owner.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n          this.owner.style.backgroundColor.setIntrinsic(this.owner.getLookOr(Look.backgroundColor, null), timing);\n        }\n      }\n    },\n    didStopHovering(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.hovering, void 0]]);\n      const timing = this.owner.getLook(Look.timing);\n      if (this.owner.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n        let backgroundColor = this.owner.getLookOr(Look.backgroundColor, null);\n        if (backgroundColor !== null) {\n          backgroundColor = backgroundColor.alpha(0);\n        }\n        this.owner.style.backgroundColor.setIntrinsic(backgroundColor, timing);\n      }\n    },\n  })\n  override readonly gesture!: PositionGesture<this, HtmlView>;\n\n  @EventHandler({\n    eventType: \"click\",\n    handle(event: MouseEvent): void {\n      event.stopPropagation();\n      this.owner.callObservers(\"buttonDidPress\", this.owner);\n    },\n  })\n  readonly click!: EventHandler<this>;\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    if (this.style.backgroundColor.hasAffinity(Affinity.Intrinsic)) {\n      let backgroundColor = this.getLookOr(Look.backgroundColor, null);\n      if (!this.gesture.hovering && backgroundColor instanceof Color) {\n        backgroundColor = backgroundColor.alpha(0);\n      }\n      this.style.backgroundColor.setIntrinsic(backgroundColor, timing);\n    }\n    if (!this.graphics.derived) {\n      const oldGraphics = this.graphics.value;\n      if (oldGraphics instanceof Icon) {\n        const newGraphics = oldGraphics.withTheme(theme, mood);\n        this.graphics.setIntrinsic(newGraphics, oldGraphics.isThemed() ? timing : false);\n      }\n    }\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.requireUpdate(View.NeedsLayout);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Angle} from \"@swim/math\";\nimport {Transform} from \"@swim/math\";\nimport {Affinity} from \"@swim/component\";\nimport {Color} from \"@swim/style\";\nimport type {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {SvgView} from \"@swim/dom\";\n\n/** @public */\nexport class DisclosureButton extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initDisclosureButton();\n  }\n\n  protected initDisclosureButton(): void {\n    this.setIntrinsic<DisclosureButton>({\n      classList: [\"disclosure-button\"],\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexGrow: 1,\n        flexShrink: 0,\n        cursor: \"pointer\",\n      },\n    });\n\n    const icon = this.appendChild(SvgView, \"icon\").attributes.setIntrinsic({\n      width: 24,\n      height: 24,\n      viewBox: \"0 0 24 24\",\n    });\n    icon.appendChild(\"polygon\", \"arrow\").attributes.setIntrinsic({\n      points: \"0 4 -6 -2 -4.59 -3.41 0 1.17 4.59 -3.41 6 -2\",\n      transform: Transform.translate(12, 12).rotate(Angle.deg(0)),\n    });\n  }\n\n  get icon(): SvgView {\n    return this.getChild(\"icon\") as SvgView;\n  }\n\n  get arrow(): SvgView {\n    const icon = this.icon;\n    return icon.getChild(\"arrow\") as SvgView;\n  }\n\n  @ExpansionAnimator({inherits: true, updateFlags: View.NeedsLayout})\n  readonly disclosure!: ExpansionAnimator<this, Expansion | null>;\n\n  @ThemeAnimator({valueType: Color, look: Look.textColor, inherits: true, updateFlags: View.NeedsLayout})\n  readonly collapsedColor!: ThemeAnimator<this, Color | null>;\n\n  @ThemeAnimator({valueType: Color, look: Look.accentColor, inherits: true, updateFlags: View.NeedsLayout})\n  readonly expandedColor!: ThemeAnimator<this, Color | null>;\n\n  protected override needsDisplay(displayFlags: ViewFlags): ViewFlags {\n    if ((this.flags & View.NeedsLayout) === 0) {\n      displayFlags &= ~View.NeedsLayout;\n    }\n    return displayFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    const phase = this.disclosure.getPhaseOr(1);\n    const collapsedColor = this.collapsedColor.value;\n    const expandedColor = this.expandedColor.value;\n    if (collapsedColor !== null && expandedColor !== null && this.arrow.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n      const colorInterpolator = collapsedColor.interpolateTo(expandedColor);\n      this.arrow.attributes.fill.setIntrinsic(colorInterpolator(phase));\n    }\n    const transform = Transform.translate(12, 12).rotate(Angle.deg(-180 * phase));\n    this.arrow.attributes.transform.setIntrinsic(transform);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Equals} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {StepInterpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {LengthLike} from \"@swim/math\";\nimport {Length} from \"@swim/math\";\nimport {PxLength} from \"@swim/math\";\nimport type {PresenceLike} from \"@swim/style\";\nimport {Presence} from \"@swim/style\";\n\n/** @public */\nexport type ToolLayoutLike = ToolLayout | ToolLayoutInit;\n\n/** @public */\nexport interface ToolLayoutInit {\n  key?: string;\n  grow?: number;\n  shrink?: number;\n  basis?: LengthLike;\n  align?: number;\n  inAlign?: number;\n  outAlign?: number;\n  overlap?: string | undefined;\n  overpad?: LengthLike;\n  presence?: PresenceLike;\n  inPresence?: PresenceLike | null;\n  outPresence?: PresenceLike | null;\n  width?: LengthLike | null;\n  left?: LengthLike | null;\n  right?: LengthLike | null;\n}\n\n/** @public */\nexport class ToolLayout implements Interpolate<ToolLayout>, Equals, Equivalent, Debug {\n  constructor(key: string, grow: number, shrink: number, basis: Length,\n              align: number, inAlign: number, outAlign: number,\n              overlap: string | undefined, overpad: Length,\n              presence: Presence, inPresence: Presence | null, outPresence: Presence | null,\n              width: Length | null, left: Length | null, right: Length | null) {\n    this.key = key;\n    this.grow = grow;\n    this.shrink = shrink;\n    this.basis = basis;\n    this.align = align;\n    this.inAlign = inAlign;\n    this.outAlign = outAlign;\n    this.overlap = overlap;\n    this.overpad = overpad;\n    this.presence = presence;\n    this.inPresence = inPresence;\n    this.outPresence = outPresence;\n    this.width = width;\n    this.left = left;\n    this.right = right;\n  }\n\n  likeType?(like: ToolLayoutInit): void;\n\n  readonly key: string;\n\n  withKey(key: string): ToolLayout {\n    return this.copy(key, this.grow, this.shrink, this.basis, this.align,\n                     this.inAlign, this.outAlign, this.overlap, this.overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly grow: number;\n\n  readonly shrink: number;\n\n  readonly basis: Length;\n\n  withFlex(grow: number, shrink: number, basis?: LengthLike): ToolLayout {\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = this.basis;\n    }\n    return this.copy(this.key, grow, shrink, basis, this.align,\n                     this.inAlign, this.outAlign, this.overlap, this.overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly align: number;\n\n  readonly inAlign: number;\n\n  readonly outAlign: number;\n\n  withAlign(align: number, inAlign?: number, outAlign?: number): ToolLayout {\n    if (inAlign === void 0) {\n      inAlign = this.inAlign;\n    }\n    if (outAlign === void 0) {\n      outAlign = this.outAlign;\n    }\n    return this.copy(this.key, this.grow, this.shrink, this.basis, align,\n                     inAlign, outAlign, this.overlap, this.overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly overlap: string | undefined;\n\n  withOverlap(overlap: string | undefined): ToolLayout {\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.align,\n                     this.inAlign, this.outAlign, overlap, this.overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly overpad: Length;\n\n  withOverpad(overpad: LengthLike): ToolLayout {\n    overpad = Length.fromLike(overpad);\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.align,\n                     this.inAlign, this.outAlign, this.overlap, overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly presence: Presence;\n\n  readonly inPresence: Presence | null;\n\n  readonly outPresence: Presence | null;\n\n  withPresence(presence: PresenceLike, inPresence?: PresenceLike | null, outPresence?: PresenceLike | null): ToolLayout;\n  withPresence(presence: PresenceLike | undefined, inPresence: PresenceLike | null | undefined, outPresence: PresenceLike | null | undefined): ToolLayout;\n  withPresence(presence: PresenceLike | undefined, inPresence?: PresenceLike | null, outPresence?: PresenceLike | null): ToolLayout {\n    if (presence === void 0) {\n      presence = this.presence;\n    } else {\n      presence = Presence.fromLike(presence);\n    }\n    if (inPresence === void 0) {\n      inPresence = this.inPresence;\n    } else {\n      inPresence = Presence.fromLike(inPresence);\n    }\n    if (outPresence === void 0) {\n      outPresence = this.outPresence;\n    } else {\n      outPresence = Presence.fromLike(outPresence);\n    }\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.align,\n                     this.inAlign, this.outAlign, this.overlap, this.overpad,\n                     presence, inPresence, outPresence,\n                     this.width, this.left, this.right);\n  }\n\n  readonly width: Length | null;\n\n  readonly left: Length | null;\n\n  readonly right: Length | null;\n\n  resized(width: LengthLike | null, left: LengthLike | null, right: LengthLike | null): ToolLayout {\n    if (width !== null) {\n      width = Length.fromLike(width);\n    }\n    if (left !== null) {\n      left = Length.fromLike(left);\n    }\n    if (right !== null) {\n      right = Length.fromLike(right);\n    }\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.align,\n                     this.inAlign, this.outAlign, this.overlap, this.overpad,\n                     this.presence, this.inPresence, this.outPresence,\n                     width, left, right);\n  }\n\n  protected copy(key: string, grow: number, shrink: number, basis: Length,\n                 align: number, inAlign: number, outAlign: number,\n                 overlap: string | undefined, overpad: Length,\n                 presence: Presence, inPresence: Presence | null, outPresence: Presence | null,\n                 width: Length | null, left: Length | null, right: Length | null): ToolLayout {\n    return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                          overlap, overpad, presence, inPresence, outPresence,\n                          width, left, right);\n  }\n\n  interpolateTo(that: ToolLayout): Interpolator<ToolLayout>;\n  interpolateTo(that: unknown): Interpolator<ToolLayout> | null;\n  interpolateTo(that: unknown): Interpolator<ToolLayout> | null {\n    if (that instanceof ToolLayout) {\n      return ToolLayoutInterpolator(this, that);\n    } else {\n      return null;\n    }\n  }\n\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ToolLayout) {\n      return this.key === that.key\n          && Equivalent(this.grow, that.grow, epsilon)\n          && Equivalent(this.shrink, that.shrink, epsilon)\n          && this.basis.equivalentTo(that.basis, epsilon)\n          && Equivalent(this.align, that.align, epsilon)\n          && Equivalent(this.inAlign, that.inAlign, epsilon)\n          && Equivalent(this.outAlign, that.outAlign, epsilon)\n          && this.overlap === that.overlap\n          && this.overpad.equivalentTo(that.overpad, epsilon)\n          && this.presence.equivalentTo(that.presence, epsilon)\n          && Equivalent(this.inPresence, that.inPresence, epsilon)\n          && Equivalent(this.outPresence, that.outPresence, epsilon);\n    }\n    return false;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ToolLayout) {\n      return this.key === that.key && this.grow === that.grow && this.shrink === that.shrink\n          && this.basis.equals(that.basis) && this.align === that.align\n          && this.inAlign === that.inAlign && this.outAlign === that.outAlign\n          && this.overlap === that.overlap && this.overpad.equals(that.overpad)\n          && this.presence.equals(that.presence) && Equals(this.inPresence, that.inPresence)\n          && Equals(this.outPresence, that.outPresence) && Equals(this.width, that.width)\n          && Equals(this.left, that.left) && Equals(this.right, that.right);\n    }\n    return false;\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"ToolLayout\").write(46/*'.'*/).write(\"create\").write(40/*'('*/)\n                   .debug(this.key).write(\", \").debug(this.grow).write(\", \")\n                   .debug(this.shrink).write(\", \").debug(this.basis).write(41/*')'*/);\n    if (this.align !== 0.5 || this.inAlign !== this.align || this.outAlign !== this.align) {\n      output = output.write(46/*'.'*/).write(\"withAlign\").write(40/*'('*/)\n                     .debug(this.align).write(\", \").debug(this.inAlign).write(\", \")\n                     .debug(this.outAlign).write(41/*')'*/);\n    }\n    if (this.overlap !== void 0) {\n      output = output.write(46/*'.'*/).write(\"withOverlap\").write(40/*'('*/)\n                     .debug(this.overlap).write(41/*')'*/);\n    }\n    if (!this.overpad.equals(Length.zero())) {\n      output = output.write(46/*'.'*/).write(\"withOverpad\").write(40/*'('*/)\n                     .debug(this.overpad).write(41/*')'*/);\n    }\n    if (!this.presence.presented || this.inPresence === null || !this.inPresence.dismissed\n                                 || this.outPresence === null || !this.outPresence.dismissed) {\n      output = output.write(46/*'.'*/).write(\"withPresence\").write(40/*'('*/)\n                     .debug(this.presence).write(\", \").debug(this.inPresence).write(\", \")\n                     .debug(this.outPresence).write(41/*')'*/);\n    }\n    if (this.width !== null || this.left !== null || this.right !== null) {\n      output = output.write(46/*'.'*/).write(\"resized\").write(40/*'('*/)\n                     .debug(this.width).write(\", \").debug(this.left).write(\", \")\n                     .debug(this.right).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  static create(key: string, grow?: number, shrink?: number, basis?: LengthLike,\n                align?: number, inAlign?: number, outAlign?: number,\n                overlap?: string | undefined, overpad?: LengthLike,\n                presence?: PresenceLike, inPresence?: PresenceLike | null,\n                outPresence?: PresenceLike | null): ToolLayout {\n    if (grow === void 0) {\n      grow = 0;\n    }\n    if (shrink === void 0) {\n      shrink = 1;\n    }\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = Length.zero();\n    }\n    if (align === void 0) {\n      align = 0.5;\n    }\n    if (inAlign === void 0) {\n      inAlign = align;\n    }\n    if (outAlign === void 0) {\n      outAlign = align;\n    }\n    if (overpad !== void 0) {\n      overpad = Length.fromLike(overpad);\n    } else {\n      overpad = Length.zero();\n    }\n    if (presence !== void 0) {\n      presence = Presence.fromLike(presence);\n    } else {\n      presence = Presence.presented();\n    }\n    if (inPresence === void 0) {\n      inPresence = Presence.dismissed();\n    } else {\n      inPresence = Presence.fromLike(inPresence);\n    }\n    if (outPresence === void 0) {\n      outPresence = Presence.dismissed();\n    } else {\n      outPresence = Presence.fromLike(outPresence);\n    }\n    return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                          overlap, overpad, presence, inPresence, outPresence,\n                          null, null, null);\n  }\n\n  static fromLike(value: ToolLayoutLike): ToolLayout {\n    if (value === void 0 || value === null || value instanceof ToolLayout) {\n      return value;\n    } else if (typeof value === \"object\" && value !== null) {\n      return ToolLayout.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: ToolLayoutInit): ToolLayout {\n    let key = init.key;\n    if (key === void 0) {\n      key = \"\";\n    }\n    let grow = init.grow;\n    if (grow === void 0) {\n      grow = 0;\n    }\n    let shrink = init.shrink;\n    if (shrink === void 0) {\n      shrink = 1;\n    }\n    let basis = init.basis;\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = Length.zero();\n    }\n    let align = init.align;\n    if (align === void 0) {\n      align = 0.5;\n    }\n    let inAlign = init.inAlign;\n    if (inAlign === void 0) {\n      inAlign = align;\n    }\n    let outAlign = init.outAlign;\n    if (outAlign === void 0) {\n      outAlign = align;\n    }\n    const overlap = init.overlap;\n    let overpad = init.overpad;\n    if (overpad !== void 0) {\n      overpad = Length.fromLike(overpad);\n    } else {\n      overpad = Length.zero();\n    }\n    let presence = init.presence;\n    if (presence !== void 0) {\n      presence = Presence.fromLike(presence);\n    } else {\n      presence = Presence.presented();\n    }\n    let inPresence = init.inPresence;\n    if (inPresence === void 0) {\n      inPresence = Presence.presented();\n    } else {\n      inPresence = Presence.fromLike(inPresence);\n    }\n    let outPresence = init.outPresence;\n    if (outPresence === void 0) {\n      outPresence = Presence.presented();\n    } else {\n      outPresence = Presence.fromLike(outPresence);\n    }\n    let width = init.width;\n    if (width !== void 0 && width !== null) {\n      width = Length.fromLike(width);\n    } else {\n      width = null;\n    }\n    let left = init.left;\n    if (left !== void 0 && left !== null) {\n      left = Length.fromLike(left);\n    } else {\n      left = null;\n    }\n    let right = init.right;\n    if (right !== void 0 && right !== null) {\n      right = Length.fromLike(right);\n    } else {\n      right = null;\n    }\n    return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                          overlap, overpad, presence, inPresence, outPresence,\n                          width, left, right);\n  }\n}\n\n/** @internal */\nexport interface ToolLayoutInterpolator extends Interpolator<ToolLayout> {\n  /** @internal */\n  readonly key: string;\n  /** @internal */\n  readonly growInterpolator: Interpolator<number>;\n  /** @internal */\n  readonly shrinkInterpolator: Interpolator<number>;\n  /** @internal */\n  readonly basisInterpolator: Interpolator<Length>;\n  /** @internal */\n  readonly alignInterpolator: Interpolator<number>;\n  /** @internal */\n  readonly inAlignInterpolator: Interpolator<number>;\n  /** @internal */\n  readonly outAlignInterpolator: Interpolator<number>;\n  /** @internal */\n  readonly overlapInterpolator: Interpolator<string | undefined>;\n  /** @internal */\n  readonly overpadInterpolator: Interpolator<Length>;\n  /** @internal */\n  readonly presenceInterpolator: Interpolator<Presence>;\n  /** @internal */\n  readonly inPresenceInterpolator: Interpolator<Presence | null>;\n  /** @internal */\n  readonly outPresenceInterpolator: Interpolator<Presence | null>;\n  /** @internal */\n  readonly widthInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly leftInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly rightInterpolator: Interpolator<Length | null>;\n\n  readonly 0: ToolLayout;\n\n  readonly 1: ToolLayout;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const ToolLayoutInterpolator = (function (_super: typeof Interpolator) {\n  const ToolLayoutInterpolator = function (l0: ToolLayout, l1: ToolLayout): ToolLayoutInterpolator {\n    const interpolator = function (u: number): ToolLayout {\n      const key = interpolator.key;\n      const grow = interpolator.growInterpolator(u);\n      const shrink = interpolator.shrinkInterpolator(u);\n      const basis = interpolator.basisInterpolator(u);\n      const align = interpolator.alignInterpolator(u);\n      const inAlign = interpolator.inAlignInterpolator(u);\n      const outAlign = interpolator.outAlignInterpolator(u);\n      const overlap = interpolator.overlapInterpolator(u === 0 ? 0 : 1);\n      const overpad = interpolator.overpadInterpolator(u);\n      const presence = interpolator.presenceInterpolator(u);\n      const inPresence = interpolator.inPresenceInterpolator(u);\n      const outPresence = interpolator.outPresenceInterpolator(u);\n      const width = interpolator.widthInterpolator(u);\n      const left = interpolator.leftInterpolator(u);\n      const right = interpolator.rightInterpolator(u);\n      return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                            overlap, overpad, presence, inPresence, outPresence,\n                            width, left, right);\n    } as ToolLayoutInterpolator;\n    Object.setPrototypeOf(interpolator, ToolLayoutInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).key = l1.key;\n    (interpolator as Mutable<typeof interpolator>).growInterpolator = Interpolator(l0.grow, l1.grow);\n    (interpolator as Mutable<typeof interpolator>).shrinkInterpolator = Interpolator(l0.shrink, l1.shrink);\n    (interpolator as Mutable<typeof interpolator>).basisInterpolator = l0.basis.interpolateTo(l1.basis);\n    (interpolator as Mutable<typeof interpolator>).alignInterpolator = Interpolator(l0.align, l1.align);\n    (interpolator as Mutable<typeof interpolator>).inAlignInterpolator = Interpolator(l0.inAlign, l1.inAlign);\n    (interpolator as Mutable<typeof interpolator>).outAlignInterpolator = Interpolator(l0.outAlign, l1.outAlign);\n    (interpolator as Mutable<typeof interpolator>).overlapInterpolator = Interpolator(l0.overlap, l1.overlap);\n    (interpolator as Mutable<typeof interpolator>).overpadInterpolator = l0.overpad.interpolateTo(l1.overpad);\n    (interpolator as Mutable<typeof interpolator>).presenceInterpolator = l0.presence.interpolateTo(l1.presence);\n    (interpolator as Mutable<typeof interpolator>).inPresenceInterpolator = Interpolator(l0.inPresence, l1.inPresence);\n    (interpolator as Mutable<typeof interpolator>).outPresenceInterpolator = Interpolator(l0.outPresence, l1.outPresence);\n    const width0 = l0.width;\n    const width1 = l1.width;\n    if (l0.align !== l1.align && width0 instanceof PxLength && width1 instanceof PxLength) {\n      const phase = width0.value < width1.value ? 0 : 1;\n      (interpolator as Mutable<typeof interpolator>).widthInterpolator = StepInterpolator(width0, width1, phase);\n    } else {\n      (interpolator as Mutable<typeof interpolator>).widthInterpolator = Interpolator(width0, width1);\n    }\n    (interpolator as Mutable<typeof interpolator>).leftInterpolator = Interpolator(l0.left, l1.left);\n    (interpolator as Mutable<typeof interpolator>).rightInterpolator = Interpolator(l0.right, l1.right);\n    return interpolator;\n  } as {\n    (l0: ToolLayout, l1: ToolLayout): ToolLayoutInterpolator;\n\n    /** @internal */\n    prototype: ToolLayoutInterpolator;\n  };\n\n  ToolLayoutInterpolator.prototype = Object.create(_super.prototype);\n  ToolLayoutInterpolator.prototype.constructor = ToolLayoutInterpolator;\n\n  Object.defineProperty(ToolLayoutInterpolator.prototype, 0, {\n    get(this: ToolLayoutInterpolator): ToolLayout {\n      const key = this.key;\n      const grow = this.growInterpolator[0];\n      const shrink = this.shrinkInterpolator[0];\n      const basis = this.basisInterpolator[0];\n      const align = this.alignInterpolator[0];\n      const inAlign = this.inAlignInterpolator[0];\n      const outAlign = this.outAlignInterpolator[0];\n      const overlap = this.overlapInterpolator[0];\n      const overpad = this.overpadInterpolator[0];\n      const presence = this.presenceInterpolator[0];\n      const inPresence = this.inPresenceInterpolator[0];\n      const outPresence = this.outPresenceInterpolator[0];\n      const width = this.widthInterpolator[0];\n      const left = this.leftInterpolator[0];\n      const right = this.rightInterpolator[0];\n      return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                            overlap, overpad, presence, inPresence, outPresence,\n                            width, left, right);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(ToolLayoutInterpolator.prototype, 1, {\n    get(this: ToolLayoutInterpolator): ToolLayout {\n      const key = this.key;\n      const grow = this.growInterpolator[1];\n      const shrink = this.shrinkInterpolator[1];\n      const basis = this.basisInterpolator[1];\n      const align = this.alignInterpolator[1];\n      const inAlign = this.inAlignInterpolator[1];\n      const outAlign = this.outAlignInterpolator[1];\n      const overlap = this.overlapInterpolator[1];\n      const overpad = this.overpadInterpolator[1];\n      const presence = this.presenceInterpolator[1];\n      const inPresence = this.inPresenceInterpolator[1];\n      const outPresence = this.outPresenceInterpolator[1];\n      const width = this.widthInterpolator[1];\n      const left = this.leftInterpolator[1];\n      const right = this.rightInterpolator[1];\n      return new ToolLayout(key, grow, shrink, basis, align, inAlign, outAlign,\n                            overlap, overpad, presence, inPresence, outPresence,\n                            width, left, right);\n    },\n    configurable: true,\n  });\n\n  ToolLayoutInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ToolLayoutInterpolator) {\n      return this.key === that.key\n          && this.growInterpolator.equals(that.growInterpolator)\n          && this.shrinkInterpolator.equals(that.shrinkInterpolator)\n          && this.basisInterpolator.equals(that.basisInterpolator)\n          && this.alignInterpolator.equals(that.alignInterpolator)\n          && this.inAlignInterpolator.equals(that.inAlignInterpolator)\n          && this.outAlignInterpolator.equals(that.outAlignInterpolator)\n          && this.overlapInterpolator.equals(that.overlapInterpolator)\n          && this.overpadInterpolator.equals(that.overpadInterpolator)\n          && this.presenceInterpolator.equals(that.presenceInterpolator)\n          && this.inPresenceInterpolator.equals(that.inPresenceInterpolator)\n          && this.outPresenceInterpolator.equals(that.outPresenceInterpolator)\n          && this.widthInterpolator.equals(that.widthInterpolator)\n          && this.leftInterpolator.equals(that.leftInterpolator)\n          && this.rightInterpolator.equals(that.rightInterpolator);\n    }\n    return false;\n  };\n\n  return ToolLayoutInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport {Equals} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {LengthLike} from \"@swim/math\";\nimport {Length} from \"@swim/math\";\nimport {Presence} from \"@swim/style\";\nimport type {ToolLayoutLike} from \"./ToolLayout\";\nimport {ToolLayout} from \"./ToolLayout\";\n\n/** @public */\nexport type BarLayoutLike = BarLayout | BarLayoutInit;\n\n/** @public */\nexport interface BarLayoutInit {\n  width?: LengthLike | null;\n  left?: LengthLike | null;\n  right?: LengthLike | null;\n  spacing?: LengthLike | null;\n  tools: ToolLayoutLike[];\n}\n\n/** @public */\nexport class BarLayout implements Interpolate<BarLayout>, Equals, Equivalent, Debug {\n  constructor(width: Length | null, left: Length | null, right: Length | null,\n              spacing: Length | null, tools: readonly ToolLayout[]) {\n    this.width = width;\n    this.left = left;\n    this.right = right;\n    this.spacing = spacing;\n    this.tools = tools;\n  }\n\n  likeType?(like: BarLayoutInit): void;\n\n  readonly width: Length | null;\n\n  readonly left: Length | null;\n\n  readonly right: Length | null;\n\n  readonly spacing: Length | null;\n\n  readonly tools: readonly ToolLayout[];\n\n  getTool(key: string): ToolLayout | null {\n    const tools = this.tools;\n    for (let i = 0; i < tools.length; i += 1) {\n      const tool = tools[i]!;\n      if (key === tool.key) {\n        return tool;\n      }\n    }\n    return null;\n  }\n\n  resized(width: LengthLike, left?: LengthLike | null, right?: LengthLike | null,\n          spacing?: LengthLike | null): BarLayout {\n    width = Length.fromLike(width);\n    if (left === void 0) {\n      left = this.left;\n    } else if (left !== null) {\n      left = Length.fromLike(left);\n    }\n    if (right === void 0) {\n      right = this.right;\n    } else if (right !== null) {\n      right = Length.fromLike(right);\n    }\n    if (spacing === void 0) {\n      spacing = this.spacing;\n    } else if (spacing !== null) {\n      spacing = Length.fromLike(spacing);\n    }\n\n    if (Equals(this.width, width) && Equals(this.left, left) &&\n        Equals(this.right, right) && Equals(this.spacing, spacing)) {\n      return this;\n    } else {\n      const oldTools = this.tools;\n      const toolCount = oldTools.length;\n      const newTools = new Array<ToolLayout>(toolCount);\n      const barWidth = width.pxValue();\n      const barLeft = left !== null ? left.pxValue(barWidth) : 0;\n      const barRight = right !== null ? right.pxValue(barWidth) : 0;\n      const toolSpacing = spacing !== null ? spacing.pxValue(barWidth) : 0;\n\n      let grow = 0;\n      let shrink = 0;\n      let basis = barLeft + barRight;\n      let x = barLeft;\n      let k = 0;\n      for (let i = 0; i < toolCount; i += 1) {\n        const tool = oldTools[i]!;\n        if (k !== 0) {\n          basis += toolSpacing;\n          x += toolSpacing;\n        }\n        const toolWidth = tool.basis.pxValue(barWidth);\n        newTools[i] = tool.resized(toolWidth, x, barWidth - toolWidth - x);\n        grow += tool.grow;\n        shrink += tool.shrink;\n        basis += toolWidth;\n        x += toolWidth;\n        k += 1;\n      }\n\n      if (basis < barWidth && grow > 0) {\n        const delta = barWidth - basis;\n        let x = barLeft;\n        let j = 0;\n        for (let i = 0; i < toolCount; i += 1) {\n          const tool = newTools[i]!;\n          if (j !== 0) {\n            x += toolSpacing;\n          }\n          const toolBasis = tool.basis.pxValue(barWidth);\n          const toolWidth = toolBasis + delta * (tool.grow / grow);\n          newTools[i] = tool.resized(toolWidth, x, barWidth - toolWidth - x);\n          x += toolWidth;\n          j += 1;\n        }\n      } else if (basis > barWidth && shrink > 0) {\n        const delta = basis - barWidth;\n        let x = barLeft;\n        let j = 0;\n        for (let i = 0; i < toolCount; i += 1) {\n          const tool = newTools[i]!;\n          if (j !== 0) {\n            x += toolSpacing;\n          }\n          const toolBasis = tool.basis.pxValue(barWidth);\n          const toolWidth = toolBasis - delta * (tool.shrink / shrink);\n          newTools[i] = tool.resized(toolWidth, x, barWidth - toolWidth - x);\n          x += toolWidth;\n          j += 1;\n        }\n      }\n\n      return new BarLayout(width, left, right, spacing, newTools);\n    }\n  }\n\n  interpolateTo(that: BarLayout): Interpolator<BarLayout>;\n  interpolateTo(that: unknown): Interpolator<BarLayout> | null;\n  interpolateTo(that: unknown): Interpolator<BarLayout> | null {\n    if (that instanceof BarLayout) {\n      return BarLayoutInterpolator(this, that);\n    } else {\n      return null;\n    }\n  }\n\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BarLayout) {\n      const theseTools = this.tools;\n      const thoseTools = that.tools;\n      const n = theseTools.length;\n      if (n === thoseTools.length) {\n        for (let i = 0; i < n; i += 1) {\n          if (!theseTools[i]!.equivalentTo(thoseTools[i]!, epsilon)) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BarLayout) {\n      return Equals(this.width, that.width) && Equals(this.left, that.left)\n          && Equals(this.right, that.right) && Equals(this.spacing, that.spacing)\n          && Arrays.equal(this.tools, that.tools);\n    }\n    return false;\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"BarLayout\").write(46/*'.'*/).write(\"of\").write(40/*'('*/);\n    for (let i = 0; i < this.tools.length; i += 1) {\n      if (i !== 0) {\n        output = output.write(\", \");\n      }\n      output = output.debug(this.tools[i]!);\n    }\n    output = output.write(41/*')'*/);\n    if (this.width !== null || this.left !== null || this.right !== null || this.spacing !== null) {\n      output = output.write(46/*'.'*/).write(\"resized\").write(40/*'('*/)\n                     .debug(this.width).write(\", \").debug(this.left).write(\", \")\n                     .debug(this.right).write(\", \").debug(this.spacing).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  static of(...barTools: ToolLayoutLike[]): BarLayout {\n    const n = barTools.length;\n    const tools = new Array<ToolLayout>(n);\n    for (let i = 0; i < n; i += 1) {\n      tools[i] = ToolLayout.fromLike(barTools[i]!);\n    }\n    return new BarLayout(null, null, null, null, tools);\n  }\n\n  static create(tools: readonly ToolLayout[]): BarLayout {\n    return new BarLayout(null, null, null, null, tools);\n  }\n\n  static fromLike(value: BarLayoutLike): BarLayout {\n    if (value === void 0 || value === null || value instanceof BarLayout) {\n      return value;\n    } else if (typeof value === \"object\" && value !== null) {\n      return BarLayout.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: BarLayoutInit): BarLayout {\n    let width = init.width;\n    if (width !== void 0 && width !== null) {\n      width = Length.fromLike(width);\n    } else {\n      width = null;\n    }\n    let left = init.left;\n    if (left !== void 0 && left !== null) {\n      left = Length.fromLike(left);\n    } else {\n      left = null;\n    }\n    let right = init.right;\n    if (right !== void 0 && right !== null) {\n      right = Length.fromLike(right);\n    } else {\n      right = null;\n    }\n    let spacing = init.spacing;\n    if (spacing !== void 0 && spacing !== null) {\n      spacing = Length.fromLike(spacing);\n    } else {\n      spacing = null;\n    }\n    const toolCount = init.tools.length;\n    const tools = new Array<ToolLayout>(toolCount);\n    for (let i = 0; i < toolCount; i += 1) {\n      tools[i] = ToolLayout.fromLike(init.tools[i]!);\n    }\n    return new BarLayout(width, left, right, spacing, tools);\n  }\n}\n\n/** @internal */\nexport interface BarLayoutInterpolator extends Interpolator<BarLayout> {\n  /** @internal */\n  readonly widthInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly leftInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly rightInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly spacingInterpolator: Interpolator<Length | null>;\n  /** @internal */\n  readonly toolInterpolators: readonly Interpolator<ToolLayout>[];\n\n  readonly 0: BarLayout;\n\n  readonly 1: BarLayout;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const BarLayoutInterpolator = (function (_super: typeof Interpolator) {\n  const BarLayoutInterpolator = function (l0: BarLayout, l1: BarLayout): BarLayoutInterpolator {\n    const interpolator = function (u: number): BarLayout {\n      const width = interpolator.widthInterpolator(u);\n      const left = interpolator.leftInterpolator(u);\n      const right = interpolator.rightInterpolator(u);\n      const spacing = interpolator.spacingInterpolator(u);\n      const toolInterpolators = interpolator.toolInterpolators;\n      const tools = new Array<ToolLayout>();\n      for (let i = 0; i < toolInterpolators.length; i += 1) {\n        tools.push(toolInterpolators[i]!(u));\n      }\n      return new BarLayout(width, left, right, spacing, tools);\n    } as BarLayoutInterpolator;\n    Object.setPrototypeOf(interpolator, BarLayoutInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).widthInterpolator = Interpolator(l0.width, l1.width);\n    (interpolator as Mutable<typeof interpolator>).leftInterpolator = Interpolator(l0.left, l1.left);\n    (interpolator as Mutable<typeof interpolator>).rightInterpolator = Interpolator(l0.right, l1.right);\n    (interpolator as Mutable<typeof interpolator>).spacingInterpolator = Interpolator(l0.spacing, l1.spacing);\n    const tools0 = l0.tools;\n    const tools1 = l1.tools;\n    const toolInterpolators = new Array<Interpolator<ToolLayout>>();\n    for (let i = 0; i < tools0.length; i += 1) {\n      let tool0 = tools0[i]!;\n      let tool1 = l1.getTool(tool0.key);\n      if (tool1 === null && !tool0.presence.dismissed && tool0.outPresence !== null) {\n        tool1 = tool0.withPresence(tool0.outPresence);\n        tool1 = tool1.withAlign(tool1.outAlign);\n        tool0 = tool0.withPresence(tool0.presence.asDismissing());\n      } else if (tool1 !== null && tool0.presence.dismissed) {\n        tool0 = tool0.withPresence(tool0.presence.asPresenting());\n      }\n      if (tool1 !== null) {\n        toolInterpolators.push(tool0.interpolateTo(tool1));\n      }\n    }\n    for (let i = 0; i < tools1.length; i += 1) {\n      let tool1 = tools1[i]!;\n      let tool0 = l0.getTool(tool1.key);\n      if (tool0 === null) {\n        const inPresence = tool1.inPresence !== null ? tool1.inPresence : tool1.presence;\n        tool0 = tool1.withPresence(inPresence.asPresenting());\n        tool1 = tool1.withPresence(Presence.presented());\n        tool0 = tool0.withAlign(tool0.inAlign);\n        toolInterpolators.push(tool0.interpolateTo(tool1));\n      }\n    }\n    (interpolator as Mutable<typeof interpolator>).toolInterpolators = toolInterpolators;\n    return interpolator;\n  } as {\n    (l0: BarLayout, l1: BarLayout): BarLayoutInterpolator;\n\n    /** @internal */\n    prototype: BarLayoutInterpolator;\n  };\n\n  BarLayoutInterpolator.prototype = Object.create(_super.prototype);\n  BarLayoutInterpolator.prototype.constructor = BarLayoutInterpolator;\n\n  Object.defineProperty(BarLayoutInterpolator.prototype, 0, {\n    get(this: BarLayoutInterpolator): BarLayout {\n      const width = this.widthInterpolator[0];\n      const left = this.leftInterpolator[0];\n      const right = this.rightInterpolator[0];\n      const spacing = this.spacingInterpolator[0];\n      const toolInterpolators = this.toolInterpolators;\n      const tools = new Array<ToolLayout>();\n      for (let i = 0; i < toolInterpolators.length; i += 1) {\n        tools.push(toolInterpolators[i]![0]);\n      }\n      return new BarLayout(width, left, right, spacing, tools);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(BarLayoutInterpolator.prototype, 1, {\n    get(this: BarLayoutInterpolator): BarLayout {\n      const width = this.widthInterpolator[1];\n      const left = this.leftInterpolator[1];\n      const right = this.rightInterpolator[1];\n      const spacing = this.spacingInterpolator[1];\n      const toolInterpolators = this.toolInterpolators;\n      const tools = new Array<ToolLayout>();\n      for (let i = 0; i < toolInterpolators.length; i += 1) {\n        tools.push(toolInterpolators[i]![1]);\n      }\n      return new BarLayout(width, left, right, spacing, tools);\n    },\n    configurable: true,\n  });\n\n  BarLayoutInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BarLayoutInterpolator) {\n      if (this.widthInterpolator.equals(that.widthInterpolator) &&\n          this.leftInterpolator.equals(that.leftInterpolator) &&\n          this.rightInterpolator.equals(that.rightInterpolator) &&\n          this.spacingInterpolator.equals(that.spacingInterpolator)) {\n        const n = this.toolInterpolators.length;\n        if (n === that.toolInterpolators.length) {\n          for (let i = 0; i < n; i += 1) {\n            if (!this.toolInterpolators[i]!.equals(that.toolInterpolators[i]!)) {\n              return false;\n            }\n          }\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  return BarLayoutInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Animator} from \"@swim/component\";\nimport {ConstraintProperty} from \"@swim/constraint\";\nimport {Length} from \"@swim/math\";\nimport {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\n\n/** @public */\nexport interface ToolViewObserver<V extends ToolView = ToolView> extends HtmlViewObserver<V> {\n  viewDidPress?(input: PositionGestureInput, event: Event | null, view: V): void;\n\n  viewDidLongPress?(input: PositionGestureInput, view: V): void;\n}\n\n/** @public */\nexport class ToolView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initTool();\n  }\n\n  protected initTool(): void {\n    this.classList.add(\"tool\");\n  }\n\n  declare readonly observerType?: Class<ToolViewObserver>;\n\n  @Animator({valueType: Number, value: 0.5, updateFlags: View.NeedsLayout})\n  readonly xAlign!: Animator<this, number>;\n\n  @ConstraintProperty({valueType: Length, value: null})\n  readonly effectiveWidth!: ConstraintProperty<this, Length | null>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ToolViewObserver} from \"./ToolView\";\nimport {ToolView} from \"./ToolView\";\n\n/** @public */\nexport interface TitleToolViewObserver<V extends TitleToolView = TitleToolView> extends ToolViewObserver<V> {\n  viewWillAttachContent?(contentView: HtmlView, view: V): void;\n\n  viewDidDetachContent?(contentView: HtmlView, view: V): void;\n}\n\n/** @public */\nexport class TitleToolView extends ToolView {\n  protected override initTool(): void {\n    super.initTool();\n    this.setIntrinsic<TitleToolView>({\n      classList: [\"tool-title\"],\n      style: {\n        overflowX: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<TitleToolViewObserver>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    initView(contentView: HtmlView): void {\n      contentView.style.setIntrinsic({\n        position: \"relative\",\n        left: 0,\n        top: 0,\n      });\n    },\n    willAttachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachContent\", contentView, this.owner);\n    },\n    didDetachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachContent\", contentView, this.owner);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        let view = this.view;\n        if (view === null) {\n          view = this.createView();\n        }\n        view.text(value);\n        return view;\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return HtmlView.fromTag(\"span\").style.setIntrinsic({\n        display: \"block\",\n        whiteSpace: \"nowrap\",\n        textOverflow: \"ellipsis\",\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n      });\n    },\n  })\n  readonly content!: ViewRef<this, Like<HtmlView, string | undefined>>;\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutTool();\n  }\n\n  protected layoutTool(): void {\n    const contentView = this.content.view;\n    if (contentView === null) {\n      return;\n    }\n    const contentWidth = contentView.style.width.pxValue();\n    const toolWidth = this.style.width.pxValue();\n    contentView.style.setIntrinsic({\n      left: (toolWidth !== 0 ? toolWidth - contentWidth : contentWidth) * this.xAlign.value,\n      top: 0,\n      height: this.style.height.value,\n      lineHeight: this.style.height.value,\n    });\n    if (this.effectiveWidth.value === null && contentWidth !== 0) {\n      this.effectiveWidth.set(contentWidth);\n    }\n  }\n\n  @PositionGesture({\n    bindsOwner: true,\n    didPress(input: PositionGestureInput, event: Event | null): void {\n      if (!input.defaultPrevented && this.owner.clientBounds.contains(input.x, input.y)) {\n        this.owner.didPress(input, event);\n      }\n    },\n    didLongPress(input: PositionGestureInput): void {\n      if (!input.defaultPrevented) {\n        this.owner.didLongPress(input);\n      }\n    },\n  })\n  readonly gesture!: PositionGesture<this, HtmlView>;\n\n  didPress(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"viewDidPress\", input, event, this);\n  }\n\n  didLongPress(input: PositionGestureInput): void {\n    this.callObservers(\"viewDidLongPress\", input, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Color} from \"@swim/style\";\nimport {Focus} from \"@swim/style\";\nimport {FocusAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport {Graphics} from \"@swim/graphics\";\nimport {IconLayout} from \"@swim/graphics\";\nimport {Icon} from \"@swim/graphics\";\nimport type {IconView} from \"@swim/graphics\";\nimport {IconGraphicsAnimator} from \"@swim/graphics\";\nimport {SvgIconView} from \"@swim/graphics\";\nimport {ButtonGlow} from \"@swim/button\";\nimport type {ToolViewObserver} from \"./ToolView\";\nimport {ToolView} from \"./ToolView\";\n\n/** @public */\nexport interface ButtonToolViewObserver<V extends ButtonToolView = ButtonToolView> extends ToolViewObserver<V> {\n  viewDidSetGraphics?(graphics: Graphics | null, view: V): void;\n}\n\n/** @public */\nexport class ButtonToolView extends ToolView implements IconView {\n  protected override initTool(): void {\n    super.initTool();\n    this.setIntrinsic<ButtonToolView>({\n      classList: [\"tool-button\"],\n      style: {\n        boxSizing: \"border-box\",\n        borderRadius: 4,\n        overflow: \"hidden\",\n        userSelect: \"none\",\n        cursor: \"pointer\",\n        backgroundColor: Look.backgroundColor,\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<ButtonToolViewObserver>;\n\n  @Animator({valueType: Number, value: 0.5, updateFlags: View.NeedsLayout})\n  override readonly xAlign!: Animator<this, number>;\n\n  /** @override */\n  @Animator({valueType: IconLayout, value: null, updateFlags: View.NeedsLayout})\n  readonly iconLayout!: Animator<this, IconLayout | null>;\n\n  /** @override */\n  @ThemeAnimator({\n    valueType: Color,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetState(iconColor: Color | null): void {\n      const timing = this.timing !== null ? this.timing : false;\n      this.owner.graphics.setState(this.owner.graphics.state, timing, Affinity.Reflexive);\n    },\n  })\n  get iconColor(): ThemeAnimator<this, Color | null> {\n    return ThemeAnimator.getter();\n  }\n\n  /** @override */\n  @ThemeAnimator({\n    extends: IconGraphicsAnimator,\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newGraphics: Graphics | null, oldGraphics: Graphics | null): void {\n      this.owner.callObservers(\"viewDidSetGraphics\", newGraphics, this.owner);\n    },\n  })\n  readonly graphics!: ThemeAnimator<this, Graphics | null>;\n\n  @ViewRef({\n    viewType: SvgIconView,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n    initView(svgView: SvgIconView): void {\n      svgView.style.position.set(\"absolute\");\n      svgView.iconLayout.setInherits(true);\n      svgView.iconColor.setInherits(true);\n      svgView.graphics.setInherits(true);\n    },\n  })\n  readonly svg!: ViewRef<this, SvgIconView>;\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    if (!this.graphics.derived) {\n      const oldGraphics = this.graphics.value;\n      if (oldGraphics instanceof Icon) {\n        const newGraphics = oldGraphics.withTheme(theme, mood);\n        this.graphics.setState(newGraphics, oldGraphics.isThemed() ? timing : false, Affinity.Reflexive);\n      }\n    }\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.requireUpdate(View.NeedsLayout);\n  }\n\n  protected override needsDisplay(displayFlags: ViewFlags): ViewFlags {\n    if ((this.flags & View.NeedsLayout) === 0) {\n      displayFlags &= ~View.NeedsLayout;\n    }\n    return displayFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutTool();\n  }\n\n  protected layoutTool(): void {\n    const svgView = this.svg.view;\n    if (svgView === null || !svgView.attributes.width.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.height.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.viewBox.hasAffinity(Affinity.Intrinsic)) {\n      return;\n    }\n    const width = this.style.width.pxValue();\n    const height = this.style.height.pxValue();\n    svgView.attributes.setIntrinsic({\n      width, height,\n      viewBox: \"0 0 \" + width + \" \" + height,\n    });\n    this.effectiveWidth.set(width);\n  }\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly hovers!: Property<this, boolean>;\n\n  @FocusAnimator({\n    value: Focus.unfocused(),\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    didSetValue(newHover: Focus, oldHover: Focus): void {\n      this.owner.modifyMood(Feel.default, [[Feel.transparent, 1 - newHover.phase]], false);\n    },\n    init(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.hovering, 1],\n                                           [Feel.translucent, 1],\n                                           [Feel.transparent, 1 - this.value.phase]], false);\n    },\n  })\n  readonly hover!: FocusAnimator<this, Focus>;\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly glows!: Property<this, boolean>;\n\n  protected glow(input: PositionGestureInput): void {\n    if (input.detail instanceof ButtonGlow) {\n      input.detail.fade(input.x, input.y);\n      input.detail = void 0;\n    }\n    if (input.detail === void 0) {\n      const delay = input.inputType === \"mouse\" ? 0 : 100;\n      input.detail = this.prependChild(ButtonGlow);\n      (input.detail as ButtonGlow).glow(input.x, input.y, void 0, delay);\n    }\n  }\n\n  @PositionGesture({\n    bindsOwner: true,\n    observes: true,\n    viewDidUnmount(): void {\n      this.owner.hover.unfocus(false);\n    },\n    didStartHovering(): void {\n      if (this.owner.hovers.value) {\n        this.owner.hover.focus(false);\n      }\n    },\n    didStopHovering(): void {\n      if (this.owner.hovers.value) {\n        this.owner.hover.unfocus();\n      }\n    },\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (this.owner.glows.value) {\n        this.owner.glow(input);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      } else if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        input.clearHoldTimer();\n        this.beginHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      } else if (input.detail instanceof ButtonGlow) {\n        input.detail.pulse(input.x, input.y);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n      if (input.detail instanceof ButtonGlow) {\n        input.detail.fade(input.x, input.y);\n        input.detail = void 0;\n      }\n    },\n    didPress(input: PositionGestureInput, event: Event | null): void {\n      if (!input.defaultPrevented && this.owner.clientBounds.contains(input.x, input.y)) {\n        this.owner.didPress(input, event);\n      }\n    },\n    didLongPress(input: PositionGestureInput): void {\n      if (!input.defaultPrevented) {\n        this.owner.didLongPress(input);\n      }\n    },\n  })\n  readonly gesture!: PositionGesture<this, HtmlView> & Observes<HtmlView>;\n\n  didPress(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"viewDidPress\", input, event, this);\n  }\n\n  didLongPress(input: PositionGestureInput): void {\n    this.callObservers(\"viewDidLongPress\", input, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Length} from \"@swim/math\";\nimport {Color} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {ViewRef} from \"@swim/view\";\nimport type {StyleSheet} from \"@swim/dom\";\nimport {StyleRule} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {StyleView} from \"@swim/dom\";\nimport type {ToolViewObserver} from \"./ToolView\";\nimport {ToolView} from \"./ToolView\";\n\n/** @public */\nexport interface SearchToolViewObserver<V extends SearchToolView = SearchToolView> extends ToolViewObserver<V> {\n  viewWillAttachInput?(inputView: HtmlView, view: V): void;\n\n  viewDidDetachInput?(inputView: HtmlView, view: V): void;\n\n  viewDidUpdateSearch?(query: string, inputView: HtmlView, view: V): void;\n\n  viewDidSubmitSearch?(query: string, inputView: HtmlView, view: V): void;\n\n  viewDidCancelSearch?(inputView: HtmlView, view: V): void;\n}\n\n/** @public */\nexport class SearchToolView extends ToolView {\n  protected override initTool(): void {\n    super.initTool();\n    this.classList.add(\"tool-search\");\n  }\n\n  declare readonly observerType?: Class<SearchToolViewObserver>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.onInput = this.onInput.bind(this);\n      this.onKeyDown = this.onKeyDown.bind(this);\n    },\n    initView(inputView: HtmlView): void {\n      inputView.style.setIntrinsic({\n        position: \"relative\",\n        left: 0,\n        top: 0,\n        width: Length.pct(100),\n        height: 30,\n      });\n    },\n    willAttachView(inputView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachInput\", inputView, this.owner);\n    },\n    didDetachView(inputView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachInput\", inputView, this.owner);\n    },\n    didAttachView(inputView: HtmlView): void {\n      inputView.addEventListener(\"input\", this.onInput as EventListener);\n      inputView.addEventListener(\"keydown\", this.onKeyDown);\n    },\n    willDetachView(inputView: HtmlView): void {\n      inputView.removeEventListener(\"input\", this.onInput as EventListener);\n      inputView.removeEventListener(\"keydown\", this.onKeyDown);\n    },\n    onInput(event: InputEvent): void {\n      const inputView = this.view;\n      if (inputView !== null) {\n        const query = (inputView.node as HTMLInputElement).value;\n        this.owner.callObservers(\"viewDidUpdateSearch\", query, inputView, this.owner);\n      }\n    },\n    onKeyDown(event: KeyboardEvent): void {\n      const inputView = this.view;\n      if (inputView !== null) {\n        if (event.key === \"Enter\") {\n          const query = (inputView.node as HTMLInputElement).value;\n          this.owner.callObservers(\"viewDidSubmitSearch\", query, inputView, this.owner);\n        } else if (event.key === \"Escape\") {\n          this.owner.callObservers(\"viewDidCancelSearch\", inputView, this.owner);\n        }\n      }\n    },\n    createView(): HtmlView {\n      return HtmlView.fromTag(\"input\").setIntrinsic({\n        attributes: {\n          type: \"search\",\n        },\n        style: {\n          paddingTop: 3,\n          paddingRight: 15,\n          paddingBottom: 3,\n          paddingLeft: 15,\n          userSelect: \"none\",\n        },\n      });\n    },\n  })\n  readonly input!: ViewRef<this, HtmlView> & {\n    onInput(event: InputEvent): void,\n    onKeyDown(event: KeyboardEvent): void,\n  };\n\n  @ViewRef({\n    viewType: StyleView,\n    viewKey: true,\n    binds: true,\n  })\n  readonly stylesheet!: ViewRef<this, StyleView>;\n\n  @StyleRule({\n    inherits: true,\n    get parent(): StyleSheet | null {\n      const styleView = this.owner.stylesheet.view;\n      return styleView !== null ? styleView.sheet : null;\n    },\n    selector: \"input\",\n    init(): void {\n      this.style.setIntrinsic({\n        appearance: \"none\",\n        borderWidth: 1,\n        borderStyle: \"solid\",\n        borderColor: Look.borderColor,\n        borderRadius: 10,\n        outlineWidth: 0,\n        outlineStyle: \"none\",\n        outlineColor: Color.transparent(),\n        backgroundColor: Color.transparent(),\n        color: Look.textColor,\n      });\n      this.setStyle(\"transition\", \"border 100ms ease-out\");\n    },\n  })\n  readonly inputRule!: StyleRule<this>;\n\n  @StyleRule({\n    inherits: true,\n    get parent(): StyleSheet | null {\n      const styleView = this.owner.stylesheet.view;\n      return styleView !== null ? styleView.sheet : null;\n    },\n    selector: \"input:focus\",\n    init(): void {\n      this.style.setIntrinsic({\n        borderWidth: 2,\n        borderColor: Look.focusColor,\n      });\n      this.setStyle(\"transition\", \"border 100ms ease-out\");\n    },\n  })\n  readonly inputFocusRule!: StyleRule<this>;\n\n  @StyleRule({\n    inherits: true,\n    get parent(): StyleSheet | null {\n      const styleView = this.owner.stylesheet.view;\n      return styleView !== null ? styleView.sheet : null;\n    },\n    selector: \"input::placeholder\",\n    init(): void {\n      this.style.color.setIntrinsic(Look.placeholderColor);\n    },\n  })\n  readonly inputPlaceholderRule!: StyleRule<this>;\n\n  @StyleRule({\n    inherits: true,\n    get parent(): StyleSheet | null {\n      const styleView = this.owner.stylesheet.view;\n      return styleView !== null ? styleView.sheet : null;\n    },\n    selector: \"input::-webkit-search-cancel-button\",\n    init(): void {\n      this.setStyle(\"-webkit-appearance\", \"none\");\n    },\n  })\n  readonly inputSearchCancelButtonRule!: StyleRule<this>;\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutTool();\n  }\n\n  protected layoutTool(): void {\n    const inputView = this.input.view;\n    if (inputView === null) {\n      return;\n    }\n    const toolWidth = this.style.width.pxValue();\n    const toolHeight = this.style.height.pxValue();\n    const inputWidth = inputView.style.width.pxValue();\n    const inputHeight = inputView.style.height.pxValue();\n    const excessWidth = toolWidth - inputWidth;\n    const excessHeight = toolHeight - inputHeight;\n    inputView.style.setIntrinsic({\n      left: (toolWidth !== 0 ? excessWidth : inputWidth) * this.xAlign.value,\n      top: excessHeight * 0.5,\n    });\n    this.effectiveWidth.set(inputWidth);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {ToolLayout} from \"./ToolLayout\";\nimport {ToolView} from \"./ToolView\";\n\n/** @public */\nexport interface ToolControllerObserver<C extends ToolController = ToolController> extends ControllerObserver<C> {\n  controllerWillAttachToolView?(toolView: ToolView, controller: C): void;\n\n  controllerDidDetachToolView?(toolView: ToolView, controller: C): void;\n\n  controllerDidSetToolLayout?(toolLayout: ToolLayout | null, controller: C): void;\n\n  controllerDidPressToolView?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidLongPressToolView?(input: PositionGestureInput, controller: C): void;\n}\n\n/** @public */\nexport class ToolController extends Controller {\n  declare readonly observerType?: Class<ToolControllerObserver>;\n\n  @TraitViewRef({\n    viewType: ToolView,\n    observesView: true,\n    willAttachView(toolView: ToolView): void {\n      this.owner.callObservers(\"controllerWillAttachToolView\", toolView, this.owner);\n    },\n    didDetachView(toolView: ToolView): void {\n      this.owner.callObservers(\"controllerDidDetachToolView\", toolView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressToolView\", input, event, this.owner);\n    },\n    viewDidLongPress(input: PositionGestureInput): void {\n      this.owner.callObservers(\"controllerDidLongPressToolView\", input, this.owner);\n    },\n  })\n  readonly tool!: TraitViewRef<this, Trait, ToolView> & Observes<ToolView>;\n\n  @Property({\n    valueType: ToolLayout,\n    value: null,\n    didSetValue(toolLayout: ToolLayout | null): void {\n      this.owner.callObservers(\"controllerDidSetToolLayout\", toolLayout, this.owner);\n    },\n  })\n  readonly layout!: Property<this, ToolLayout | null>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ToolControllerObserver} from \"./ToolController\";\nimport {ToolController} from \"./ToolController\";\nimport {TitleToolView} from \"./TitleToolView\";\n\n/** @public */\nexport interface TitleToolControllerObserver<C extends TitleToolController = TitleToolController> extends ToolControllerObserver<C> {\n  controllerWillAttachToolView?(toolView: TitleToolView, controller: C): void;\n\n  controllerDidDetachToolView?(toolView: TitleToolView, controller: C): void;\n\n  controllerWillAttachToolContentView?(toolContentView: HtmlView, controller: C): void;\n\n  controllerDidDetachToolContentView?(toolContentView: HtmlView, controller: C): void;\n}\n\n/** @public */\nexport class TitleToolController extends ToolController {\n  declare readonly observerType?: Class<TitleToolControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    viewType: TitleToolView,\n    observesView: true,\n    initView(toolView: TitleToolView): void {\n      this.owner.content.setView(toolView.content.view);\n    },\n    deinitView(toolView: TitleToolView): void {\n      this.owner.content.setView(null);\n    },\n    viewWillAttachContent(contentView: HtmlView): void {\n      this.owner.content.setView(contentView);\n    },\n    viewDidDetachContent(contentView: HtmlView): void {\n      this.owner.content.setView(null);\n    },\n  })\n  override readonly tool!: TraitViewRef<this, Trait, TitleToolView> & ToolController[\"tool\"] & Observes<TitleToolView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    willAttachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerWillAttachToolContentView\", contentView, this.owner);\n    },\n    didDetachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidDetachToolContentView\", contentView, this.owner);\n    },\n  })\n  readonly content!: ViewRef<this, HtmlView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ToolControllerObserver} from \"./ToolController\";\nimport {ToolController} from \"./ToolController\";\nimport {ButtonToolView} from \"./ButtonToolView\";\n\n/** @public */\nexport interface ButtonToolControllerObserver<C extends ButtonToolController = ButtonToolController> extends ToolControllerObserver<C> {\n  controllerWillAttachToolView?(toolView: ButtonToolView, controller: C): void;\n\n  controllerDidDetachToolView?(toolView: ButtonToolView, controller: C): void;\n\n  controllerDidSetToolIcon?(toolIcon: Graphics | null, controller: C): void;\n}\n\n/** @public */\nexport class ButtonToolController extends ToolController {\n  declare readonly observerType?: Class<ButtonToolControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    viewType: ButtonToolView,\n    observesView: true,\n    viewDidSetGraphics(toolIcon: Graphics | null): void {\n      this.owner.callObservers(\"controllerDidSetToolIcon\", toolIcon, this.owner);\n    },\n  })\n  override readonly tool!: TraitViewRef<this, Trait, ButtonToolView> & ToolController[\"tool\"] & Observes<ButtonToolView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ToolControllerObserver} from \"./ToolController\";\nimport {ToolController} from \"./ToolController\";\nimport {SearchToolView} from \"./SearchToolView\";\n\n/** @public */\nexport interface SearchToolControllerObserver<C extends SearchToolController = SearchToolController> extends ToolControllerObserver<C> {\n  controllerWillAttachToolView?(toolView: SearchToolView, controller: C): void;\n\n  controllerDidDetachToolView?(toolView: SearchToolView, controller: C): void;\n\n  controllerWillAttachToolInputView?(toolInputView: HtmlView, controller: C): void;\n\n  controllerDidDetachToolInputView?(toolInputView: HtmlView, controller: C): void;\n\n  controllerDidUpdateSearch?(query: string, inputView: HtmlView, controller: C): void;\n\n  controllerDidSubmitSearch?(query: string, inputView: HtmlView, controller: C): void;\n\n  controllerDidCancelSearch?(inputView: HtmlView, controller: C): void;\n}\n\n/** @public */\nexport class SearchToolController extends ToolController {\n  declare readonly observerType?: Class<SearchToolControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    viewType: SearchToolView,\n    observesView: true,\n    initView(toolView: SearchToolView): void {\n      this.owner.input.setView(toolView.input.view);\n    },\n    deinitView(toolView: SearchToolView): void {\n      this.owner.input.setView(null);\n    },\n    viewWillAttachInput(inputView: HtmlView): void {\n      this.owner.input.setView(inputView);\n    },\n    viewDidDetachInput(inputView: HtmlView): void {\n      this.owner.input.setView(null);\n    },\n    viewDidUpdateSearch(query: string, inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidUpdateSearch\", query, inputView, this.owner);\n    },\n    viewDidSubmitSearch(query: string, inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidSubmitSearch\", query, inputView, this.owner);\n    },\n    viewDidCancelSearch(inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidCancelSearch\", inputView, this.owner);\n    },\n  })\n  override readonly tool!: TraitViewRef<this, Trait, SearchToolView> & ToolController[\"tool\"] & Observes<SearchToolView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    willAttachView(inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerWillAttachToolInputView\", inputView, this.owner);\n    },\n    didDetachView(inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidDetachToolInputView\", inputView, this.owner);\n    },\n  })\n  readonly input!: ViewRef<this, HtmlView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {Feel} from \"@swim/theme\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewInsets} from \"@swim/view\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ToolLayout} from \"./ToolLayout\";\nimport {BarLayout} from \"./BarLayout\";\nimport {ToolView} from \"./ToolView\";\n\n/** @public */\nexport type BarPlacement = \"top\" | \"bottom\" | \"none\";\n\n/** @public */\nexport interface BarViewObserver<V extends BarView = BarView> extends HtmlViewObserver<V> {\n  viewDidSetPlacement?(placement: BarPlacement, view: V): void;\n\n  viewDidSetEffectiveHeight?(effectiveHeight: Length | null, view: V): void;\n\n  viewDidSetBarLayout?(barLayout: BarLayout | null, view: V): void;\n\n  viewDidSetBarHeight?(barHeight: Length | null, view: V): void;\n\n  viewWillAttachTool?(toolView: ToolView, targetView: View | null, view: V): void;\n\n  viewDidDetachTool?(toolView: ToolView, view: V): void;\n\n  viewDidDismissTool?(toolView: ToolView, toolLayout: ToolLayout, view: V): void;\n}\n\n/** @public */\nexport class BarView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initBar();\n  }\n\n  protected initBar(): void {\n    this.setIntrinsic<BarView>({\n      classList: [\"bar\"],\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n        userSelect: \"none\",\n      },\n    });\n    this.modifyMood(Feel.default, [[Feel.primary, 1]]);\n  }\n\n  declare readonly observerType?: Class<BarViewObserver>;\n\n  @Property({\n    valueType: String,\n    value: \"none\",\n    updateFlags: View.NeedsResize | View.NeedsLayout,\n    didSetValue(placement: BarPlacement): void {\n      this.owner.callObservers(\"viewDidSetPlacement\", placement, this.owner);\n      this.owner.barHeight.applyEdgeInsets(this.owner.edgeInsets.value);\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly placement!: Property<this, BarPlacement>;\n\n  @Animator({\n    valueType: BarLayout,\n    value: null,\n    inherits: true,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newLayout: BarLayout | null, oldLayout: BarLayout | null): void {\n      if (newLayout !== null && newLayout.width === null) {\n        this.owner.requireUpdate(View.NeedsResize);\n      }\n      this.owner.callObservers(\"viewDidSetBarLayout\", newLayout, this.owner);\n    },\n    transformState(newLayout: BarLayout | null): BarLayout | null {\n      if (newLayout !== null && newLayout.width === null) {\n        newLayout = this.resized(newLayout);\n      }\n      return newLayout;\n    },\n    resized(newLayout: BarLayout): BarLayout {\n      const oldLayout = this.value;\n      if (oldLayout !== null && oldLayout.width !== null) {\n        newLayout = newLayout.resized(oldLayout.width, oldLayout.left, oldLayout.right, oldLayout.spacing);\n      }\n      return newLayout;\n    },\n  })\n  readonly layout!: Animator<this, BarLayout | null> & {\n    resized(layout: BarLayout): BarLayout,\n  };\n\n  @ThemeConstraintAnimator({\n    valueType: Length,\n    value: null,\n    updateFlags: View.NeedsResize,\n    didSetValue(barHeight: Length | null): void {\n      this.owner.callObservers(\"viewDidSetBarHeight\", barHeight, this.owner);\n      this.applyEdgeInsets(this.owner.edgeInsets.value);\n    },\n    applyEdgeInsets(edgeInsets: ViewInsets): void {\n      let height = this.value;\n      if (height !== null) {\n        const placement = this.owner.placement.value;\n        if (placement === \"top\") {\n          height = height.plus(edgeInsets.insetTop);\n        } else if (placement === \"bottom\") {\n          height = height.plus(edgeInsets.insetBottom);\n        }\n        this.owner.style.height.setIntrinsic(height);\n      }\n    },\n  })\n  readonly barHeight!: ThemeConstraintAnimator<this, Length | null> & {\n    /** @internal */\n    applyEdgeInsets(edgeInsets: ViewInsets): void,\n  };\n\n  @Property({valueType: Length, value: Length.zero(), updateFlags: View.NeedsResize})\n  readonly toolSpacing!: Property<this, Length | null>;\n\n  @Property({\n    extends: true,\n    didSetValue(edgeInsets: ViewInsets): void {\n      this.owner.barHeight.applyEdgeInsets(edgeInsets);\n    },\n    getOutletValue(outlet: Property<unknown, ViewInsets>): ViewInsets {\n      let edgeInsets = this.value;\n      let insetTop = edgeInsets.insetTop;\n      const insetRight = edgeInsets.insetRight;\n      let insetBottom = edgeInsets.insetBottom;\n      const insetLeft = edgeInsets.insetLeft;\n      const placement = this.owner.placement.value;\n      if (placement === \"top\" && insetBottom !== 0) {\n        insetBottom = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      } else if (placement === \"bottom\" && insetTop !== 0) {\n        insetTop = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      }\n      return edgeInsets;\n    },\n  })\n  override get edgeInsets(): Property<this, ViewInsets> & HtmlView[\"edgeInsets\"] {\n    return Property.getter();\n  }\n\n  getTool<F extends Class<ToolView>>(key: string, toolViewClass: F): InstanceType<F> | null;\n  getTool(key: string): ToolView | null;\n  getTool(key: string, toolViewClass?: Class<ToolView>): ToolView | null {\n    if (toolViewClass === void 0) {\n      toolViewClass = ToolView;\n    }\n    const toolView = this.getChild(key);\n    return toolView instanceof toolViewClass ? toolView : null;\n  }\n\n  getOrCreateTool<F extends Class<Instance<F, ToolView>> & Creatable<Instance<F, ToolView>>>(key: string, toolViewClass: F): InstanceType<F> {\n    let toolView = this.getChild(key, toolViewClass);\n    if (toolView === null) {\n      toolView = toolViewClass.create();\n      this.setChild(key, toolView);\n    }\n    return toolView!;\n  }\n\n  setTool(key: string, toolView: ToolView | null): void {\n    this.setChild(key, toolView);\n  }\n\n  @ViewSet({\n    viewType: ToolView,\n    binds: true,\n    initView(toolView: ToolView): void {\n      toolView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        width: 0,\n        height: this.owner.barHeight.value,\n      });\n    },\n    willAttachView(toolView: ToolView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachTool\", toolView, target, this.owner);\n    },\n    didDetachView(toolView: ToolView): void {\n      this.owner.callObservers(\"viewDidDetachTool\", toolView, this.owner);\n    },\n  })\n  readonly tools!: ViewSet<this, ToolView>;\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizeBar();\n  }\n\n  protected resizeBar(): void {\n    const placement = this.placement.value;\n    if (placement === \"top\") {\n      this.resizeBarTop();\n    } else if (placement === \"bottom\") {\n      this.resizeBarBottom();\n    } else if (placement === \"none\") {\n      this.resizeBarNone();\n    }\n  }\n\n  protected resizeBarTop(): void {\n    this.classList.remove(\"bar-bottom\");\n    this.classList.add(\"bar-top\");\n\n    const edgeInsets = this.edgeInsets.value;\n    let height = this.barHeight.value;\n    if (height !== null) {\n      height = height.plus(edgeInsets.insetTop);\n      this.style.height.setIntrinsic(height);\n    }\n\n    const oldLayout = !this.layout.derived ? this.layout.state : null;\n    if (oldLayout !== void 0 && oldLayout !== null) {\n      const barWidth = this.style.width.pxState();\n      const insetLeft = edgeInsets.insetLeft;\n      const insetRight = edgeInsets.insetRight;\n      const spacing = this.toolSpacing.getValue().pxValue(barWidth);\n      const newLayout = oldLayout.resized(barWidth, insetLeft, insetRight, spacing);\n      this.layout.set(newLayout);\n    }\n  }\n\n  protected resizeBarBottom(): void {\n    this.classList.remove(\"bar-top\");\n    this.classList.add(\"bar-bottom\");\n\n    const edgeInsets = this.edgeInsets.value;\n    let height = this.barHeight.value;\n    if (height !== null) {\n      height = height.plus(edgeInsets.insetBottom);\n      this.style.height.setIntrinsic(height);\n    }\n\n    const oldLayout = !this.layout.derived ? this.layout.state : null;\n    if (oldLayout !== void 0 && oldLayout !== null) {\n      const barWidth = this.style.width.pxState();\n      const insetLeft = edgeInsets.insetLeft;\n      const insetRight = edgeInsets.insetRight;\n      const spacing = this.toolSpacing.getValue().pxValue(barWidth);\n      const newLayout = oldLayout.resized(barWidth, insetLeft, insetRight, spacing);\n      this.layout.set(newLayout);\n    }\n  }\n\n  protected resizeBarNone(): void {\n    this.classList.remove(\"bar-top\");\n    this.classList.remove(\"bar-bottom\");\n\n    const oldLayout = !this.layout.derived ? this.layout.state : null;\n    if (oldLayout !== void 0 && oldLayout !== null) {\n      const barWidth = this.style.width.pxState();\n      const spacing = this.toolSpacing.getValue().pxValue(barWidth);\n      const newLayout = oldLayout.resized(barWidth, 0, 0, spacing);\n      this.layout.set(newLayout);\n    }\n  }\n\n  protected override displayChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    if ((displayFlags & View.NeedsLayout) !== 0) {\n      this.layoutChildren(displayFlags, displayChild);\n    } else {\n      super.displayChildren(displayFlags, displayChild);\n    }\n  }\n\n  protected layoutChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    const placement = this.placement.value;\n    const edgeInsets = this.edgeInsets.value;\n    const toolTop = placement === \"top\" ? Length.px(edgeInsets.insetTop) : null;\n    const toolBottom = placement === \"bottom\" ? Length.px(edgeInsets.insetBottom) : null;\n    const toolHeight = this.barHeight.value;\n    const layout = this.layout.value;\n    type self = this;\n    function layoutChild(this: self, child: View, displayFlags: ViewFlags): void {\n      if (child instanceof ToolView) {\n        const key = child.key;\n        const tool = layout !== null && key !== void 0 ? layout.getTool(key) : null;\n        if (tool !== null) {\n          child.xAlign.setIntrinsic(tool.align);\n          child.style.setIntrinsic({\n            display: !tool.presence.dismissed ? \"flex\" : \"none\",\n            left: tool.left,\n            top: toolTop,\n            bottom: toolBottom,\n            width: tool.width !== null && tool.width.value !== 0 ? tool.width : null,\n            height: toolHeight,\n            opacity: tool.presence.phase !== 1 ? tool.presence.phase : void 0,\n          });\n          child.style.pointerEvents.setState(tool.presence.dismissing ? \"none\" : void 0, Affinity.Transient);\n          if (tool.presence.dismissed) {\n            this.callObservers(\"viewDidDismissTool\", child, tool, this);\n          }\n        } else {\n          child.style.setIntrinsic({\n            display: \"none\",\n            left: null,\n            top: null,\n            bottom: null,\n            width: null,\n            height: null,\n            opacity: void 0,\n          });\n          child.style.pointerEvents.setState(void 0, Affinity.Transient);\n        }\n      }\n      displayChild.call(this, child, displayFlags);\n    }\n    super.displayChildren(displayFlags, layoutChild);\n  }\n\n  protected override didLayout(): void {\n    this.layoutTools();\n    super.didLayout();\n  }\n\n  protected layoutTools(): void {\n    const layout = this.layout.value;\n    const tools = layout !== null ? layout.tools : null;\n    const toolCount = tools !== null ? tools.length : 0;\n    for (let i = 0; i < toolCount; i += 1) {\n      const tool = tools![i]!;\n      const toolView = this.getChild(tool.key);\n      if (toolView instanceof ToolView) {\n        if (tool.overlap !== void 0) {\n          const overlapView = this.getChild(tool.overlap);\n          if (overlapView instanceof ToolView) {\n            const toolX = toolView.node.offsetLeft;\n            const overlapX = toolView.node.offsetLeft;\n            let overlapWidth = overlapView.effectiveWidth.value;\n            if (overlapWidth !== null) {\n              overlapWidth = overlapWidth.plus(tool.overpad);\n            }\n            if (toolX <= overlapX) {\n              toolView.style.setIntrinsic({\n                paddingLeft: null,\n                paddingRight: overlapWidth,\n              });\n            } else {\n              toolView.style.setIntrinsic({\n                paddingLeft: overlapWidth,\n                paddingRight: null,\n              });\n            }\n          } else {\n            toolView.style.setIntrinsic({\n              paddingLeft: null,\n              paddingRight: null,\n            });\n          }\n        } else {\n          toolView.style.setIntrinsic({\n            paddingLeft: null,\n            paddingRight: null,\n          });\n        }\n      }\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {ToolLayout} from \"./ToolLayout\";\nimport {BarLayout} from \"./BarLayout\";\nimport type {ToolView} from \"./ToolView\";\nimport {TitleToolView} from \"./TitleToolView\";\nimport {ToolController} from \"./ToolController\";\nimport type {TitleToolController} from \"./TitleToolController\";\nimport type {ButtonToolController} from \"./ButtonToolController\";\nimport type {SearchToolController} from \"./SearchToolController\";\nimport {BarView} from \"./BarView\";\n\n/** @public */\nexport interface BarControllerObserver<C extends BarController = BarController> extends ControllerObserver<C> {\n  controllerWillAttachBarView?(barView: BarView, controller: C): void;\n\n  controllerDidDetachBarView?(barView: BarView, controller: C): void;\n\n  controllerDidSetBarLayout?(barLayout: BarLayout | null, controller: C): void;\n\n  controllerWillAttachTool?(toolController: ToolController, controller: C): void;\n\n  controllerDidDetachTool?(toolController: ToolController, controller: C): void;\n\n  controllerWillAttachToolView?(toolView: ToolView, toolController: ToolController, controller: C): void;\n\n  controllerDidDetachToolView?(toolView: ToolView, toolController: ToolController, controller: C): void;\n\n  controllerDidSetToolLayout?(toolLayout: ToolLayout | null, toolController: ToolController, controller: C): void;\n\n  controllerWillAttachToolContentView?(toolContentView: HtmlView, toolController: ToolController, controller: C): void;\n\n  controllerDidDetachToolContentView?(toolContentView: HtmlView, toolController: ToolController, controller: C): void;\n\n  controllerDidSetToolIcon?(toolIcon: Graphics | null, toolController: ToolController, controller: C): void;\n\n  controllerDidUpdateSearchTool?(query: string, inputView: HtmlView, toolController: ToolController, controller: C): void;\n\n  controllerDidSubmitSearchTool?(query: string, inputView: HtmlView, toolController: ToolController, controller: C): void;\n\n  controllerDidCancelSearchTool?(inputView: HtmlView, toolController: ToolController, controller: C): void;\n\n  controllerDidPressToolView?(input: PositionGestureInput, event: Event | null, toolController: ToolController, controller: C): void;\n\n  controllerDidLongPressToolView?(input: PositionGestureInput, toolController: ToolController, controller: C): void;\n}\n\n/** @public */\nexport class BarController extends Controller {\n  declare readonly observerType?: Class<BarControllerObserver>;\n\n  @TraitViewRef({\n    viewType: BarView,\n    observesView: true,\n    initView(barView: BarView): void {\n      const toolControllers = this.owner.tools.controllers;\n      for (const controllerId in toolControllers) {\n        const toolController = toolControllers[controllerId]!;\n        const toolView = toolController.tool.view;\n        if (toolView !== null && toolView.parent === null) {\n          toolController.tool.insertView(barView);\n        }\n      }\n    },\n    willAttachView(barView: BarView): void {\n      this.owner.callObservers(\"controllerWillAttachBarView\", barView, this.owner);\n    },\n    didAttachView(barView: BarView): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachView(barView: BarView): void {\n      this.owner.callObservers(\"controllerDidDetachBarView\", barView, this.owner);\n    },\n    viewDidSetBarLayout(barLayout: BarLayout | null): void {\n      this.owner.callObservers(\"controllerDidSetBarLayout\", barLayout, this.owner);\n    },\n    viewDidDismissTool(toolView: ToolView, toolLayout: ToolLayout, barView: BarView): void {\n      toolView.remove();\n    },\n  })\n  readonly bar!: TraitViewRef<this, Trait, BarView> & Observes<BarView>;\n\n  protected createLayout(): BarLayout | null {\n    const tools = new Array<ToolLayout>();\n    const toolControllers = this.tools.controllers;\n    for (const controllerId in toolControllers) {\n      const toolController = toolControllers[controllerId]!;\n      const toolLayout = toolController.layout.value;\n      if (toolLayout !== null) {\n        tools.push(toolLayout);\n      }\n    }\n    return BarLayout.create(tools);\n  }\n\n  updateLayout(): void {\n    const barView = this.bar.view;\n    if (barView === null) {\n      return;\n    }\n    const barLayout = this.createLayout();\n    if (barLayout === null) {\n      return;\n    }\n    const timing = barView.getLookOr(Look.timing, Mood.navigating, false);\n    barView.layout.set(barLayout, timing);\n    // Immediately run resize pass to prevent layout flicker.\n    barView.requireUpdate(View.NeedsResize, true);\n  }\n\n  getTool<F extends Class<ToolController>>(key: string, toolControllerClass: F): InstanceType<F> | null;\n  getTool(key: string): ToolController | null;\n  getTool(key: string, toolControllerClass?: Class<ToolController>): ToolController | null {\n    if (toolControllerClass === void 0) {\n      toolControllerClass = ToolController;\n    }\n    const toolController = this.getChild(key);\n    return toolController instanceof toolControllerClass ? toolController : null;\n  }\n\n  getOrCreateTool<F extends Class<Instance<F, ToolController>> & Creatable<Instance<F, ToolController>>>(key: string, toolControllerClass: F): InstanceType<F> {\n    let toolController = this.getChild(key, toolControllerClass);\n    if (toolController === null) {\n      toolController = toolControllerClass.create();\n      this.setChild(key, toolController);\n    }\n    return toolController!;\n  }\n\n  setTool(key: string, toolController: ToolController | null): void {\n    this.setChild(key, toolController);\n  }\n\n  getToolView<F extends Class<ToolView>>(key: string, toolViewClass: F): InstanceType<F> | null;\n  getToolView(key: string): ToolView | null;\n  getToolView(key: string, toolViewClass?: Class<ToolView>): ToolView | null {\n    const barView = this.bar.view;\n    return barView !== null ? barView.getTool(key, toolViewClass!) : null;\n  }\n\n  getOrCreateToolView<F extends Class<Instance<F, ToolView>> & Creatable<Instance<F, ToolView>>>(key: string, toolViewClass: F): InstanceType<F> {\n    let barView = this.bar.view;\n    if (barView === null) {\n      barView = this.bar.createView();\n      if (barView === null) {\n        throw new Error(\"no bar view\");\n      }\n      this.bar.setView(barView);\n    }\n    return barView.getOrCreateTool(key, toolViewClass);\n  }\n\n  setToolView(key: string, toolView: ToolView | null): void {\n    let barView = this.bar.view;\n    if (barView === null) {\n      barView = this.bar.createView();\n      if (barView === null) {\n        throw new Error(\"no bar view\");\n      }\n      this.bar.setView(barView);\n    }\n    barView.setTool(key, toolView);\n  }\n\n  @TraitViewControllerSet({\n    controllerType: ToolController,\n    binds: true,\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    willAttachController(toolController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachTool\", toolController, this.owner);\n    },\n    didAttachController(toolController: ToolController): void {\n      const toolView = toolController.tool.view;\n      if (toolView !== null) {\n        this.attachToolView(toolView, toolController);\n      }\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    willDetachController(toolController: ToolController): void {\n      const toolView = toolController.tool.view;\n      if (toolView !== null) {\n        this.detachToolView(toolView, toolController);\n      }\n    },\n    didDetachController(toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n      this.owner.callObservers(\"controllerDidDetachTool\", toolController, this.owner);\n    },\n    controllerWillAttachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachToolView\", toolView, toolController, this.owner);\n      this.attachToolView(toolView, toolController);\n    },\n    controllerDidDetachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.detachToolView(toolView, toolController);\n      this.owner.callObservers(\"controllerDidDetachToolView\", toolView, toolController, this.owner);\n    },\n    attachToolView(toolView: ToolView, toolController: ToolController): void {\n      if (toolView instanceof TitleToolView) {\n        const toolContentView = toolView.content.view;\n        if (toolContentView !== null) {\n          this.attachToolContentView(toolContentView, toolController);\n        }\n      }\n    },\n    detachToolView(toolView: ToolView, toolController: ToolController): void {\n      if (toolView instanceof TitleToolView) {\n        const toolContentView = toolView.content.view;\n        if (toolContentView !== null) {\n          this.detachToolContentView(toolContentView, toolController);\n        }\n      }\n      toolView.remove();\n    },\n    controllerDidSetToolLayout(toolLayout: ToolLayout | null, toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n      this.owner.callObservers(\"controllerDidSetToolLayout\", toolLayout, toolController, this.owner);\n    },\n    controllerWillAttachToolContentView(contentView: HtmlView, toolController: ToolController): void {\n      this.attachToolContentView(contentView, toolController);\n      this.owner.callObservers(\"controllerWillAttachToolContentView\", contentView, toolController, this.owner);\n    },\n    controllerDidDetachToolContentView(contentView: HtmlView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidDetachToolContentView\", contentView, toolController, this.owner);\n      this.detachToolContentView(contentView, toolController);\n    },\n    attachToolContentView(toolContentView: HtmlView, toolController: ToolController): void {\n      // hook\n    },\n    detachToolContentView(toolContentView: HtmlView, toolController: ToolController): void {\n      // hook\n    },\n    controllerDidSetToolIcon(toolIcon: Graphics | null, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidSetToolIcon\", toolIcon, toolController, this.owner);\n    },\n    controllerDidUpdateSearch(query: string, inputView: HtmlView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidUpdateSearchTool\", query, inputView, toolController, this.owner);\n    },\n    controllerDidSubmitSearch(query: string, inputView: HtmlView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidSubmitSearchTool\", query, inputView, toolController, this.owner);\n    },\n    controllerDidCancelSearch(inputView: HtmlView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidCancelSearchTool\", inputView, toolController, this.owner);\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidPressToolView\", input, event, toolController, this.owner);\n    },\n    controllerDidLongPressToolView(input: PositionGestureInput, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidLongPressToolView\", input, toolController, this.owner);\n    },\n  })\n  readonly tools!: TraitViewControllerSet<this, Trait, ToolView, ToolController> & Observes<ToolController> & Observes<TitleToolController> & Observes<ButtonToolController> & Observes<SearchToolController> & {\n    attachToolView(toolView: ToolView, toolController: ToolController): void;\n    detachToolView(toolView: ToolView, toolController: ToolController): void;\n    attachToolContentView(toolContentView: HtmlView, toolController: ToolController): void;\n    detachToolContentView(toolContentView: HtmlView, toolController: ToolController): void;\n  };\n\n  protected override onAssemble(): void {\n    super.onAssemble();\n    this.updateLayout();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {R2Box} from \"@swim/math\";\nimport type {Color} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {SvgView} from \"@swim/dom\";\nimport {Graphics} from \"@swim/graphics\";\nimport {PathContext} from \"@swim/graphics\";\nimport {PathRenderer} from \"@swim/graphics\";\n\n/** @public */\nexport type TokenViewState = \"collapsed\" | \"expanding\" | \"expanded\" | \"collapsing\";\n\n/** @public */\nexport interface TokenViewObserver<V extends TokenView = TokenView> extends HtmlViewObserver<V> {\n  tokenWillExpand?(view: V): void;\n\n  tokenDidExpand?(view: V): void;\n\n  tokenWillCollapse?(view: V): void;\n\n  tokenDidCollapse?(view: V): void;\n\n  tokenDidPressHead?(view: V): void;\n\n  tokenDidPressBody?(view: V): void;\n\n  tokenDidPressFoot?(view: V): void;\n}\n\n/** @public */\nexport class TokenView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.tokenState = \"expanded\";\n    this.onClickHead = this.onClickHead.bind(this);\n    this.onClickBody = this.onClickBody.bind(this);\n    this.onClickFoot = this.onClickFoot.bind(this);\n    this.initToken();\n  }\n\n  declare readonly observerType?: Class<TokenViewObserver>;\n\n  protected initToken(): void {\n    this.setIntrinsic<TokenView>({\n      classList: [\"token\"],\n      style: {\n        position: \"relative\",\n        height: 32,\n        boxSizing: \"content-box\",\n        userSelect: \"none\",\n      },\n    });\n    this.shape.insertView();\n  }\n\n  protected initShape(shapeView: SvgView): void {\n    shapeView.set({\n      classList: [\"shape\"],\n      style: {\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n      },\n    });\n\n    this.head.insertView(shapeView);\n    this.headIcon.attachView();\n    this.body.insertView(shapeView);\n    this.foot.insertView(shapeView);\n    this.footIcon.attachView();\n  }\n\n  protected initHead(headView: SvgView): void {\n    headView.setIntrinsic({\n      classList: [\"head\"],\n      attributes: {\n        fillRule: \"evenodd\",\n        cursor: \"pointer\",\n        pointerEvents: \"bounding-box\",\n      },\n    });\n  }\n\n  protected initHeadIcon(headIconView: SvgView): void {\n    headIconView.setIntrinsic({\n      classList: [\"head-icon\"],\n      attributes: {\n        pointerEvents: \"none\",\n      },\n    });\n  }\n\n  protected initBody(bodyView: SvgView): void {\n    bodyView.setIntrinsic({\n      classList: [\"body\"],\n      attributes: {\n        cursor: \"pointer\",\n        pointerEvents: \"fill\",\n      },\n    });\n  }\n\n  protected initFoot(footView: SvgView): void {\n    footView.setIntrinsic({\n      classList: [\"foot\"],\n      attributes: {\n        fillRule: \"evenodd\",\n        cursor: \"pointer\",\n        pointerEvents: \"bounding-box\",\n      },\n    });\n  }\n\n  protected initFootIcon(footIconView: SvgView): void {\n    footIconView.setIntrinsic({\n      classList: [\"foot-icon\"],\n      attributes: {\n        pointerEvents: \"none\",\n      },\n    });\n  }\n\n  protected initLabelContainer(labelContainer: HtmlView): void {\n    labelContainer.setIntrinsic({\n      classList: [\"label\"],\n      style: {\n        display: \"block\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        overflow: \"hidden\",\n        pointerEvents: \"none\",\n      },\n    });\n  }\n\n  protected initLabel(labelView: HtmlView): void {\n    labelView.style.setIntrinsic({\n      position: \"absolute\",\n      top: 0,\n      bottom: 0,\n      left: 0,\n    });\n  }\n\n  readonly tokenState: TokenViewState;\n\n  get expanded(): boolean {\n    return this.tokenState === \"expanded\" || this.tokenState === \"expanding\";\n  }\n\n  get collapsed(): boolean {\n    return this.tokenState === \"collapsed\" || this.tokenState === \"collapsing\";\n  }\n\n  @Animator({\n    valueType: Number,\n    value: 1,\n    updateFlags: View.NeedsLayout,\n    didTransition(expandedPhase: number): void {\n      const tokenState = this.owner.tokenState;\n      if (tokenState === \"expanding\" && expandedPhase === 1) {\n        this.owner.didExpand();\n      } else if (tokenState === \"collapsing\" && expandedPhase === 0) {\n        this.owner.didCollapse();\n      }\n    },\n  })\n  readonly expandedPhase!: Animator<this, number>;\n\n  @ViewRef({\n    viewType: SvgView,\n    viewKey: true,\n    binds: true,\n    didAttachView(shapeView: SvgView): void {\n      this.owner.initShape(shapeView);\n    },\n  })\n  readonly shape!: ViewRef<this, SvgView>;\n\n  /** @internal */\n  get fillLook(): Look<Color> {\n    return Look.accentColor;\n  }\n\n  @ViewRef({\n    viewType: SvgView.forTag(\"path\"),\n    viewKey: true,\n    observes: true,\n    didAttachView(headView: SvgView): void {\n      this.owner.initHead(headView);\n      this.owner.headGesture.setView(headView);\n    },\n    willDetachView(headView: SvgView): void {\n      this.owner.headGesture.setView(null);\n    },\n    viewDidMount(headView: SvgView): void {\n      headView.addEventListener(\"click\", this.owner.onClickHead);\n    },\n    viewWillUnmount(headView: SvgView): void {\n      headView.removeEventListener(\"click\", this.owner.onClickHead);\n    },\n    viewDidApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean, headView: SvgView): void {\n      headView.attributes.fill.setIntrinsic(theme.getOr(this.owner.fillLook, mood, null), timing);\n      const headIconView = this.owner.headIcon.view;\n      if (headIconView !== null && headIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = theme.getOr(this.owner.fillLook, mood.updated(Feel.embossed, 1), null);\n        headIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n  })\n  readonly head!: ViewRef<this, SvgView> & Observes<SvgView>;\n\n  @PositionGesture({\n    didStartHovering(): void {\n      const headView = this.view!;\n      headView.modifyMood(Feel.default, [[Feel.hovering, 1]]);\n      const timing = headView.getLook(Look.timing);\n      headView.attributes.fill.setIntrinsic(headView.getLookOr(this.owner.fillLook, null), timing);\n      const headIconView = this.owner.headIcon.view;\n      if (headIconView !== null && headIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = headView.getLookOr(this.owner.fillLook, headView.mood.getValue().updated(Feel.embossed, 1), null);\n        headIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n    didStopHovering(): void {\n      const headView = this.view!;\n      headView.modifyMood(Feel.default, [[Feel.hovering, void 0]]);\n      const timing = headView.getLook(Look.timing);\n      headView.attributes.fill.setIntrinsic(headView.getLookOr(this.owner.fillLook, null), timing);\n      const headIconView = this.owner.headIcon.view;\n      if (headIconView !== null && headIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = headView.getLookOr(this.owner.fillLook, headView.mood.getValue().updated(Feel.embossed, 1), null);\n        headIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\") {\n        this.beginHover(input, event);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n  })\n  readonly headGesture!: PositionGesture<this, SvgView>;\n\n  /** @internal */\n  @ViewRef({\n    viewType: SvgView.forTag(\"path\"),\n    viewKey: true,\n    didAttachView(headIconView: SvgView): void {\n      this.owner.initHeadIcon(headIconView);\n    },\n    insertChild(parent: View, child: SvgView, target: View | number | null, key: string | undefined): void {\n      const shapeView = this.owner.shape.view;\n      if (shapeView !== null) {\n        shapeView.insertChild(child, this.owner.body.view, key);\n      }\n    },\n  })\n  readonly headIcon!: ViewRef<this, SvgView>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    init(): void {\n      this.embossed = true;\n    },\n  })\n  readonly icon!: Property<this, Graphics | null> & {\n    embossed: boolean,\n  };\n\n  @ViewRef({\n    viewType: SvgView.forTag(\"path\"),\n    viewKey: true,\n    observes: true,\n    didAttachView(bodyView: SvgView): void {\n      this.owner.initBody(bodyView);\n      this.owner.bodyGesture.setView(bodyView);\n    },\n    willDetachView(bodyView: SvgView): void {\n      this.owner.bodyGesture.setView(null);\n    },\n    viewDidMount(headView: SvgView): void {\n      headView.addEventListener(\"click\", this.owner.onClickBody);\n    },\n    viewWillUnmount(headView: SvgView): void {\n      headView.removeEventListener(\"click\", this.owner.onClickBody);\n    },\n    viewDidApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean, bodyView: SvgView): void {\n      bodyView.attributes.fill.setIntrinsic(theme.getOr(this.owner.fillLook, mood, null), timing);\n      const labelView = this.owner.label.view;\n      if (labelView !== null && labelView.style.color.hasAffinity(Affinity.Intrinsic)) {\n        labelView.style.color.setIntrinsic(theme.getOr(Look.backgroundColor, mood, null), timing);\n      }\n    },\n  })\n  readonly body!: ViewRef<this, SvgView> & Observes<SvgView>;\n\n  @PositionGesture({\n    didStartHovering(): void {\n      const bodyView = this.view!;\n      bodyView.modifyMood(Feel.default, [[Feel.hovering, 1]]);\n      const timing = bodyView.getLook(Look.timing);\n      bodyView.attributes.fill.setIntrinsic(bodyView.getLookOr(this.owner.fillLook, null), timing);\n      const labelView = this.owner.label.view;\n      if (labelView !== null && labelView.style.color.hasAffinity(Affinity.Intrinsic)) {\n        labelView.style.color.setIntrinsic(bodyView.getLookOr(Look.backgroundColor, null), timing);\n      }\n    },\n    didStopHovering(): void {\n      const bodyView = this.view!;\n      bodyView.modifyMood(Feel.default, [[Feel.hovering, void 0]]);\n      const timing = bodyView.getLook(Look.timing);\n      bodyView.attributes.fill.setIntrinsic(bodyView.getLookOr(this.owner.fillLook, null), timing);\n      const labelView = this.owner.label.view;\n      if (labelView !== null && labelView.style.color.hasAffinity(Affinity.Intrinsic)) {\n        labelView.style.color.setIntrinsic(bodyView.getLookOr(Look.backgroundColor, null), timing);\n      }\n    },\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\") {\n        this.beginHover(input, event);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n  })\n  readonly bodyGesture!: PositionGesture<this, SvgView>;\n\n  @ViewRef({\n    viewType: SvgView.forTag(\"path\"),\n    viewKey: true,\n    observes: true,\n    didAttachView(footView: SvgView): void {\n      this.owner.initFoot(footView);\n      this.owner.footGesture.setView(footView);\n    },\n    willDetachView(footView: SvgView): void {\n      this.owner.footGesture.setView(null);\n    },\n    viewDidMount(footView: SvgView): void {\n      footView.addEventListener(\"click\", this.owner.onClickFoot);\n    },\n    viewWillUnmount(footView: SvgView): void {\n      footView.removeEventListener(\"click\", this.owner.onClickFoot);\n    },\n    viewDidApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean, footView: SvgView): void {\n      footView.attributes.fill.setIntrinsic(theme.getOr(this.owner.fillLook, mood, null), timing);\n      const footIconView = this.owner.footIcon.view;\n      if (footIconView !== null && footIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = theme.getOr(this.owner.fillLook, mood.updated(Feel.embossed, 1), null);\n        footIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n  })\n  readonly foot!: ViewRef<this, SvgView> & Observes<SvgView>;\n\n  @PositionGesture({\n    didStartHovering(): void {\n      const footView = this.view!;\n      footView.modifyMood(Feel.default, [[Feel.hovering, 1]]);\n      const timing = footView.getLook(Look.timing);\n      footView.attributes.fill.setIntrinsic(footView.getLookOr(this.owner.fillLook, null), timing);\n      const footIconView = this.owner.footIcon.view;\n      if (footIconView !== null && footIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = footView.getLookOr(this.owner.fillLook, footView.mood.getValue().updated(Feel.embossed, 1), null);\n        footIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n    didStopHovering(): void {\n      const footView = this.view!;\n      footView.modifyMood(Feel.default, [[Feel.hovering, void 0]]);\n      const timing = footView.getLook(Look.timing);\n      footView.attributes.fill.setIntrinsic(footView.getLookOr(this.owner.fillLook, null), timing);\n      const footIconView = this.owner.footIcon.view;\n      if (footIconView !== null && footIconView.attributes.fill.hasAffinity(Affinity.Intrinsic)) {\n        const iconColor = footView.getLookOr(this.owner.fillLook, footView.mood.getValue().updated(Feel.embossed, 1), null);\n        footIconView.attributes.fill.setIntrinsic(iconColor, timing);\n      }\n    },\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\") {\n        this.beginHover(input, event);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.inputType !== \"mouse\" || !this.view!.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n    },\n  })\n  readonly footGesture!: PositionGesture<this, SvgView>;\n\n  /** @internal */\n  @ViewRef({\n    viewType: SvgView.forTag(\"path\"),\n    viewKey: true,\n    didAttachView(footIconView: SvgView): void {\n      this.owner.initFootIcon(footIconView);\n    },\n    insertChild(parent: View, child: SvgView, target: View | number | null, key: string | undefined): void {\n      const shapeView = this.owner.shape.view;\n      if (shapeView !== null) {\n        shapeView.appendChild(child, key);\n      }\n    },\n  })\n  readonly footIcon!: ViewRef<this, SvgView> & Observes<SvgView>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    init(): void {\n      this.embossed = true;\n    },\n  })\n  readonly accessory!: Property<this, Graphics | null> & {\n    embossed: boolean,\n  };\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    didAttachView(labelContainer: HtmlView): void {\n      this.owner.initLabelContainer(labelContainer);\n    },\n  })\n  readonly labelContainer!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    didAttachView(labelView: HtmlView): void {\n      if (labelView.parent === null) {\n        this.owner.labelContainer.insertView();\n        const labelContainer = this.owner.labelContainer.view;\n        if (labelContainer !== null) {\n          labelContainer.appendChild(labelView);\n        }\n      }\n      this.owner.initLabel(labelView);\n    },\n  })\n  readonly label!: ViewRef<this, HtmlView>;\n\n  protected override needsProcess(processFlags: ViewFlags): ViewFlags {\n    if ((processFlags & View.NeedsLayout) !== 0) {\n      processFlags |= View.NeedsAnimate;\n    }\n    return processFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutToken();\n  }\n\n  protected layoutToken(): void {\n    const gap = 2;\n\n    const paddingTop = this.style.paddingTop.getStateOr(Length.zero()).pxValue();\n    const paddingRight = this.style.paddingRight.getStateOr(Length.zero()).pxValue();\n    const paddingBottom = this.style.paddingBottom.getStateOr(Length.zero()).pxValue();\n    const paddingLeft = this.style.paddingLeft.getStateOr(Length.zero()).pxValue();\n    const boxHeight = this.node.clientHeight;\n    const tokenHeight = boxHeight - paddingTop - paddingBottom;\n    const radius = tokenHeight / 2;\n    const pad = Math.sqrt(gap * gap + 2 * radius * gap);\n    const padAngle = Math.asin(pad / (radius + gap));\n    const labelPaddingLeft = radius / 2;\n    const labelPaddingRight = radius;\n    const accessoryPaddingRight = radius / 2;\n    const expandedPhase = this.expandedPhase.value;\n\n    const icon = this.icon.value;\n    const accessoryIcon = this.accessory.value;\n\n    let labelWidth = 0;\n    let bodyWidth = 0;\n    const labelView = this.label.view;\n    if (labelView !== null) {\n      labelWidth = labelView.node.clientWidth;\n      bodyWidth += labelPaddingLeft + labelWidth + labelPaddingRight;\n    }\n\n    let accessoryWidth = 0;\n    let footWidth = 0;\n    if (accessoryIcon !== null) {\n      accessoryWidth = 2 * radius;\n      footWidth += accessoryWidth + accessoryPaddingRight;\n    }\n\n    let tokenWidth = tokenHeight;\n    if (expandedPhase !== 0 && bodyWidth !== 0) {\n      tokenWidth += gap + expandedPhase * bodyWidth;\n    }\n    const bodyRight = tokenWidth;\n    if (expandedPhase !== 0 && footWidth !== 0) {\n      tokenWidth += gap + expandedPhase * footWidth;\n    }\n\n    const width = tokenWidth + paddingLeft + paddingRight;\n    const height = boxHeight;\n\n    this.style.width.setIntrinsic(tokenWidth);\n\n    const labelContainer = this.labelContainer.view;\n    if (labelContainer !== null) {\n      labelContainer.style.setIntrinsic({\n        display: expandedPhase !== 0 ? \"block\" : \"none\",\n        left: paddingLeft + tokenHeight + gap + labelPaddingLeft,\n        top: paddingTop,\n        width: expandedPhase * labelWidth,\n        height: tokenHeight\n      });\n    }\n\n    const shapeView = this.shape.view;\n    if (shapeView !== null) {\n      shapeView.attributes.setIntrinsic({\n        width, height,\n        viewBox: \"0 0 \" + width + \" \" + height,\n      });\n    }\n\n    const headView = this.head.view;\n    if (headView !== null) {\n      const context = new PathContext();\n      context.setPrecision(3);\n      context.arc(paddingLeft + radius, paddingTop + radius, radius, -(Math.PI / 2), 3 * (Math.PI / 2));\n      context.closePath();\n      if (icon !== null && !this.icon.embossed) {\n        const renderer = new PathRenderer(context);\n        const frame = new R2Box(paddingLeft, paddingTop, paddingLeft + tokenHeight, paddingTop + tokenHeight);\n        icon.render(renderer, frame);\n        this.headIcon.removeView();\n      }\n      headView.attributes.d.setIntrinsic(context.toString());\n    }\n    const headIconView = this.headIcon.view;\n    if (headIconView !== null) {\n      if (icon !== null && this.icon.embossed) {\n        const context = new PathContext();\n        context.setPrecision(3);\n        const renderer = new PathRenderer(context);\n        const frame = new R2Box(paddingLeft, paddingTop, paddingLeft + tokenHeight, paddingTop + tokenHeight);\n        icon.render(renderer, frame);\n        headIconView.attributes.d.setIntrinsic(context.toString());\n        this.headIcon.insertView();\n      } else {\n        this.headIcon.removeView();\n      }\n    }\n\n    const bodyView = this.body.view;\n    if (bodyView !== null) {\n      const context = new PathContext();\n      context.setPrecision(3);\n      if (expandedPhase !== 0) {\n        const u = 1 - expandedPhase;\n        context.arc(paddingLeft + radius, paddingTop + radius, radius + gap, -(Math.PI / 2) + padAngle, Math.PI / 2 - padAngle);\n        context.arc(paddingLeft + bodyRight - radius - u * gap, paddingTop + radius, radius + u * gap, Math.PI / 2 - u * padAngle, -(Math.PI / 2) + u * padAngle, true);\n        context.closePath();\n      }\n      bodyView.attributes.d.setIntrinsic(context.toString());\n    }\n\n    const footView = this.foot.view;\n    if (footView !== null && accessoryIcon !== null) {\n      const context = new PathContext();\n      context.setPrecision(3);\n      if (expandedPhase !== 0) {\n        const u = 1 - expandedPhase;\n        context.arc(paddingLeft + bodyRight - radius, paddingTop + radius, radius + gap, -(Math.PI / 2) + padAngle, Math.PI / 2 - padAngle);\n        context.arc(paddingLeft + tokenWidth - radius - u * gap, paddingTop + radius, radius + u * gap, Math.PI / 2 - u * padAngle, -(Math.PI / 2) + u * padAngle, true);\n        context.closePath();\n        if (accessoryIcon !== null && !this.accessory.embossed) {\n          const renderer = new PathRenderer(context);\n          const frame = new R2Box(paddingLeft + bodyRight + gap, paddingTop, paddingLeft + bodyRight + gap + 2 * radius, paddingTop + 2 * radius);\n          accessoryIcon.render(renderer, frame);\n          this.headIcon.removeView();\n        }\n      }\n      footView.attributes.d.setIntrinsic(context.toString());\n    }\n    const footIconView = this.footIcon.view;\n    if (footIconView !== null) {\n      if (accessoryIcon !== null && this.accessory.embossed) {\n        const context = new PathContext();\n        context.setPrecision(3);\n        if (expandedPhase !== 0) {\n          const renderer = new PathRenderer(context);\n          const frame = new R2Box(paddingLeft + bodyRight + gap, paddingTop, paddingLeft + bodyRight + gap + tokenHeight, paddingTop + tokenHeight);\n          accessoryIcon.render(renderer, frame);\n        }\n        footIconView.attributes.d.setIntrinsic(context.toString());\n        this.footIcon.insertView();\n      } else {\n        this.footIcon.removeView();\n      }\n    }\n  }\n\n  expand(timing?: TimingLike | boolean): void {\n    if (this.tokenState !== \"expanded\" || this.expandedPhase.value !== 1) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      if (this.tokenState !== \"expanding\") {\n        this.willExpand();\n        this.onExpand();\n      }\n      if (timing !== false) {\n        if (this.expandedPhase.value !== 1) {\n          this.expandedPhase.setIntrinsic(1, timing);\n        } else {\n          setTimeout(this.didExpand.bind(this));\n        }\n      } else {\n        this.expandedPhase.setIntrinsic(1);\n        this.didExpand();\n      }\n    }\n  }\n\n  protected willExpand(): void {\n    (this as Mutable<this>).tokenState = \"expanding\";\n    const labelContainer = this.labelContainer.view;\n    if (labelContainer !== null) {\n      labelContainer.style.display.setIntrinsic(\"block\");\n    }\n    this.callObservers(\"tokenWillExpand\", this);\n  }\n\n  protected onExpand(): void {\n    // hook\n  }\n\n  protected didExpand(): void {\n    (this as Mutable<this>).tokenState = \"expanded\";\n    this.requireUpdate(View.NeedsLayout);\n    this.callObservers(\"tokenDidExpand\", this);\n  }\n\n  collapse(timing?: TimingLike | boolean): void {\n    if (this.tokenState !== \"collapsed\" || this.expandedPhase.value !== 0) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      if (this.tokenState !== \"collapsing\") {\n        this.willCollapse();\n        this.onCollapse();\n      }\n      if (timing !== false) {\n        if (this.expandedPhase.value !== 0) {\n          this.expandedPhase.setIntrinsic(0, timing);\n        } else {\n          setTimeout(this.didCollapse.bind(this));\n        }\n      } else {\n        this.expandedPhase.setIntrinsic(0);\n        this.didCollapse();\n      }\n    }\n  }\n\n  protected willCollapse(): void {\n    (this as Mutable<this>).tokenState = \"collapsing\";\n    this.callObservers(\"tokenWillCollapse\", this);\n  }\n\n  protected onCollapse(): void {\n    const labelView = this.label.view;\n    if (labelView !== null) {\n      labelView.node.blur();\n    }\n  }\n\n  protected didCollapse(): void {\n    (this as Mutable<this>).tokenState = \"collapsed\";\n    this.requireUpdate(View.NeedsLayout);\n    this.callObservers(\"tokenDidCollapse\", this);\n  }\n\n  toggle(timing?: TimingLike | boolean): void {\n    const tokenState = this.tokenState;\n    if (tokenState === \"collapsed\" || tokenState === \"collapsing\") {\n      this.expand(timing);\n    } else if (tokenState === \"expanded\" || tokenState === \"expanding\") {\n      this.collapse(timing);\n    }\n  }\n\n  protected onClickHead(event: MouseEvent): void {\n    this.toggle();\n    const labelView = this.label.view;\n    if (labelView !== null && this.expanded) {\n      labelView.node.focus();\n    }\n    this.didPressHead();\n  }\n\n  protected didPressHead(): void {\n    this.callObservers(\"tokenDidPressHead\", this);\n  }\n\n  protected onClickBody(event: MouseEvent): void {\n    this.didPressBody();\n  }\n\n  protected didPressBody(): void {\n    this.callObservers(\"tokenDidPressBody\", this);\n  }\n\n  protected onClickFoot(event: MouseEvent): void {\n    this.didPressFoot();\n  }\n\n  protected didPressFoot(): void {\n    this.callObservers(\"tokenDidPressFoot\", this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Color} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ViewRef} from \"@swim/view\";\nimport type {StyleSheet} from \"@swim/dom\";\nimport {StyleRule} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {StyleView} from \"@swim/dom\";\nimport type {TokenViewObserver} from \"./TokenView\";\nimport {TokenView} from \"./TokenView\";\n\n/** @public */\nexport interface InputTokenViewObserver<V extends InputTokenView = InputTokenView> extends TokenViewObserver<V> {\n  tokenDidUpdateInput?(inputView: HtmlView, view: V): void;\n\n  tokenDidChangeInput?(inputView: HtmlView, view: V): void;\n\n  tokenDidAcceptInput?(inputView: HtmlView, view: V): void;\n}\n\n/** @public */\nexport class InputTokenView extends TokenView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.onInputUpdate = this.onInputUpdate.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n    this.onInputKey = this.onInputKey.bind(this);\n  }\n\n  declare readonly observerType?: Class<InputTokenViewObserver>;\n\n  protected override initToken(): void {\n    super.initToken();\n    this.classList.add(\"input-token\");\n    this.label.attachView();\n  }\n\n  protected override initLabel(labelView: HtmlView): void {\n    super.initLabel(labelView);\n    labelView.style.setIntrinsic({\n      padding: 0,\n      borderStyle: \"none\",\n      boxSizing: \"border-box\",\n      backgroundColor: Color.transparent(),\n      appearance: \"none\",\n      outlineStyle: \"none\",\n      pointerEvents: \"auto\",\n    });\n  }\n\n  @ViewRef({\n    viewType: StyleView,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n  })\n  readonly stylesheet!: ViewRef<this, StyleView>;\n\n  @StyleRule({\n    inherits: true,\n    get parent(): StyleSheet | null {\n      const styleView = this.owner.stylesheet.view;\n      return styleView !== null ? styleView.sheet : null;\n    },\n    selector: \"::placeholder\",\n  })\n  readonly placeholderRule!: StyleRule<this>;\n\n  @ViewRef({\n    viewType: HtmlView.forTag(\"input\"),\n    observes: true,\n    didAttachView(labelView: HtmlView): void {\n      if (labelView.parent === null) {\n        this.owner.labelContainer.insertView();\n        const labelContainer = this.owner.labelContainer.view;\n        if (labelContainer !== null) {\n          labelContainer.appendChild(labelView);\n        }\n      }\n      this.owner.initLabel(labelView);\n    },\n    viewDidMount(labelView: HtmlView): void {\n      labelView.addEventListener(\"input\", this.owner.onInputUpdate as EventListener);\n      labelView.addEventListener(\"change\", this.owner.onInputChange);\n      labelView.addEventListener(\"keydown\", this.owner.onInputKey);\n    },\n    viewWillUnmount(labelView: HtmlView): void {\n      labelView.removeEventListener(\"input\", this.owner.onInputUpdate as EventListener);\n      labelView.removeEventListener(\"change\", this.owner.onInputChange);\n      labelView.removeEventListener(\"keydown\", this.owner.onInputKey);\n    },\n  })\n  override readonly label!: ViewRef<this, HtmlView> & Observes<HtmlView>;\n\n  /** @internal */\n  get placeholderLook(): Look<Color> {\n    return Look.placeholderColor;\n  }\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    this.placeholderRule.style.color.setIntrinsic(theme.getOr(this.placeholderLook, mood, null), timing);\n\n    const labelView = this.label.view;\n    if (labelView !== null) {\n      labelView.style.font.setIntrinsic(theme.getOr(Look.font, mood, null), false);\n    }\n  }\n\n  protected onInputUpdate(event: InputEvent): void {\n    const inputView = this.label.view;\n    if (inputView !== null) {\n      this.didUpdateInput(inputView);\n    }\n  }\n\n  protected didUpdateInput(inputView: HtmlView): void {\n    this.callObservers(\"tokenDidUpdateInput\", inputView, this);\n  }\n\n  protected onInputChange(event: Event): void {\n    const inputView = this.label.view;\n    if (inputView !== null) {\n      this.didChangeInput(inputView);\n    }\n  }\n\n  protected didChangeInput(inputView: HtmlView): void {\n    this.callObservers(\"tokenDidChangeInput\", inputView, this);\n  }\n\n  protected onInputKey(event: KeyboardEvent): void {\n    const inputView = this.label.view;\n    if (inputView !== null && event.key === \"Enter\") {\n      this.didAcceptInput(inputView);\n    }\n  }\n\n  protected didAcceptInput(inputView: HtmlView): void {\n    this.callObservers(\"tokenDidAcceptInput\", inputView, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Equals} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {LengthLike} from \"@swim/math\";\nimport {Length} from \"@swim/math\";\nimport type {ColorOrLookLike} from \"@swim/theme\";\nimport type {ColorOrLook} from \"@swim/theme\";\nimport {ColorLook} from \"@swim/theme\";\n\n/** @public */\nexport type ColLayoutLike = ColLayout | ColLayoutInit;\n\n/** @public */\nexport interface ColLayoutInit {\n  key?: string;\n  grow?: number;\n  shrink?: number;\n  basis?: LengthLike;\n  optional?: boolean;\n  persistent?: boolean;\n  textColor?: ColorOrLookLike | null;\n  width?: LengthLike | null;\n  left?: LengthLike | null;\n  right?: LengthLike | null;\n  hidden?: boolean;\n}\n\n/** @public */\nexport class ColLayout implements Equals, Equivalent, Debug {\n  constructor(key: string, grow: number, shrink: number, basis: Length,\n              optional: boolean, persistent: boolean, textColor: ColorOrLook | null,\n              width: Length | null, left: Length | null, right: Length | null, hidden: boolean) {\n    this.key = key;\n    this.grow = grow;\n    this.shrink = shrink;\n    this.basis = basis;\n    this.optional = optional;\n    this.persistent = persistent;\n    this.textColor = textColor;\n    this.width = width;\n    this.left = left;\n    this.right = right;\n    this.hidden = hidden;\n  }\n\n  likeType?(like: ColLayoutInit): void;\n\n  readonly key: string;\n\n  withKey(key: string): ColLayout {\n    return this.copy(key, this.grow, this.shrink, this.basis, this.optional, this.persistent,\n                     this.textColor, this.width, this.left, this.right, this.hidden);\n  }\n\n  readonly grow: number;\n\n  readonly shrink: number;\n\n  readonly basis: Length;\n\n  withFlex(grow: number, shrink: number, basis?: LengthLike): ColLayout {\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = this.basis;\n    }\n    return this.copy(this.key, grow, shrink, basis, this.optional, this.persistent,\n                     this.textColor, this.width, this.left, this.right, this.hidden);\n  }\n\n  readonly optional: boolean;\n\n  asOptional(optional: boolean): ColLayout {\n    return this.copy(this.key, this.grow, this.shrink, this.basis, optional, this.persistent,\n                     this.textColor, this.width, this.left, this.right, this.hidden);\n  }\n\n  readonly persistent: boolean;\n\n  asPersistent(persistent: boolean): ColLayout {\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.optional, persistent,\n                     this.textColor, this.width, this.left, this.right, this.hidden);\n  }\n\n  readonly textColor: ColorOrLook | null;\n\n  withTextColor(textColor: ColorOrLookLike | null): ColLayout {\n    textColor = ColorLook.fromLike(textColor);\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.optional, this.persistent,\n                     textColor, this.width, this.left, this.right, this.hidden);\n  }\n\n  readonly width: Length | null;\n\n  readonly left: Length | null;\n\n  readonly right: Length | null;\n\n  readonly hidden: boolean;\n\n  asHidden(hidden: boolean): ColLayout {\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.optional, this.persistent,\n                     this.textColor, this.width, this.left, this.right, hidden);\n  }\n\n  resized(width: LengthLike | null, left: LengthLike | null,\n          right: LengthLike | null, hidden?: boolean): ColLayout {\n    if (width !== null) {\n      width = Length.fromLike(width);\n    }\n    if (left !== null) {\n      left = Length.fromLike(left);\n    }\n    if (right !== null) {\n      right = Length.fromLike(right);\n    }\n    if (hidden === void 0) {\n      hidden = this.hidden;\n    }\n    return this.copy(this.key, this.grow, this.shrink, this.basis, this.optional,\n                     this.persistent, this.textColor, width, left, right, hidden);\n  }\n\n  protected copy(key: string, grow: number, shrink: number, basis: Length, optional: boolean,\n                 persistent: boolean, textColor: ColorOrLook | null,\n                 width: Length | null, left: Length | null, right: Length | null,\n                 hidden: boolean): ColLayout {\n    return new ColLayout(key, grow, shrink, basis, optional, persistent,\n                         textColor, width, left, right, hidden);\n  }\n\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ColLayout) {\n      return this.key === that.key && this.grow === that.grow && this.shrink === that.shrink\n          && this.basis.equivalentTo(that.basis, epsilon) && this.optional === that.optional\n          && this.persistent === that.persistent && Equivalent(this.textColor, that.textColor, epsilon);\n    }\n    return false;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ColLayout) {\n      return this.key === that.key && this.grow === that.grow && this.shrink === that.shrink\n          && this.basis.equals(that.basis) && this.optional === that.optional\n          && this.persistent === that.persistent && Equals(this.textColor, that.textColor)\n          && Equals(this.width, that.width) && Equals(this.left, that.left)\n          && Equals(this.right, that.right) && this.hidden === that.hidden;\n    }\n    return false;\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"ColLayout\").write(46/*'.'*/).write(\"create\").write(40/*'('*/)\n                   .debug(this.key).write(\", \").debug(this.grow).write(\", \")\n                   .debug(this.shrink).write(\", \").debug(this.basis).write(41/*')'*/);\n    if (this.optional) {\n      output = output.write(46/*'.'*/).write(\"asOptional\").write(40/*'('*/)\n                     .debug(this.optional).write(41/*')'*/);\n    }\n    if (this.persistent) {\n      output = output.write(46/*'.'*/).write(\"asPersistent\").write(40/*'('*/)\n                     .debug(this.persistent).write(41/*')'*/);\n    }\n    if (this.textColor) {\n      output = output.write(46/*'.'*/).write(\"withTextColor\").write(40/*'('*/)\n                     .debug(this.textColor).write(41/*')'*/);\n    }\n    if (this.width !== null || this.left !== null || this.right !== null || this.hidden) {\n      output = output.write(46/*'.'*/).write(\"resized\").write(40/*'('*/)\n                     .debug(this.width).write(\", \").debug(this.left).write(\", \")\n                     .debug(this.right).write(\", \").debug(this.hidden).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  static create(key: string, grow?: number, shrink?: number, basis?: LengthLike,\n                optional?: boolean, persistent?: boolean, textColor?: ColorOrLookLike | null): ColLayout {\n    if (grow === void 0) {\n      grow = 0;\n    }\n    if (shrink === void 0) {\n      shrink = 1;\n    }\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = Length.zero();\n    }\n    if (optional === void 0) {\n      optional = false;\n    }\n    if (persistent === void 0) {\n      persistent = false;\n    }\n    if (textColor === void 0) {\n      textColor = null;\n    }\n    if (textColor === void 0) {\n      textColor = null;\n    }\n    if (textColor !== null) {\n      textColor = ColorLook.fromLike(textColor);\n    }\n    return new ColLayout(key, grow, shrink, basis, optional, persistent,\n                         textColor, null, null, null, false);\n  }\n\n  static fromLike(value: ColLayoutLike): ColLayout {\n    if (value === void 0 || value === null || value instanceof ColLayout) {\n      return value;\n    } else if (typeof value === \"object\" && value !== null) {\n      return ColLayout.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: ColLayoutInit): ColLayout {\n    let key = init.key;\n    if (key === void 0) {\n      key = \"\";\n    }\n    let grow = init.grow;\n    if (grow === void 0) {\n      grow = 0;\n    }\n    let shrink = init.shrink;\n    if (shrink === void 0) {\n      shrink = 1;\n    }\n    let basis = init.basis;\n    if (basis !== void 0) {\n      basis = Length.fromLike(basis);\n    } else {\n      basis = Length.zero();\n    }\n    let optional = init.optional;\n    if (optional === void 0) {\n      optional = false;\n    }\n    let persistent = init.persistent;\n    if (persistent === void 0) {\n      persistent = false;\n    }\n    let textColor = init.textColor;\n    if (textColor === void 0) {\n      textColor = null;\n    }\n    if (textColor !== null) {\n      textColor = ColorLook.fromLike(textColor);\n    }\n    let width = init.width;\n    if (width !== void 0 && width !== null) {\n      width = Length.fromLike(width);\n    } else {\n      width = null;\n    }\n    let left = init.left;\n    if (left !== void 0 && left !== null) {\n      left = Length.fromLike(left);\n    } else {\n      left = null;\n    }\n    let right = init.right;\n    if (right !== void 0 && right !== null) {\n      right = Length.fromLike(right);\n    } else {\n      right = null;\n    }\n    let hidden = init.hidden;\n    if (hidden === void 0) {\n      hidden = false;\n    }\n    return new ColLayout(key, grow, shrink, basis, optional, persistent,\n                         textColor, width, left, right, hidden);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Equals} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {LengthLike} from \"@swim/math\";\nimport {Length} from \"@swim/math\";\nimport type {ColLayoutLike} from \"./ColLayout\";\nimport {ColLayout} from \"./ColLayout\";\n\n/** @public */\nexport type TableLayoutLike = TableLayout | TableLayoutInit;\n\n/** @public */\nexport interface TableLayoutInit {\n  width?: LengthLike | null;\n  left?: LengthLike | null;\n  right?: LengthLike | null;\n  colSpacing?: LengthLike | null;\n  cols: ColLayoutLike[];\n}\n\n/** @public */\nexport class TableLayout implements Equals, Equivalent, Debug {\n  constructor(width: Length | null, left: Length | null, right: Length | null,\n              colSpacing: Length | null, cols: readonly ColLayout[]) {\n    this.width = width;\n    this.left = left;\n    this.right = right;\n    this.colSpacing = colSpacing;\n    this.cols = cols;\n  }\n\n  likeType?(like: TableLayoutInit): void;\n\n  readonly width: Length | null;\n\n  readonly left: Length | null;\n\n  readonly right: Length | null;\n\n  readonly colSpacing: Length | null;\n\n  readonly cols: readonly ColLayout[];\n\n  getCol(key: string): ColLayout | null {\n    const cols = this.cols;\n    for (let i = 0; i < cols.length; i += 1) {\n      const col = cols[i]!;\n      if (key === col.key) {\n        return col;\n      }\n    }\n    return null;\n  }\n\n  resized(width: LengthLike, left?: LengthLike | null, right?: LengthLike | null,\n          colSpacing?: LengthLike | null): TableLayout {\n    width = Length.fromLike(width);\n    if (left === void 0) {\n      left = this.left;\n    } else if (left !== null) {\n      left = Length.fromLike(left);\n    }\n    if (right === void 0) {\n      right = this.right;\n    } else if (right !== null) {\n      right = Length.fromLike(right);\n    }\n    if (colSpacing === void 0) {\n      colSpacing = this.colSpacing;\n    } else if (colSpacing !== null) {\n      colSpacing = Length.fromLike(colSpacing);\n    }\n    if (Equals(this.width, width) && Equals(this.left, left) &&\n        Equals(this.right, right) && Equals(this.colSpacing, colSpacing)) {\n      return this;\n    } else {\n      const oldCols = this.cols;\n      const colCount = oldCols.length;\n      const newCols = new Array<ColLayout>(colCount);\n      const tableWidth = width.pxValue();\n      const tableLeft = left !== null ? left.pxValue(tableWidth) : 0;\n      const tableRight = right !== null ? right.pxValue(tableWidth) : 0;\n      const spacing = colSpacing !== null ? colSpacing.pxValue(tableWidth) : 0;\n\n      let grow = 0;\n      let shrink = 0;\n      let optional = 0;\n      let basis = tableLeft + tableRight;\n      let x = tableLeft;\n      for (let i = 0; i < colCount; i += 1) {\n        if (i !== 0) {\n          basis += spacing;\n          x += spacing;\n        }\n        const col = oldCols[i]!;\n        const colWidth = col.basis.pxValue(tableWidth);\n        newCols[i] = col.resized(colWidth, x, tableWidth - colWidth - x, false);\n        grow += col.grow;\n        shrink += col.shrink;\n        if (col.optional) {\n          optional += 1;\n        }\n        basis += colWidth;\n        x += colWidth;\n      }\n\n      if (basis > tableWidth && optional > 0) {\n        // Hide optional cols as needed to fit.\n        let i = colCount - 1;\n        while (i >= 0 && optional > 0) {\n          const col = newCols[i]!;\n          const colWidth = col.width!.pxValue();\n          if (col.optional) {\n            newCols[i] = col.resized(0, x, tableWidth - x, true);\n            grow -= col.grow;\n            shrink -= col.shrink;\n            optional -= 1;\n            basis -= colWidth;\n          }\n          x -= colWidth;\n          if (i !== 0) {\n            basis -= spacing;\n            x -= spacing;\n          }\n\n          if (basis <= tableWidth) {\n            // Remaining cols now fit.\n            break;\n          }\n          i -= 1;\n        }\n\n        // Resize trailing non-optional cols.\n        i += 1;\n        while (i < colCount) {\n          const col = newCols[i]!;\n          if (!col.optional) {\n            basis += spacing;\n            x += spacing;\n            const colWidth = col.basis.pxValue(tableWidth);\n            newCols[i] = col.resized(colWidth, x, tableWidth - colWidth - x);\n            x += colWidth;\n          }\n          i += 1;\n        }\n      }\n\n      if (basis < tableWidth && grow > 0) {\n        const delta = tableWidth - basis;\n        let x = tableLeft;\n        let j = 0;\n        for (let i = 0; i < colCount; i += 1) {\n          const col = newCols[i]!;\n          if (!col.hidden) {\n            if (j !== 0) {\n              x += spacing;\n            }\n            const colBasis = col.basis.pxValue(tableWidth);\n            const colWidth = colBasis + delta * (col.grow / grow);\n            newCols[i] = col.resized(colWidth, x, tableWidth - colWidth - x);\n            x += colWidth;\n            j += 1;\n          } else {\n            newCols[i] = col.resized(0, x + spacing, tableWidth - x - spacing);\n          }\n        }\n      } else if (basis > tableWidth && shrink > 0) {\n        const delta = basis - tableWidth;\n        let x = tableLeft;\n        let j = 0;\n        for (let i = 0; i < colCount; i += 1) {\n          const col = newCols[i]!;\n          if (!col.hidden) {\n            if (j !== 0) {\n              x += spacing;\n            }\n            const colBasis = col.basis.pxValue(tableWidth);\n            const colWidth = colBasis - delta * (col.shrink / shrink);\n            newCols[i] = col.resized(colWidth, x, tableWidth - colWidth - x);\n            x += colWidth;\n            j += 1;\n          } else {\n            newCols[i] = col.resized(0, x + spacing, tableWidth - x - spacing);\n          }\n        }\n      }\n\n      return new TableLayout(width, left, right, colSpacing, newCols);\n    }\n  }\n\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TableLayout) {\n      const theseCols = this.cols;\n      const thoseCols = that.cols;\n      const n = theseCols.length;\n      if (n === thoseCols.length) {\n        for (let i = 0; i < n; i += 1) {\n          if (!theseCols[i]!.equivalentTo(thoseCols[i]!, epsilon)) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TableLayout) {\n      return Equals(this.width, that.width) && Equals(this.left, that.left)\n          && Equals(this.right, that.right) && Equals(this.colSpacing, that.colSpacing)\n          && Arrays.equal(this.cols, that.cols);\n    }\n    return false;\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"TableLayout\").write(46/*'.'*/).write(\"of\").write(40/*'('*/);\n    for (let i = 0; i < this.cols.length; i += 1) {\n      if (i !== 0) {\n        output = output.write(\", \");\n      }\n      output = output.debug(this.cols[i]!);\n    }\n    output = output.write(41/*')'*/);\n    if (this.width !== null || this.left !== null || this.right !== null || this.colSpacing !== null) {\n      output = output.write(46/*'.'*/).write(\"resized\").write(40/*'('*/)\n                     .debug(this.width).write(\", \").debug(this.left).write(\", \")\n                     .debug(this.right).write(\", \").debug(this.colSpacing).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  static of(...tableCols: ColLayoutLike[]): TableLayout {\n    const n = tableCols.length;\n    const cols = new Array<ColLayout>(n);\n    for (let i = 0; i < n; i += 1) {\n      cols[i] = ColLayout.fromLike(tableCols[i]!);\n    }\n    return new TableLayout(null, null, null, null, cols);\n  }\n\n  static create(cols: readonly ColLayout[]): TableLayout {\n    return new TableLayout(null, null, null, null, cols);\n  }\n\n  static fromLike(value: TableLayoutLike): TableLayout {\n    if (value === void 0 || value === null || value instanceof TableLayout) {\n      return value;\n    } else if (typeof value === \"object\" && value !== null) {\n      return TableLayout.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: TableLayoutInit): TableLayout {\n    let width = init.width;\n    if (width !== void 0 && width !== null) {\n      width = Length.fromLike(width);\n    } else {\n      width = null;\n    }\n    let left = init.left;\n    if (left !== void 0 && left !== null) {\n      left = Length.fromLike(left);\n    } else {\n      left = null;\n    }\n    let right = init.right;\n    if (right !== void 0 && right !== null) {\n      right = Length.fromLike(right);\n    } else {\n      right = null;\n    }\n    let colSpacing = init.colSpacing;\n    if (colSpacing !== void 0 && colSpacing !== null) {\n      colSpacing = Length.fromLike(colSpacing);\n    } else {\n      colSpacing = null;\n    }\n    const colCount = init.cols.length;\n    const cols = new Array<ColLayout>(colCount);\n    for (let i = 0; i < colCount; i += 1) {\n      cols[i] = ColLayout.fromLike(init.cols[i]!);\n    }\n    return new TableLayout(width, left, right, colSpacing, cols);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {Hyperlink} from \"@swim/controller\";\n\n/** @public */\nexport interface CellViewObserver<V extends CellView = CellView> extends HtmlViewObserver<V> {\n  viewDidPress?(input: PositionGestureInput, event: Event | null, view: V): void;\n\n  viewDidLongPress?(input: PositionGestureInput, view: V): void;\n}\n\n/** @public */\nexport class CellView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initCell();\n  }\n\n  protected initCell(): void {\n    this.setIntrinsic<CellView>({\n      classList: [\"cell\"],\n      style: {\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<CellViewObserver>;\n\n  @Property({\n    valueType: Hyperlink,\n    value: null,\n    didSetValue(hyperlink: Hyperlink | null): void {\n      if (hyperlink !== null) {\n        this.owner.setIntrinsic<CellView>({\n          attributes: {\n            href: hyperlink.href,\n            title: hyperlink.title,\n          },\n          style: {\n            textDecorationLine: \"underline\",\n            cursor: \"pointer\",\n          },\n        });\n      } else {\n        this.owner.setIntrinsic<CellView>({\n          attributes: {\n            href: void 0,\n            title: void 0,\n          },\n          style: {\n            textDecorationLine: void 0,\n            cursor: void 0,\n          },\n        });\n      }\n    },\n  })\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  didPress(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"viewDidPress\", input, event, this);\n    const hyperlink = Property.tryValue(this, \"hyperlink\");\n    if (hyperlink !== null && !input.defaultPrevented) {\n      input.preventDefault();\n      hyperlink.activate(event);\n    }\n  }\n\n  didLongPress(input: PositionGestureInput): void {\n    this.callObservers(\"viewDidLongPress\", input, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {CellViewObserver} from \"./CellView\";\nimport {CellView} from \"./CellView\";\n\n/** @public */\nexport interface TextCellViewObserver<V extends TextCellView = TextCellView> extends CellViewObserver<V> {\n  viewWillAttachContent?(contentView: HtmlView, view: V): void;\n\n  viewDidDetachContent?(contentView: HtmlView, view: V): void;\n}\n\n/** @public */\nexport class TextCellView extends CellView {\n  protected override initCell(): void {\n    super.initCell();\n    this.classList.add(\"cell-text\");\n  }\n\n  declare readonly observerType?: Class<TextCellViewObserver>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    willAttachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachContent\", contentView, this.owner);\n    },\n    didDetachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachContent\", contentView, this.owner);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        let view = this.view;\n        if (view === null) {\n          view = this.createView();\n        }\n        view.text(value);\n        return view;\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return HtmlView.fromTag(\"span\").style.setIntrinsic({\n        alignSelf: \"center\",\n        whiteSpace: \"nowrap\",\n        textOverflow: \"ellipsis\",\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n      });\n    },\n  })\n  readonly content!: ViewRef<this, Like<HtmlView, string | undefined>>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Color} from \"@swim/style\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {Graphics} from \"@swim/graphics\";\nimport {IconLayout} from \"@swim/graphics\";\nimport {Icon} from \"@swim/graphics\";\nimport type {IconView} from \"@swim/graphics\";\nimport {IconGraphicsAnimator} from \"@swim/graphics\";\nimport {SvgIconView} from \"@swim/graphics\";\nimport type {CellViewObserver} from \"./CellView\";\nimport {CellView} from \"./CellView\";\n\n/** @public */\nexport interface IconCellViewObserver<V extends IconCellView = IconCellView> extends CellViewObserver<V> {\n  viewDidSetGraphics?(graphics: Graphics | null, view: V): void;\n}\n\n/** @public */\nexport class IconCellView extends CellView implements IconView {\n  protected override initCell(): void {\n    super.initCell();\n    this.classList.add(\"cell-icon\");\n  }\n\n  declare readonly observerType?: Class<IconCellViewObserver>;\n\n  /** @override */\n  @Animator({valueType: IconLayout, value: null, updateFlags: View.NeedsLayout})\n  readonly iconLayout!: Animator<this, IconLayout | null>;\n\n  /** @override */\n  @ThemeAnimator({\n    valueType: Color,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetState(iconColor: Color | null): void {\n      const timing = this.timing !== null ? this.timing : false;\n      this.owner.graphics.setState(this.owner.graphics.state, timing, Affinity.Reflexive);\n    },\n  })\n  get iconColor(): ThemeAnimator<this, Color | null> {\n    return ThemeAnimator.getter();\n  }\n\n  /** @override */\n  @ThemeAnimator({\n    extends: IconGraphicsAnimator,\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newGraphics: Graphics | null, oldGraphics: Graphics | null): void {\n      this.owner.callObservers(\"viewDidSetGraphics\", newGraphics, this.owner);\n    },\n  })\n  readonly graphics!: ThemeAnimator<this, Graphics | null>;\n\n  @ViewRef({\n    viewType: SvgIconView,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n    initView(svgView: SvgIconView): void {\n      svgView.style.position.set(\"absolute\");\n      svgView.iconLayout.setInherits(true);\n      svgView.iconColor.setInherits(true);\n      svgView.graphics.setInherits(true);\n    },\n  })\n  readonly svg!: ViewRef<this, SvgIconView>;\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    if (!this.graphics.derived) {\n      const oldGraphics = this.graphics.value;\n      if (oldGraphics instanceof Icon) {\n        const newGraphics = oldGraphics.withTheme(theme, mood);\n        this.graphics.setState(newGraphics, oldGraphics.isThemed() ? timing : false, Affinity.Reflexive);\n      }\n    }\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.requireUpdate(View.NeedsLayout);\n  }\n\n  protected override needsDisplay(displayFlags: ViewFlags): ViewFlags {\n    if ((this.flags & View.NeedsLayout) === 0) {\n      displayFlags &= ~View.NeedsLayout;\n    }\n    return displayFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutIcon();\n  }\n\n  protected layoutIcon(): void {\n    const svgView = this.svg.view;\n    if (svgView === null || !svgView.attributes.width.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.height.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.viewBox.hasAffinity(Affinity.Intrinsic)) {\n      return;\n    }\n    const width = this.style.width.pxValue();\n    const height = this.style.height.pxValue();\n    svgView.attributes.setIntrinsic({\n      width, height,\n      viewBox: \"0 0 \" + width + \" \" + height,\n    });\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {DisclosureButton} from \"@swim/button\";\nimport type {CellViewObserver} from \"./CellView\";\nimport {CellView} from \"./CellView\";\n\n/** @public */\nexport interface DisclosureCellViewObserver<V extends DisclosureCellView = DisclosureCellView> extends CellViewObserver<V> {\n}\n\n/** @public */\nexport class DisclosureCellView extends CellView {\n  protected override initCell(): void {\n    super.initCell();\n    this.classList.add(\"cell-disclosure\");\n  }\n\n  declare readonly observerType?: Class<DisclosureCellViewObserver>;\n\n  @ExpansionAnimator({value: null, inherits: true})\n  readonly disclosure!: ExpansionAnimator<this, Expansion | null>;\n\n  @ViewRef({\n    viewType: DisclosureButton,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n  })\n  readonly button!: ViewRef<this, DisclosureButton>;\n\n  override didPress(input: PositionGestureInput, event: Event | null): void {\n    input.preventDefault();\n    const superDisclosure = this.disclosure.inlet;\n    if (superDisclosure instanceof ExpansionAnimator) {\n      superDisclosure.toggle();\n    }\n    super.didPress(input, event);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {Hyperlink} from \"@swim/controller\";\nimport {CellController} from \"./\"; // forward import\n\n/** @public */\nexport interface CellTraitObserver<T extends CellTrait = CellTrait> extends TraitObserver<T> {\n}\n\n/** @public */\nexport class CellTrait extends Trait {\n  declare readonly observerType?: Class<CellTraitObserver>;\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  createCellController(): CellController {\n    return new CellController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {CellTraitObserver} from \"./CellTrait\";\nimport {CellTrait} from \"./CellTrait\";\nimport type {CellController} from \"./CellController\";\nimport {TextCellController} from \"./\"; // forward import\n\n/** @public */\nexport interface TextCellTraitObserver<T extends TextCellTrait = TextCellTrait> extends CellTraitObserver<T> {\n  traitDidSetContent?(content: string | undefined, trait: T): void;\n}\n\n/** @public */\nexport class TextCellTrait extends CellTrait {\n  declare readonly observerType?: Class<TextCellTraitObserver>;\n\n  @Property({\n    valueType: String,\n    didSetValue(content: string | undefined): void {\n      this.owner.callObservers(\"traitDidSetContent\", content, this.owner);\n    },\n  })\n  readonly content!: Property<this, string | undefined>;\n\n  override createCellController(): CellController {\n    return new TextCellController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Graphics} from \"@swim/graphics\";\nimport type {CellTraitObserver} from \"./CellTrait\";\nimport {CellTrait} from \"./CellTrait\";\nimport type {CellController} from \"./CellController\";\nimport {IconCellController} from \"./\"; // forward import\n\n/** @public */\nexport interface IconCellTraitObserver<T extends IconCellTrait = IconCellTrait> extends CellTraitObserver<T> {\n  traitDidSetIcon?(icon: Graphics | null, trait: T): void;\n}\n\n/** @public */\nexport class IconCellTrait extends CellTrait {\n  declare readonly observerType?: Class<IconCellTraitObserver>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(icon: Graphics | null): void {\n      this.owner.callObservers(\"traitDidSetIcon\", icon, this.owner);\n    },\n  })\n  readonly icon!: Property<this, Graphics | null>;\n\n  override createCellController(): CellController {\n    return new IconCellController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {Hyperlink} from \"@swim/controller\";\nimport {CellView} from \"./CellView\";\nimport {CellTrait} from \"./CellTrait\";\n\n/** @public */\nexport interface CellControllerObserver<C extends CellController = CellController> extends ControllerObserver<C> {\n  controllerWillAttachCellTrait?(cellTrait: CellTrait, controller: C): void;\n\n  controllerDidDetachCellTrait?(cellTrait: CellTrait, controller: C): void;\n\n  controllerWillAttachCellView?(cellView: CellView, controller: C): void;\n\n  controllerDidDetachCellView?(cellView: CellView, controller: C): void;\n\n  controllerDidPressCellView?(input: PositionGestureInput, event: Event | null, cellView: CellView, controller: C): void;\n\n  controllerDidLongPressCellView?(input: PositionGestureInput, cellView: CellView, controller: C): void;\n}\n\n/** @public */\nexport class CellController extends Controller {\n  declare readonly observerType?: Class<CellControllerObserver>;\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  @TraitViewRef({\n    traitType: CellTrait,\n    willAttachTrait(cellTrait: CellTrait): void {\n      this.owner.callObservers(\"controllerWillAttachCellTrait\", cellTrait, this.owner);\n    },\n    initTrait(cellTrait: CellTrait): void {\n      this.owner.hyperlink.bindInlet(cellTrait.hyperlink);\n    },\n    deinitTrait(cellTrait: CellTrait): void {\n      this.owner.hyperlink.unbindInlet(cellTrait.hyperlink);\n    },\n    didDetachTrait(cellTrait: CellTrait): void {\n      this.owner.callObservers(\"controllerDidDetachCellTrait\", cellTrait, this.owner);\n    },\n    viewType: CellView,\n    observesView: true,\n    initView(cellView: CellView): void {\n      cellView.hyperlink.bindInlet(this.owner.hyperlink);\n    },\n    willAttachView(cellView: CellView): void {\n      this.owner.callObservers(\"controllerWillAttachCellView\", cellView, this.owner);\n    },\n    deinitView(cellView: CellView): void {\n      cellView.hyperlink.unbindInlet(this.owner.hyperlink);\n    },\n    didDetachView(cellView: CellView): void {\n      this.owner.callObservers(\"controllerDidDetachCellView\", cellView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, cellView: CellView): void {\n      this.owner.callObservers(\"controllerDidPressCellView\", input, event, cellView, this.owner);\n      const hyperlink = Property.tryValue(this.owner, \"hyperlink\");\n      if (hyperlink !== null && !input.defaultPrevented) {\n        input.preventDefault();\n        hyperlink.activate(event);\n      }\n    },\n    viewDidLongPress(input: PositionGestureInput, cellView: CellView): void {\n      this.owner.callObservers(\"controllerDidLongPressCellView\", input, cellView, this.owner);\n    },\n  })\n  readonly cell!: TraitViewRef<this, CellTrait, CellView> & Observes<CellView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {CellControllerObserver} from \"./CellController\";\nimport {CellController} from \"./CellController\";\nimport {TextCellView} from \"./TextCellView\";\nimport {TextCellTrait} from \"./TextCellTrait\";\n\n/** @public */\nexport interface TextCellControllerObserver<C extends TextCellController = TextCellController> extends CellControllerObserver<C> {\n  controllerWillAttachCellTrait?(cellTrait: TextCellTrait, controller: C): void;\n\n  controllerDidDetachCellTrait?(cellTrait: TextCellTrait, controller: C): void;\n\n  controllerWillAttachCellView?(cellView: TextCellView, controller: C): void;\n\n  controllerDidDetachCellView?(cellView: TextCellView, controller: C): void;\n\n  controllerWillAttachCellContentView?(cellContentView: HtmlView, controller: C): void;\n\n  controllerDidDetachCellContentView?(cellContentView: HtmlView, controller: C): void;\n}\n\n/** @public */\nexport class TextCellController extends CellController {\n  declare readonly observerType?: Class<TextCellControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    traitType: TextCellTrait,\n    observesTrait: true,\n    initTrait(cellTrait: TextCellTrait): void {\n      this.owner.setContentView(cellTrait.content.value);\n    },\n    deinitTrait(cellTrait: TextCellTrait): void {\n      this.owner.setContentView(void 0);\n    },\n    traitDidSetContent(content: string | undefined): void {\n      this.owner.setContentView(content);\n    },\n    viewType: TextCellView,\n    observesView: true,\n    initView(cellView: TextCellView): void {\n      this.owner.content.setView(cellView.content.view);\n      const cellTrait = this.trait;\n      if (cellTrait !== null) {\n        this.owner.setContentView(cellTrait.content.value);\n      }\n    },\n    deinitView(cellView: TextCellView): void {\n      this.owner.content.setView(null);\n    },\n    viewWillAttachContent(contentView: HtmlView): void {\n      this.owner.content.setView(contentView);\n    },\n    viewDidDetachContent(contentView: HtmlView): void {\n      this.owner.content.setView(null);\n    },\n  })\n  override readonly cell!: TraitViewRef<this, TextCellTrait, TextCellView> & CellController[\"cell\"] & Observes<TextCellTrait> & Observes<TextCellView>;\n\n  protected setContentView(content: string | undefined): void {\n    const cellView = this.cell.view;\n    if (cellView !== null) {\n      cellView.content.set(content);\n    }\n  }\n\n  @ViewRef({\n    viewType: HtmlView,\n    willAttachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerWillAttachCellContentView\", contentView, this.owner);\n    },\n    didDetachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidDetachCellContentView\", contentView, this.owner);\n    },\n  })\n  readonly content!: ViewRef<this, HtmlView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {CellControllerObserver} from \"./CellController\";\nimport {CellController} from \"./CellController\";\nimport {IconCellView} from \"./IconCellView\";\nimport {IconCellTrait} from \"./IconCellTrait\";\n\n/** @public */\nexport interface IconCellControllerObserver<C extends IconCellController = IconCellController> extends CellControllerObserver<C> {\n  controllerWillAttachCellTrait?(cellTrait: IconCellTrait, controller: C): void;\n\n  controllerDidDetachCellTrait?(cellTrait: IconCellTrait, controller: C): void;\n\n  controllerWillAttachCellView?(cellView: IconCellView, controller: C): void;\n\n  controllerDidDetachCellView?(cellView: IconCellView, controller: C): void;\n\n  controllerDidSetCellIcon?(cellIcon: Graphics | null, controller: C): void;\n}\n\n/** @public */\nexport class IconCellController extends CellController {\n  declare readonly observerType?: Class<IconCellControllerObserver>;\n\n  protected setIcon(icon: Graphics | null): void {\n    const cellView = this.cell.view;\n    if (cellView !== null) {\n      cellView.graphics.set(icon);\n    }\n  }\n\n  @TraitViewRef({\n    extends: true,\n    traitType: IconCellTrait,\n    observesTrait: true,\n    initTrait(cellTrait: IconCellTrait): void {\n      this.owner.setIcon(cellTrait.icon.value);\n    },\n    deinitTrait(cellTrait: IconCellTrait): void {\n      this.owner.setIcon(null);\n    },\n    traitDidSetIcon(icon: Graphics | null): void {\n      this.owner.setIcon(icon);\n    },\n    viewType: IconCellView,\n    observesView: true,\n    initView(cellView: IconCellView): void {\n      const cellTrait = this.trait;\n      if (cellTrait !== null) {\n        this.owner.setIcon(cellTrait.icon.value);\n      }\n    },\n    viewDidSetGraphics(cellIcon: Graphics | null): void {\n      this.owner.callObservers(\"controllerDidSetCellIcon\", cellIcon, this.owner);\n    },\n  })\n  override readonly cell!: TraitViewRef<this, IconCellTrait, IconCellView> & CellController[\"cell\"] & Observes<IconCellTrait> & Observes<IconCellView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {Focus} from \"@swim/style\";\nimport {FocusAnimator} from \"@swim/style\";\nimport type {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport {NodeView} from \"@swim/dom\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {Hyperlink} from \"@swim/controller\";\nimport {ButtonGlow} from \"@swim/button\";\nimport {TableLayout} from \"./TableLayout\";\nimport {CellView} from \"./CellView\";\n\n/** @public */\nexport interface LeafViewObserver<V extends LeafView = LeafView> extends HtmlViewObserver<V> {\n  viewWillAttachCell?(cellView: CellView, targetView: View | null, view: V): void;\n\n  viewDidDetachCell?(cellView: CellView, view: V): void;\n\n  viewWillHighlight?(view: V): void;\n\n  viewDidHighlight?(view: V): void;\n\n  viewWillUnhighlight?(view: V): void;\n\n  viewDidUnhighlight?(view: V): void;\n\n  viewDidEnter?(view: V): void;\n\n  viewDidLeave?(view: V): void;\n\n  viewDidPress?(input: PositionGestureInput, event: Event | null, view: V): void;\n\n  viewDidLongPress?(input: PositionGestureInput, view: V): void;\n}\n\n/** @public */\nexport class LeafView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initLeaf();\n  }\n\n  protected initLeaf(): void {\n    this.setIntrinsic<LeafView>({\n      classList: [\"leaf\"],\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n        backgroundColor: Look.backgroundColor,\n      },\n    });\n    this.modifyMood(Feel.default, [[Feel.transparent, 1], [Feel.hovering, 0]], false);\n  }\n\n  declare readonly observerType?: Class<LeafViewObserver>;\n\n  @Property({valueType: TableLayout, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly layout!: Property<this, TableLayout | null>;\n\n  @Property({valueType: Number, value: 0, inherits: true, updateFlags: View.NeedsLayout})\n  readonly depth!: Property<this, number>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowSpacing!: ThemeConstraintAnimator<this, Length | null>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowHeight!: ThemeConstraintAnimator<this, Length | null>;\n\n  @ExpansionAnimator({value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly stretch!: ExpansionAnimator<this, Expansion | null>;\n\n  @Property({valueType: Boolean, value: false, inherits: true})\n  readonly hovers!: Property<this, boolean>;\n\n  @FocusAnimator({\n    value: Focus.unfocused(),\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    willFocus(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.transparent, 0],\n                                           [Feel.hovering, 1]], false);\n    },\n    willUnfocus(): void {\n      this.owner.modifyMood(Feel.default, [[Feel.transparent, 1 - this.owner.hover.state.phase],\n                                           [Feel.hovering, 0]], false);\n    },\n  })\n  readonly hover!: FocusAnimator<this, Focus>;\n\n  @FocusAnimator({\n    value: Focus.unfocused(),\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    willFocus(): void {\n      this.owner.callObservers(\"viewWillHighlight\", this.owner);\n      const timing = this.owner.getLook(Look.timing);\n      this.owner.modifyMood(Feel.default, [[Feel.transparent, 0]], timing);\n      this.owner.style.backgroundColor.setIntrinsic(Look.selectionColor, timing);\n    },\n    didFocus(): void {\n      this.owner.callObservers(\"viewDidHighlight\", this.owner);\n    },\n    willUnfocus(): void {\n      this.owner.callObservers(\"viewWillUnhighlight\", this.owner);\n      const timing = this.owner.getLook(Look.timing);\n      this.owner.modifyMood(Feel.default, [[Feel.transparent, 1 - this.owner.hover.state.phase]], timing);\n      this.owner.style.backgroundColor.setIntrinsic(Look.backgroundColor, timing);\n    },\n    didUnfocus(): void {\n      this.owner.callObservers(\"viewDidUnhighlight\", this.owner);\n    },\n  })\n  readonly highlight!: FocusAnimator<this, Focus>;\n\n  getCell<F extends Class<CellView>>(key: string, cellViewClass: F): InstanceType<F> | null;\n  getCell(key: string): CellView | null;\n  getCell(key: string, cellViewClass?: Class<CellView>): CellView | null {\n    if (cellViewClass === void 0) {\n      cellViewClass = CellView;\n    }\n    const cellView = this.getChild(key);\n    return cellView instanceof cellViewClass ? cellView : null;\n  }\n\n  getOrCreateCell<F extends Class<Instance<F, CellView>> & Creatable<Instance<F, CellView>>>(key: string, cellViewClass: F): InstanceType<F> {\n    let cellView = this.getChild(key, cellViewClass);\n    if (cellView === null) {\n      cellView = cellViewClass.create();\n      this.setChild(key, cellView);\n    }\n    return cellView!;\n  }\n\n  setCell(key: string, cellView: CellView | null): void {\n    this.setChild(key, cellView);\n  }\n\n  @ViewSet({\n    viewType: CellView,\n    binds: true,\n    initView(cellView: CellView): void {\n      cellView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: 0,\n        height: this.owner.style.height.state,\n      });\n    },\n    willAttachView(cellView: CellView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachCell\", cellView, target, this.owner);\n    },\n    didDetachView(cellView: CellView): void {\n      this.owner.callObservers(\"viewDidDetachCell\", cellView, this.owner);\n    },\n  })\n  readonly cells!: ViewSet<this, CellView>;\n\n  protected override onLayout(): void {\n    this.rowHeight.recohere(this.updateTime);\n    super.onLayout();\n    this.layoutLeaf();\n  }\n\n  protected layoutLeaf(): void {\n    const rowHeight = this.rowHeight.value;\n    if (rowHeight !== null) {\n      this.style.height.setIntrinsic(rowHeight);\n    }\n  }\n\n  protected override displayChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    if ((displayFlags & View.NeedsLayout) !== 0) {\n      this.layoutChildren(displayFlags, displayChild);\n    } else {\n      super.displayChildren(displayFlags, displayChild);\n    }\n  }\n\n  protected layoutChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    const layout = this.layout.value;\n    const height = this.style.height.state;\n    const stretch = this.stretch.getPhaseOr(1);\n    type self = this;\n    function layoutChild(this: self, child: View, displayFlags: ViewFlags): void {\n      if (child instanceof CellView) {\n        const key = child.key;\n        const col = layout !== null && key !== void 0 ? layout.getCol(key) : null;\n        if (col !== null) {\n          child.style.setIntrinsic({\n            display: !col.hidden && col.width !== null ? \"flex\" : \"none\",\n            left: col.left,\n            width: col.width,\n            height,\n            color: col.textColor,\n            opacity: col.persistent ? void 0 : stretch,\n          });\n        } else {\n          child.style.setIntrinsic({\n            display: \"none\",\n            left: null,\n            width: null,\n            height: null,\n            color: null,\n            opacity: void 0,\n          });\n        }\n      }\n      displayChild.call(this, child, displayFlags);\n    }\n    super.displayChildren(displayFlags, layoutChild);\n  }\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly glows!: Property<this, boolean>;\n\n  protected glow(input: PositionGestureInput): void {\n    if (input.detail instanceof ButtonGlow) {\n      input.detail.fade(input.x, input.y);\n      input.detail = void 0;\n    }\n    if (input.detail === void 0) {\n      const delay = input.inputType === \"mouse\" ? 0 : 100;\n      input.detail = this.prependChild(ButtonGlow);\n      (input.detail as ButtonGlow).glow(input.x, input.y, void 0, delay);\n    }\n  }\n\n  @Property({\n    valueType: Hyperlink,\n    value: null,\n    didSetValue(hyperlink: Hyperlink | null): void {\n      if (hyperlink !== null) {\n        this.owner.setIntrinsic<LeafView>({\n          attributes: {\n            href: hyperlink.href,\n            title: hyperlink.title,\n          },\n          style: {\n            cursor: \"pointer\",\n          },\n        });\n      } else {\n        this.owner.setIntrinsic<LeafView>({\n          attributes: {\n            href: void 0,\n            title: void 0,\n          },\n          style: {\n            cursor: void 0,\n          },\n        });\n      }\n    },\n  })\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  @PositionGesture({\n    bindsOwner: true,\n    didBeginPress(input: PositionGestureInput, event: Event | null): void {\n      if (this.owner.glows.value) {\n        this.owner.glow(input);\n      }\n    },\n    didMovePress(input: PositionGestureInput, event: Event | null): void {\n      if (input.isRunaway()) {\n        this.cancelPress(input, event);\n      } else if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        input.clearHoldTimer();\n        this.beginHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      }\n    },\n    didEndPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n        if (input.detail instanceof ButtonGlow) {\n          input.detail.fade(input.x, input.y);\n          input.detail = void 0;\n        }\n      } else if (input.detail instanceof ButtonGlow) {\n        input.detail.pulse(input.x, input.y);\n      }\n    },\n    didCancelPress(input: PositionGestureInput, event: Event | null): void {\n      if (!this.owner.clientBounds.contains(input.x, input.y)) {\n        this.endHover(input, event);\n      }\n      if (input.detail instanceof ButtonGlow) {\n        input.detail.fade(input.x, input.y);\n        input.detail = void 0;\n      }\n    },\n    didStartHovering(): void {\n      if (this.owner.hovers.value) {\n        this.owner.hover.focus(false);\n      }\n      this.owner.callObservers(\"viewDidEnter\", this.owner);\n    },\n    didStopHovering(): void {\n      if (this.owner.hovers.value) {\n        this.owner.hover.unfocus();\n      }\n      this.owner.callObservers(\"viewDidLeave\", this.owner);\n    },\n    didPress(input: PositionGestureInput, event: Event | null): void {\n      if (input.defaultPrevented || !this.owner.clientBounds.contains(input.x, input.y)) {\n        return;\n      }\n      let target = input.target;\n      while (target instanceof Node && target !== this.owner.node) {\n        const targetView = NodeView.get(target);\n        if (targetView instanceof CellView) {\n          targetView.didPress(input, event);\n          break;\n        }\n        target = target.parentNode;\n      }\n      this.owner.didPress(input, event);\n    },\n    didLongPress(input: PositionGestureInput): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      let target = input.target;\n      while (target instanceof Node && target !== this.owner.node) {\n        const targetView = NodeView.get(target);\n        if (targetView instanceof CellView) {\n          targetView.didLongPress(input);\n          break;\n        }\n        target = target.parentNode;\n      }\n      this.owner.didLongPress(input);\n    },\n  })\n  readonly gesture!: PositionGesture<this, LeafView>;\n\n  didPress(input: PositionGestureInput, event: Event | null): void {\n    if (input.defaultPrevented) {\n      return;\n    }\n    this.callObservers(\"viewDidPress\", input, event, this);\n    const hyperlink = Property.tryValue(this, \"hyperlink\");\n    if (hyperlink !== null && !input.defaultPrevented) {\n      input.preventDefault();\n      hyperlink.activate(event);\n    }\n  }\n\n  didLongPress(input: PositionGestureInput): void {\n    if (input.defaultPrevented) {\n      return;\n    }\n    this.callObservers(\"viewDidLongPress\", input, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitSet} from \"@swim/model\";\nimport {Hyperlink} from \"@swim/controller\";\nimport {CellTrait} from \"./CellTrait\";\n\n/** @public */\nexport interface LeafTraitObserver<T extends LeafTrait = LeafTrait> extends TraitObserver<T> {\n  traitWillAttachCell?(cellTrait: CellTrait, targetTrait: Trait | null, trait: T): void;\n\n  traitDidDetachCell?(cellTrait: CellTrait, trait: T): void;\n}\n\n/** @public */\nexport class LeafTrait extends Trait {\n  declare readonly observerType?: Class<LeafTraitObserver>;\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  getCell<F extends Class<CellTrait>>(key: string, cellTraitClass: F): InstanceType<F> | null;\n  getCell(key: string): CellTrait | null;\n  getCell(key: string, cellTraitClass?: Class<CellTrait>): CellTrait | null {\n    if (cellTraitClass === void 0) {\n      cellTraitClass = CellTrait;\n    }\n    const cellTrait = this.getTrait(key);\n    return cellTrait instanceof cellTraitClass ? cellTrait : null;\n  }\n\n  getOrCreateCell<F extends Class<Instance<F, CellTrait>> & Creatable<Instance<F, CellTrait>>>(key: string, cellTraitClass: F): InstanceType<F> {\n    let cellTrait = this.getTrait(key, cellTraitClass);\n    if (cellTrait === null) {\n      cellTrait = cellTraitClass.create();\n      this.setTrait(key, cellTrait);\n    }\n    return cellTrait!;\n  }\n\n  setCell(key: string, cellTrait: CellTrait | null): void {\n    this.setTrait(key, cellTrait);\n  }\n\n  @TraitSet({\n    traitType: CellTrait,\n    binds: true,\n    willAttachTrait(cellTrait: CellTrait, targetTrait: Trait | null): void {\n      this.owner.callObservers(\"traitWillAttachCell\", cellTrait, targetTrait, this.owner);\n    },\n    didAttachTrait(cellTrait: CellTrait, targetTrait: Trait | null): void {\n      if (this.owner.consuming) {\n        cellTrait.consume(this.owner);\n      }\n    },\n    willDetachTrait(cellTrait: CellTrait): void {\n      if (this.owner.consuming) {\n        cellTrait.unconsume(this.owner);\n      }\n    },\n    didDetachTrait(cellTrait: CellTrait): void {\n      this.owner.callObservers(\"traitDidDetachCell\", cellTrait, this.owner);\n    },\n    detectModel(model: Model): CellTrait | null {\n      return model.getTrait(CellTrait);\n    },\n  })\n  readonly cells!: TraitSet<this, CellTrait>;\n\n  protected override onStartConsuming(): void {\n    super.onStartConsuming();\n    this.cells.consumeTraits(this);\n  }\n\n  protected override onStopConsuming(): void {\n    super.onStopConsuming();\n    this.cells.unconsumeTraits(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {Hyperlink} from \"@swim/controller\";\nimport type {CellView} from \"./CellView\";\nimport {TextCellView} from \"./TextCellView\";\nimport type {CellTrait} from \"./CellTrait\";\nimport {CellController} from \"./CellController\";\nimport type {TextCellController} from \"./TextCellController\";\nimport type {IconCellController} from \"./IconCellController\";\nimport {LeafView} from \"./LeafView\";\nimport {LeafTrait} from \"./LeafTrait\";\n\n/** @public */\nexport interface LeafControllerObserver<C extends LeafController = LeafController> extends ControllerObserver<C> {\n  controllerWillAttachLeafTrait?(leafTrait: LeafTrait, controller: C): void;\n\n  controllerDidDetachLeafTrait?(leafTrait: LeafTrait, controller: C): void;\n\n  controllerWillAttachLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidDetachLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerWillHighlightLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidHighlightLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerWillUnhighlightLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidUnhighlightLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidEnterLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidLeaveLeafView?(leafView: LeafView, controller: C): void;\n\n  controllerDidPressLeafView?(input: PositionGestureInput, event: Event | null, leafView: LeafView, controller: C): void;\n\n  controllerDidLongPressLeafView?(input: PositionGestureInput, leafView: LeafView, controller: C): void;\n\n  controllerWillAttachCell?(cellController: CellController, controller: C): void;\n\n  controllerDidDetachCell?(cellController: CellController, controller: C): void;\n\n  controllerWillAttachCellTrait?(cellTrait: CellTrait, cellController: CellController, controller: C): void;\n\n  controllerDidDetachCellTrait?(cellTrait: CellTrait, cellController: CellController, controller: C): void;\n\n  controllerWillAttachCellView?(cellView: CellView, cellController: CellController, controller: C): void;\n\n  controllerDidDetachCellView?(cellView: CellView, cellController: CellController, controller: C): void;\n\n  controllerDidPressCellView?(input: PositionGestureInput, event: Event | null, cellView: CellView, cellController: CellController, controller: C): void;\n\n  controllerDidLongPressCellView?(input: PositionGestureInput, cellView: CellView, cellController: CellController, controller: C): void;\n\n  controllerWillAttachCellContentView?(cellContentView: HtmlView, cellController: CellController, controller: C): void;\n\n  controllerDidDetachCellContentView?(cellContentView: HtmlView, cellController: CellController, controller: C): void;\n\n  controllerDidSetCellIcon?(cellIcon: Graphics | null, cellController: CellController, controller: C): void;\n}\n\n/** @public */\nexport class LeafController extends Controller {\n  declare readonly observerType?: Class<LeafControllerObserver>;\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  @TraitViewRef({\n    traitType: LeafTrait,\n    observesTrait: true,\n    willAttachTrait(leafTrait: LeafTrait): void {\n      this.owner.callObservers(\"controllerWillAttachLeafTrait\", leafTrait, this.owner);\n    },\n    didAttachTrait(leafTrait: LeafTrait): void {\n      this.owner.cells.addTraits(leafTrait.cells.traits);\n    },\n    initTrait(leafTrait: LeafTrait): void {\n      this.owner.hyperlink.bindInlet(leafTrait.hyperlink);\n    },\n    deinitTrait(leafTrait: LeafTrait): void {\n      this.owner.hyperlink.unbindInlet(leafTrait.hyperlink);\n    },\n    willDetachTrait(leafTrait: LeafTrait): void {\n      this.owner.cells.deleteTraits(leafTrait.cells.traits);\n    },\n    didDetachTrait(leafTrait: LeafTrait): void {\n      this.owner.callObservers(\"controllerDidDetachLeafTrait\", leafTrait, this.owner);\n    },\n    traitWillAttachCell(cellTrait: CellTrait, targetTrait: Trait | null): void {\n      this.owner.cells.addTrait(cellTrait, targetTrait);\n    },\n    traitDidDetachCell(cellTrait: CellTrait): void {\n      this.owner.cells.deleteTrait(cellTrait);\n    },\n    viewType: LeafView,\n    observesView: true,\n    initView(leafView: LeafView): void {\n      const cellControllers = this.owner.cells.controllers;\n      for (const controllerId in cellControllers) {\n        const cellController = cellControllers[controllerId]!;\n        const cellView = cellController.cell.view;\n        if (cellView !== null && cellView.parent === null) {\n          const cellTrait = cellController.cell.trait;\n          if (cellTrait !== null) {\n            cellController.cell.insertView(leafView, void 0, void 0, cellTrait.key);\n          }\n        }\n      }\n    },\n    willAttachView(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerWillAttachLeafView\", leafView, this.owner);\n      leafView.hyperlink.bindInlet(this.owner.hyperlink);\n    },\n    didDetachView(leafView: LeafView): void {\n      leafView.hyperlink.unbindInlet(this.owner.hyperlink);\n      this.owner.callObservers(\"controllerDidDetachLeafView\", leafView, this.owner);\n    },\n    viewWillHighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerWillHighlightLeafView\", leafView, this.owner);\n    },\n    viewDidHighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidHighlightLeafView\", leafView, this.owner);\n    },\n    viewWillUnhighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerWillUnhighlightLeafView\", leafView, this.owner);\n    },\n    viewDidUnhighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidUnhighlightLeafView\", leafView, this.owner);\n    },\n    viewDidEnter(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidEnterLeafView\", leafView, this.owner);\n    },\n    viewDidLeave(leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidLeaveLeafView\", leafView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidPressLeafView\", input, event, leafView, this.owner);\n    },\n    viewDidLongPress(input: PositionGestureInput, leafView: LeafView): void {\n      this.owner.callObservers(\"controllerDidLongPressLeafView\", input, leafView, this.owner);\n    },\n  })\n  readonly leaf!: TraitViewRef<this, LeafTrait, LeafView> & Observes<LeafTrait> & Observes<LeafView>;\n\n  getCell<F extends Class<CellController>>(key: string, cellControllerClass: F): InstanceType<F> | null;\n  getCell(key: string): CellController | null;\n  getCell(key: string, cellControllerClass?: Class<CellController>): CellController | null {\n    if (cellControllerClass === void 0) {\n      cellControllerClass = CellController;\n    }\n    const cellController = this.getChild(key);\n    return cellController instanceof cellControllerClass ? cellController : null;\n  }\n\n  getOrCreateCell<F extends Class<Instance<F, CellController>> & Creatable<Instance<F, CellController>>>(key: string, cellControllerClass: F): InstanceType<F> {\n    let cellController = this.getChild(key, cellControllerClass);\n    if (cellController === null) {\n      cellController = cellControllerClass.create();\n      this.setChild(key, cellController);\n    }\n    return cellController!;\n  }\n\n  setCell(key: string, cellController: CellController | null): void {\n    this.setChild(key, cellController);\n  }\n\n  getCellTrait<F extends Class<CellTrait>>(key: string, cellTraitClass: F): InstanceType<F> | null;\n  getCellTrait(key: string): CellTrait | null;\n  getCellTrait(key: string, cellTraitClass?: Class<CellTrait>): CellTrait | null {\n    const leafTrait = this.leaf.trait;\n    return leafTrait !== null ? leafTrait.getCell(key, cellTraitClass!) : null;\n  }\n\n  getOrCreateCellTrait<F extends Class<Instance<F, CellTrait>> & Creatable<Instance<F, CellTrait>>>(key: string, cellTraitClass: F): InstanceType<F> {\n    const leafTrait = this.leaf.trait;\n    if (leafTrait === null) {\n      throw new Error(\"no leaf trait\");\n    }\n    return leafTrait.getOrCreateCell(key, cellTraitClass);\n  }\n\n  setCellTrait(key: string, cellTrait: CellTrait | null): void {\n    const leafTrait = this.leaf.trait;\n    if (leafTrait === null) {\n      throw new Error(\"no leaf trait\");\n    }\n    leafTrait.setCell(key, cellTrait);\n  }\n\n  getCellView<F extends Class<CellView>>(key: string, cellViewClass: F): InstanceType<F> | null;\n  getCellView(key: string): CellView | null;\n  getCellView(key: string, cellViewClass?: Class<CellView>): CellView | null {\n    const leafView = this.leaf.view;\n    return leafView !== null ? leafView.getCell(key, cellViewClass!) : null;\n  }\n\n  getOrCreateCellView<F extends Class<Instance<F, CellView>> & Creatable<Instance<F, CellView>>>(key: string, cellViewClass: F): InstanceType<F> {\n    let leafView = this.leaf.view;\n    if (leafView === null) {\n      leafView = this.leaf.createView();\n      if (leafView === null) {\n        throw new Error(\"no leaf view\");\n      }\n      this.leaf.setView(leafView);\n    }\n    return leafView.getOrCreateCell(key, cellViewClass);\n  }\n\n  setCellView(key: string, cellView: CellView | null): void {\n    let leafView = this.leaf.view;\n    if (leafView === null) {\n      leafView = this.leaf.createView();\n      if (leafView === null) {\n        throw new Error(\"no leaf view\");\n      }\n      this.leaf.setView(leafView);\n    }\n    leafView.setCell(key, cellView);\n  }\n\n  @TraitViewControllerSet({\n    controllerType: CellController,\n    binds: true,\n    observes: true,\n    get parentView(): LeafView | null {\n      return this.owner.leaf.view;\n    },\n    getTraitViewRef(cellController: CellController): TraitViewRef<unknown, CellTrait, CellView> {\n      return cellController.cell;\n    },\n    willAttachController(cellController: CellController): void {\n      this.owner.callObservers(\"controllerWillAttachCell\", cellController, this.owner);\n    },\n    didAttachController(cellController: CellController): void {\n      const cellTrait = cellController.cell.trait;\n      if (cellTrait !== null) {\n        this.attachCellTrait(cellTrait, cellController);\n      }\n      const cellView = cellController.cell.view;\n      if (cellView !== null) {\n        this.attachCellView(cellView, cellController);\n      }\n    },\n    willDetachController(cellController: CellController): void {\n      const cellView = cellController.cell.view;\n      if (cellView !== null) {\n        this.detachCellView(cellView, cellController);\n      }\n      const cellTrait = cellController.cell.trait;\n      if (cellTrait !== null) {\n        this.detachCellTrait(cellTrait, cellController);\n      }\n    },\n    didDetachController(cellController: CellController): void {\n      this.owner.callObservers(\"controllerDidDetachCell\", cellController, this.owner);\n    },\n    controllerWillAttachCellTrait(cellTrait: CellTrait, cellController: CellController): void {\n      this.owner.callObservers(\"controllerWillAttachCellTrait\", cellTrait, cellController, this.owner);\n      this.attachCellTrait(cellTrait, cellController);\n    },\n    controllerDidDetachCellTrait(cellTrait: CellTrait, cellController: CellController): void {\n      this.detachCellTrait(cellTrait, cellController);\n      this.owner.callObservers(\"controllerDidDetachCellTrait\", cellTrait, cellController, this.owner);\n    },\n    attachCellTrait(cellTrait: CellTrait, cellController: CellController): void {\n      // hook\n    },\n    detachCellTrait(cellTrait: CellTrait, cellController: CellController): void {\n      // hook\n    },\n    controllerWillAttachCellView(cellView: CellView, cellController: CellController): void {\n      this.owner.callObservers(\"controllerWillAttachCellView\", cellView, cellController, this.owner);\n      this.attachCellView(cellView, cellController);\n    },\n    controllerDidDetachCellView(cellView: CellView, cellController: CellController): void {\n      this.detachCellView(cellView, cellController);\n      this.owner.callObservers(\"controllerDidDetachCellView\", cellView, cellController, this.owner);\n    },\n    attachCellView(cellView: CellView, cellController: CellController): void {\n      if (cellView instanceof TextCellView) {\n        const cellContentView = cellView.content.view;\n        if (cellContentView !== null) {\n          this.attachCellContentView(cellContentView, cellController);\n        }\n      }\n    },\n    detachCellView(cellView: CellView, cellController: CellController): void {\n      if (cellView instanceof TextCellView) {\n        const cellContentView = cellView.content.view;\n        if (cellContentView !== null) {\n          this.detachCellContentView(cellContentView, cellController);\n        }\n      }\n      cellView.remove();\n    },\n    controllerDidPressCellView(input: PositionGestureInput, event: Event | null, cellView: CellView, cellController: CellController): void {\n      this.owner.callObservers(\"controllerDidPressCellView\", input, event, cellView, cellController, this.owner);\n    },\n    controllerDidLongPressCellView(input: PositionGestureInput, cellView: CellView, cellController: CellController): void {\n      this.owner.callObservers(\"controllerDidLongPressCellView\", input, cellView, cellController, this.owner);\n    },\n    controllerWillAttachCellContentView(contentView: HtmlView, cellController: CellController): void {\n      this.attachCellContentView(contentView, cellController);\n      this.owner.callObservers(\"controllerWillAttachCellContentView\", contentView, cellController, this.owner);\n    },\n    controllerDidDetachCellContentView(contentView: HtmlView, cellController: CellController): void {\n      this.owner.callObservers(\"controllerDidDetachCellContentView\", contentView, cellController, this.owner);\n      this.detachCellContentView(contentView, cellController);\n    },\n    attachCellContentView(cellContentView: HtmlView, cellController: CellController): void {\n      // hook\n    },\n    detachCellContentView(cellContentView: HtmlView, cellController: CellController): void {\n      // hook\n    },\n    controllerDidSetCellIcon(cellIcon: Graphics | null, cellController: CellController): void {\n      this.owner.callObservers(\"controllerDidSetCellIcon\", cellIcon, cellController, this.owner);\n    },\n    createController(cellTrait?: CellTrait): CellController {\n      if (cellTrait !== void 0) {\n        return cellTrait.createCellController();\n      } else {\n        return super.createController();\n      }\n    },\n  })\n  readonly cells!: TraitViewControllerSet<this, CellTrait, CellView, CellController> & Observes<CellController> & Observes<TextCellController> & Observes<IconCellController> & {\n    attachCellTrait(cellTrait: CellTrait, cellController: CellController): void;\n    detachCellTrait(cellTrait: CellTrait, cellController: CellController): void;\n    attachCellView(cellView: CellView, cellController: CellController): void;\n    detachCellView(cellView: CellView, cellController: CellController): void;\n    attachCellContentView(cellContentView: HtmlView, cellController: CellController): void;\n    detachCellContentView(cellContentView: HtmlView, cellController: CellController): void;\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {R2Box} from \"@swim/math\";\nimport {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TableLayout} from \"./TableLayout\";\nimport type {CellView} from \"./CellView\";\nimport {LeafView} from \"./LeafView\";\nimport {TableView} from \"./\"; // forward reference\n\n/** @public */\nexport interface RowViewObserver<V extends RowView = RowView> extends HtmlViewObserver<V> {\n  viewWillAttachLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidDetachLeaf?(leafView: LeafView, view: V): void;\n\n  viewWillHighlightLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidHighlightLeaf?(leafView: LeafView, view: V): void;\n\n  viewWillUnhighlightLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidUnhighlightLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidEnterLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidLeaveLeaf?(leafView: LeafView, view: V): void;\n\n  viewDidPressLeaf?(input: PositionGestureInput, event: Event | null, leafView: LeafView, view: V): void;\n\n  viewDidLongPressLeaf?(input: PositionGestureInput, leafView: LeafView, view: V): void;\n\n  viewWillAttachTree?(treeView: TableView, view: V): void;\n\n  viewDidDetachTree?(treeView: TableView, view: V): void;\n\n  viewWillExpand?(view: V): void;\n\n  viewDidExpand?(view: V): void;\n\n  viewWillCollapse?(view: V): void;\n\n  viewDidCollapse?(view: V): void;\n}\n\n/** @public */\nexport class RowView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initRow();\n  }\n\n  protected initRow(): void {\n    this.setIntrinsic<RowView>({\n      classList: [\"row\"],\n      style: {\n        position: \"relative\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<RowViewObserver>;\n\n  @Property({valueType: TableLayout, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly layout!: Property<this, TableLayout | null>;\n\n  @Property({\n    valueType: Number,\n    value: 0,\n    inherits: true,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newDepth: number, oldDepth: number): void {\n      const treeView = this.owner.tree.view;\n      if (treeView !== null) {\n        treeView.depth.setIntrinsic(newDepth + 1);\n      }\n    },\n  })\n  readonly depth!: Property<this, number>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowSpacing!: ThemeConstraintAnimator<this, Length | null>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowHeight!: ThemeConstraintAnimator<this, Length | null>;\n\n  @Property({valueType: Boolean, value: false, inherits: true})\n  readonly hovers!: Property<this, boolean>;\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly glows!: Property<this, boolean>;\n\n  getCell<F extends Class<CellView>>(key: string, cellViewClass: F): InstanceType<F> | null;\n  getCell(key: string): CellView | null;\n  getCell(key: string, cellViewClass?: Class<CellView>): CellView | null {\n    const leafView = this.leaf.view;\n    return leafView !== null ? leafView.getCell(key, cellViewClass!) : null;\n  }\n\n  getOrCreateCell<F extends Class<Instance<F, CellView>> & Creatable<Instance<F, CellView>>>(key: string, cellViewClass: F): InstanceType<F> {\n    const leafView = this.leaf.insertView();\n    if (leafView === null) {\n      throw new Error(\"no leaf view\");\n    }\n    return leafView.getOrCreateCell(key, cellViewClass);\n  }\n\n  setCell(key: string, cellView: CellView | null): void {\n    const leafView = this.leaf.insertView();\n    if (leafView === null) {\n      throw new Error(\"no leaf view\");\n    }\n    leafView.setCell(key, cellView);\n  }\n\n  @ViewRef({\n    viewType: LeafView,\n    viewKey: true,\n    binds: true,\n    observes: true,\n    initView(leafView: LeafView): void {\n      const layout = this.owner.layout.value;\n      leafView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: layout !== null ? layout.width : null,\n        zIndex: 1,\n      });\n    },\n    willAttachView(leafView: LeafView): void {\n      this.owner.callObservers(\"viewWillAttachLeaf\", leafView, this.owner);\n    },\n    didDetachView(leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidDetachLeaf\", leafView, this.owner);\n    },\n    viewWillHighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"viewWillHighlightLeaf\", leafView, this.owner);\n    },\n    viewDidHighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidHighlightLeaf\", leafView, this.owner);\n    },\n    viewWillUnhighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"viewWillUnhighlightLeaf\", leafView, this.owner);\n    },\n    viewDidUnhighlight(leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidUnhighlightLeaf\", leafView, this.owner);\n    },\n    viewDidEnter(leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidEnterLeaf\", leafView, this.owner);\n    },\n    viewDidLeave(leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidLeaveLeaf\", leafView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidPressLeaf\", input, event, leafView, this.owner);\n    },\n    viewDidLongPress(input: PositionGestureInput, leafView: LeafView): void {\n      this.owner.callObservers(\"viewDidLongPressLeaf\", input, leafView, this.owner);\n    },\n  })\n  readonly leaf!: ViewRef<this, LeafView> & Observes<LeafView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    initView(headView: HtmlView): void {\n      const layout = this.owner.layout.value;\n      headView.setIntrinsic({\n        classList: [\"head\"],\n        style: {\n          display: \"none\",\n          position: \"absolute\",\n          left: 0,\n          top: this.owner.rowHeight.state,\n          width: layout !== null ? layout.width : null,\n          height: this.owner.rowSpacing.state,\n          backgroundColor: Look.accentColor,\n          opacity: this.owner.disclosing.getPhaseOr(1) * this.owner.expanding.getPhaseOr(1),\n          zIndex: 1,\n        },\n      });\n    },\n  })\n  readonly head!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    get viewType(): typeof TableView {\n      return TableView;\n    },\n    viewKey: true,\n    binds: true,\n    initView(treeView: TableView): void {\n      const layout = this.owner.layout.value;\n      treeView.setIntrinsic({\n        classList: [\"tree\"],\n        style: {\n          display: this.owner.disclosure.collapsed ? \"none\" : \"block\",\n          position: \"absolute\",\n          left: 0,\n          width: layout !== null ? layout.width : null,\n          zIndex: 0,\n        },\n      });\n      treeView.depth.setIntrinsic(this.owner.depth.value + 1);\n    },\n    willAttachView(treeView: TableView): void {\n      this.owner.callObservers(\"viewWillAttachTree\", treeView, this.owner);\n    },\n    didDetachView(treeView: TableView): void {\n      this.owner.callObservers(\"viewDidDetachTree\", treeView, this.owner);\n    },\n  })\n  readonly tree!: ViewRef<this, TableView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    initView(footView: HtmlView): void {\n      const layout = this.owner.layout.value;\n      footView.setIntrinsic({\n        classList: [\"foot\"],\n        style: {\n          display: \"none\",\n          position: \"absolute\",\n          left: 0,\n          top: this.owner.rowHeight.state,\n          width: layout !== null ? layout.width : null,\n          height: this.owner.rowSpacing.state,\n          backgroundColor: Look.borderColor,\n          opacity: this.owner.disclosing.getPhaseOr(1) * this.owner.expanding.getPhaseOr(1),\n          zIndex: 1,\n        },\n      });\n    },\n  })\n  readonly foot!: ViewRef<this, HtmlView>;\n\n  @ExpansionAnimator({value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly expansion!: ExpansionAnimator<this, Expansion | null>;\n\n  @ExpansionAnimator({value: Expansion.expanded(), inherits: true, updateFlags: View.NeedsLayout})\n  readonly expanding!: ExpansionAnimator<this, Expansion | null>;\n\n  @ExpansionAnimator({\n    value: Expansion.collapsed(),\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    willExpand(): void {\n      this.owner.callObservers(\"viewWillExpand\", this.owner);\n      const treeView = this.owner.tree.view;\n      if (treeView !== null) {\n        treeView.style.display.setIntrinsic(\"block\");\n      }\n    },\n    didExpand(): void {\n      this.owner.callObservers(\"viewDidExpand\", this.owner);\n    },\n    willCollapse(): void {\n      this.owner.callObservers(\"viewWillCollapse\", this.owner);\n    },\n    didCollapse(): void {\n      const treeView = this.owner.tree.view;\n      if (treeView !== null) {\n        treeView.style.display.setIntrinsic(\"none\");\n      }\n      this.owner.callObservers(\"viewDidCollapse\", this.owner);\n    },\n    didSetValue(newDisclosure: Expansion, oldDisclosure: Expansion): void {\n      if (newDisclosure.direction !== 0) {\n        this.owner.disclosing.setIntrinsic(newDisclosure);\n      } else {\n        this.owner.disclosing.setAffinity(Affinity.Transient);\n      }\n      const tableView = this.owner.getRoot(TableView);\n      if (tableView !== null) {\n        tableView.requireUpdate(View.NeedsLayout);\n      }\n    },\n  })\n  readonly disclosure!: ExpansionAnimator<this, Expansion>;\n\n  @ExpansionAnimator({value: Expansion.collapsed(), inherits: true, updateFlags: View.NeedsLayout})\n  readonly disclosing!: ExpansionAnimator<this, Expansion | null>;\n\n  @Property({\n    valueType: R2Box,\n    value: null,\n    inherits: true,\n    init(): void {\n      this.outletValue = null;\n    },\n    getOutletValue(outlet: Property<unknown, R2Box | null>): R2Box | null {\n      return this.outletValue;\n    },\n    setOutletValue(newOutletValue: R2Box | null): void {\n      const oldOutletValue = this.outletValue;\n      if (!this.equalValues(newOutletValue, oldOutletValue)) {\n        this.outletValue = newOutletValue;\n        this.decohereOutlets();\n      }\n    },\n  })\n  readonly visibleFrame!: Property<this, R2Box | null> & {\n    /** @internal */\n    outletValue: R2Box | null,\n    /** @internal */\n    setOutletValue(newOutletValue: R2Box | null): void,\n  };\n\n  protected detectVisibleFrame(): R2Box {\n    const xBleed = 0;\n    const yBleed = this.rowHeight.getValueOr(Length.zero()).pxValue();\n    const parentVisibleFrame = this.visibleFrame.value;\n    if (parentVisibleFrame !== null) {\n      const left = this.style.left.pxState();\n      const top = this.style.top.pxState();\n      return new R2Box(parentVisibleFrame.xMin - left - xBleed, parentVisibleFrame.yMin - top - yBleed,\n                       parentVisibleFrame.xMax - left + xBleed, parentVisibleFrame.yMax - top + yBleed);\n    } else {\n      const bounds = this.node.getBoundingClientRect();\n      const xMin = -bounds.x - xBleed;\n      const yMin = -bounds.y - yBleed;\n      const xMax = window.innerWidth - bounds.x + xBleed;\n      const yMax = window.innerHeight - bounds.y + yBleed;\n      return new R2Box(xMin, yMin, xMax, yMax);\n    }\n  }\n\n  protected override onProcess(processFlags: ViewFlags): void {\n    super.onProcess(processFlags);\n    const visibleFrame = this.detectVisibleFrame();\n    this.visibleFrame.setOutletValue(visibleFrame);\n  }\n\n  protected override needsProcess(processFlags: ViewFlags): ViewFlags {\n    if ((processFlags & View.NeedsResize) !== 0) {\n      processFlags |= View.NeedsScroll;\n    }\n    return processFlags;\n  }\n\n  protected override onDisplay(displayFlags: ViewFlags): void {\n    super.onDisplay(displayFlags);\n    const visibleFrame = this.detectVisibleFrame();\n    this.visibleFrame.setOutletValue(visibleFrame);\n  }\n\n  protected override onLayout(): void {\n    this.rowHeight.recohere(this.updateTime);\n    super.onLayout();\n    this.resizeRow();\n    const leafView = this.leaf.view;\n    if (leafView !== null) {\n      this.layoutLeaf(leafView);\n    }\n  }\n\n  protected resizeRow(): void {\n    const oldLayout = !this.layout.derived ? this.layout.value : null;\n    if (oldLayout === null) {\n      return;\n    }\n    const superLayout = this.layout.inletValue;\n    let width: number;\n    if (superLayout !== void 0 && superLayout !== null && superLayout.width !== null) {\n      width = superLayout.width.pxValue();\n    } else {\n      width = this.style.width.pxState();\n    }\n    const newLayout = oldLayout.resized(width, 0, 0);\n    this.layout.set(newLayout);\n  }\n\n  protected layoutLeaf(leafView: LeafView): void {\n    const layout = this.layout.value;\n    const width = layout !== null ? layout.width : null;\n    const timing = this.getLook(Look.timing);\n    leafView.style.top.setIntrinsic(0, timing);\n    leafView.style.width.setIntrinsic(width);\n  }\n\n  protected override didLayout(): void {\n    this.layoutRow();\n    super.didLayout();\n  }\n\n  protected layoutRow(): void {\n    const layout = this.layout.value;\n    const width = layout !== null ? layout.width : null;\n    const rowSpacing = this.rowSpacing.getValueOr(Length.zero()).pxValue();\n    const disclosure = this.disclosure.getValue();\n    const disclosingPhase = this.disclosing.getPhaseOr(1) * this.expanding.getPhaseOr(1);\n\n    let leafHeightValue = 0;\n    let leafHeightState = 0;\n    const leafView = this.leaf.view;\n    if (leafView !== null) {\n      leafView.style.width.setIntrinsic(width);\n      leafView.style.display.setIntrinsic(\"flex\");\n      leafHeightValue = leafView.style.height.pxValue();\n      leafHeightState = leafView.style.height.pxState();\n    }\n\n    const headView = this.head.view;\n    if (headView !== null) {\n      if (!disclosure.collapsed) {\n        headView.style.top.setIntrinsic(leafHeightValue);\n        headView.style.width.setIntrinsic(width);\n        headView.style.height.setIntrinsic(rowSpacing);\n        headView.style.opacity.setIntrinsic(disclosingPhase);\n        headView.style.display.setIntrinsic(\"block\");\n      } else {\n        headView.style.display.setIntrinsic(\"none\");\n      }\n    }\n\n    let treeHeightValue = 0;\n    let treeHeightState = 0;\n    const treeView = this.tree.view;\n    if (treeView !== null) {\n      if (!disclosure.collapsed) {\n        treeView.style.top.setIntrinsic(leafHeightValue + rowSpacing * disclosingPhase);\n        treeView.style.width.setIntrinsic(width);\n        treeView.style.display.setIntrinsic(\"block\");\n        treeHeightValue = treeView.style.height.pxValue();\n        treeHeightValue += rowSpacing * disclosingPhase;\n        treeHeightState = treeView.style.height.pxState();\n        treeHeightState += rowSpacing;\n      } else {\n        treeView.style.display.setIntrinsic(\"none\");\n      }\n    }\n\n    const footView = this.foot.view;\n    if (footView !== null) {\n      if (!disclosure.collapsed) {\n        footView.style.top.setIntrinsic(leafHeightValue + treeHeightValue);\n        footView.style.width.setIntrinsic(width);\n        footView.style.height.setIntrinsic(rowSpacing);\n        footView.style.opacity.setIntrinsic(disclosingPhase);\n        footView.style.display.setIntrinsic(\"block\");\n      } else {\n        footView.style.display.setIntrinsic(\"none\");\n      }\n    }\n\n    if (this.style.height.hasAffinity(Affinity.Intrinsic)) {\n      const heightValue = leafHeightValue + treeHeightValue;\n      const heightState = leafHeightState + treeHeightState;\n      this.style.height.setInterpolatedValue(Length.px(heightValue), Length.px(heightState));\n    }\n  }\n\n  protected override onCull(): void {\n    super.onCull();\n    this.style.display.setIntrinsic(\"none\");\n  }\n\n  protected override onUncull(): void {\n    super.onUncull();\n    this.style.display.setIntrinsic(\"block\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Model} from \"@swim/model\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {LeafTraitObserver} from \"./LeafTrait\";\nimport {LeafTrait} from \"./LeafTrait\";\nimport {TableTrait} from \"./\"; // forward import\n\n/** @public */\nexport interface RowTraitObserver<T extends RowTrait = RowTrait> extends LeafTraitObserver<T> {\n  traitWillAttachTree?(treeTrait: TableTrait, trait: T): void;\n\n  traitDidDetachTree?(treeTrait: TableTrait, trait: T): void;\n}\n\n/** @public */\nexport class RowTrait extends LeafTrait {\n  declare readonly observerType?: Class<RowTraitObserver>;\n\n  @TraitRef({\n    get traitType(): typeof TableTrait {\n      return TableTrait;\n    },\n    binds: true,\n    willAttachTrait(treeTrait: TableTrait): void {\n      this.owner.callObservers(\"traitWillAttachTree\", treeTrait, this.owner);\n    },\n    didDetachTrait(treeTrait: TableTrait): void {\n      this.owner.callObservers(\"traitDidDetachTree\", treeTrait, this.owner);\n    },\n    detectModel(model: Model): TableTrait | null {\n      return model.getTrait(TableTrait);\n    },\n    detectTrait(trait: Trait): TableTrait | null {\n      return trait instanceof TableTrait ? trait : null;\n    },\n  })\n  readonly tree!: TraitRef<this, TableTrait>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport type {LeafControllerObserver} from \"./LeafController\";\nimport {LeafController} from \"./LeafController\";\nimport {RowView} from \"./RowView\";\nimport {RowTrait} from \"./RowTrait\";\nimport type {TableView} from \"./TableView\";\nimport type {TableTrait} from \"./TableTrait\";\nimport {TableController} from \"./\"; // forward import\n\n/** @public */\nexport interface RowControllerObserver<C extends RowController = RowController> extends LeafControllerObserver<C> {\n  controllerWillAttachRowTrait?(rowTrait: RowTrait, controller: C): void;\n\n  controllerDidDetachRowTrait?(rowTrait: RowTrait, controller: C): void;\n\n  controllerWillAttachRowView?(rowView: RowView, controller: C): void;\n\n  controllerDidDetachRowView?(rowView: RowView, controller: C): void;\n\n  controllerWillAttachTree?(treeController: TableController, controller: C): void;\n\n  controllerDidDetachTree?(treeController: TableController, controller: C): void;\n\n  controllerWillAttachTreeTrait?(treeTrait: TableTrait, treeController: TableController, controller: C): void;\n\n  controllerDidDetachTreeTrait?(treeTrait: TableTrait, treeController: TableController, controller: C): void;\n\n  controllerWillAttachTreeView?(treeView: TableView, treeController: TableController, controller: C): void;\n\n  controllerDidDetachTreeView?(treeView: TableView, treeController: TableController, controller: C): void;\n\n  controllerWillExpandRowView?(rowView: RowView, controller: C): void;\n\n  controllerDidExpandRowView?(rowView: RowView, controller: C): void;\n\n  controllerWillCollapseRowView?(rowView: RowView, controller: C): void;\n\n  controllerDidCollapseRowView?(rowView: RowView, controller: C): void;\n}\n\n/** @public */\nexport class RowController extends LeafController {\n  declare readonly observerType?: Class<RowControllerObserver>;\n\n  @TraitViewRef({\n    traitType: RowTrait,\n    observesTrait: true,\n    initTrait(rowTrait: RowTrait): void {\n      if (this.owner.leaf.trait === null) {\n        this.owner.leaf.setTrait(rowTrait);\n      }\n      const treeTrait = rowTrait.tree.trait;\n      if (treeTrait !== null) {\n        this.owner.tree.setTrait(treeTrait);\n      }\n    },\n    deinitTrait(rowTrait: RowTrait): void {\n      const treeTrait = rowTrait.tree.trait;\n      if (treeTrait !== null) {\n        this.owner.tree.deleteTrait(treeTrait);\n      }\n      if (this.owner.leaf.trait === rowTrait) {\n        this.owner.leaf.setTrait(null);\n      }\n    },\n    willAttachTrait(rowTrait: RowTrait): void {\n      this.owner.callObservers(\"controllerWillAttachRowTrait\", rowTrait, this.owner);\n    },\n    didDetachTrait(rowTrait: RowTrait): void {\n      this.owner.callObservers(\"controllerDidDetachRowTrait\", rowTrait, this.owner);\n    },\n    traitWillAttachTree(treeTrait: TableTrait): void {\n      this.owner.tree.setTrait(treeTrait);\n    },\n    traitDidDetachTree(treeTrait: TableTrait): void {\n      this.owner.tree.deleteTrait(treeTrait);\n    },\n    viewType: RowView,\n    observesView: true,\n    initView(rowView: RowView): void {\n      if (this.owner.leaf.view === null) {\n        const leafView = rowView.leaf.insertView();\n        this.owner.leaf.setView(leafView);\n      }\n      const treeController = this.owner.tree.controller;\n      if (treeController !== null) {\n        treeController.table.insertView(rowView);\n      }\n    },\n    willAttachView(rowView: RowView): void {\n      this.owner.callObservers(\"controllerWillAttachRowView\", rowView, this.owner);\n    },\n    didDetachView(rowView: RowView): void {\n      this.owner.callObservers(\"controllerDidDetachRowView\", rowView, this.owner);\n    },\n    viewWillExpand(rowView: RowView): void {\n      this.owner.callObservers(\"controllerWillExpandRowView\", rowView, this.owner);\n    },\n    viewDidExpand(rowView: RowView): void {\n      this.owner.callObservers(\"controllerDidExpandRowView\", rowView, this.owner);\n    },\n    viewWillCollapse(rowView: RowView): void {\n      this.owner.callObservers(\"controllerWillCollapseRowView\", rowView, this.owner);\n    },\n    viewDidCollapse(rowView: RowView): void {\n      this.owner.callObservers(\"controllerDidCollapseRowView\", rowView, this.owner);\n    },\n    viewWillAttachTree(treeView: TableView): void {\n      const treeController = this.owner.tree.controller;\n      if (treeController !== null) {\n        treeController.table.setView(treeView);\n      }\n    },\n  })\n  readonly row!: TraitViewRef<this, RowTrait, RowView> & Observes<RowTrait> & Observes<RowView>;\n\n  @TraitViewControllerRef({\n    get controllerType(): typeof TableController {\n      return TableController;\n    },\n    binds: true,\n    observes: true,\n    get parentView(): RowView | null {\n      return this.owner.row.view;\n    },\n    getTraitViewRef(treeController: TableController): TraitViewRef<unknown, TableTrait, TableView> {\n      return treeController.table;\n    },\n    initController(treeController: TableController): void {\n      const treeTrait = treeController.table.trait;\n      if (treeTrait !== null) {\n        this.attachTreeTrait(treeTrait, treeController);\n      }\n      const treeView = treeController.table.view;\n      if (treeView !== null) {\n        this.attachTreeView(treeView, treeController);\n      }\n      const rowTrait = this.owner.row.trait;\n      if (rowTrait !== null) {\n        const treeTrait = rowTrait.tree.trait;\n        if (treeTrait !== null) {\n          treeController.table.setTrait(treeTrait);\n        }\n      }\n    },\n    deinitController(treeController: TableController): void {\n      const treeTrait = treeController.table.trait;\n      if (treeTrait !== null) {\n        this.detachTreeTrait(treeTrait, treeController);\n      }\n      const treeView = treeController.table.view;\n      if (treeView !== null) {\n        this.detachTreeView(treeView, treeController);\n      }\n    },\n    willAttachController(treeController: TableController): void {\n      this.owner.callObservers(\"controllerWillAttachTree\", treeController, this.owner);\n    },\n    didDetachController(treeController: TableController): void {\n      this.owner.callObservers(\"controllerDidDetachTree\", treeController, this.owner);\n    },\n    controllerWillAttachTreeTrait(treeTrait: TableTrait, treeController: TableController): void {\n      this.owner.callObservers(\"controllerWillAttachTreeTrait\", treeTrait, treeController, this.owner);\n      this.attachTreeTrait(treeTrait, treeController);\n    },\n    controllerDidDetachTreeTrait(treeTrait: TableTrait, treeController: TableController): void {\n      this.detachTreeTrait(treeTrait, treeController);\n      this.owner.callObservers(\"controllerDidDetachTreeTrait\", treeTrait, treeController, this.owner);\n    },\n    attachTreeTrait(treeTrait: TableTrait, treeController: TableController): void {\n      // hook\n    },\n    detachTreeTrait(treeTrait: TableTrait, treeController: TableController): void {\n      // hook\n    },\n    controllerWillAttachTableView(treeView: TableView, treeController: TableController): void {\n      this.owner.callObservers(\"controllerWillAttachTreeView\", treeView, treeController, this.owner);\n      this.attachTreeView(treeView, treeController);\n    },\n    controllerDidDetachTableView(treeView: TableView, treeController: TableController): void {\n      this.detachTreeView(treeView, treeController);\n      this.owner.callObservers(\"controllerDidDetachTreeView\", treeView, treeController, this.owner);\n    },\n    attachTreeView(treeView: TableView, treeController: TableController): void {\n      // hook\n    },\n    detachTreeView(treeView: TableView, treeController: TableController): void {\n      treeView.remove();\n    },\n    detectController(controller: Controller): TableController | null {\n      return controller instanceof TableController ? controller : null;\n    },\n  })\n  readonly tree!: TraitViewControllerRef<this, TableTrait, TableView, TableController> & Observes<TableController> & {\n    attachTreeTrait(treeTrait: TableTrait, treeController: TableController): void;\n    detachTreeTrait(treeTrait: TableTrait, treeController: TableController): void;\n    attachTreeView(treeView: TableView, treeController: TableController): void;\n    detachTreeView(treeView: TableView, treeController: TableController): void;\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\n\n/** @public */\nexport interface ColViewObserver<V extends ColView = ColView> extends HtmlViewObserver<V> {\n  viewDidPress?(input: PositionGestureInput, event: Event | null, view: V): void;\n\n  viewDidLongPress?(input: PositionGestureInput, view: V): void;\n}\n\n/** @public */\nexport class ColView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initCol();\n  }\n\n  protected initCol(): void {\n    this.setIntrinsic<ColView>({\n      classList: [\"col\"],\n      style: {\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<ColViewObserver>;\n\n  didPress(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"viewDidPress\", input, event, this);\n  }\n\n  didLongPress(input: PositionGestureInput): void {\n    this.callObservers(\"viewDidLongPress\", input, this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {Look} from \"@swim/theme\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ColViewObserver} from \"./ColView\";\nimport {ColView} from \"./ColView\";\n\n/** @public */\nexport interface TextColViewObserver<V extends TextColView = TextColView> extends ColViewObserver<V> {\n  viewWillAttachLabel?(labelView: HtmlView, view: V): void;\n\n  viewDidDetachLabel?(labelView: HtmlView, view: V): void;\n}\n\n/** @public */\nexport class TextColView extends ColView {\n  protected override initCol(): void {\n    super.initCol();\n    this.classList.add(\"col-text\");\n  }\n\n  declare readonly observerType?: Class<TextColViewObserver>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    willAttachView(labelView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachLabel\", labelView, this.owner);\n    },\n    didDetachView(labelView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachLabel\", labelView, this.owner);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        let view = this.view;\n        if (view === null) {\n          view = this.createView();\n        }\n        view.text(value);\n        return view;\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return HtmlView.fromTag(\"span\").style.setIntrinsic({\n        alignSelf: \"center\",\n        whiteSpace: \"nowrap\",\n        textOverflow: \"ellipsis\",\n        overflowX: \"hidden\",\n        overflowY: \"hidden\",\n        color: Look.legendColor,\n      });\n    },\n  })\n  readonly label!: ViewRef<this, Like<HtmlView, string | undefined>>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {Color} from \"@swim/style\";\nimport type {MoodVector} from \"@swim/theme\";\nimport type {ThemeMatrix} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {Graphics} from \"@swim/graphics\";\nimport {IconLayout} from \"@swim/graphics\";\nimport {Icon} from \"@swim/graphics\";\nimport type {IconView} from \"@swim/graphics\";\nimport {IconGraphicsAnimator} from \"@swim/graphics\";\nimport {SvgIconView} from \"@swim/graphics\";\nimport type {ColViewObserver} from \"./ColView\";\nimport {ColView} from \"./ColView\";\n\n/** @public */\nexport interface IconColViewObserver<V extends IconColView = IconColView> extends ColViewObserver<V> {\n  viewDidSetGraphics?(graphics: Graphics | null, view: V): void;\n}\n\n/** @public */\nexport class IconColView extends ColView implements IconView {\n  protected override initCol(): void {\n    super.initCol();\n    this.classList.add(\"col-icon\");\n  }\n\n  declare readonly observerType?: Class<IconColViewObserver>;\n\n  /** @override */\n  @Animator({valueType: IconLayout, value: null, updateFlags: View.NeedsLayout})\n  readonly iconLayout!: Animator<this, IconLayout | null>;\n\n  @ThemeAnimator({\n    valueType: Color,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetState(iconColor: Color | null): void {\n      const timing = this.timing !== null ? this.timing : false;\n      this.owner.graphics.setState(this.owner.graphics.state, timing, Affinity.Reflexive);\n    },\n  })\n  get iconColor(): ThemeAnimator<this, Color | null> {\n    return ThemeAnimator.getter();\n  }\n\n  @ThemeAnimator({\n    extends: IconGraphicsAnimator,\n    valueType: Graphics,\n    value: null,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newGraphics: Graphics | null, oldGraphics: Graphics | null): void {\n      this.owner.callObservers(\"viewDidSetGraphics\", newGraphics, this.owner);\n    },\n  })\n  readonly graphics!: ThemeAnimator<this, Graphics | null>;\n\n  @ViewRef({\n    viewType: SvgIconView,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n    initView(svgView: SvgIconView): void {\n      svgView.style.position.set(\"absolute\");\n      svgView.iconLayout.setInherits(true);\n      svgView.iconColor.setInherits(true);\n      svgView.graphics.setInherits(true);\n    },\n  })\n  readonly svg!: ViewRef<this, SvgIconView>;\n\n  protected override onApplyTheme(theme: ThemeMatrix, mood: MoodVector, timing: Timing | boolean): void {\n    super.onApplyTheme(theme, mood, timing);\n    if (!this.graphics.derived) {\n      const oldGraphics = this.graphics.value;\n      if (oldGraphics instanceof Icon) {\n        const newGraphics = oldGraphics.withTheme(theme, mood);\n        this.graphics.setState(newGraphics, oldGraphics.isThemed() ? timing : false, Affinity.Reflexive);\n      }\n    }\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.requireUpdate(View.NeedsLayout);\n  }\n\n  protected override needsDisplay(displayFlags: ViewFlags): ViewFlags {\n    if ((this.flags & View.NeedsLayout) === 0) {\n      displayFlags &= ~View.NeedsLayout;\n    }\n    return displayFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutIcon();\n  }\n\n  protected layoutIcon(): void {\n    const svgView = this.svg.view;\n    if (svgView === null || !svgView.attributes.width.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.height.hasAffinity(Affinity.Intrinsic)\n                         && !svgView.attributes.viewBox.hasAffinity(Affinity.Intrinsic)) {\n      return;\n    }\n    const width = this.style.width.pxValue();\n    const height = this.style.height.pxValue();\n    svgView.attributes.setIntrinsic({\n      width, height,\n      viewBox: \"0 0 \" + width + \" \" + height,\n    });\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {DisclosureButton} from \"@swim/button\";\nimport type {ColViewObserver} from \"./ColView\";\nimport {ColView} from \"./ColView\";\n\n/** @public */\nexport interface DisclosureColViewObserver<V extends DisclosureColView = DisclosureColView> extends ColViewObserver<V> {\n}\n\n/** @public */\nexport class DisclosureColView extends ColView {\n  protected override initCol(): void {\n    super.initCol();\n    this.classList.add(\"col-disclosure\");\n  }\n\n  declare readonly observerType?: Class<DisclosureColViewObserver>;\n\n  @ExpansionAnimator({value: null, inherits: true, inheritName: \"expansion\"})\n  readonly disclosure!: ExpansionAnimator<this, Expansion | null>;\n\n  @ViewRef({\n    viewType: DisclosureButton,\n    viewKey: true,\n    binds: true,\n    init(): void {\n      this.insertView();\n    },\n  })\n  readonly button!: ViewRef<this, DisclosureButton>;\n\n  override didPress(input: PositionGestureInput, event: Event | null): void {\n    input.preventDefault();\n    const superDisclosure = this.disclosure.inlet;\n    if (superDisclosure instanceof ExpansionAnimator) {\n      superDisclosure.toggle();\n    }\n    super.didPress(input, event);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {ColLayout} from \"./ColLayout\";\nimport {ColController} from \"./\"; // forward import\n\n/** @public */\nexport interface ColTraitObserver<T extends ColTrait = ColTrait> extends TraitObserver<T> {\n  traitDidSetLayout?(layout: ColLayout | null, trait: T): void;\n}\n\n/** @public */\nexport class ColTrait extends Trait {\n  declare readonly observerType?: Class<ColTraitObserver>;\n\n  @Property({\n    valueType: ColLayout,\n    value: null,\n    didSetValue(layout: ColLayout | null): void {\n      this.owner.callObservers(\"traitDidSetLayout\", layout, this.owner);\n    },\n  })\n  readonly layout!: Property<this, ColLayout | null>;\n\n  createColController(): ColController {\n    return new ColController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {ColTraitObserver} from \"./ColTrait\";\nimport {ColTrait} from \"./ColTrait\";\nimport type {ColController} from \"./ColController\";\nimport {TextColController} from \"./\"; // forward import\n\n/** @public */\nexport interface TextColTraitObserver<T extends TextColTrait = TextColTrait> extends ColTraitObserver<T> {\n  traitDidSetLabel?(label: string | undefined, trait: T): void;\n}\n\n/** @public */\nexport class TextColTrait extends ColTrait {\n  declare readonly observerType?: Class<TextColTraitObserver>;\n\n  @Property({\n    valueType: String,\n    didSetValue(label: string | undefined): void {\n      this.owner.callObservers(\"traitDidSetLabel\", label, this.owner);\n    },\n  })\n  readonly label!: Property<this, string | undefined>;\n\n  override createColController(): ColController {\n    return new TextColController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Graphics} from \"@swim/graphics\";\nimport type {ColTraitObserver} from \"./ColTrait\";\nimport {ColTrait} from \"./ColTrait\";\nimport type {ColController} from \"./ColController\";\nimport {IconColController} from \"./\"; // forward import\n\n/** @public */\nexport interface IconColTraitObserver<T extends IconColTrait = IconColTrait> extends ColTraitObserver<T> {\n  traitDidSetIcon?(icon: Graphics | null, trait: T): void;\n}\n\n/** @public */\nexport class IconColTrait extends ColTrait {\n  declare readonly observerType?: Class<IconColTraitObserver>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(icon: Graphics | null): void {\n      this.owner.callObservers(\"traitDidSetIcon\", icon, this.owner);\n    },\n  })\n  readonly icon!: Property<this, Graphics | null>;\n\n  override createColController(): ColController {\n    return new IconColController();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ColLayout} from \"./ColLayout\";\nimport {ColView} from \"./ColView\";\nimport {ColTrait} from \"./ColTrait\";\nimport type {TextColTrait} from \"./TextColTrait\";\n\n/** @public */\nexport interface ColControllerObserver<C extends ColController = ColController> extends ControllerObserver<C> {\n  controllerWillAttachColTrait?(colTrait: ColTrait, controller: C): void;\n\n  controllerDidDetachColTrait?(colTrait: ColTrait, controller: C): void;\n\n  controllerWillAttachColView?(colView: ColView, controller: C): void;\n\n  controllerDidDetachColView?(colView: ColView, controller: C): void;\n\n  controllerDidSetColLayout?(colLayout: ColLayout | null, controller: C): void;\n\n  controllerDidPressColView?(input: PositionGestureInput, event: Event | null, colView: ColView, controller: C): void;\n\n  controllerDidLongPressColView?(input: PositionGestureInput, colView: ColView, controller: C): void;\n}\n\n/** @public */\nexport class ColController extends Controller {\n  declare readonly observerType?: Class<ColControllerObserver>;\n\n  @TraitViewRef({\n    traitType: ColTrait,\n    observesTrait: true,\n    willAttachTrait(colTrait: ColTrait): void {\n      this.owner.callObservers(\"controllerWillAttachColTrait\", colTrait, this.owner);\n    },\n    didDetachTrait(colTrait: ColTrait): void {\n      this.owner.callObservers(\"controllerDidDetachColTrait\", colTrait, this.owner);\n    },\n    traitDidSetLayout(colLayout: ColLayout | null): void {\n      this.owner.callObservers(\"controllerDidSetColLayout\", colLayout, this.owner);\n    },\n    viewType: ColView,\n    observesView: true,\n    willAttachView(colView: ColView): void {\n      this.owner.callObservers(\"controllerWillAttachColView\", colView, this.owner);\n    },\n    didDetachView(colView: ColView): void {\n      this.owner.callObservers(\"controllerDidDetachColView\", colView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, colView: ColView): void {\n      this.owner.callObservers(\"controllerDidPressColView\", input, event, colView, this.owner);\n    },\n    viewDidLongPress(input: PositionGestureInput, colView: ColView): void {\n      this.owner.callObservers(\"controllerDidLongPressColView\", input, colView, this.owner);\n    },\n  })\n  readonly col!: TraitViewRef<this, ColTrait, ColView> & Observes<ColTrait> & Observes<TextColTrait> & Observes<ColView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ColControllerObserver} from \"./ColController\";\nimport {ColController} from \"./ColController\";\nimport {TextColView} from \"./TextColView\";\nimport {TextColTrait} from \"./TextColTrait\";\n\n/** @public */\nexport interface TextColControllerObserver<C extends TextColController = TextColController> extends ColControllerObserver<C> {\n  controllerWillAttachColTrait?(colTrait: TextColTrait, controller: C): void;\n\n  controllerDidDetachColTrait?(colTrait: TextColTrait, controller: C): void;\n\n  controllerWillAttachColView?(colView: TextColView, controller: C): void;\n\n  controllerDidDetachColView?(colView: TextColView, controller: C): void;\n\n  controllerWillAttachColLabelView?(colLabelView: HtmlView, controller: C): void;\n\n  controllerDidDetachColLabelView?(colLabelView: HtmlView, controller: C): void;\n}\n\n/** @public */\nexport class TextColController extends ColController {\n  declare readonly observerType?: Class<TextColControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    traitType: TextColTrait,\n    observesTrait: true,\n    initTrait(cellTrait: TextColTrait): void {\n      this.owner.setLabelView(cellTrait.label.value);\n    },\n    deinitTrait(cellTrait: TextColTrait): void {\n      this.owner.setLabelView(void 0);\n    },\n    traitDidSetLabel(label: string | undefined): void {\n      this.owner.setLabelView(label);\n    },\n    viewType: TextColView,\n    observesView: true,\n    initView(colView: TextColView): void {\n      this.owner.label.setView(colView.label.view);\n      const cellTrait = this.trait;\n      if (cellTrait !== null) {\n        this.owner.setLabelView(cellTrait.label.value);\n      }\n    },\n    deinitView(colView: TextColView): void {\n      this.owner.label.setView(null);\n    },\n    viewWillAttachLabel(labelView: HtmlView): void {\n      this.owner.label.setView(labelView);\n    },\n    viewDidDetachLabel(labelView: HtmlView): void {\n      this.owner.label.setView(null);\n    },\n  })\n  override readonly col!: TraitViewRef<this, TextColTrait, TextColView> & ColController[\"col\"] & Observes<TextColTrait> & Observes<TextColView>;\n\n  protected setLabelView(label: string | undefined): void {\n    const colView = this.col.view;\n    if (colView !== null) {\n      colView.label.set(label);\n    }\n  }\n\n  @ViewRef({\n    viewType: HtmlView,\n    willAttachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerWillAttachColLabelView\", contentView, this.owner);\n    },\n    didDetachView(contentView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidDetachColLabelView\", contentView, this.owner);\n    },\n  })\n  readonly label!: ViewRef<this, HtmlView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {ColControllerObserver} from \"./ColController\";\nimport {ColController} from \"./ColController\";\nimport {IconColView} from \"./IconColView\";\nimport {IconColTrait} from \"./IconColTrait\";\n\n/** @public */\nexport interface IconColControllerObserver<C extends IconColController = IconColController> extends ColControllerObserver<C> {\n  controllerWillAttachColTrait?(colTrait: IconColTrait, controller: C): void;\n\n  controllerDidDetachColTrait?(colTrait: IconColTrait, controller: C): void;\n\n  controllerWillAttachColView?(colView: IconColView, controller: C): void;\n\n  controllerDidDetachColView?(colView: IconColView, controller: C): void;\n\n  controllerDidSetColIcon?(colIcon: Graphics | null, controller: C): void;\n}\n\n/** @public */\nexport class IconColController extends ColController {\n  declare readonly observerType?: Class<IconColControllerObserver>;\n\n  protected setIcon(icon: Graphics | null): void {\n    const colView = this.col.view;\n    if (colView !== null) {\n      colView.graphics.set(icon);\n    }\n  }\n\n  @TraitViewRef({\n    extends: true,\n    traitType: IconColTrait,\n    observesTrait: true,\n    initTrait(colTrait: IconColTrait): void {\n      this.owner.setIcon(colTrait.icon.value);\n    },\n    deinitTrait(colTrait: IconColTrait): void {\n      this.owner.setIcon(null);\n    },\n    traitDidSetIcon(icon: Graphics | null): void {\n      this.owner.setIcon(icon);\n    },\n    viewType: IconColView,\n    observesView: true,\n    initView(colView: IconColView): void {\n      const colTrait = this.trait;\n      if (colTrait !== null) {\n        this.owner.setIcon(colTrait.icon.value);\n      }\n    },\n    viewDidSetGraphics(colIcon: Graphics | null): void {\n      this.owner.callObservers(\"controllerDidSetColIcon\", colIcon, this.owner);\n    },\n  })\n  override readonly col!: TraitViewRef<this, IconColTrait, IconColView> & ColController[\"col\"] & Observes<IconColTrait> & Observes<IconColView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport type {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {PositionGesture} from \"@swim/view\";\nimport {NodeView} from \"@swim/dom\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TableLayout} from \"./TableLayout\";\nimport {ColView} from \"./ColView\";\n\n/** @public */\nexport interface HeaderViewObserver<V extends HeaderView = HeaderView> extends HtmlViewObserver<V> {\n  viewWillAttachCol?(colView: ColView, targetView: View | null, view: V): void;\n\n  viewDidDetachCol?(colView: ColView, view: V): void;\n\n  viewDidPress?(input: PositionGestureInput, event: Event | null, view: V): void;\n\n  viewDidLongPress?(input: PositionGestureInput, view: V): void;\n}\n\n/** @public */\nexport class HeaderView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initHeader();\n  }\n\n  protected initHeader(): void {\n    this.setIntrinsic<HeaderView>({\n      classList: [\"header\"],\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<HeaderViewObserver>;\n\n  @Property({valueType: TableLayout, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly layout!: Property<this, TableLayout | null>;\n\n  @Property({valueType: Number, value: 0, inherits: true, updateFlags: View.NeedsLayout})\n  readonly depth!: Property<this, number>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowSpacing!: ThemeConstraintAnimator<this, Length | null>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowHeight!: ThemeConstraintAnimator<this, Length | null>;\n\n  @ExpansionAnimator({value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly stretch!: ExpansionAnimator<this, Expansion | null>;\n\n  getCol<F extends Class<ColView>>(key: string, colViewClass: F): InstanceType<F> | null;\n  getCol(key: string): ColView | null;\n  getCol(key: string, colViewClass?: Class<ColView>): ColView | null {\n    if (colViewClass === void 0) {\n      colViewClass = ColView;\n    }\n    const colView = this.getChild(key);\n    return colView instanceof colViewClass ? colView : null;\n  }\n\n  getOrCreateCol<F extends Class<Instance<F, ColView>> & Creatable<Instance<F, ColView>>>(key: string, colViewClass: F): InstanceType<F> {\n    let colView = this.getChild(key, colViewClass);\n    if (colView === null) {\n      colView = colViewClass.create();\n      this.setChild(key, colView);\n    }\n    return colView!;\n  }\n\n  setCol(key: string, colView: ColView | null): void {\n    this.setChild(key, colView);\n  }\n\n  @ViewSet({\n    viewType: ColView,\n    binds: true,\n    initView(colView: ColView): void {\n      colView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: 0,\n        height: this.owner.style.height.state,\n      });\n    },\n    willAttachView(colView: ColView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachCol\", colView, target, this.owner);\n    },\n    didDetachView(colView: ColView): void {\n      this.owner.callObservers(\"viewDidDetachCol\", colView, this.owner);\n    },\n  })\n  readonly cols!: ViewSet<this, ColView>;\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.layoutHeader();\n  }\n\n  protected layoutHeader(): void {\n    this.rowHeight.recohere(this.updateTime);\n    const rowHeight = this.rowHeight.value;\n    if (rowHeight !== null) {\n      this.style.height.setIntrinsic(rowHeight);\n    }\n  }\n\n  protected override displayChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    if ((displayFlags & View.NeedsLayout) !== 0) {\n      this.layoutChildren(displayFlags, displayChild);\n    } else {\n      super.displayChildren(displayFlags, displayChild);\n    }\n  }\n\n  protected layoutChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    const layout = this.layout.value;\n    const height = this.style.height.state;\n    const stretch = this.stretch.getPhaseOr(1);\n    type self = this;\n    function layoutChild(this: self, child: View, displayFlags: ViewFlags): void {\n      if (child instanceof ColView) {\n        const key = child.key;\n        const col = layout !== null && key !== void 0 ? layout.getCol(key) : null;\n        if (col !== null) {\n          child.style.setIntrinsic({\n            display: !col.hidden && col.width !== null ? \"flex\" : \"none\",\n            left: col.left,\n            width: col.width,\n            height,\n            color: col.textColor,\n            opacity: col.persistent ? void 0 : stretch,\n          });\n        } else {\n          child.style.setIntrinsic({\n            display: \"none\",\n            left: null,\n            width: null,\n            height: null,\n            color: null,\n            opacity: void 0,\n          });\n        }\n      }\n      displayChild.call(this, child, displayFlags);\n    }\n    super.displayChildren(displayFlags, layoutChild);\n  }\n\n  @PositionGesture({\n    bindsOwner: true,\n    didPress(input: PositionGestureInput, event: Event | null): void {\n      if (this.owner.clientBounds.contains(input.x, input.y)) {\n        if (!input.defaultPrevented) {\n          let target = input.target;\n          while (target instanceof Node && target !== this.owner.node) {\n            const targetView = NodeView.get(target);\n            if (targetView instanceof ColView) {\n              targetView.didPress(input, event);\n              break;\n            }\n            target = target.parentNode;\n          }\n        }\n        if (!input.defaultPrevented) {\n          this.owner.callObservers(\"viewDidPress\", input, event, this.owner);\n        }\n      }\n    },\n    didLongPress(input: PositionGestureInput): void {\n      if (!input.defaultPrevented) {\n        let target = input.target;\n        while (target instanceof Node && target !== this.owner.node) {\n          const targetView = NodeView.get(target);\n          if (targetView instanceof ColView) {\n            targetView.didLongPress(input);\n            break;\n          }\n          target = target.parentNode;\n        }\n      }\n      if (!input.defaultPrevented) {\n        this.owner.callObservers(\"viewDidLongPress\", input, this.owner);\n      }\n    },\n  })\n  readonly gesture!: PositionGesture<this, HeaderView>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitSet} from \"@swim/model\";\nimport {ColTrait} from \"./ColTrait\";\n\n/** @public */\nexport interface HeaderTraitObserver<T extends HeaderTrait = HeaderTrait> extends TraitObserver<T> {\n  traitWillAttachCol?(colTrait: ColTrait, targetTrait: Trait | null, trait: T): void;\n\n  traitDidDetachCol?(colTrait: ColTrait, trait: T): void;\n}\n\n/** @public */\nexport class HeaderTrait extends Trait {\n  declare readonly observerType?: Class<HeaderTraitObserver>;\n\n  getCol<F extends Class<ColTrait>>(key: string, colTraitClass: F): InstanceType<F> | null;\n  getCol(key: string): ColTrait | null;\n  getCol(key: string, colTraitClass?: Class<ColTrait>): ColTrait | null {\n    if (colTraitClass === void 0) {\n      colTraitClass = ColTrait;\n    }\n    const colTrait = this.getTrait(key);\n    return colTrait instanceof colTraitClass ? colTrait : null;\n  }\n\n  getOrCreateCol<F extends Class<Instance<F, ColTrait>> & Creatable<Instance<F, ColTrait>>>(key: string, colTraitClass: F): InstanceType<F> {\n    let colTrait = this.getTrait(key, colTraitClass);\n    if (colTrait === null) {\n      colTrait = colTraitClass.create();\n      this.setTrait(key, colTrait);\n    }\n    return colTrait!;\n  }\n\n  setCol(key: string, colTrait: ColTrait | null): void {\n    this.setTrait(key, colTrait);\n  }\n\n  @TraitSet({\n    traitType: ColTrait,\n    binds: true,\n    willAttachTrait(colTrait: ColTrait, targetTrait: Trait | null): void {\n      this.owner.callObservers(\"traitWillAttachCol\", colTrait, targetTrait, this.owner);\n    },\n    didAttachTrait(colTrait: ColTrait): void {\n      if (this.owner.consuming) {\n        colTrait.consume(this.owner);\n      }\n    },\n    willDetachTrait(colTrait: ColTrait): void {\n      if (this.owner.consuming) {\n        colTrait.unconsume(this.owner);\n      }\n    },\n    didDetachTrait(colTrait: ColTrait): void {\n      this.owner.callObservers(\"traitDidDetachCol\", colTrait, this.owner);\n    },\n    detectModel(model: Model): ColTrait | null {\n      return model.getTrait(ColTrait);\n    },\n  })\n  readonly cols!: TraitSet<this, ColTrait>;\n\n  protected override onStartConsuming(): void {\n    super.onStartConsuming();\n    this.cols.consumeTraits(this);\n  }\n\n  protected override onStopConsuming(): void {\n    super.onStopConsuming();\n    this.cols.unconsumeTraits(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {Controller} from \"@swim/controller\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {ColLayout} from \"./ColLayout\";\nimport type {ColView} from \"./ColView\";\nimport {TextColView} from \"./TextColView\";\nimport type {ColTrait} from \"./ColTrait\";\nimport {ColController} from \"./ColController\";\nimport type {TextColController} from \"./TextColController\";\nimport type {IconColController} from \"./IconColController\";\nimport {HeaderView} from \"./HeaderView\";\nimport {HeaderTrait} from \"./HeaderTrait\";\n\n/** @public */\nexport interface HeaderControllerObserver<C extends HeaderController = HeaderController> extends ControllerObserver<C> {\n  controllerWillAttachHeaderTrait?(headerTrait: HeaderTrait, controller: C): void;\n\n  controllerDidDetachHeaderTrait?(headerTrait: HeaderTrait, controller: C): void;\n\n  controllerWillAttachHeaderView?(headerView: HeaderView, controller: C): void;\n\n  controllerDidDetachHeaderView?(headerView: HeaderView, controller: C): void;\n\n  controllerDidPressHeaderView?(input: PositionGestureInput, event: Event | null, headerView: HeaderView, controller: C): void;\n\n  controllerDidLongPressHeaderView?(input: PositionGestureInput, headerView: HeaderView, controller: C): void;\n\n  controllerWillAttachCol?(colController: ColController, controller: C): void;\n\n  controllerDidDetachCol?(colController: ColController, controller: C): void;\n\n  controllerWillAttachColTrait?(colTrait: ColTrait, colController: ColController, controller: C): void;\n\n  controllerDidDetachColTrait?(colTrait: ColTrait, colController: ColController, controller: C): void;\n\n  controllerDidSetColLayout?(colLayout: ColLayout | null, colController: ColController, controller: C): void;\n\n  controllerWillAttachColView?(colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidDetachColView?(colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidPressColView?(input: PositionGestureInput, event: Event | null, colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidLongPressColView?(input: PositionGestureInput, colView: ColView, colController: ColController, controller: C): void;\n\n  controllerWillAttachColLabelView?(colLabelView: HtmlView, colController: ColController, controller: C): void;\n\n  controllerDidDetachColLabelView?(colLabelView: HtmlView, colController: ColController, controller: C): void;\n\n  controllerDidSetColIcon?(colIcon: Graphics | null, colController: ColController, controller: C): void;\n}\n\n/** @public */\nexport class HeaderController extends Controller {\n  declare readonly observerType?: Class<HeaderControllerObserver>;\n\n  @TraitViewRef({\n    traitType: HeaderTrait,\n    observesTrait: true,\n    willAttachTrait(headerTrait: HeaderTrait): void {\n      this.owner.callObservers(\"controllerWillAttachHeaderTrait\", headerTrait, this.owner);\n    },\n    didAttachTrait(headerTrait: HeaderTrait): void {\n      this.owner.cols.addTraits(headerTrait.cols.traits);\n    },\n    willDetachTrait(headerTrait: HeaderTrait): void {\n      this.owner.cols.deleteTraits(headerTrait.cols.traits);\n    },\n    didDetachTrait(headerTrait: HeaderTrait): void {\n      this.owner.callObservers(\"controllerDidDetachHeaderTrait\", headerTrait, this.owner);\n    },\n    traitWillAttachCol(colTrait: ColTrait, targetTrait: Trait): void {\n      this.owner.cols.addTrait(colTrait, targetTrait);\n    },\n    traitDidDetachCol(colTrait: ColTrait): void {\n      this.owner.cols.deleteTrait(colTrait);\n    },\n    viewType: HeaderView,\n    observesView: true,\n    initView(headerView: HeaderView): void {\n      const colControllers = this.owner.cols.controllers;\n      for (const controllerId in colControllers) {\n        const colController = colControllers[controllerId]!;\n        const colView = colController.col.view;\n        if (colView !== null && colView.parent === null) {\n          const colTrait = colController.col.trait;\n          if (colTrait !== null) {\n            colController.col.insertView(headerView, void 0, void 0, colTrait.key);\n          }\n        }\n      }\n    },\n    insertChildView(parent: View, childView: HeaderView, targetView: View | null, key: string | undefined): void {\n      parent.prependChild(childView, key);\n    },\n    willAttachView(headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerWillAttachHeaderView\", headerView, this.owner);\n    },\n    didDetachView(headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerDidDetachHeaderView\", headerView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerDidPressHeaderView\", input, event, headerView, this.owner);\n    },\n    viewDidLongPress(input: PositionGestureInput, headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerDidLongPressHeaderView\", input, headerView, this.owner);\n    },\n  })\n  readonly header!: TraitViewRef<this, HeaderTrait, HeaderView> & Observes<HeaderTrait> & Observes<HeaderView>;\n\n  getCol<F extends Class<ColController>>(key: string, colControllerClass: F): InstanceType<F> | null;\n  getCol(key: string): ColController | null;\n  getCol(key: string, colControllerClass?: Class<ColController>): ColController | null {\n    if (colControllerClass === void 0) {\n      colControllerClass = ColController;\n    }\n    const colController = this.getChild(key);\n    return colController instanceof colControllerClass ? colController : null;\n  }\n\n  getOrCreateCol<F extends Class<Instance<F, ColController>> & Creatable<Instance<F, ColController>>>(key: string, colControllerClass: F): InstanceType<F> {\n    let colController = this.getChild(key, colControllerClass);\n    if (colController === null) {\n      colController = colControllerClass.create();\n      this.setChild(key, colController);\n    }\n    return colController!;\n  }\n\n  setCol(key: string, colController: ColController | null): void {\n    this.setChild(key, colController);\n  }\n\n  getColTrait<F extends Class<ColTrait>>(key: string, colTraitClass: F): InstanceType<F> | null;\n  getColTrait(key: string): ColTrait | null;\n  getColTrait(key: string, colTraitClass?: Class<ColTrait>): ColTrait | null {\n    const headerTrait = this.header.trait;\n    return headerTrait !== null ? headerTrait.getCol(key, colTraitClass!) : null;\n  }\n\n  getOrCreateColTrait<F extends Class<Instance<F, ColTrait>> & Creatable<Instance<F, ColTrait>>>(key: string, colTraitClass: F): InstanceType<F> {\n    const headerTrait = this.header.trait;\n    if (headerTrait === null) {\n      throw new Error(\"no header trait\");\n    }\n    return headerTrait.getOrCreateCol(key, colTraitClass);\n  }\n\n  setColTrait(key: string, colTrait: ColTrait | null): void {\n    const headerTrait = this.header.trait;\n    if (headerTrait === null) {\n      throw new Error(\"no header trait\");\n    }\n    headerTrait.setCol(key, colTrait);\n  }\n\n  getColView<F extends Class<ColView>>(key: string, colViewClass: F): InstanceType<F> | null;\n  getColView(key: string): ColView | null;\n  getColView(key: string, colViewClass?: Class<ColView>): ColView | null {\n    const headerView = this.header.view;\n    return headerView !== null ? headerView.getCol(key, colViewClass!) : null;\n  }\n\n  getOrCreateColView<F extends Class<Instance<F, ColView>> & Creatable<Instance<F, ColView>>>(key: string, colViewClass: F): InstanceType<F> {\n    let headerView = this.header.view;\n    if (headerView === null) {\n      headerView = this.header.createView();\n      if (headerView === null) {\n        throw new Error(\"no header view\");\n      }\n      this.header.setView(headerView);\n    }\n    return headerView.getOrCreateCol(key, colViewClass);\n  }\n\n  setColView(key: string, colView: ColView | null): void {\n    let headerView = this.header.view;\n    if (headerView === null) {\n      headerView = this.header.createView();\n      if (headerView === null) {\n        throw new Error(\"no header view\");\n      }\n      this.header.setView(headerView);\n    }\n    headerView.setCol(key, colView);\n  }\n\n  @TraitViewControllerSet({\n    controllerType: ColController,\n    binds: true,\n    observes: true,\n    get parentView(): HeaderView | null {\n      return this.owner.header.view;\n    },\n    getTraitViewRef(colController: ColController): TraitViewRef<unknown, ColTrait, ColView> {\n      return colController.col;\n    },\n    willAttachController(colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachCol\", colController, this.owner);\n    },\n    didAttachController(colController: ColController): void {\n      const colTrait = colController.col.trait;\n      if (colTrait !== null) {\n        this.attachColTrait(colTrait, colController);\n      }\n      const colView = colController.col.view;\n      if (colView !== null) {\n        this.attachColView(colView, colController);\n      }\n    },\n    willDetachController(colController: ColController): void {\n      const colView = colController.col.view;\n      if (colView !== null) {\n        this.detachColView(colView, colController);\n      }\n      const colTrait = colController.col.trait;\n      if (colTrait !== null) {\n        this.detachColTrait(colTrait, colController);\n      }\n    },\n    didDetachController(colController: ColController): void {\n      this.owner.callObservers(\"controllerDidDetachCol\", colController, this.owner);\n    },\n    controllerWillAttachColTrait(colTrait: ColTrait, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColTrait\", colTrait, colController, this.owner);\n      this.attachColTrait(colTrait, colController);\n    },\n    controllerDidDetachColTrait(colTrait: ColTrait, colController: ColController): void {\n      this.detachColTrait(colTrait, colController);\n      this.owner.callObservers(\"controllerDidDetachColTrait\", colTrait, colController, this.owner);\n    },\n    attachColTrait(colTrait: ColTrait, colController: ColController): void {\n      // hook\n    },\n    detachColTrait(colTrait: ColTrait, colController: ColController): void {\n      // hook\n    },\n    controllerWillAttachColView(colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColView\", colView, colController, this.owner);\n      this.attachColView(colView, colController);\n    },\n    controllerDidDetachColView(colView: ColView, colController: ColController): void {\n      this.detachColView(colView, colController);\n      this.owner.callObservers(\"controllerDidDetachColView\", colView, colController, this.owner);\n    },\n    controllerDidSetColLayout(colLayout: ColLayout | null, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidSetColLayout\", colLayout, colController, this.owner);\n    },\n    attachColView(colView: ColView, colController: ColController): void {\n      if (colView instanceof TextColView) {\n        const colLabelView = colView.label.view;\n        if (colLabelView !== null) {\n          this.attachColLabelView(colLabelView, colController);\n        }\n      }\n    },\n    detachColView(colView: ColView, colController: ColController): void {\n      if (colView instanceof TextColView) {\n        const colLabelView = colView.label.view;\n        if (colLabelView !== null) {\n          this.detachColLabelView(colLabelView, colController);\n        }\n      }\n      colView.remove();\n    },\n    controllerDidPressColView(input: PositionGestureInput, event: Event | null, colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidPressColView\", input, event, colView, colController, this.owner);\n    },\n    controllerDidLongPressColView(input: PositionGestureInput, colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidLongPressColView\", input, colView, colController, this.owner);\n    },\n    controllerWillAttachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColLabelView\", colLabelView, colController, this.owner);\n      this.attachColLabelView(colLabelView, colController);\n    },\n    controllerDidDetachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      this.detachColLabelView(colLabelView, colController);\n      this.owner.callObservers(\"controllerDidDetachColLabelView\", colLabelView, colController, this.owner);\n    },\n    attachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      // hook\n    },\n    detachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      // hook\n    },\n    controllerDidSetColIcon(colIcon: Graphics | null, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidSetColIcon\", colIcon, colController, this.owner);\n    },\n    createController(colTrait?: ColTrait): ColController {\n      if (colTrait !== void 0) {\n        return colTrait.createColController();\n      } else {\n        return super.createController();\n      }\n    },\n  })\n  readonly cols!: TraitViewControllerSet<this, ColTrait, ColView, ColController> & Observes<ColController> & Observes<TextColController> & Observes<IconColController> & {\n    attachColTrait(colTrait: ColTrait, colController: ColController): void;\n    detachColTrait(colTrait: ColTrait, colController: ColController): void;\n    attachColView(colView: ColView, colController: ColController): void;\n    detachColView(colView: ColView, colController: ColController): void;\n    attachColLabelView(colLabelView: HtmlView, colController: ColController): void;\n    detachColLabelView(colLabelView: HtmlView, colController: ColController): void;\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {R2Box} from \"@swim/math\";\nimport {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TableLayout} from \"./TableLayout\";\nimport type {LeafView} from \"./LeafView\";\nimport {RowView} from \"./RowView\";\nimport {HeaderView} from \"./HeaderView\";\n\n/** @public */\nexport interface TableViewObserver<V extends TableView = TableView> extends HtmlViewObserver<V> {\n  viewWillAttachHeader?(headerView: HeaderView, view: V): void;\n\n  viewDidDetachHeader?(headerView: HeaderView, view: V): void;\n\n  viewWillAttachRow?(rowView: RowView, targetView: View | null, view: V): void;\n\n  viewDidDetachRow?(rowView: RowView, view: V): void;\n\n  viewWillAttachLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidDetachLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewWillHighlightLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidHighlightLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewWillUnhighlightLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidUnhighlightLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidEnterLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidLeaveLeaf?(leafView: LeafView, rowView: RowView): void;\n\n  viewDidPressLeaf?(input: PositionGestureInput, event: Event | null, leafView: LeafView, rowView: RowView): void;\n\n  viewDidLongPressLeaf?(input: PositionGestureInput, leafView: LeafView, rowView: RowView): void;\n\n  viewWillAttachTree?(treeView: TableView, rowView: RowView): void;\n\n  viewDidDetachTree?(treeView: TableView, rowView: RowView): void;\n\n  viewWillExpandRow?(rowView: RowView): void;\n\n  viewDidExpandRow?(rowView: RowView): void;\n\n  viewWillCollapseRow?(rowView: RowView): void;\n\n  viewDidCollapseRow?(rowView: RowView): void;\n\n  viewWillExpand?(view: V): void;\n\n  viewDidExpand?(view: V): void;\n\n  viewWillCollapse?(view: V): void;\n\n  viewDidCollapse?(view: V): void;\n}\n\n/** @public */\nexport class TableView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.visibleViews = [];\n    this.initTable();\n  }\n\n  protected initTable(): void {\n    this.setIntrinsic<TableView>({\n      classList: [\"table\"],\n      style: {\n        position: \"relative\",\n        backgroundColor: Look.backgroundColor,\n        boxSizing: \"border-box\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<TableViewObserver>;\n\n  @Property({valueType: TableLayout, value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly layout!: Property<this, TableLayout | null>;\n\n  @Property({\n    valueType: Number,\n    value: 0,\n    inherits: true,\n    updateFlags: View.NeedsLayout,\n    didSetValue(newDepth: number, oldDepth: number): void {\n      this.owner.modifyTheme(Feel.default, [[Feel.nested, newDepth !== 0 ? 1 : void 0]], false);\n    },\n  })\n  readonly depth!: Property<this, number>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: Length.zero(), inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowSpacing!: ThemeConstraintAnimator<this, Length>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: Length.px(24), inherits: true, updateFlags: View.NeedsLayout})\n  readonly rowHeight!: ThemeConstraintAnimator<this, Length>;\n\n  @Property({valueType: Boolean, value: false, inherits: true})\n  readonly hovers!: Property<this, boolean>;\n\n  @Property({valueType: Boolean, value: true, inherits: true})\n  readonly glows!: Property<this, boolean>;\n\n  @ExpansionAnimator({\n    value: Expansion.expanded(),\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    willExpand(): void {\n      this.owner.callObservers(\"viewWillExpand\", this.owner);\n    },\n    didExpand(): void {\n      this.owner.callObservers(\"viewDidExpand\", this.owner);\n    },\n    willCollapse(): void {\n      this.owner.callObservers(\"viewWillCollapse\", this.owner);\n    },\n    didCollapse(): void {\n      this.owner.callObservers(\"viewDidCollapse\", this.owner);\n    },\n    didSetValue(newExpansion: Expansion, oldExpansion: Expansion): void {\n      if (newExpansion.phase !== 1) {\n        this.owner.expanding.setIntrinsic(newExpansion);\n      } else {\n        this.owner.expanding.setAffinity(Affinity.Transient);\n      }\n      const tableView = this.owner.getRoot(TableView);\n      if (tableView !== null) {\n        tableView.requireUpdate(View.NeedsLayout);\n      } else {\n        this.owner.requireUpdate(View.NeedsLayout);\n      }\n    },\n  })\n  readonly expansion!: ExpansionAnimator<this, Expansion>;\n\n  @ExpansionAnimator({value: Expansion.expanded(), inherits: true})\n  readonly expanding!: ExpansionAnimator<this, Expansion | null>;\n\n  @ExpansionAnimator({value: null, inherits: true})\n  readonly disclosure!: ExpansionAnimator<this, Expansion | null>;\n\n  @ExpansionAnimator({value: Expansion.expanded(), inherits: true})\n  readonly disclosing!: ExpansionAnimator<this, Expansion | null>;\n\n  @ExpansionAnimator({value: null, inherits: true, updateFlags: View.NeedsLayout})\n  readonly stretch!: ExpansionAnimator<this, Expansion | null>;\n\n  @ViewRef({\n    viewType: HeaderView,\n    viewKey: true,\n    binds: true,\n    initView(headerView: HeaderView): void {\n      const layout = this.owner.layout.value;\n      headerView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: null,\n        width: layout !== null ? layout.width : null,\n      });\n      headerView.setCulled(true);\n    },\n    willAttachView(headerView: HeaderView): void {\n      this.owner.callObservers(\"viewWillAttachHeader\", headerView, this.owner);\n    },\n    didDetachView(headerView: HeaderView): void {\n      this.owner.callObservers(\"viewDidDetachHeader\", headerView, this.owner);\n    },\n    insertChild(parent: View, child: HeaderView, target: View | number | null, key: string | undefined): void {\n      parent.prependChild(child, key);\n    }\n  })\n  readonly header!: ViewRef<this, HeaderView>;\n\n  getRow<F extends Class<RowView>>(key: string, rowViewClass: F): InstanceType<F> | null;\n  getRow(key: string): RowView | null;\n  getRow(key: string, rowViewClass?: Class<RowView>): RowView | null {\n    if (rowViewClass === void 0) {\n      rowViewClass = RowView;\n    }\n    const rowView = this.getChild(key);\n    return rowView instanceof rowViewClass ? rowView : null;\n  }\n\n  getOrCreateRow<F extends Class<Instance<F, RowView>> & Creatable<Instance<F, RowView>>>(key: string, rowViewClass: F): InstanceType<F>;\n  getOrCreateRow(key: string): RowView;\n  getOrCreateRow(key: string, rowViewClass?: Class<RowView> & Creatable<RowView>): RowView {\n    if (rowViewClass === void 0) {\n      rowViewClass = RowView;\n    }\n    let rowView = this.getChild(key, rowViewClass);\n    if (rowView === null) {\n      rowView = rowViewClass.create();\n      this.setChild(key, rowView);\n    }\n    return rowView!;\n  }\n\n  setRow(key: string, rowView: RowView | null): void {\n    this.setChild(key, rowView);\n  }\n\n  @ViewSet({\n    viewType: RowView,\n    binds: true,\n    observes: true,\n    initView(rowView: RowView): void {\n      const layout = this.owner.layout.value;\n      rowView.style.setIntrinsic({\n        display: \"none\",\n        position: \"absolute\",\n        left: 0,\n        top: null,\n        width: layout !== null ? layout.width : null,\n      });\n      rowView.setCulled(true);\n    },\n    willAttachView(rowView: RowView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachRow\", rowView, target, this.owner);\n    },\n    didDetachView(rowView: RowView): void {\n      this.owner.callObservers(\"viewDidDetachRow\", rowView, this.owner);\n    },\n    viewWillAttachLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewWillAttachLeaf\", leafView, rowView);\n    },\n    viewDidDetachLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidDetachLeaf\", leafView, rowView);\n    },\n    viewDidEnterLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidEnterLeaf\", leafView, rowView);\n    },\n    viewDidLeaveLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidLeaveLeaf\", leafView, rowView);\n    },\n    viewDidPressLeaf(input: PositionGestureInput, event: Event | null, leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidPressLeaf\", input, event, leafView, rowView);\n    },\n    viewDidLongPressLeaf(input: PositionGestureInput, leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidLongPressLeaf\", input, leafView, rowView);\n    },\n    viewWillAttachTree(treeView: TableView, rowView: RowView): void {\n      this.owner.callObservers(\"viewWillAttachTree\", treeView, rowView);\n    },\n    viewDidDetachTree(treeView: TableView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidDetachTree\", treeView, rowView);\n    },\n    viewWillHighlightLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewWillHighlightLeaf\", leafView, rowView);\n    },\n    viewDidHighlightLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidHighlightLeaf\", leafView, rowView);\n    },\n    viewWillUnhighlightLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewWillUnhighlightLeaf\", leafView, rowView);\n    },\n    viewDidUnhighlightLeaf(leafView: LeafView, rowView: RowView): void {\n      this.owner.callObservers(\"viewDidUnhighlightLeaf\", leafView, rowView);\n    },\n    viewWillExpand(rowView: RowView): void {\n      this.owner.callObservers(\"viewWillExpandRow\", rowView);\n    },\n    viewDidExpand(rowView: RowView): void {\n      this.owner.callObservers(\"viewDidExpandRow\", rowView);\n    },\n    viewWillCollapse(rowView: RowView): void {\n      this.owner.callObservers(\"viewWillCollapseRow\", rowView);\n    },\n    viewDidCollapse(rowView: RowView): void {\n      this.owner.callObservers(\"viewDidCollapseRow\", rowView);\n    },\n  })\n  readonly rows!: ViewSet<this, RowView> & Observes<RowView>;\n\n  /** @internal */\n  readonly visibleViews: readonly View[];\n\n  @Property({\n    valueType: R2Box,\n    value: null,\n    inherits: true,\n    init(): void {\n      this.outletValue = null;\n    },\n    getOutletValue(outlet: Property<unknown, R2Box | null>): R2Box | null {\n      return this.outletValue;\n    },\n    setOutletValue(newOutletValue: R2Box | null): void {\n      const oldOutletValue = this.outletValue;\n      if (!this.equalValues(newOutletValue, oldOutletValue)) {\n        this.outletValue = newOutletValue;\n        this.decohereOutlets();\n      }\n    },\n  })\n  readonly visibleFrame!: Property<this, R2Box | null> & {\n    /** @internal */\n    outletValue: R2Box | null,\n    /** @internal */\n    setOutletValue(newOutletValue: R2Box | null): void,\n  };\n\n  protected detectVisibleFrame(): R2Box {\n    const xBleed = 0;\n    const yBleed = this.rowHeight.getValueOr(Length.zero()).pxValue();\n    const parentVisibleFrame = this.visibleFrame.value;\n    if (parentVisibleFrame !== null) {\n      const left = this.style.left.pxState();\n      const top = this.style.top.pxState();\n      return new R2Box(parentVisibleFrame.xMin - left - xBleed, parentVisibleFrame.yMin - top - yBleed,\n                       parentVisibleFrame.xMax - left + xBleed, parentVisibleFrame.yMax - top + yBleed);\n    } else {\n      const bounds = this.node.getBoundingClientRect();\n      const xMin = -bounds.x - xBleed;\n      const yMin = -bounds.y - yBleed;\n      const xMax = window.innerWidth - bounds.x + xBleed;\n      const yMax = window.innerHeight - bounds.y + yBleed;\n      return new R2Box(xMin, yMin, xMax, yMax);\n    }\n  }\n\n  override needsProcess(processFlags: ViewFlags): ViewFlags {\n    if ((processFlags & View.NeedsResize) !== 0) {\n      processFlags |= View.NeedsScroll;\n    }\n    return processFlags;\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizeTable();\n  }\n\n  protected resizeTable(): void {\n    const oldLayout = !this.layout.derived ? this.layout.value : null;\n    if (oldLayout !== null) {\n      const superLayout = this.layout.inletValue;\n      let width: Length | number | null = null;\n      if (superLayout !== void 0 && superLayout !== null && superLayout.width !== null) {\n        width = superLayout.width.pxValue();\n      }\n      if (width === null) {\n        width = this.style.width.pxState();\n      }\n      const edgeInsets = this.edgeInsets.value;\n      const paddingLeft = this.style.paddingLeft.pxState();\n      const paddingRight = this.style.paddingRight.pxState();\n      let left = edgeInsets !== null ? edgeInsets.insetLeft : 0;\n      left += paddingLeft;\n      let right = edgeInsets !== null ? edgeInsets.insetRight : 0;\n      right += paddingRight;\n      const newLayout = oldLayout.resized(width, left, right);\n      this.layout.set(newLayout);\n    }\n  }\n\n  protected processVisibleViews(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    const visibleViews = this.visibleViews;\n    let i = 0;\n    while (i < visibleViews.length) {\n      const child = visibleViews[i]!;\n      processChild.call(this, child, processFlags);\n      if ((child.flags & View.RemovingFlag) !== 0) {\n        child.setFlags(child.flags & ~View.RemovingFlag);\n        this.removeChild(child);\n        continue;\n      }\n      i += 1;\n    }\n  }\n\n  protected override processChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    if (!this.culled) {\n      if ((processFlags & View.NeedsScroll) !== 0) {\n        this.scrollChildren(processFlags, processChild);\n      } else {\n        this.processVisibleViews(processFlags, processChild);\n      }\n    }\n  }\n\n  protected scrollChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    const rowHeight = this.rowHeight.getValue().pxValue();\n    const rowSpacing = this.rowSpacing.getValue().pxValue(rowHeight);\n    const expandingPhase = this.expanding.getPhaseOr(1);\n    const disclosingPhase = this.disclosing.getPhaseOr(1);\n\n    const visibleViews = this.visibleViews as View[];\n    visibleViews.length = 0;\n\n    const visibleFrame = this.detectVisibleFrame();\n    this.visibleFrame.setOutletValue(visibleFrame);\n\n    let yValue = 0;\n    let yState = 0;\n    let rowIndex = 0;\n\n    type self = this;\n    function scrollChild(this: self, child: View, processFlags: ViewFlags): void {\n      if (child instanceof RowView || child instanceof HeaderView) {\n        if (rowIndex !== 0) {\n          if (child instanceof RowView) {\n            yValue += rowSpacing * disclosingPhase * expandingPhase;\n          } else {\n            yValue += rowSpacing * disclosingPhase;\n          }\n          yState += rowSpacing;\n        }\n        if (child.style.top.hasAffinity(Affinity.Intrinsic)) {\n          child.style.top.setInterpolatedValue(Length.px(yValue), Length.px(yState));\n        }\n      }\n      let isVisible: boolean;\n      if (child instanceof HtmlView) {\n        const top = child.style.top.state;\n        const height = child.style.height.state;\n        if (top !== null && height !== null) {\n          const yMin0 = visibleFrame.yMin;\n          const yMax0 = visibleFrame.yMax;\n          const yMin1 = top.pxValue();\n          const yMax1 = yMin1 + height.pxValue();\n          isVisible = disclosingPhase !== 0 && (child instanceof HeaderView || expandingPhase !== 0)\n                   && yMin0 <= yMax1 && yMin1 <= yMax0 && yMin1 !== yMax1;\n          child.style.display.setIntrinsic(isVisible ? \"flex\" : \"none\");\n          child.setCulled(!isVisible);\n        } else {\n          isVisible = true;\n        }\n      } else {\n        isVisible = true;\n      }\n      if (isVisible) {\n        visibleViews.push(child);\n        processChild.call(this, child, processFlags);\n      }\n      if (child instanceof RowView || child instanceof HeaderView) {\n        if (child instanceof RowView) {\n          yValue += child.style.height.pxValue() * disclosingPhase * expandingPhase;\n        } else {\n          yValue += child.style.height.pxValue() * disclosingPhase;\n        }\n        yState += child.style.height.pxState();\n        rowIndex += 1;\n      }\n    }\n    super.processChildren(processFlags, scrollChild);\n  }\n\n  protected displayVisibleViews(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    const visibleViews = this.visibleViews;\n    let i = 0;\n    while (i < visibleViews.length) {\n      const child = visibleViews[i]!;\n      displayChild.call(this, child, displayFlags);\n      if ((child.flags & View.RemovingFlag) !== 0) {\n        child.setFlags(child.flags & ~View.RemovingFlag);\n        this.removeChild(child);\n        continue;\n      }\n      i += 1;\n    }\n  }\n\n  protected override displayChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    if ((displayFlags & View.NeedsLayout) !== 0) {\n      this.layoutChildren(displayFlags, displayChild);\n    } else {\n      this.displayVisibleViews(displayFlags, displayChild);\n    }\n  }\n\n  protected layoutChildren(displayFlags: ViewFlags, displayChild: (this: this, child: View, displayFlags: ViewFlags) => void): void {\n    this.rowHeight.recohere(this.updateTime);\n    this.resizeTable();\n    const layout = this.layout.value;\n    const width = layout !== null ? layout.width : null;\n    const rowHeight = this.rowHeight.getValue().pxValue();\n    const rowSpacing = this.rowSpacing.getValue().pxValue(rowHeight);\n    const expandingPhase = this.expanding.getPhaseOr(1);\n    const disclosurePhase = this.disclosure.getPhaseOr(1);\n    const disclosingPhase = this.disclosing.getPhaseOr(1);\n    const timing = !this.disclosing.tweening ? this.getLook(Look.timing) : null;\n\n    const visibleViews = this.visibleViews as View[];\n    visibleViews.length = 0;\n\n    const visibleFrame = this.detectVisibleFrame();\n    this.visibleFrame.setOutletValue(visibleFrame);\n\n    let yValue = 0;\n    let yState = 0;\n    let rowIndex = 0;\n\n    type self = this;\n    function layoutChild(this: self, child: View, displayFlags: ViewFlags): void {\n      if (child instanceof RowView || child instanceof HeaderView) {\n        if (rowIndex !== 0) {\n          if (child instanceof RowView) {\n            yValue += rowSpacing * disclosingPhase * expandingPhase;\n          } else {\n            yValue += rowSpacing * disclosingPhase;\n          }\n          yState += rowSpacing;\n        }\n        if (child.style.top.hasAffinity(Affinity.Intrinsic)) {\n          if (yValue !== yState || child.style.display.value === \"none\") {\n            child.style.top.setInterpolatedValue(Length.px(yValue), Length.px(yState));\n          } else {\n            child.style.top.setIntrinsic(yState, timing);\n          }\n        }\n        child.style.width.setIntrinsic(width);\n      }\n      let isVisible: boolean;\n      if (child instanceof HtmlView) {\n        const top = child.style.top.state;\n        const height = child.style.height.state;\n        if (top !== null && height !== null) {\n          const yMin0 = visibleFrame.yMin;\n          const yMax0 = visibleFrame.yMax;\n          const yMin1 = top.pxValue();\n          const yMax1 = yMin1 + height.pxValue();\n          isVisible = disclosingPhase !== 0 && (child instanceof HeaderView || expandingPhase !== 0)\n                   && yMin0 <= yMax1 && yMin1 <= yMax0 && yMin1 !== yMax1;\n        } else {\n          isVisible = true;\n        }\n        if (child instanceof RowView) {\n          child.style.opacity.setIntrinsic(disclosurePhase * expandingPhase);\n        } else {\n          child.style.opacity.setIntrinsic(disclosurePhase);\n        }\n        child.style.display.setIntrinsic(isVisible ? \"flex\" : \"none\");\n        child.setCulled(!isVisible);\n      } else {\n        isVisible = true;\n      }\n      if (isVisible) {\n        visibleViews.push(child);\n      }\n      displayChild.call(this, child, displayFlags);\n      if (child instanceof RowView || child instanceof HeaderView) {\n        if (child instanceof RowView) {\n          yValue += child.style.height.pxValue() * disclosingPhase * expandingPhase;\n        } else {\n          yValue += child.style.height.pxValue() * disclosingPhase;\n        }\n        yState += child.style.height.pxState();\n        rowIndex += 1;\n      }\n    }\n    super.displayChildren(displayFlags, layoutChild);\n\n    if (this.style.height.hasAffinity(Affinity.Intrinsic)) {\n      this.style.height.setInterpolatedValue(Length.px(yValue), Length.px(yState));\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport type {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport {TraitSet} from \"@swim/model\";\nimport type {ColLayout} from \"./ColLayout\";\nimport {TableLayout} from \"./TableLayout\";\nimport {RowTrait} from \"./RowTrait\";\nimport {ColTrait} from \"./ColTrait\";\nimport {HeaderTrait} from \"./HeaderTrait\";\n\n/** @public */\nexport interface TableTraitObserver<T extends TableTrait = TableTrait> extends TraitObserver<T> {\n  traitDidSetTableLayout?(tableLayout: TableLayout | null, trait: T): void;\n\n  traitWillAttachHeader?(headerTrait: HeaderTrait, trait: T): void;\n\n  traitDidDetachHeader?(headerTrait: HeaderTrait, trait: T): void;\n\n  traitWillAttachCol?(colTrait: ColTrait, targetTrait: Trait | null, trait: T): void;\n\n  traitDidDetachCol?(colTrait: ColTrait, trait: T): void;\n\n  traitWillAttachRow?(rowTrait: RowTrait, targetTrait: Trait | null, trait: T): void;\n\n  traitDidDetachRow?(rowTrait: RowTrait, trait: T): void;\n}\n\n/** @public */\nexport class TableTrait extends Trait {\n  declare readonly observerType?: Class<TableTraitObserver>;\n\n  protected createLayout(): TableLayout | null {\n    const colLayouts: ColLayout[] = [];\n    const colTraits = this.cols.traits;\n    for (const traitId in colTraits) {\n      const colTrait = colTraits[traitId]!;\n      const colLayout = colTrait.layout.value;\n      if (colLayout !== null) {\n        colLayouts.push(colLayout);\n      }\n    }\n    const colSpacing = this.colSpacing.value;\n    return new TableLayout(null, null, null, colSpacing, colLayouts);\n  }\n\n  protected updateLayout(): void {\n    const layout = this.createLayout();\n    this.layout.setIntrinsic(layout);\n  }\n\n  @Property({\n    valueType: TableLayout,\n    value: null,\n    didSetValue(layout: TableLayout | null): void {\n      this.owner.callObservers(\"traitDidSetTableLayout\", layout, this.owner);\n    },\n  })\n  readonly layout!: Property<this, TableLayout | null>;\n\n  @Property({\n    valueType: Length,\n    value: null,\n    didSetValue(newColSpacing: Length | null, oldColSpacing: Length | null): void {\n      this.owner.updateLayout();\n    },\n  })\n  readonly colSpacing!: Property<this, Length | null>;\n\n  @TraitRef({\n    traitType: HeaderTrait,\n    binds: true,\n    willAttachTrait(headerTrait: HeaderTrait): void {\n      this.owner.callObservers(\"traitWillAttachHeader\", headerTrait, this.owner);\n    },\n    didDetachTrait(headerTrait: HeaderTrait): void {\n      this.owner.callObservers(\"traitDidDetachHeader\", headerTrait, this.owner);\n    },\n    detectTrait(trait: Trait): HeaderTrait | null {\n      return trait instanceof HeaderTrait ? trait : null;\n    },\n  })\n  readonly header!: TraitRef<this, HeaderTrait>;\n\n  @TraitSet({\n    traitType: ColTrait,\n    binds: true,\n    observes: true,\n    willAttachTrait(colTrait: ColTrait, targetTrait: Trait | null): void {\n      this.owner.callObservers(\"traitWillAttachCol\", colTrait, targetTrait, this.owner);\n    },\n    didAttachTrait(colTrait: ColTrait): void {\n      this.owner.updateLayout();\n      if (this.owner.consuming) {\n        colTrait.consume(this.owner);\n      }\n    },\n    willDetachTrait(colTrait: ColTrait): void {\n      if (this.owner.consuming) {\n        colTrait.unconsume(this.owner);\n      }\n    },\n    didDetachTrait(colTrait: ColTrait): void {\n      this.owner.updateLayout();\n      this.owner.callObservers(\"traitDidDetachCol\", colTrait, this.owner);\n    },\n    traitDidSetLayout(colLayout: ColLayout | null): void {\n      this.owner.updateLayout();\n    },\n    detectModel(model: Model): ColTrait | null {\n      return model.getTrait(ColTrait);\n    },\n  })\n  readonly cols!: TraitSet<this, ColTrait> & Observes<ColTrait>;\n\n  @TraitSet({\n    traitType: RowTrait,\n    binds: true,\n    willAttachTrait(rowTrait: RowTrait, targetTrait: Trait | null): void {\n      this.owner.callObservers(\"traitWillAttachRow\", rowTrait, targetTrait, this.owner);\n    },\n    didAttachTrait(rowTrait: RowTrait): void {\n      if (this.owner.consuming) {\n        rowTrait.consume(this.owner);\n      }\n    },\n    willDetachTrait(rowTrait: RowTrait): void {\n      if (this.owner.consuming) {\n        rowTrait.unconsume(this.owner);\n      }\n    },\n    didDetachTrait(rowTrait: RowTrait): void {\n      this.owner.callObservers(\"traitDidDetachRow\", rowTrait, this.owner);\n    },\n    detectModel(model: Model): RowTrait | null {\n      return model.getTrait(RowTrait);\n    },\n    detectTrait(trait: Trait): RowTrait | null {\n      return null;\n    },\n  })\n  readonly rows!: TraitSet<this, RowTrait>;\n\n  protected override onStartConsuming(): void {\n    super.onStartConsuming();\n    this.cols.consumeTraits(this);\n    this.rows.consumeTraits(this);\n  }\n\n  protected override onStopConsuming(): void {\n    super.onStopConsuming();\n    this.rows.unconsumeTraits(this);\n    this.cols.unconsumeTraits(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {TableLayout} from \"./TableLayout\";\nimport type {ColLayout} from \"./ColLayout\";\nimport type {CellView} from \"./CellView\";\nimport {TextCellView} from \"./TextCellView\";\nimport type {CellTrait} from \"./CellTrait\";\nimport type {CellController} from \"./CellController\";\nimport type {LeafView} from \"./LeafView\";\nimport type {LeafTrait} from \"./LeafTrait\";\nimport type {RowView} from \"./RowView\";\nimport type {RowTrait} from \"./RowTrait\";\nimport {RowController} from \"./RowController\";\nimport type {ColView} from \"./ColView\";\nimport {TextColView} from \"./TextColView\";\nimport type {ColTrait} from \"./ColTrait\";\nimport {ColController} from \"./ColController\";\nimport type {TextColController} from \"./TextColController\";\nimport type {IconColController} from \"./IconColController\";\nimport type {HeaderView} from \"./HeaderView\";\nimport type {HeaderTrait} from \"./HeaderTrait\";\nimport {HeaderController} from \"./HeaderController\";\nimport {TableView} from \"./TableView\";\nimport {TableTrait} from \"./TableTrait\";\n\n/** @public */\nexport interface TableControllerObserver<C extends TableController = TableController> extends ControllerObserver<C> {\n  controllerWillAttachTableTrait?(tableTrait: TableTrait, controller: C): void;\n\n  controllerDidDetachTableTrait?(tableTrait: TableTrait, controller: C): void;\n\n  controllerDidSetTableLayout?(tableLayout: TableLayout | null, controller: C): void;\n\n  controllerWillAttachTableView?(tableView: TableView, controller: C): void;\n\n  controllerDidDetachTableView?(tableView: TableView, controller: C): void;\n\n  controllerWillExpandTableView?(tableView: TableView, controller: C): void;\n\n  controllerDidExpandTableView?(tableView: TableView, controller: C): void;\n\n  controllerWillCollapseTableView?(tableView: TableView, controller: C): void;\n\n  controllerDidCollapseTableView?(tableView: TableView, controller: C): void;\n\n  controllerWillAttachHeader?(headerController: HeaderController, controller: C): void;\n\n  controllerDidDetachHeader?(headerController: HeaderController, controller: C): void;\n\n  controllerWillAttachHeaderTrait?(headerTrait: HeaderTrait, controller: C): void;\n\n  controllerDidDetachHeaderTrait?(headerTrait: HeaderTrait, controller: C): void;\n\n  controllerWillAttachHeaderView?(headerView: HeaderView, controller: C): void;\n\n  controllerDidDetachHeaderView?(headerView: HeaderView, controller: C): void;\n\n  controllerDidPressHeaderView?(input: PositionGestureInput, event: Event | null, headerView: HeaderView, controller: C): void;\n\n  controllerDidLongPressHeaderView?(input: PositionGestureInput, headerView: HeaderView, controller: C): void;\n\n  controllerWillAttachCol?(colController: ColController, controller: C): void;\n\n  controllerDidDetachCol?(colController: ColController, controller: C): void;\n\n  controllerWillAttachColTrait?(colTrait: ColTrait, colController: ColController, controller: C): void;\n\n  controllerDidDetachColTrait?(colTrait: ColTrait, colController: ColController, controller: C): void;\n\n  controllerDidSetColLayout?(colLayout: ColLayout | null, colController: ColController, controller: C): void;\n\n  controllerWillAttachColView?(colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidDetachColView?(colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidPressColView?(input: PositionGestureInput, event: Event | null, colView: ColView, colController: ColController, controller: C): void;\n\n  controllerDidLongPressColView?(input: PositionGestureInput, colView: ColView, colController: ColController, controller: C): void;\n\n  controllerWillAttachColLabelView?(colLabelView: HtmlView, colController: ColController, controller: C): void;\n\n  controllerDidDetachColLabelView?(colLabelView: HtmlView, colController: ColController, controller: C): void;\n\n  controllerDidSetColIcon?(colIcon: Graphics | null, colController: ColController, controller: C): void;\n\n  controllerWillAttachRow?(rowController: RowController, controller: C): void;\n\n  controllerDidDetachRow?(rowController: RowController, controller: C): void;\n\n  controllerWillAttachRowTrait?(rowTrait: RowTrait, rowController: RowController, controller: C): void;\n\n  controllerDidDetachRowTrait?(rowTrait: RowTrait, rowController: RowController, controller: C): void;\n\n  controllerWillAttachRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n\n  controllerDidDetachRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n\n  controllerWillAttachLeafTrait?(leafTrait: LeafTrait, rowController: RowController, controller: C): void;\n\n  controllerDidDetachLeafTrait?(leafTrait: LeafTrait, rowController: RowController, controller: C): void;\n\n  controllerWillAttachLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidDetachLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerWillHighlightLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidHighlightLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerWillUnhighlightLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidUnhighlightLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidEnterLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidLeaveLeafView?(leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidPressLeafView?(input: PositionGestureInput, event: Event | null, leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerDidLongPressLeafView?(input: PositionGestureInput, leafView: LeafView, rowController: RowController, controller: C): void;\n\n  controllerWillAttachCell?(cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachCell?(cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachCellTrait?(cellTrait: CellTrait, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachCellTrait?(cellTrait: CellTrait, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachCellView?(cellView: CellView, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachCellView?(cellView: CellView, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachCellContentView?(cellContentView: HtmlView, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachCellContentView?(cellContentView: HtmlView, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerDidSetCellIcon?(cellIcon: Graphics | null, cellController: CellController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachTree?(treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachTree?(treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachTreeTrait?(treeTrait: TableTrait, treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachTreeTrait?(treeTrait: TableTrait, treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerWillAttachTreeView?(treeView: TableView, treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerDidDetachTreeView?(treeView: TableView, treeController: TableController, rowController: RowController, controller: C): void;\n\n  controllerWillExpandRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n\n  controllerDidExpandRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n\n  controllerWillCollapseRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n\n  controllerDidCollapseRowView?(rowView: RowView, rowController: RowController, controller: C): void;\n}\n\n/** @public */\nexport class TableController extends Controller {\n  declare readonly observerType?: Class<TableControllerObserver>;\n\n  protected layoutTable(tableLayout: TableLayout, tableView: TableView): void {\n    tableView.layout.setIntrinsic(tableLayout);\n  }\n\n  @TraitViewRef({\n    traitType: TableTrait,\n    observesTrait: true,\n    willAttachTrait(tableTrait: TableTrait): void {\n      this.owner.callObservers(\"controllerWillAttachTableTrait\", tableTrait, this.owner);\n    },\n    didAttachTrait(tableTrait: TableTrait): void {\n      const headerTrait = tableTrait.header.trait;\n      if (headerTrait !== null) {\n        this.owner.header.setTrait(headerTrait);\n      }\n      const colTraits = tableTrait.cols.traits;\n      for (const traitId in colTraits) {\n        const colTrait = colTraits[traitId]!;\n        this.owner.cols.addTrait(colTrait, null, colTrait.key);\n      }\n      this.owner.rows.addTraits(tableTrait.rows.traits);\n      const tableView = this.view;\n      if (tableView !== null) {\n        const tableLayout = tableTrait.layout.value;\n        if (tableLayout !== null) {\n          this.owner.layoutTable(tableLayout, tableView);\n        }\n      }\n    },\n    willDetachTrait(tableTrait: TableTrait): void {\n      this.owner.rows.deleteTraits(tableTrait.rows.traits);\n      this.owner.cols.deleteTraits(tableTrait.cols.traits);\n      const headerTrait = tableTrait.header.trait;\n      if (headerTrait !== null) {\n        this.owner.header.deleteTrait(headerTrait);\n      }\n    },\n    didDetachTrait(tableTrait: TableTrait): void {\n      this.owner.callObservers(\"controllerDidDetachTableTrait\", tableTrait, this.owner);\n    },\n    traitDidSetTableLayout(tableLayout: TableLayout | null): void {\n      this.owner.callObservers(\"controllerDidSetTableLayout\", tableLayout, this.owner);\n    },\n    traitWillAttachHeader(headerTrait: HeaderTrait): void {\n      this.owner.header.setTrait(headerTrait);\n    },\n    traitDidDetachHeader(headerTrait: HeaderTrait): void {\n      this.owner.header.deleteTrait(headerTrait);\n    },\n    traitWillAttachCol(colTrait: ColTrait, targetTrait: Trait): void {\n      this.owner.cols.addTrait(colTrait, targetTrait, colTrait.key);\n    },\n    traitDidDetachCol(colTrait: ColTrait): void {\n      this.owner.cols.deleteTrait(colTrait);\n    },\n    traitWillAttachRow(rowTrait: RowTrait, targetTrait: Trait): void {\n      this.owner.rows.addTrait(rowTrait, targetTrait);\n    },\n    traitDidDetachRow(rowTrait: RowTrait): void {\n      this.owner.rows.deleteTrait(rowTrait);\n    },\n    viewType: TableView,\n    observesView: true,\n    initView(tableView: TableView): void {\n      const headerController = this.owner.header.controller;\n      if (headerController !== null) {\n        headerController.header.insertView(tableView);\n        if (tableView.header.view === null) {\n          tableView.header.setView(headerController.header.view);\n        }\n      }\n      const rowControllers = this.owner.rows.controllers;\n      for (const controllerId in rowControllers) {\n        const rowController = rowControllers[controllerId]!;\n        const rowView = rowController.row.view;\n        if (rowView !== null && rowView.parent === null) {\n          const targetView = this.owner.rows.getTargetView(rowController);\n          rowController.row.insertView(tableView, void 0, targetView);\n        }\n      }\n      const tableTrait = this.trait;\n      if (tableTrait !== null) {\n        const tableLayout = tableTrait.layout.value;\n        if (tableLayout !== null) {\n          this.owner.layoutTable(tableLayout, tableView);\n        }\n      }\n    },\n    willAttachView(tableView: TableView): void {\n      this.owner.callObservers(\"controllerWillAttachTableView\", tableView, this.owner);\n    },\n    didDetachView(tableView: TableView): void {\n      this.owner.callObservers(\"controllerDidDetachTableView\", tableView, this.owner);\n    },\n    viewWillAttachHeader(headerView: HeaderView): void {\n      const headerController = this.owner.header.controller;\n      if (headerController !== null) {\n        headerController.header.setView(headerView);\n      }\n    },\n    viewDidDetachHeader(headerView: HeaderView): void {\n      const headerController = this.owner.header.controller;\n      if (headerController !== null) {\n        headerController.header.setView(null);\n      }\n    },\n    viewWillExpand(tableView: TableView): void {\n      this.owner.callObservers(\"controllerWillExpandTableView\", tableView, this.owner);\n    },\n    viewDidExpand(tableView: TableView): void {\n      this.owner.callObservers(\"controllerDidExpandTableView\", tableView, this.owner);\n    },\n    viewWillCollapse(tableView: TableView): void {\n      this.owner.callObservers(\"controllerWillCollapseTableView\", tableView, this.owner);\n    },\n    viewDidCollapse(tableView: TableView): void {\n      this.owner.callObservers(\"controllerDidCollapseTableView\", tableView, this.owner);\n    },\n  })\n  readonly table!: TraitViewRef<this, TableTrait, TableView> & Observes<TableTrait> & Observes<TableView>;\n\n  @TraitViewControllerRef({\n    controllerType: HeaderController,\n    binds: true,\n    observes: true,\n    get parentView(): TableView | null {\n      return this.owner.table.view;\n    },\n    getTraitViewRef(headerController: HeaderController): TraitViewRef<unknown, HeaderTrait, HeaderView> {\n      return headerController.header;\n    },\n    initController(headerController: HeaderController): void {\n      const tableTrait = this.owner.table.trait;\n      if (tableTrait !== null) {\n        const headerTrait = tableTrait.header.trait;\n        if (headerTrait !== null) {\n          headerController.header.setTrait(headerTrait);\n        }\n      }\n    },\n    willAttachController(headerController: HeaderController): void {\n      this.owner.callObservers(\"controllerWillAttachHeader\", headerController, this.owner);\n    },\n    didAttachController(headerController: HeaderController): void {\n      const headerTrait = headerController.header.trait;\n      if (headerTrait !== null) {\n        this.attachHeaderTrait(headerTrait, headerController);\n      }\n      const headerView = headerController.header.view;\n      if (headerView !== null) {\n        this.attachHeaderView(headerView, headerController);\n      }\n    },\n    willDetachController(headerController: HeaderController): void {\n      const headerView = headerController.header.view;\n      if (headerView !== null) {\n        this.detachHeaderView(headerView, headerController);\n      }\n      const headerTrait = headerController.header.trait;\n      if (headerTrait !== null) {\n        this.detachHeaderTrait(headerTrait, headerController);\n      }\n    },\n    didDetachController(headerController: HeaderController): void {\n      this.owner.callObservers(\"controllerDidDetachHeader\", headerController, this.owner);\n    },\n    controllerWillAttachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void {\n      this.owner.callObservers(\"controllerWillAttachHeaderTrait\", headerTrait, this.owner);\n      this.attachHeaderTrait(headerTrait, headerController);\n    },\n    controllerDidDetachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void {\n      this.detachHeaderTrait(headerTrait, headerController);\n      this.owner.callObservers(\"controllerDidDetachHeaderTrait\", headerTrait, this.owner);\n    },\n    attachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void {\n      // hook\n    },\n    detachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void {\n      // hook\n    },\n    controllerWillAttachHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      this.owner.callObservers(\"controllerWillAttachHeaderView\", headerView, this.owner);\n      this.attachHeaderView(headerView, headerController);\n    },\n    controllerDidDetachHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      this.detachHeaderView(headerView, headerController);\n      this.owner.callObservers(\"controllerDidDetachHeaderView\", headerView, this.owner);\n    },\n    attachHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      const tableView = this.owner.table.view;\n      if (tableView !== null && tableView.header.view === null) {\n        tableView.header.setView(headerView);\n      }\n    },\n    detachHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      headerView.remove();\n    },\n    controllerDidPressHeaderView(input: PositionGestureInput, event: Event | null, headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerDidPressHeaderView\", input, event, headerView, this.owner);\n    },\n    controllerDidLongPressHeaderView(input: PositionGestureInput, headerView: HeaderView): void {\n      this.owner.callObservers(\"controllerDidLongPressHeaderView\", input, headerView, this.owner);\n    },\n    detectController(controller: Controller): HeaderController | null {\n      return controller instanceof HeaderController ? controller : null;\n    },\n  })\n  readonly header!: TraitViewControllerRef<this, HeaderTrait, HeaderView, HeaderController> & Observes<HeaderController> & {\n    attachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void;\n    detachHeaderTrait(headerTrait: HeaderTrait, headerController: HeaderController): void;\n    attachHeaderView(headerView: HeaderView, headerController: HeaderController): void;\n    detachHeaderView(headerView: HeaderView, headerController: HeaderController): void;\n  };\n\n  @TraitViewControllerSet({\n    controllerType: ColController,\n    binds: true,\n    observes: true,\n    getTraitViewRef(colController: ColController): TraitViewRef<unknown, ColTrait, ColView> {\n      return colController.col;\n    },\n    willAttachController(colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachCol\", colController, this.owner);\n    },\n    didAttachController(colController: ColController): void {\n      const colTrait = colController.col.trait;\n      if (colTrait !== null) {\n        this.attachColTrait(colTrait, colController);\n      }\n      const colView = colController.col.view;\n      if (colView !== null) {\n        this.attachColView(colView, colController);\n      }\n    },\n    willDetachController(colController: ColController): void {\n      const colTrait = colController.col.trait;\n      if (colTrait !== null) {\n        this.detachColTrait(colTrait, colController);\n      }\n      const colView = colController.col.view;\n      if (colView !== null) {\n        this.detachColView(colView, colController);\n      }\n    },\n    didDetachController(colController: ColController): void {\n      this.owner.callObservers(\"controllerDidDetachCol\", colController, this.owner);\n    },\n    controllerWillAttachColTrait(colTrait: ColTrait, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColTrait\", colTrait, colController, this.owner);\n      this.attachColTrait(colTrait, colController);\n    },\n    controllerDidDetachColTrait(colTrait: ColTrait, colController: ColController): void {\n      this.detachColTrait(colTrait, colController);\n      this.owner.callObservers(\"controllerDidDetachColTrait\", colTrait, colController, this.owner);\n    },\n    attachColTrait(colTrait: ColTrait, colController: ColController): void {\n      // hook\n    },\n    detachColTrait(colTrait: ColTrait, colController: ColController): void {\n      // hook\n    },\n    controllerDidSetColLayout(colLayout: ColLayout | null, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidSetColLayout\", colLayout, colController, this.owner);\n    },\n    controllerWillAttachColView(colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColView\", colView, colController, this.owner);\n      this.attachColView(colView, colController);\n    },\n    controllerDidDetachColView(colView: ColView, colController: ColController): void {\n      this.detachColView(colView, colController);\n      this.owner.callObservers(\"controllerDidDetachColView\", colView, colController, this.owner);\n    },\n    attachColView(colView: ColView, colController: ColController): void {\n      if (colView instanceof TextColView) {\n        const colLabelView = colView.label.view;\n        if (colLabelView !== null) {\n          this.attachColLabelView(colLabelView, colController);\n        }\n      }\n    },\n    detachColView(colView: ColView, colController: ColController): void {\n      if (colView instanceof TextColView) {\n        const colLabelView = colView.label.view;\n        if (colLabelView !== null) {\n          this.detachColLabelView(colLabelView, colController);\n        }\n      }\n      colView.remove();\n    },\n    controllerDidPressColView(input: PositionGestureInput, event: Event | null, colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidPressColView\", input, event, colView, colController, this.owner);\n    },\n    controllerDidLongPressColView(input: PositionGestureInput, colView: ColView, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidLongPressColView\", input, colView, colController, this.owner);\n    },\n    controllerWillAttachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      this.owner.callObservers(\"controllerWillAttachColLabelView\", colLabelView, colController, this.owner);\n      this.attachColLabelView(colLabelView, colController);\n    },\n    controllerDidDetachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      this.detachColLabelView(colLabelView, colController);\n      this.owner.callObservers(\"controllerDidDetachColLabelView\", colLabelView, colController, this.owner);\n    },\n    attachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      // hook\n    },\n    detachColLabelView(colLabelView: HtmlView, colController: ColController): void {\n      // hook\n    },\n    controllerDidSetColIcon(colIcon: Graphics | null, colController: ColController): void {\n      this.owner.callObservers(\"controllerDidSetColIcon\", colIcon, colController, this.owner);\n    },\n  })\n  readonly cols!: TraitViewControllerSet<this, ColTrait, ColView, ColController> & Observes<ColController> & Observes<TextColController> & Observes<IconColController> & {\n    attachColTrait(colTrait: ColTrait, colController: ColController): void;\n    detachColTrait(colTrait: ColTrait, colController: ColController): void;\n    attachColView(colView: ColView, colController: ColController): void;\n    detachColView(colView: ColView, colController: ColController): void;\n    attachColLabelView(colLabelView: HtmlView, colController: ColController): void;\n    detachColLabelView(colLabelView: HtmlView, colController: ColController): void;\n  };\n\n  @TraitViewControllerSet({\n    controllerType: RowController,\n    binds: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.table.view;\n    },\n    getTraitViewRef(rowController: RowController): TraitViewRef<unknown, RowTrait, RowView> {\n      return rowController.row;\n    },\n    willAttachController(rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachRow\", rowController, this.owner);\n    },\n    didAttachController(rowController: RowController): void {\n      const rowTrait = rowController.row.trait;\n      if (rowTrait !== null) {\n        this.attachRowTrait(rowTrait, rowController);\n      }\n      const rowView = rowController.row.view;\n      if (rowView !== null) {\n        this.attachRowView(rowView, rowController);\n      }\n    },\n    willDetachController(rowController: RowController): void {\n      const rowView = rowController.row.view;\n      if (rowView !== null) {\n        this.detachRowView(rowView, rowController);\n      }\n      const rowTrait = rowController.row.trait;\n      if (rowTrait !== null) {\n        this.detachRowTrait(rowTrait, rowController);\n      }\n    },\n    didDetachController(rowController: RowController): void {\n      this.owner.callObservers(\"controllerDidDetachRow\", rowController, this.owner);\n    },\n    controllerDidAttachParent(parent: Controller, rowController: RowController): void {\n      const tableView = this.owner.table.view;\n      const rowView = rowController.row.view;\n      if (tableView !== null && rowView !== null) {\n        const targetController = rowController.getNextSibling(RowController);\n        const targetView = targetController !== null ? targetController.row.view : null;\n        tableView.reinsertChild(rowView, targetView);\n        //tableView.requireUpdate(View.NeedsScroll | View.NeedsLayout);\n      }\n    },\n    controllerWillAttachRowTrait(rowTrait: RowTrait, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachRowTrait\", rowTrait, rowController, this.owner);\n      this.attachRowTrait(rowTrait, rowController);\n    },\n    controllerDidDetachRowTrait(rowTrait: RowTrait, rowController: RowController): void {\n      this.detachRowTrait(rowTrait, rowController);\n      this.owner.callObservers(\"controllerDidDetachRowTrait\", rowTrait, rowController, this.owner);\n    },\n    attachRowTrait(rowTrait: RowTrait, rowController: RowController): void {\n      // hook\n    },\n    detachRowTrait(rowTrait: RowTrait, rowController: RowController): void {\n      // hook\n    },\n    controllerWillAttachRowView(rowView: RowView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachRowView\", rowView, rowController, this.owner);\n      this.attachRowView(rowView, rowController);\n    },\n    controllerDidDetachRowView(rowView: RowView, rowController: RowController): void {\n      this.detachRowView(rowView, rowController);\n      this.owner.callObservers(\"controllerDidDetachRowView\", rowView, rowController, this.owner);\n    },\n    attachRowView(rowView: RowView, rowController: RowController): void {\n      // hook\n    },\n    detachRowView(rowView: RowView, rowController: RowController): void {\n      rowView.remove();\n    },\n    controllerWillAttachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachLeafTrait\", leafTrait, rowController, this.owner);\n      this.attachLeafTrait(leafTrait, rowController);\n    },\n    controllerDidDetachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void {\n      this.detachLeafTrait(leafTrait, rowController);\n      this.owner.callObservers(\"controllerDidDetachLeafTrait\", leafTrait, rowController, this.owner);\n    },\n    attachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void {\n      // hook\n    },\n    detachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void {\n      // hook\n    },\n    controllerWillAttachLeafView(leafView: LeafView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachLeafView\", leafView, rowController, this.owner);\n      this.attachLeafView(leafView, rowController);\n    },\n    controllerDidDetachLeafView(leafView: LeafView, rowController: RowController): void {\n      this.detachLeafView(leafView, rowController);\n      this.owner.callObservers(\"controllerDidDetachLeafView\", leafView, rowController, this.owner);\n    },\n    attachLeafView(leafView: LeafView, rowController: RowController): void {\n      // hook\n    },\n    detachLeafView(leafView: LeafView, rowController: RowController): void {\n      // hook\n    },\n    controllerWillAttachCell(cellController: CellController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachCell\", cellController, rowController, this.owner);\n      this.attachCell(cellController, rowController);\n    },\n    controllerDidDetachCell(cellController: CellController, rowController: RowController): void {\n      this.detachCell(cellController, rowController);\n      this.owner.callObservers(\"controllerDidDetachCell\", cellController, rowController, this.owner);\n    },\n    attachCell(cellController: CellController, rowController: RowController): void {\n      const cellTrait = cellController.cell.trait;\n      if (cellTrait !== null) {\n        this.attachCellTrait(cellTrait, cellController, rowController);\n      }\n      const cellView = cellController.cell.view;\n      if (cellView !== null) {\n        this.attachCellView(cellView, cellController, rowController);\n      }\n    },\n    detachCell(cellController: CellController, rowController: RowController): void {\n      const cellTrait = cellController.cell.trait;\n      if (cellTrait !== null) {\n        this.detachCellTrait(cellTrait, cellController, rowController);\n      }\n      const cellView = cellController.cell.view;\n      if (cellView !== null) {\n        this.detachCellView(cellView, cellController, rowController);\n      }\n    },\n    controllerWillAttachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachCellTrait\", cellTrait, cellController, rowController, this.owner);\n      this.attachCellTrait(cellTrait, cellController, rowController);\n    },\n    controllerDidDetachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void {\n      this.detachCellTrait(cellTrait, cellController, rowController);\n      this.owner.callObservers(\"controllerDidDetachCellTrait\", cellTrait, cellController, rowController, this.owner);\n    },\n    attachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void {\n      // hook\n    },\n    detachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void {\n      // hook\n    },\n    controllerWillAttachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachCellView\", cellView, cellController, rowController, this.owner);\n      this.attachCellView(cellView, cellController, rowController);\n    },\n    controllerDidDetachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void {\n      this.detachCellView(cellView, cellController, rowController);\n      this.owner.callObservers(\"controllerDidDetachCellView\", cellView, cellController, rowController, this.owner);\n    },\n    attachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void {\n      if (cellView instanceof TextCellView) {\n        const cellContentView = cellView.content.view;\n        if (cellContentView !== null) {\n          this.attachCellContentView(cellContentView, cellController, rowController);\n        }\n      }\n    },\n    detachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void {\n      if (cellView instanceof TextCellView) {\n        const cellContentView = cellView.content.view;\n        if (cellContentView !== null) {\n          this.detachCellContentView(cellContentView, cellController, rowController);\n        }\n      }\n    },\n    controllerWillAttachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachCellContentView\", cellContentView, cellController, rowController, this.owner);\n      this.attachCellContentView(cellContentView, cellController, rowController);\n    },\n    controllerDidDetachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void {\n      this.detachCellContentView(cellContentView, cellController, rowController);\n      this.owner.callObservers(\"controllerDidDetachCellContentView\", cellContentView, cellController, rowController, this.owner);\n    },\n    attachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void {\n      // hook\n    },\n    detachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void {\n      // hook\n    },\n    controllerDidSetCellIcon(cellIcon: Graphics | null, cellController: CellController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerDidSetCellIcon\", cellIcon, cellController, rowController, this.owner);\n    },\n    controllerWillAttachTree(treeController: TableController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachTree\", treeController, rowController, this.owner);\n      this.attachTree(treeController, rowController);\n    },\n    controllerDidDetachTree(treeController: TableController, rowController: RowController): void {\n      this.detachTree(treeController, rowController);\n      this.owner.callObservers(\"controllerDidDetachTree\", treeController, rowController, this.owner);\n    },\n    attachTree(treeController: TableController, rowController: RowController): void {\n      const treeTrait = treeController.table.trait;\n      if (treeTrait !== null) {\n        this.attachTreeTrait(treeTrait, treeController, rowController);\n      }\n      const treeView = treeController.table.view;\n      if (treeView !== null) {\n        this.attachTreeView(treeView, treeController, rowController);\n      }\n    },\n    detachTree(treeController: TableController, rowController: RowController): void {\n      const treeTrait = treeController.table.trait;\n      if (treeTrait !== null) {\n        this.detachTreeTrait(treeTrait, treeController, rowController);\n      }\n      const treeView = treeController.table.view;\n      if (treeView !== null) {\n        this.detachTreeView(treeView, treeController, rowController);\n      }\n    },\n    controllerWillAttachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachTreeTrait\", treeTrait, treeController, rowController, this.owner);\n      this.attachTreeTrait(treeTrait, treeController, rowController);\n    },\n    controllerDidDetachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void {\n      this.detachTreeTrait(treeTrait, treeController, rowController);\n      this.owner.callObservers(\"controllerDidDetachTreeTrait\", treeTrait, treeController, rowController, this.owner);\n    },\n    attachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void {\n      // hook\n    },\n    detachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void {\n      // hook\n    },\n    controllerWillAttachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillAttachTreeView\", treeView, treeController, rowController, this.owner);\n      this.attachTreeView(treeView, treeController, rowController);\n    },\n    controllerDidDetachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void {\n      this.detachTreeView(treeView, treeController, rowController);\n      this.owner.callObservers(\"controllerDidDetachTreeView\", treeView, treeController, rowController, this.owner);\n    },\n    attachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void {\n      // hook\n    },\n    detachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void {\n      // hook\n    },\n    controllerWillExpandRowView(rowView: RowView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillExpandRowView\", rowView, rowController, this.owner);\n    },\n    controllerDidExpandRowView(rowView: RowView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerDidExpandRowView\", rowView, rowController, this.owner);\n    },\n    controllerWillCollapseRowView(rowView: RowView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerWillCollapseRowView\", rowView, rowController, this.owner);\n    },\n    controllerDidCollapseRowView(rowView: RowView, rowController: RowController): void {\n      this.owner.callObservers(\"controllerDidCollapseRowView\", rowView, rowController, this.owner);\n    },\n  })\n  readonly rows!: TraitViewControllerSet<this, RowTrait, RowView, RowController> & Observes<RowController> & {\n    attachRowTrait(rowTrait: RowTrait, rowController: RowController): void;\n    detachRowTrait(rowTrait: RowTrait, rowController: RowController): void;\n    attachRowView(rowView: RowView, rowController: RowController): void;\n    detachRowView(rowView: RowView, rowController: RowController): void;\n    attachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void;\n    detachLeafTrait(leafTrait: LeafTrait, rowController: RowController): void;\n    attachLeafView(leafView: LeafView, rowController: RowController): void;\n    detachLeafView(leafView: LeafView, rowController: RowController): void;\n    attachCell(cellController: CellController, rowController: RowController): void;\n    detachCell(cellController: CellController, rowController: RowController): void;\n    attachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void;\n    detachCellTrait(cellTrait: CellTrait, cellController: CellController, rowController: RowController): void;\n    attachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void;\n    detachCellView(cellView: CellView, cellController: CellController, rowController: RowController): void;\n    attachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void;\n    detachCellContentView(cellContentView: HtmlView, cellController: CellController, rowController: RowController): void;\n    attachTree(treeController: TableController, rowController: RowController): void;\n    detachTree(treeController: TableController, rowController: RowController): void;\n    attachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void;\n    detachTreeTrait(treeTrait: TableTrait, treeController: TableController, rowController: RowController): void;\n    attachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void;\n    detachTreeView(treeView: TableView, treeController: TableController, rowController: RowController): void;\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Animator} from \"@swim/component\";\nimport {EventHandler} from \"@swim/component\";\nimport {Provider} from \"@swim/component\";\nimport type {Service} from \"@swim/component\";\nimport {Color} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ModalService} from \"@swim/dom\";\n\n/** @public */\nexport class ScrimView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.displayState = ScrimView.HiddenState;\n    this.initScrim();\n  }\n\n  protected initScrim(): void {\n    this.setIntrinsic<ScrimView>({\n      classList: [\"scrim\"],\n      style: {\n        display: \"none\",\n        position: \"absolute\",\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        pointerEvents: \"auto\",\n        cursor: \"pointer\",\n        backgroundColor: Color.black(0),\n      },\n    });\n  }\n\n  /** @internal */\n  readonly displayState: number;\n\n  /** @internal */\n  setDisplayState(displayState: number): void {\n    (this as Mutable<this>).displayState = displayState;\n  }\n\n  @Animator({\n    inherits: true,\n    get parent(): Animator<any, Color | null, any> {\n      return this.owner.style.backgroundColor;\n    },\n    willTransition(): void {\n      const displayState = this.owner.displayState;\n      if (displayState === ScrimView.ShowState) {\n        this.owner.willShowScrim();\n      } else if (displayState === ScrimView.HideState) {\n        this.owner.willHideScrim();\n      }\n    },\n    didTransition(): void {\n      const displayState = this.owner.displayState;\n      if (displayState === ScrimView.ShowingState) {\n        this.owner.didShowScrim();\n      } else if (displayState === ScrimView.HidingState) {\n        this.owner.didHideScrim();\n      }\n    },\n  })\n  readonly backgroundColor!: Animator<this, Color | null>;\n\n  isShown(): boolean {\n    switch (this.displayState) {\n      case ScrimView.ShownState:\n      case ScrimView.ShowingState:\n      case ScrimView.ShowState: return true;\n      default: return false;\n    }\n  }\n\n  isHidden(): boolean {\n    switch (this.displayState) {\n      case ScrimView.HiddenState:\n      case ScrimView.HidingState:\n      case ScrimView.HideState: return true;\n      default: return false;\n    }\n  }\n\n  show(opacity: number, timing?: TimingLike | boolean): void {\n    if (this.isHidden()) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      this.setDisplayState(ScrimView.ShowState);\n      if (timing !== false) {\n        this.style.backgroundColor.setIntrinsic(Color.black(0));\n        this.style.backgroundColor.setIntrinsic(Color.black(opacity), timing);\n      } else {\n        this.willShowScrim();\n        this.style.backgroundColor.setIntrinsic(Color.black(opacity));\n        this.didShowScrim();\n      }\n    }\n  }\n\n  protected willShowScrim(): void {\n    this.setDisplayState(ScrimView.ShowingState);\n\n    this.style.display.setIntrinsic(\"block\");\n  }\n\n  protected didShowScrim(): void {\n    this.setDisplayState(ScrimView.ShownState);\n  }\n\n  hide(timing?: TimingLike | boolean): void {\n    if (this.isShown()) {\n      if (timing === void 0 || timing === true) {\n        timing = this.getLookOr(Look.timing, false);\n      } else {\n        timing = Timing.fromLike(timing);\n      }\n      this.setDisplayState(ScrimView.HideState);\n      if (timing !== false) {\n        this.style.backgroundColor.setIntrinsic(Color.black(0), timing);\n      } else {\n        this.willHideScrim();\n        this.style.backgroundColor.setIntrinsic(Color.black(0));\n        this.didHideScrim();\n      }\n    }\n  }\n\n  protected willHideScrim(): void {\n    this.setDisplayState(ScrimView.HidingState);\n  }\n\n  protected didHideScrim(): void {\n    this.setDisplayState(ScrimView.HiddenState);\n\n    this.style.display.setIntrinsic(\"none\");\n  }\n\n  @Provider({\n    extends: true,\n    observes: true,\n    didAttachService(service: ModalService, target: Service | null): void {\n      this.owner.serviceDidSetModality(service.modality.value, 0, service);\n      super.didAttachService(service, target);\n    },\n    willDetachService(service: ModalService): void {\n      super.willDetachService(service);\n      this.owner.hide(false);\n    },\n  })\n  override get modal(): Provider<this, ModalService> & HtmlView[\"modal\"] & Observes<ModalService> {\n    return Provider.getter();\n  }\n\n  serviceDidSetModality(newModality: number, oldModality: number, modalService: ModalService): void {\n    if (newModality !== 0) {\n      const opacity = 0.5 * newModality;\n      if (oldModality === 0) {\n        this.show(opacity);\n      } else {\n        this.style.backgroundColor.setIntrinsic(Color.black(opacity));\n        if (this.displayState === ScrimView.ShowingState) {\n          this.didShowScrim();\n        }\n      }\n    } else {\n      this.hide();\n    }\n  }\n\n  @EventHandler({\n    initEventType(): string {\n      if (typeof PointerEvent !== \"undefined\") {\n        return \"pointerup\";\n      } else if (typeof TouchEvent !== \"undefined\") {\n        return \"touchend\";\n      }\n      return \"click\";\n    },\n    handle(event: Event): void {\n      const modalService = this.owner.modal.service;\n      if (modalService !== null) {\n        modalService.displaceModals();\n      }\n    },\n  })\n  readonly click!: EventHandler<this>;\n\n  @EventHandler({\n    eventType: \"click\",\n    enabled: typeof PointerEvent !== \"undefined\"\n          || typeof TouchEvent !== \"undefined\",\n    handle(event: Event): void {\n      event.preventDefault();\n      event.stopPropagation();\n    },\n  })\n  readonly syntheticClick!: EventHandler<this>;\n\n  /** @internal */\n  static readonly HiddenState: number = 0;\n  /** @internal */\n  static readonly HidingState: number = 1;\n  /** @internal */\n  static readonly HideState: number = 2;\n  /** @internal */\n  static readonly ShownState: number = 3;\n  /** @internal */\n  static readonly ShowingState: number = 4;\n  /** @internal */\n  static readonly ShowState: number = 5;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport {EventHandler} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport type {R2BoxLike} from \"@swim/math\";\nimport {R2Box} from \"@swim/math\";\nimport {Color} from \"@swim/style\";\nimport {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {ThemeAnimator} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ModalViewObserver} from \"@swim/dom\";\nimport type {ModalView} from \"@swim/dom\";\n\n/** @public */\nexport type PopoverPlacement = \"none\" | \"above\" | \"below\" | \"over\" | \"top\" | \"bottom\" | \"right\" | \"left\";\n\n/** @public */\nexport interface PopoverViewObserver<V extends PopoverView = PopoverView> extends HtmlViewObserver<V>, ModalViewObserver<V> {\n  popoverWillAttachSource?(sourceView: View, view: V): void;\n\n  popoverDidDetachSource?(sourceView: View, view: V): void;\n\n  popoverWillPlace?(placement: PopoverPlacement, view: V): void;\n\n  popoverDidPlace?(placement: PopoverPlacement, view: V): void;\n}\n\n/** @public */\nexport class PopoverView extends HtmlView implements ModalView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.sourceFrame = null;\n    this.currentPlacement = \"none\";\n    this.initArrow();\n  }\n\n  declare readonly observerType?: Class<PopoverViewObserver>;\n\n  protected initArrow(): void {\n    const arrow = this.createArrow();\n    if (arrow !== null) {\n      this.prependChild(arrow, \"arrow\");\n    }\n  }\n\n  protected createArrow(): HtmlView | null {\n    return HtmlView.fromTag(\"div\").setIntrinsic({\n      classList: [\"popover-arrow\"],\n      style: {\n        display: \"none\",\n        position: \"absolute\",\n        width: 0,\n        height: 0,\n      },\n    });\n  }\n\n  @Animator({\n    inherits: true,\n    get parent(): Animator<any, Color | null, any> {\n      return this.owner.style.backgroundColor;\n    },\n    didSetValue(backgroundColor: Color): void {\n      this.owner.place();\n    },\n  })\n  readonly backgroundColor!: Animator<this, Color | null>;\n\n  @ThemeAnimator({valueType: Length, value: Length.zero()})\n  readonly placementGap!: ThemeAnimator<this, Length>;\n\n  @ThemeAnimator({valueType: Length, value: Length.px(10)})\n  readonly arrowWidth!: ThemeAnimator<this, Length>;\n\n  @ThemeAnimator({valueType: Length, value: Length.px(8)})\n  readonly arrowHeight!: ThemeAnimator<this, Length>;\n\n  @ViewRef({\n    observes: true,\n    willAttachView(sourceView: View): void {\n      this.owner.callObservers(\"popoverWillAttachSource\", sourceView, this.owner);\n    },\n    didAttachView(sourceView: View): void {\n      this.owner.requireUpdate(View.NeedsLayout);\n    },\n    didDetachView(sourceView: View): void {\n      this.owner.callObservers(\"popoverDidDetachSource\", sourceView, this.owner);\n    },\n    viewDidMount(view: View): void {\n      this.owner.place();\n    },\n    viewDidResize(view: View): void {\n      this.owner.place();\n    },\n    viewDidScroll(view: View): void {\n      this.owner.place();\n    },\n    viewDidAnimate(view: View): void {\n      this.owner.place();\n    },\n    viewDidLayout(view: View): void {\n      this.owner.place();\n    },\n    viewDidProject(view: View): void {\n      this.owner.place();\n    },\n    viewDidSetAttribute(name: string, value: unknown, view: HtmlView): void {\n      this.owner.place();\n    },\n    viewDidSetStyle(name: string, value: unknown, priority: string | undefined, view: HtmlView): void {\n      this.owner.place();\n    },\n  })\n  readonly source!: ViewRef<this, View> & Observes<HtmlView>;\n\n  /** @override */\n  @PresenceAnimator({\n    value: Presence.dismissed(),\n    updateFlags: View.NeedsLayout,\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    didSetValue(presence: Presence): void {\n      const phase = presence.phase;\n      const placement = this.owner.currentPlacement;\n      if (placement === \"above\") {\n        this.owner.style.setIntrinsic({\n          marginTop: (1 - phase) * -this.owner.node.clientHeight,\n          opacity: void 0,\n        });\n      } else if (placement === \"below\") {\n        this.owner.style.setIntrinsic({\n          marginTop: (1 - phase) * this.owner.node.clientHeight,\n          opacity: void 0,\n        });\n      } else {\n        this.owner.style.setIntrinsic({\n          marginTop: null,\n          opacity: phase,\n        });\n      }\n      this.owner.callObservers(\"viewDidSetPresence\", presence, this.owner);\n    },\n    willPresent(): void {\n      this.owner.callObservers(\"viewWillPresent\", this.owner);\n      this.owner.place();\n      this.owner.style.visibility.setIntrinsic(\"visible\");\n    },\n    didPresent(): void {\n      this.owner.style.setIntrinsic({\n        marginTop: null,\n        opacity: void 0,\n        pointerEvents: \"auto\",\n      });\n      this.owner.callObservers(\"viewDidPresent\", this.owner);\n    },\n    willDismiss(): void {\n      this.owner.callObservers(\"viewWillDismiss\", this.owner);\n      this.owner.style.pointerEvents.setIntrinsic(\"none\");\n    },\n    didDismiss(): void {\n      this.owner.style.setIntrinsic({\n        marginTop: null,\n        opacity: void 0,\n        visibility: \"hidden\",\n      });\n      this.owner.callObservers(\"viewDidDismiss\", this.owner);\n    },\n  })\n  readonly presence!: PresenceAnimator<this, Presence>;\n\n  /** @override */\n  @Property({\n    valueType: Number,\n    value: 0,\n    didSetValue(modality: number): void {\n      this.owner.callObservers(\"viewDidSetModality\", modality, this.owner);\n    },\n  })\n  readonly modality!: Property<this, number>;\n\n  @Property({\n    value: [\"top\", \"bottom\", \"right\", \"left\"],\n    didSetValue(placement: readonly PopoverPlacement[]): void {\n      this.owner.place();\n    },\n    equalValues(a: readonly PopoverPlacement[], b: readonly PopoverPlacement[]): boolean {\n      return Arrays.equal(a, b);\n    },\n  })\n  readonly placement!: Property<this, readonly PopoverPlacement[]>;\n\n  /** @internal */\n  readonly currentPlacement: PopoverPlacement;\n\n  @Property({\n    valueType: R2Box,\n    value: null,\n    didSetValue(placementFrame: R2Box | null): void {\n      this.owner.place();\n    },\n    fromLike(value: R2BoxLike | null): R2Box | null {\n      return value !== null ? R2Box.fromLike(value) : null;\n    },\n  })\n  readonly placementFrame!: Property<this, R2Box | null>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(dropdown: boolean): void {\n      this.owner.place();\n    }\n  })\n  readonly dropdown!: Property<this, boolean>;\n\n  protected override needsProcess(processFlags: ViewFlags): ViewFlags {\n    if ((processFlags & (View.NeedsScroll | View.NeedsAnimate)) !== 0) {\n      this.requireUpdate(View.NeedsLayout);\n    }\n    return processFlags;\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.place();\n  }\n\n  /** @internal */\n  readonly sourceFrame: R2Box | null;\n\n  place(force: boolean = false): PopoverPlacement {\n    const sourceView = this.source.view;\n    const oldSourceFrame = this.sourceFrame;\n    const newSourceFrame = sourceView !== null ? sourceView.popoverFrame : null;\n    if (newSourceFrame === null || this.placement.value.length === 0 ||\n        (!force && newSourceFrame.equals(oldSourceFrame))) {\n      return \"none\";\n    }\n    (this as Mutable<this>).sourceFrame = null;\n    const placement = this.placePopover(sourceView!, newSourceFrame);\n    const arrow = this.getChild(\"arrow\");\n    if (arrow instanceof HtmlView) {\n      this.placeArrow(sourceView!, newSourceFrame, arrow, placement);\n    }\n    return placement;\n  }\n\n  /** @internal */\n  protected placePopover(sourceView: View, sourceFrame: R2Box): PopoverPlacement {\n    const node = this.node;\n    const parent = node.offsetParent;\n    if (parent === null) {\n      return \"none\";\n    }\n    const popoverWidth = node.clientWidth;\n    const popoverHeight = node.clientHeight;\n\n    // offsetParent bounds in client coordinates\n    const parentBounds = parent.getBoundingClientRect();\n    const parentLeft = parentBounds.left;\n    const parentTop = parentBounds.top;\n\n    // source bounds in offsetParent coordinates (transformed from page coordinates)\n    const sourceLeft = sourceFrame.left - window.pageXOffset - parentLeft;\n    const sourceRight = sourceFrame.right - window.pageXOffset - parentLeft;\n    const sourceTop = sourceFrame.top - window.pageYOffset - parentTop;\n    const sourceBottom = sourceFrame.bottom - window.pageYOffset - parentTop;\n    const sourceWidth = sourceFrame.width;\n    const sourceHeight = sourceFrame.height;\n    const sourceX = sourceLeft + sourceWidth / 2;\n    const sourceY = sourceTop + sourceHeight / 2;\n\n    // placement frame in offsetParent coordinates (transformed from client coordinates)\n    const placementFrame = this.placementFrame.value;\n    const placementLeft = (placementFrame !== null ? placementFrame.left : 0);\n    const placementRight = (placementFrame !== null ? placementFrame.right : window.innerWidth) - parentLeft;\n    const placementTop = (placementFrame !== null ? placementFrame.top : 0);\n    const placementBottom = (placementFrame !== null ? placementFrame.bottom : window.innerHeight) - parentTop;\n\n    // source bound margins relative to placement bounds\n    const marginLeft = sourceLeft - placementLeft - window.pageXOffset;\n    const marginRight = placementRight - sourceLeft - sourceWidth;\n    const marginTop = sourceTop - placementTop - window.pageYOffset;\n    const marginBottom = placementBottom - sourceTop - sourceHeight;\n\n    const dropdown = this.dropdown.value;\n    const arrowHeight = this.arrowHeight.getValue().pxValue();\n    const placementGap = this.placementGap.getValue().pxValue();\n\n    let placement: PopoverPlacement | undefined;\n    const allowedPlacement = this.placement.value;\n    for (let i = 0; i < allowedPlacement.length; i += 1) { // first fit\n      const p = allowedPlacement[i]!;\n      if (p === \"above\" || p === \"below\" || p === \"over\") {\n        placement = p;\n        break;\n      } else if (p === \"top\" && popoverHeight + arrowHeight + placementGap <= marginTop) {\n        placement = p;\n        break;\n      } else if (p === \"bottom\" && popoverHeight + arrowHeight + placementGap <= marginBottom) {\n        placement = p;\n        break;\n      } else if (p === \"left\" && popoverWidth + arrowHeight + placementGap <= marginLeft) {\n        placement = p;\n        break;\n      } else if (p === \"right\" && popoverWidth + arrowHeight + placementGap <= marginRight) {\n        placement = p;\n        break;\n      }\n    }\n    if (placement === void 0) {\n      placement = \"none\";\n      for (let i = 0; i < allowedPlacement.length; i += 1) { // best fit\n        const p = allowedPlacement[i]!;\n        if (p === \"top\" && marginTop >= marginBottom) {\n          placement = p;\n          break;\n        } else if (p === \"bottom\" && marginBottom >= marginTop) {\n          placement = p;\n          break;\n        } else if (p === \"left\" && marginLeft >= marginRight) {\n          placement = p;\n          break;\n        } else if (p === \"right\" && marginRight >= marginLeft) {\n          placement = p;\n          break;\n        }\n      }\n    }\n\n    let left = node.offsetLeft;\n    let top = node.offsetTop;\n    let right: number | null = null;\n    let bottom: number | null = null;\n\n    const oldWidth = this.style.width.pxValue();\n    const oldHeight = this.style.height.pxValue();\n    let width: number | null = oldWidth;\n    let height: number | null = oldHeight;\n\n    const oldMaxWidth = this.style.maxWidth.pxState();\n    const oldMaxHeight = this.style.maxHeight.pxState();\n    let maxWidth: number | null = oldMaxWidth;\n    let maxHeight: number | null = oldMaxHeight;\n\n    if (placement === \"above\") {\n      left = Math.round(placementLeft);\n      top = Math.round(placementTop);\n      right = Math.round((placementFrame !== null ? placementFrame.width : window.innerWidth) - placementRight);\n      width = Math.round(Math.max(0, placementRight - placementLeft));\n      height = null;\n      maxWidth = null;\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    } else if (placement === \"below\") {\n      left = Math.round(placementLeft);\n      top = Math.round(placementBottom - popoverHeight);\n      right = Math.round(placementRight - (placementFrame !== null ? placementFrame.width : window.innerWidth));\n      width = Math.round(Math.max(0, placementRight - placementLeft));\n      height = null;\n      maxWidth = null;\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    } else if (placement === \"over\") {\n      left = Math.round(placementLeft);\n      top = Math.round(placementTop);\n      right = Math.round(placementRight - (placementFrame !== null ? placementFrame.width : window.innerWidth));\n      bottom = Math.round(placementBottom - (placementFrame !== null ? placementFrame.height : window.innerHeight));\n      width = Math.round(Math.max(0, placementRight - placementLeft));\n      height = Math.round(Math.max(0, placementBottom - placementTop));\n      maxWidth = null;\n      maxHeight = null;\n    } else if (placement === \"top\" && !dropdown) {\n      if (sourceX - popoverWidth / 2 <= placementLeft) {\n        left = Math.round(placementLeft);\n      } else if (sourceX + popoverWidth / 2 >= placementRight) {\n        left = Math.round(placementRight - popoverWidth);\n      } else {\n        left = Math.round(sourceX - popoverWidth / 2);\n      }\n      top = Math.round(Math.max(placementTop, sourceTop - (popoverHeight + arrowHeight + placementGap)));\n      maxWidth = Math.round(Math.max(0, placementRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, sourceBottom - placementTop));\n    } else if (placement === \"bottom\" && !dropdown) {\n      if (sourceX - popoverWidth / 2 <= placementLeft) {\n        left = Math.round(placementLeft);\n      } else if (sourceX + popoverWidth / 2 >= placementRight) {\n        left = Math.round(placementRight - popoverWidth);\n      } else {\n        left = Math.round(sourceX - popoverWidth / 2);\n      }\n      top = Math.round(Math.max(placementTop, sourceBottom + arrowHeight + placementGap));\n      maxWidth = Math.round(Math.max(0, placementRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - sourceTop));\n    } else if (placement === \"left\" && !dropdown) {\n      left = Math.round(Math.max(placementLeft, sourceLeft - (popoverWidth + arrowHeight + placementGap)));\n      if (sourceY - popoverHeight / 2 <= placementTop) {\n        top = Math.round(placementTop);\n      } else if (sourceY + popoverHeight / 2 >= placementBottom) {\n        top = Math.round(placementBottom - popoverHeight);\n      } else {\n        top = Math.round(sourceY - popoverHeight / 2);\n      }\n      maxWidth = Math.round(Math.max(0, sourceRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    } else if (placement === \"right\" && !dropdown) {\n      left = Math.round(Math.max(placementLeft, sourceRight + arrowHeight + placementGap));\n      if (sourceY - popoverHeight / 2 <= placementTop) {\n        top = Math.round(placementTop);\n      } else if (sourceY + popoverHeight / 2 >= placementBottom) {\n        top = Math.round(placementBottom - popoverHeight);\n      } else {\n        top = Math.round(sourceY - popoverHeight / 2);\n      }\n      maxWidth = Math.round(Math.max(0, placementRight - sourceLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    } else if (placement === \"top\" && dropdown) {\n      left = Math.max(placementLeft, sourceLeft);\n      top = Math.round(Math.max(placementTop, sourceTop - (popoverHeight + placementGap)));\n      width = Math.round(Math.max(0, Math.min(sourceWidth, placementRight - sourceLeft)));\n      height = null;\n      maxWidth = Math.round(Math.max(0, placementRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, sourceBottom - placementTop));\n    } else if (placement === \"bottom\" && dropdown) {\n      left = Math.max(placementLeft, sourceLeft);\n      top = Math.round(Math.max(placementTop, sourceBottom + placementGap));\n      width = Math.round(Math.max(0, Math.min(sourceWidth, placementRight - sourceLeft)));\n      height = null;\n      maxWidth = Math.round(Math.max(0, placementRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - sourceTop));\n    } else if (placement === \"left\" && dropdown) {\n      left = Math.round(Math.max(placementLeft, sourceLeft - (popoverWidth + placementGap)));\n      top = Math.max(placementTop, sourceTop);\n      width = null;\n      height = Math.round(Math.max(0, Math.min(sourceHeight, placementBottom - sourceTop)));\n      maxWidth = Math.round(Math.max(0, sourceRight - placementLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    } else if (placement === \"right\" && dropdown) {\n      left = Math.round(Math.max(placementLeft, sourceRight + placementGap));\n      top = Math.max(placementTop, sourceTop);\n      width = null;\n      height = Math.round(Math.max(0, Math.min(sourceHeight, placementBottom - sourceTop)));\n      maxWidth = Math.round(Math.max(0, placementRight - sourceLeft));\n      maxHeight = Math.round(Math.max(0, placementBottom - placementTop));\n    }\n\n    if (placement !== \"none\" && (left !== node.offsetLeft && this.style.left.hasAffinity(Affinity.Intrinsic)\n                              || top !== node.offsetTop && this.style.top.hasAffinity(Affinity.Intrinsic)\n                              || width !== oldWidth && this.style.width.hasAffinity(Affinity.Intrinsic)\n                              || height !== oldHeight && this.style.height.hasAffinity(Affinity.Intrinsic)\n                              || maxWidth !== oldMaxWidth && this.style.maxWidth.hasAffinity(Affinity.Intrinsic)\n                              || maxHeight !== oldMaxHeight && this.style.maxHeight.hasAffinity(Affinity.Intrinsic))) {\n      this.willPlacePopover(placement);\n      this.style.setIntrinsic({\n        position: \"absolute\",\n        left, right,\n        top, bottom,\n        width, height,\n        maxWidth, maxHeight,\n      });\n      this.onPlacePopover(placement);\n      this.didPlacePopover(placement);\n    }\n\n    (this as Mutable<this>).currentPlacement = placement;\n    return placement;\n  }\n\n  protected willPlacePopover(placement: PopoverPlacement): void {\n    this.callObservers(\"popoverWillPlace\", placement, this);\n  }\n\n  protected onPlacePopover(placement: PopoverPlacement): void {\n    // hook\n  }\n\n  protected didPlacePopover(placement: PopoverPlacement): void {\n    this.callObservers(\"popoverDidPlace\", placement, this);\n  }\n\n  /** @internal */\n  protected placeArrow(sourceView: View, sourceFrame: R2Box, arrow: HtmlView,\n                       placement: PopoverPlacement): void {\n    const node = this.node;\n    const parent = node.offsetParent;\n    if (parent === null) {\n      return;\n    }\n\n    // offsetParent bounds in client coordinates\n    const parentBounds = parent.getBoundingClientRect();\n    const parentLeft = parentBounds.left;\n    const parentTop = parentBounds.top;\n\n    // source bounds in offsetParent coordinates (transformed from page coordinates)\n    const sourceLeft = sourceFrame.left - window.pageXOffset - parentLeft;\n    const sourceTop = sourceFrame.top - window.pageYOffset - parentTop;\n    const sourceWidth = sourceFrame.width;\n    const sourceHeight = sourceFrame.height;\n    const sourceX = sourceLeft + sourceWidth / 2;\n    const sourceY = sourceTop + sourceHeight / 2;\n\n    const offsetLeft = node.offsetLeft;\n    const offsetRight = offsetLeft + node.clientWidth;\n    const offsetTop = node.offsetTop;\n    const offsetBottom = offsetTop + node.clientHeight;\n\n    let backgroundColor = this.style.backgroundColor.value;\n    if (backgroundColor === null) {\n      backgroundColor = Color.transparent();\n    }\n    const borderRadius = this.style.borderRadius.get();\n    const radius = borderRadius instanceof Length ? borderRadius.pxValue() : 0;\n\n    const arrowWidth = this.arrowWidth.getValue().pxValue();\n    const arrowHeight = this.arrowHeight.getValue().pxValue();\n\n    const arrowXMin = offsetLeft + radius + arrowWidth / 2;\n    const arrowXMax = offsetRight - radius - arrowWidth / 2;\n    const arrowYMin = offsetTop + radius + arrowWidth / 2;\n    const arrowYMax = offsetBottom - radius - arrowWidth / 2;\n\n    arrow.style.setIntrinsic({\n      top: null,\n      right: null,\n      bottom: null,\n      left: null,\n      borderWidth: null,\n      borderStyle: void 0,\n      borderColor: null,\n      borderLeftWidth: null,\n      borderLeftStyle: void 0,\n      borderLeftColor: null,\n      borderRightWidth: null,\n      borderRightStyle: void 0,\n      borderRightColor: null,\n      borderTopWidth: null,\n      borderTopStyle: void 0,\n      borderTopColor: null,\n      borderBottomWidth: null,\n      borderBottomStyle: void 0,\n      borderBottomColor: null,\n      zIndex: 100,\n    });\n\n    if (placement === \"none\" || placement === \"above\" || placement === \"below\" || placement === \"over\") {\n      // hide arrow\n      arrow.style.display.setIntrinsic(\"none\");\n    } else if (Math.round(sourceY) <= Math.round(offsetTop - arrowHeight) // arrow tip below source center\n        && arrowXMin <= sourceX && sourceX <= arrowXMax) { // arrow base on top popover edge\n      // top arrow\n      arrow.style.setIntrinsic({\n        display: \"block\",\n        top: Math.round(-arrowHeight),\n        left: Math.round(sourceX - offsetLeft - arrowWidth / 2),\n        borderLeftWidth: Math.round(arrowWidth / 2),\n        borderLeftStyle: \"solid\",\n        borderLeftColor: Color.transparent(),\n        borderRightWidth: Math.round(arrowWidth / 2),\n        borderRightStyle: \"solid\",\n        borderRightColor: Color.transparent(),\n        borderBottomWidth: Math.round(arrowHeight),\n        borderBottomStyle: \"solid\",\n        borderBottomColor: backgroundColor,\n      });\n    } else if (Math.round(offsetBottom + arrowHeight) <= Math.round(sourceY) // arrow tip above source center\n        && arrowXMin <= sourceX && sourceX <= arrowXMax) { // arrow base on bottom popover edge\n      // bottom arrow\n      arrow.style.setIntrinsic({\n        display: \"block\",\n        bottom: Math.round(-arrowHeight),\n        left: Math.round(sourceX - offsetLeft - arrowWidth / 2),\n        borderLeftWidth: Math.round(arrowWidth / 2),\n        borderLeftStyle: \"solid\",\n        borderLeftColor: Color.transparent(),\n        borderRightWidth: Math.round(arrowWidth / 2),\n        borderRightStyle: \"solid\",\n        borderRightColor: Color.transparent(),\n        borderTopWidth: Math.round(arrowHeight),\n        borderTopStyle: \"solid\",\n        borderTopColor: backgroundColor,\n      });\n    } else if (Math.round(sourceX) <= Math.round(offsetLeft - arrowHeight) // arrow tip right of source center\n        && arrowYMin <= sourceY && sourceY <= arrowYMax) { // arrow base on left popover edge\n      // left arrow\n      arrow.style.setIntrinsic({\n        display: \"block\",\n        left: Math.round(-arrowHeight),\n        top: Math.round(sourceY - offsetTop - arrowWidth / 2),\n        borderTopWidth: Math.round(arrowWidth / 2),\n        borderTopStyle: \"solid\",\n        borderTopColor: Color.transparent(),\n        borderBottomWidth: Math.round(arrowWidth / 2),\n        borderBottomStyle: \"solid\",\n        borderBottomColor: Color.transparent(),\n        borderRightWidth: Math.round(arrowHeight),\n        borderRightStyle: \"solid\",\n        borderRightColor: backgroundColor,\n      });\n    } else if (Math.round(offsetRight + arrowHeight) <= Math.round(sourceX) // arrow tip left of source center\n        && arrowYMin <= sourceY && sourceY <= arrowYMax) { // arrow base on right popover edge\n      // right arrow\n      arrow.style.setIntrinsic({\n        display: \"block\",\n        right: Math.round(-arrowHeight),\n        top: Math.round(sourceY - offsetTop - arrowWidth / 2),\n        borderTopWidth: Math.round(arrowWidth / 2),\n        borderTopStyle: \"solid\",\n        borderTopColor: Color.transparent(),\n        borderBottomWidth: Math.round(arrowWidth / 2),\n        borderBottomStyle: \"solid\",\n        borderBottomColor: Color.transparent(),\n        borderLeftWidth: Math.round(arrowHeight),\n        borderLeftStyle: \"solid\",\n        borderLeftColor: backgroundColor,\n      });\n    } else {\n      // no arrow\n      arrow.style.display.setIntrinsic(\"none\");\n    }\n  }\n\n  @EventHandler({\n    eventType: \"click\",\n    bindsOwner: true,\n    handle(event: MouseEvent): void {\n      event.stopPropagation();\n    },\n  })\n  readonly click!: EventHandler<this>;\n\n  /** @internal */\n  static readonly HiddenState: number = 0;\n  /** @internal */\n  static readonly HidingState: number = 1;\n  /** @internal */\n  static readonly HideState: number = 2;\n  /** @internal */\n  static readonly ShownState: number = 3;\n  /** @internal */\n  static readonly ShowingState: number = 4;\n  /** @internal */\n  static readonly ShowState: number = 5;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {ConstraintProperty} from \"@swim/constraint\";\nimport {Length} from \"@swim/math\";\nimport {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Expansion} from \"@swim/style\";\nimport {ExpansionAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport {ThemeConstraintAnimator} from \"@swim/theme\";\nimport type {ViewInsets} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ModalViewObserver} from \"@swim/dom\";\nimport type {ModalView} from \"@swim/dom\";\n\n/** @public */\nexport type DrawerPlacement = \"top\" | \"right\" | \"bottom\" | \"left\";\n\n/** @public */\nexport interface DrawerViewObserver<V extends DrawerView = DrawerView> extends HtmlViewObserver<V>, ModalViewObserver<V> {\n  viewDidSetPlacement?(placement: DrawerPlacement, view: V): void;\n\n  viewDidSetEffectiveWidth?(effectiveWidth: Length | null, view: V): void;\n\n  viewDidSetEffectiveHeight?(effectiveHeight: Length | null, view: V): void;\n\n  viewWillPresent?(view: V): void;\n\n  viewDidPresent?(view: V): void;\n\n  viewWillDismiss?(view: V): void;\n\n  viewDidDismiss?(view: V): void;\n\n  viewWillExpand?(view: V): void;\n\n  viewDidExpand?(view: V): void;\n\n  viewWillCollapse?(view: V): void;\n\n  viewDidCollapse?(view: V): void;\n}\n\n/** @public */\nexport class DrawerView extends HtmlView implements ModalView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initDrawer();\n  }\n\n  declare readonly observerType?: Class<DrawerViewObserver>;\n\n  protected initDrawer(): void {\n    this.setIntrinsic<DrawerView>({\n      classList: [\"drawer\"],\n      style: {\n        display: \"flex\",\n        overflowX: \"hidden\",\n        overflowY: \"auto\",\n        overscrollBehaviorY: \"contain\",\n        overflowScrolling: \"touch\",\n      },\n    });\n  }\n\n  @ThemeConstraintAnimator({valueType: Length, value: Length.px(60)})\n  readonly collapsedWidth!: ThemeConstraintAnimator<this, Length>;\n\n  @ThemeConstraintAnimator({valueType: Length, value: Length.px(200)})\n  readonly expandedWidth!: ThemeConstraintAnimator<this, Length>;\n\n  @ConstraintProperty({\n    valueType: Length,\n    value: null,\n    didSetValue(newValue: Length | null, oldValue: Length | null): void {\n      this.owner.callObservers(\"viewDidSetEffectiveWidth\", newValue, this.owner);\n    },\n    toNumber(value: Length | null): number {\n      return value !== null ? value.pxValue() : 0;\n    },\n  })\n  readonly effectiveWidth!: ConstraintProperty<this, Length | null>;\n\n  @ConstraintProperty({\n    valueType: Length,\n    value: null,\n    didSetValue(newValue: Length | null, oldValue: Length | null): void {\n      this.owner.callObservers(\"viewDidSetEffectiveHeight\", newValue, this.owner);\n    },\n    toNumber(value: Length | null): number {\n      return value !== null ? value.pxValue() : 0;\n    },\n  })\n  readonly effectiveHeight!: ConstraintProperty<this, Length | null>;\n\n  isHorizontal(): boolean {\n    return this.placement.value === \"top\" || this.placement.value === \"bottom\";\n  }\n\n  isVertical(): boolean {\n    return this.placement.value === \"left\" || this.placement.value === \"right\";\n  }\n\n  @Property({\n    valueType: String,\n    value: \"left\",\n    updateFlags: View.NeedsResize | View.NeedsLayout,\n    didSetValue(placement: DrawerPlacement): void {\n      this.owner.callObservers(\"viewDidSetPlacement\", placement, this.owner);\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly placement!: Property<this, DrawerPlacement>;\n\n  /** @override */\n  @PresenceAnimator({\n    value: Presence.presented(),\n    updateFlags: View.NeedsLayout,\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    didSetValue(presence: Presence): void {\n      this.owner.callObservers(\"viewDidSetPresence\", presence, this.owner);\n    },\n    willPresent(): void {\n      this.owner.callObservers(\"viewWillPresent\", this.owner);\n    },\n    didPresent(): void {\n      this.owner.callObservers(\"viewDidPresent\", this.owner);\n    },\n    willDismiss(): void {\n      this.owner.callObservers(\"viewWillDismiss\", this.owner);\n    },\n    didDismiss(): void {\n      this.owner.callObservers(\"viewDidDismiss\", this.owner);\n    },\n  })\n  readonly presence!: PresenceAnimator<this, Presence>;\n\n  @ExpansionAnimator({\n    value: Expansion.expanded(),\n    updateFlags: View.NeedsResize | View.NeedsLayout,\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, null);\n    },\n    willExpand(): void {\n      this.owner.modal.dismiss();\n      this.owner.callObservers(\"viewWillExpand\", this.owner);\n    },\n    didExpand(): void {\n      this.owner.callObservers(\"viewDidExpand\", this.owner);\n    },\n    willCollapse(): void {\n      this.owner.modal.dismiss();\n      this.owner.callObservers(\"viewWillCollapse\", this.owner);\n    },\n    didCollapse(): void {\n      this.owner.callObservers(\"viewDidCollapse\", this.owner);\n    },\n  })\n  readonly stretch!: ExpansionAnimator<this, Expansion>;\n\n  @Property({\n    extends: true,\n    getOutletValue(outlet: Property<unknown, ViewInsets>): ViewInsets {\n      let edgeInsets = this.value;\n      let insetTop = edgeInsets.insetTop;\n      let insetRight = edgeInsets.insetRight;\n      let insetBottom = edgeInsets.insetBottom;\n      let insetLeft = edgeInsets.insetLeft;\n      const placement = this.owner.placement.value;\n      if (placement === \"top\" && insetBottom !== 0) {\n        insetBottom = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      } else if (placement === \"right\" && insetLeft !== 0) {\n        insetLeft = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      } else if (placement === \"bottom\" && insetTop !== 0) {\n        insetTop = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      } else if (placement === \"left\" && insetRight !== 0) {\n        insetRight = 0;\n        edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n      }\n      return edgeInsets;\n    },\n  })\n  override get edgeInsets(): Property<this, ViewInsets> {\n    return Property.getter();\n  }\n\n  protected override onLayout(): void {\n    super.onLayout();\n    this.style.display.setIntrinsic(!this.presence.dismissed ? \"flex\" : \"none\");\n    this.layoutDrawer();\n\n    if (this.viewIdiom === \"mobile\") {\n      this.style.boxShadow.setIntrinsic(this.getLookOr(Look.shadow, Mood.floating, null));\n    } else {\n      this.style.boxShadow.setIntrinsic(this.getLookOr(Look.shadow, null));\n    }\n  }\n\n  protected layoutDrawer(): void {\n    const placement = this.placement.value;\n    if (placement === \"top\") {\n      this.layoutDrawerTop();\n    } else if (placement === \"right\") {\n      this.layoutDrawerRight();\n    } else if (placement === \"bottom\") {\n      this.layoutDrawerBottom();\n    } else if (placement === \"left\") {\n      this.layoutDrawerLeft();\n    }\n  }\n\n  protected layoutDrawerTop(): void {\n    const presencePhase = this.presence.getPhase();\n\n    this.classList.add(\"drawer-top\");\n    this.classList.remove(\"drawer-right\");\n    this.classList.remove(\"drawer-bottom\");\n    this.classList.remove(\"drawer-left\");\n\n    this.style.setIntrinsic({\n      position: \"fixed\",\n      width: null,\n      height: null,\n      left: Length.zero(),\n      right: Length.zero(),\n      bottom: null,\n    });\n\n    const height = this.style.height.getCssValue();\n    this.style.top.setIntrinsic(height.times(presencePhase - 1));\n\n    this.effectiveWidth.setIntrinsic(this.style.width.value);\n    this.effectiveHeight.setIntrinsic(height.times(presencePhase));\n\n    if (this.stretch.collapsed) {\n      this.expand();\n    }\n  }\n\n  protected layoutDrawerRight(): void {\n    const stretchPhase = this.stretch.getPhase();\n    const presencePhase = this.presence.getPhase();\n\n    this.classList.remove(\"drawer-top\");\n    this.classList.add(\"drawer-right\");\n    this.classList.remove(\"drawer-bottom\");\n    this.classList.remove(\"drawer-left\");\n\n    this.style.setIntrinsic({\n      position: \"fixed\",\n      height: null,\n      top: Length.zero(),\n      bottom: Length.zero(),\n      left: null,\n    });\n\n    let width: Length | null;\n    if (this.style.width.hasAffinity(Affinity.Intrinsic)) {\n      const collapsedWidth = this.collapsedWidth.getValue();\n      const expandedWidth = this.expandedWidth.getValue();\n      width = collapsedWidth.times(1 - stretchPhase).plus(expandedWidth.times(stretchPhase));\n    } else {\n      width = this.style.width.getCssValue();\n    }\n    this.style.width.setIntrinsic(width);\n    this.style.right.setIntrinsic(width.times(presencePhase - 1));\n\n    this.effectiveWidth.setIntrinsic(width.times(presencePhase));\n    this.effectiveHeight.setIntrinsic(this.style.height.value);\n  }\n\n  protected layoutDrawerBottom(): void {\n    const presencePhase = this.presence.getPhase();\n\n    this.classList.remove(\"drawer-top\");\n    this.classList.remove(\"drawer-right\");\n    this.classList.add(\"drawer-bottom\");\n    this.classList.remove(\"drawer-left\");\n\n    this.style.setIntrinsic({\n      position: \"fixed\",\n      width: null,\n      height: null,\n      left: Length.zero(),\n      right: Length.zero(),\n      top: null,\n    });\n\n    const height = this.style.height.getCssValue();\n    this.style.bottom.setIntrinsic(height.times(presencePhase - 1));\n\n    this.effectiveWidth.setIntrinsic(this.style.width.value);\n    this.effectiveHeight.setIntrinsic(height.times(presencePhase));\n\n    if (this.stretch.collapsed) {\n      this.expand();\n    }\n  }\n\n  protected layoutDrawerLeft(): void {\n    const stretchPhase = this.stretch.getPhase();\n    const presencePhase = this.presence.getPhase();\n\n    this.classList.remove(\"drawer-top\");\n    this.classList.remove(\"drawer-right\");\n    this.classList.remove(\"drawer-bottom\");\n    this.classList.add(\"drawer-left\");\n\n    this.style.setIntrinsic({\n      position: \"fixed\",\n      height: null,\n      top: Length.zero(),\n      bottom: Length.zero(),\n      right: null,\n    });\n\n    let width: Length | null;\n    if (this.style.width.hasAffinity(Affinity.Intrinsic)) {\n      const collapsedWidth = this.collapsedWidth.getValue();\n      const expandedWidth = this.expandedWidth.getValue();\n      width = collapsedWidth.times(1 - stretchPhase).plus(expandedWidth.times(stretchPhase));\n    } else {\n      width = this.style.width.getCssValue();\n    }\n    this.style.width.setIntrinsic(width);\n    this.style.left.setIntrinsic(width.times(presencePhase - 1));\n\n    this.effectiveWidth.setIntrinsic(width.times(presencePhase));\n    this.effectiveHeight.setIntrinsic(this.style.height.value);\n  }\n\n  /** @override */\n  @Property({\n    valueType: Number,\n    value: 0,\n    didSetValue(modality: number): void {\n      this.owner.callObservers(\"viewDidSetModality\", modality, this.owner);\n    },\n  })\n  readonly modality!: Property<this, number>;\n\n  present(timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    this.presence.present(timing);\n  }\n\n  dismiss(timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    this.presence.dismiss(timing);\n  }\n\n  expand(timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    this.stretch.expand(timing);\n  }\n\n  collapse(timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    this.stretch.collapse(timing);\n  }\n\n  toggle(timing?: TimingLike | boolean): void {\n    if (timing === void 0 || timing === true) {\n      timing = this.getLookOr(Look.timing, false);\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    if (this.viewIdiom === \"mobile\" || this.isHorizontal()) {\n      if (this.presence.presented) {\n        this.presence.dismiss(timing);\n      } else {\n        this.stretch.expand(timing);\n        this.presence.present(timing);\n        this.modal.present(this, {modal: true});\n      }\n    } else {\n      this.stretch.toggle(timing);\n      this.presence.present(timing);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {EventHandler} from \"@swim/component\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport {IconButton} from \"@swim/button\";\nimport type {DrawerView} from \"./DrawerView\";\n\n/** @public */\nexport class DrawerButton extends IconButton {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.drawerView = null;\n    this.initIcon();\n  }\n\n  protected override initButton(): void {\n    super.initButton();\n    this.classList.add(\"drawer-button\");\n  }\n\n  protected initIcon(): void {\n    this.icon.push(DrawerButton.hamburgerIcon);\n  }\n\n  readonly drawerView: DrawerView | null;\n\n  setDrawerView(drawerView: DrawerView | null): void {\n    (this as Mutable<this>).drawerView = drawerView;\n  }\n\n  @EventHandler({\n    extends: true,\n    handle(event: MouseEvent): void {\n      super.handle(event);\n      const drawerView = this.owner.drawerView;\n      if (drawerView !== null) {\n        drawerView.toggle();\n      }\n    },\n  })\n  override readonly click!: EventHandler<this>;\n\n  @Lazy\n  static get hamburgerIcon(): Graphics {\n    return VectorIcon.create(24, 24, \"M21,17L21,19L3,19L3,17L21,17ZM21,11L21,13L3,13L3,11L21,11ZM3,5L3,7L21,7L21,5L3,5Z\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport {EventHandler} from \"@swim/component\";\nimport {Presence} from \"@swim/style\";\nimport {PresenceAnimator} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport {View} from \"@swim/view\";\nimport type {Overflow} from \"@swim/dom\";\nimport type {PointerEvents} from \"@swim/dom\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\n\n/** @public */\nexport interface SheetViewObserver<V extends SheetView = SheetView> extends HtmlViewObserver<V> {\n  viewDidSetFullBleed?(fullBleed: boolean, view: V): void;\n\n  viewWillPresent?(view: V): void;\n\n  viewDidPresent?(view: V): void;\n\n  viewWillDismiss?(view: V): void;\n\n  viewDidDismiss?(view: V): void;\n}\n\n/** @public */\nexport class SheetView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initSheet();\n  }\n\n  protected initSheet(): void {\n    this.setIntrinsic<SheetView>({\n      classList: [\"sheet\"],\n      style: {\n        position: \"relative\",\n        boxSizing: \"border-box\",\n        overflowX: \"hidden\",\n        overflowY: \"auto\",\n        overscrollBehaviorY: \"contain\",\n        overflowScrolling: \"touch\",\n        backgroundColor: Look.backgroundColor,\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<SheetViewObserver>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(fullBleed: boolean): void {\n      this.owner.callObservers(\"viewDidSetFullBleed\", fullBleed, this.owner);\n    },\n  })\n  readonly fullBleed!: Property<this, boolean>;\n\n  @Property({valueType: Number, value: 1})\n  readonly sheetAlign!: Property<this, number>;\n\n  @PresenceAnimator({\n    value: Presence.presented(),\n    updateFlags: View.NeedsLayout,\n    init(): void {\n      this.pointerEvents = void 0;\n      this.overflowX = void 0;\n      this.overflowY = void 0;\n    },\n    get transition(): Timing | boolean | null {\n      return this.owner.getLookOr(Look.timing, Mood.navigating, null);\n    },\n    willPresent(): void {\n      this.owner.callObservers(\"viewWillPresent\", this.owner);\n    },\n    didPresent(): void {\n      this.owner.style.pointerEvents.setState(void 0, Affinity.Transient);\n      this.owner.callObservers(\"viewDidPresent\", this.owner);\n    },\n    willDismiss(): void {\n      this.owner.callObservers(\"viewWillDismiss\", this.owner);\n      this.pointerEvents = this.owner.style.pointerEvents.state;\n      this.overflowX = this.owner.style.overflowX.state;\n      this.overflowY = this.owner.style.overflowY.state;\n      this.owner.style.pointerEvents.setState(\"none\", Affinity.Transient);\n      this.owner.style.overflowX.setIntrinsic(\"hidden\");\n      this.owner.style.overflowY.setIntrinsic(\"hidden\");\n    },\n    didDismiss(): void {\n      this.owner.style.pointerEvents.setState(this.pointerEvents, Affinity.Transient);\n      this.owner.style.overflowX.setIntrinsic(this.overflowX);\n      this.owner.style.overflowY.setIntrinsic(this.overflowY);\n      this.pointerEvents = void 0;\n      this.overflowX = void 0;\n      this.overflowY = void 0;\n      this.owner.callObservers(\"viewDidDismiss\", this.owner);\n    },\n  })\n  readonly presence!: PresenceAnimator<SheetView, Presence> & {\n    /** @internal */\n    pointerEvents: PointerEvents | undefined,\n    /** @internal */\n    overflowX: Overflow | undefined,\n    /** @internal */\n    overflowY: Overflow | undefined,\n  };\n\n  present(timing?: TimingLike | boolean | null): void {\n    this.presence.present(timing);\n  }\n\n  dismiss(timing?: TimingLike | boolean | null): void {\n    this.presence.dismiss(timing);\n  }\n\n  /** @internal */\n  layoutSheet(): void {\n    const sheetWidth = this.style.width.pxState();\n    const sheetAlign = this.sheetAlign.value;\n    const phase = this.presence.value.phase;\n    this.style.left.setIntrinsic(sheetWidth * sheetAlign * (1 - phase));\n  }\n\n  @EventHandler({\n    eventType: \"scroll\",\n    bindsOwner: true,\n    handle(event: Event): void {\n      this.owner.requireUpdate(View.NeedsScroll);\n    },\n  })\n  readonly scroll!: EventHandler<this>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {Graphics} from \"@swim/graphics\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {ControllerRef} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {ToolLayout} from \"@swim/toolbar\";\nimport type {ToolView} from \"@swim/toolbar\";\nimport {TitleToolView} from \"@swim/toolbar\";\nimport {ButtonToolView} from \"@swim/toolbar\";\nimport {ToolController} from \"@swim/toolbar\";\nimport {TitleToolController} from \"@swim/toolbar\";\nimport {ButtonToolController} from \"@swim/toolbar\";\nimport {SheetView} from \"./SheetView\";\n\n/** @public */\nexport interface SheetControllerObserver<C extends SheetController = SheetController> extends ControllerObserver<C> {\n  controllerWillAttachSheetTrait?(sheetTrait: Trait, controller: C): void;\n\n  controllerDidDetachSheetTrait?(sheetTrait: Trait, controller: C): void;\n\n  controllerWillAttachSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerDidDetachSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerDidScrollSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerWillAttachBack?(backController: SheetController, controller: C): void;\n\n  controllerDidDetachBack?(backController: SheetController, controller: C): void;\n\n  controllerWillAttachForward?(forwardController: SheetController, controller: C): void;\n\n  controllerDidDetachForward?(forwardController: SheetController, controller: C): void;\n\n  controllerDidSetFullBleed?(fullBleed: boolean, controller: C): void;\n\n  controllerDidSetSearchable?(searchable: boolean, controller: C): void;\n\n  controllerDidSetSearching?(searching: boolean, controller: C): void;\n\n  controllerDidUpdateSearch?(query: string, controller: C): void;\n\n  controllerDidSubmitSearch?(query: string, controller: C): void;\n\n  controllerWillAttachTitle?(titleController: ToolController, controller: C): void;\n\n  controllerDidDetachTitle?(titleController: ToolController, controller: C): void;\n\n  controllerDidPressTitle?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidLongPressTitle?(input: PositionGestureInput, controller: C): void;\n\n  controllerWillAttachHandle?(handleController: ToolController, controller: C): void;\n\n  controllerDidDetachHandle?(handleController: ToolController, controller: C): void;\n\n  controllerDidPressHandle?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidLongPressHandle?(input: PositionGestureInput, controller: C): void;\n\n  controllerWillAttachModeTool?(modeToolController: ToolController, targetToolController: ToolController | null, controller: C): void;\n\n  controllerDidDetachModeTool?(modeToolController: ToolController, controller: C): void;\n\n  controllerWillAttachModeToolView?(modeToolView: ToolView, modeToolController: ToolController, controller: C): void;\n\n  controllerDidDetachModeToolView?(modeToolView: ToolView, modeToolController: ToolController, controller: C): void;\n\n  controllerWillPresentSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerDidPresentSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerWillDismissSheetView?(sheetView: SheetView, controller: C): void;\n\n  controllerDidDismissSheetView?(sheetView: SheetView, controller: C): void;\n}\n\n/** @public */\nexport class SheetController extends Controller {\n  declare readonly observerType?: Class<SheetControllerObserver>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(fullBleed: boolean): void {\n      this.owner.callObservers(\"controllerDidSetFullBleed\", fullBleed, this.owner);\n      const sheetView = this.owner.sheet.view;\n      if (sheetView !== null) {\n        sheetView.fullBleed.setValue(fullBleed, Affinity.Inherited);\n      }\n    },\n  })\n  readonly fullBleed!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(searchable: boolean): void {\n      this.owner.callObservers(\"controllerDidSetSearchable\", searchable, this.owner);\n    },\n  })\n  readonly searchable!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(searching: boolean): void {\n      this.owner.callObservers(\"controllerDidSetSearching\", searching, this.owner);\n    },\n  })\n  readonly searching!: Property<this, boolean>;\n\n  updateSearch(query: string, inputView: HtmlView): void {\n    // hook\n  }\n\n  submitSearch(query: string, inputView: HtmlView): void {\n    // hook\n  }\n\n  @TraitViewRef({\n    willAttachTrait(sheetTrait: Trait): void {\n      this.owner.callObservers(\"controllerWillAttachSheetTrait\", sheetTrait, this.owner);\n    },\n    didDetachTrait(sheetTrait: Trait): void {\n      this.owner.callObservers(\"controllerDidDetachSheetTrait\", sheetTrait, this.owner);\n    },\n    viewType: SheetView,\n    observesView: true,\n    willAttachView(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerWillAttachSheetView\", sheetView, this.owner);\n    },\n    didAttachView(sheetView: SheetView): void {\n      this.owner.fullBleed.setIntrinsic(sheetView.fullBleed.value);\n    },\n    didDetachView(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerDidDetachSheetView\", sheetView, this.owner);\n    },\n    viewDidScroll(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerDidScrollSheetView\", sheetView, this.owner);\n    },\n    viewDidSetFullBleed(fullBleed: boolean, sheetView: SheetView): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n    viewWillPresent(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerWillPresentSheetView\", sheetView, this.owner);\n    },\n    viewDidPresent(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerDidPresentSheetView\", sheetView, this.owner);\n    },\n    viewWillDismiss(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerWillDismissSheetView\", sheetView, this.owner);\n    },\n    viewDidDismiss(sheetView: SheetView): void {\n      this.owner.callObservers(\"controllerDidDismissSheetView\", sheetView, this.owner);\n    },\n  })\n  readonly sheet!: TraitViewRef<this, Trait, SheetView> & Observes<SheetView>;\n\n  @ControllerRef({\n    get controllerType(): typeof SheetController {\n      return SheetController;\n    },\n    binds: false,\n    willAttachController(backController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachBack\", backController, this.owner);\n    },\n    didDetachController(backController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachBack\", backController, this.owner);\n    },\n  })\n  readonly back!: ControllerRef<this, SheetController>;\n\n  @ControllerRef({\n    get controllerType(): typeof SheetController {\n      return SheetController;\n    },\n    binds: false,\n    willAttachController(forwardController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachForward\", forwardController, this.owner);\n    },\n    didDetachController(forwardController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachForward\", forwardController, this.owner);\n    },\n  })\n  readonly forward!: ControllerRef<this, SheetController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    observes: true,\n    getTraitViewRef(titleController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return titleController.tool;\n    },\n    willAttachController(titleController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachTitle\", titleController, this.owner);\n    },\n    didAttachController(titleController: ToolController): void {\n      const titleView = titleController.tool.attachView();\n      this.attachToolView(titleView, titleController);\n    },\n    willDetachController(titleController: ToolController): void {\n      const titleView = titleController.tool.view;\n      if (titleView !== null) {\n        this.detachToolView(titleView, titleController);\n      }\n    },\n    didDetachController(titleController: ToolController): void {\n      this.owner.callObservers(\"controllerDidDetachTitle\", titleController, this.owner);\n    },\n    controllerWillAttachToolView(titleView: ToolView, titleController: ToolController): void {\n      this.attachToolView(titleView, titleController);\n    },\n    controllerDidDetachToolView(titleView: ToolView, titleController: ToolController): void {\n      this.detachToolView(titleView, titleController);\n    },\n    attachToolView(titleView: ToolView, titleController: ToolController): void {\n      // hook\n    },\n    detachToolView(titleView: ToolView, titleController: ToolController): void {\n      // hook\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressTitle\", input, event, this.owner);\n    },\n    controllerDidLongPressToolView(input: PositionGestureInput): void {\n      this.owner.callObservers(\"controllerDidLongPressTitle\", input, this.owner);\n    },\n    fromLike(value: ToolController | LikeType<ToolController> | string | undefined): ToolController {\n      if (value === void 0 || typeof value === \"string\") {\n        let controller = this.controller;\n        if (controller === null) {\n          controller = this.createController();\n        }\n        const view = controller.tool.attachView();\n        if (view instanceof TitleToolView) {\n          view.content.set(value);\n        }\n        return controller;\n      }\n      return super.fromLike(value);\n    },\n    createController(): ToolController {\n      const titleController = TitleToolController.create();\n      const titleView = titleController.tool.attachView();\n      titleView.style.fontSize.setIntrinsic(14);\n      return titleController;\n    },\n  })\n  readonly title!: TraitViewControllerRef<this, Trait, ToolView, Like<ToolController, string | undefined>> & Observes<ToolController> & {\n    attachToolView(titleView: ToolView, titleController: ToolController): void,\n    detachToolView(titleView: ToolView, titleController: ToolController): void,\n  };\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    observes: true,\n    getTraitViewRef(handleController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return handleController.tool;\n    },\n    init(): void {\n      (this as Mutable<typeof this>).active = false;\n    },\n    initController(handleController: ToolController): void {\n      const handleView = this.view;\n      if (handleView !== null) {\n        this.updateActive(this.active, handleView);\n      }\n    },\n    willAttachController(handleController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachHandle\", handleController, this.owner);\n    },\n    didAttachController(handleController: ToolController): void {\n      const handleView = handleController.tool.attachView();\n      this.attachToolView(handleView, handleController);\n    },\n    willDetachController(handleController: ToolController): void {\n      const handleView = handleController.tool.view;\n      if (handleView !== null) {\n        this.detachToolView(handleView, handleController);\n      }\n    },\n    didDetachController(handleController: ToolController): void {\n      this.owner.callObservers(\"controllerDidDetachHandle\", handleController, this.owner);\n    },\n    controllerWillAttachToolView(handleView: ToolView, handleController: ToolController): void {\n      this.attachToolView(handleView, handleController);\n      this.updateActive(this.active, handleView);\n    },\n    controllerDidDetachToolView(handleView: ToolView, handleController: ToolController): void {\n      this.detachToolView(handleView, handleController);\n    },\n    attachToolView(handleView: ToolView, handleController: ToolController): void {\n      // hook\n    },\n    detachToolView(handleView: ToolView, handleController: ToolController): void {\n      // hook\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressHandle\", input, event, this.owner);\n    },\n    controllerDidLongPressToolView(input: PositionGestureInput): void {\n      this.owner.callObservers(\"controllerDidLongPressHandle\", input, this.owner);\n    },\n    setActive(active: boolean): void {\n      (this as Mutable<typeof this>).active = active;\n      const handleView = this.view;\n      if (handleView !== null) {\n        this.updateActive(active, handleView);\n      }\n    },\n    updateActive(active: boolean, handleView: ToolView): void {\n      if (handleView instanceof ButtonToolView) {\n        const timing = !handleView.inserting ? handleView.getLook(Look.timing) : false;\n        if (active) {\n          handleView.iconColor.setIntrinsic(Look.accentColor, timing);\n        } else {\n          handleView.iconColor.setIntrinsic(Look.iconColor, timing);\n        }\n      }\n    },\n    setIcon(icon: Graphics | null): void {\n      const handleController = this.insertController() as ButtonToolController;\n      const handleView = handleController.tool.attachView();\n      handleView.graphics.setIntrinsic(icon);\n    },\n    createController(): ToolController {\n      const handleController = ButtonToolController.create();\n      const toolLayout = ToolLayout.create(\"\", 0, 0, 36);\n      handleController.layout.set(toolLayout);\n      const handleView = handleController.tool.attachView();\n      handleView.iconLayout.setIntrinsic({width: 24, height: 24});\n      return handleController;\n    },\n  })\n  readonly handle!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ToolController> & Observes<ButtonToolController> & {\n    readonly active: boolean;\n    attachToolView(handleView: ToolView, handleController: ToolController): void,\n    detachToolView(handleView: ToolView, handleController: ToolController): void,\n    setActive(active: boolean): void,\n    updateActive(active: boolean, handleView: ToolView): void,\n    setIcon(icon: Graphics | null): void,\n  };\n\n  @TraitViewControllerSet({\n    controllerType: ToolController,\n    binds: false,\n    ordered: true,\n    observes: true,\n    getTraitViewRef(modeToolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return modeToolController.tool;\n    },\n    willAttachController(modeToolController: ToolController): void {\n      let targetToolController: ToolController | null | undefined = Objects.getNextValue(this.controllers, modeToolController.uid);\n      if (targetToolController === void 0) {\n        targetToolController = null;\n      }\n      this.owner.callObservers(\"controllerWillAttachModeTool\", modeToolController, targetToolController, this.owner);\n    },\n    didAttachController(modeToolController: ToolController): void {\n      const modeToolView = modeToolController.tool.attachView();\n      this.attachToolView(modeToolView, modeToolController);\n    },\n    willDetachController(modeToolController: ToolController): void {\n      const modeToolView = modeToolController.tool.view;\n      if (modeToolView !== null) {\n        this.detachToolView(modeToolView, modeToolController);\n      }\n    },\n    didDetachController(modeToolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidDetachModeTool\", modeToolController, this.owner);\n    },\n    controllerWillAttachToolView(modeToolView: ToolView, modeToolController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachModeToolView\", modeToolView, modeToolController, this.owner);\n      this.attachToolView(modeToolView, modeToolController);\n    },\n    controllerDidDetachToolView(modeToolView: ToolView, modeToolController: ToolController): void {\n      this.detachToolView(modeToolView, modeToolController);\n      this.owner.callObservers(\"controllerDidDetachModeToolView\", modeToolView, modeToolController, this.owner);\n    },\n    attachToolView(modeToolView: ToolView, modeToolController: ToolController): void {\n      // hook\n    },\n    detachToolView(modeToolView: ToolView, modeToolController: ToolController): void {\n      // hook\n    },\n  })\n  readonly modeTools!: TraitViewControllerSet<this, Trait, ToolView, ToolController> & Observes<ToolController> & {\n    attachToolView(modeToolView: ToolView, modeToolController: ToolController): void,\n    detachToolView(modeToolView: ToolView, modeToolController: ToolController): void,\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {Presence} from \"@swim/style\";\nimport {Look} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport {Controller} from \"@swim/controller\";\nimport type {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {ToolLayout} from \"@swim/toolbar\";\nimport {BarLayout} from \"@swim/toolbar\";\nimport type {ToolView} from \"@swim/toolbar\";\nimport {SearchToolView} from \"@swim/toolbar\";\nimport {ToolController} from \"@swim/toolbar\";\nimport {TitleToolController} from \"@swim/toolbar\";\nimport {ButtonToolController} from \"@swim/toolbar\";\nimport {SearchToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport type {BarControllerObserver} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"./SheetView\";\nimport {SheetController} from \"./SheetController\";\n\n/** @public */\nexport interface NavBarControllerObserver<C extends NavBarController = NavBarController> extends BarControllerObserver<C> {\n  controllerDidPressCloseButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressBackButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressSearchButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidUpdateSearch?(query: string, inputView: HtmlView, controller: C): void;\n\n  controllerDidSubmitSearch?(query: string, inputView: HtmlView, controller: C): void;\n\n  controllerDidCancelSearch?(inputView: HtmlView | null, controller: C): void;\n}\n\n/** @public */\nexport class NavBarController extends BarController {\n  declare readonly observerType?: Class<NavBarControllerObserver>;\n\n  @Property({valueType: Boolean, value: true, updateFlags: Controller.NeedsAssemble})\n  readonly showBackTitle!: Property<this, boolean>;\n\n  protected override createLayout(): BarLayout | null {\n    const frontController = this.front.controller;\n    if (frontController === null || !frontController.searching.value) {\n      return this.createNavLayout();\n    } else {\n      return this.createSearchLayout();\n    }\n  }\n\n  protected createNavLayout(): BarLayout | null {\n    const tools = new Array<ToolLayout>();\n\n    const frontController = this.front.controller;\n    const frontKey = frontController !== null ? \"title\" + frontController.uid : \"\";\n    const backController = frontController !== null ? frontController.back.controller : null;\n    const backKey = backController !== null ? \"title\" + backController.uid : void 0;\n    const showBackTitle = this.showBackTitle.value;\n\n    if (frontController === null || backController === null) {\n      const closeButtonController = this.closeButton.controller;\n      if (closeButtonController !== null) {\n        const closeButtonLayout = closeButtonController.layout.value;\n        if (closeButtonLayout !== null) {\n          tools.push(closeButtonLayout);\n        }\n        const closeButtonView = closeButtonController.tool.view;\n        if (closeButtonView !== null) {\n          this.closeButton.insertView();\n          closeButtonView.style.zIndex.setIntrinsic(2);\n        }\n      }\n    } else {\n      const backButtonController = this.backButton.controller;\n      if (backButtonController !== null) {\n        let backButtonLayout = backButtonController.layout.value;\n        if (backButtonLayout !== null) {\n          if (showBackTitle) {\n            backButtonLayout = backButtonLayout.withOverlap(backKey).withOverpad(16);\n          }\n          tools.push(backButtonLayout);\n        }\n        const backButtonView = this.backButton.insertView();\n        backButtonView.style.zIndex.setIntrinsic(2);\n      }\n    }\n\n    if (showBackTitle) {\n      if (backController !== null) {\n        const backTitleLayout = ToolLayout.create(backKey!, 0, 0, 0, 0, -1, -1);\n        tools.push(backTitleLayout);\n        const backTitleView = backController.title.insertView(this.bar.view, void 0, void 0, backKey);\n        if (backTitleView !== null) {\n          const timing = backTitleView.getLookOr(Look.timing, Mood.navigating, false);\n          backTitleView.style.color.setIntrinsic(Look.accentColor, timing);\n          backTitleView.style.zIndex.setIntrinsic(3);\n          backTitleView.style.pointerEvents.setIntrinsic(\"none\");\n        }\n      }\n      const frontTitleLayout = ToolLayout.create(frontKey, 1, 0, 0, 0.5, 1, 1);\n      tools.push(frontTitleLayout);\n      if (frontController !== null) {\n        const frontTitleView = frontController.title.insertView(this.bar.view, void 0, void 0, frontKey);\n        if (frontTitleView !== null) {\n          const timing = frontTitleView.getLookOr(Look.timing, Mood.navigating, false);\n          frontTitleView.style.color.setIntrinsic(Look.textColor, timing);\n          frontTitleView.style.zIndex.setIntrinsic(1);\n          frontTitleView.style.pointerEvents.setIntrinsic(\"auto\");\n        }\n      }\n    } else {\n      const barView = this.bar.view;\n      const oldBarLayout = barView !== null ? barView.layout.value : null;\n      const oldBackLayout = oldBarLayout !== null && backKey !== void 0 ? oldBarLayout.getTool(backKey) : null;\n      if (backController !== null && oldBackLayout !== null) {\n        const backTitleLayout = ToolLayout.create(backKey!, 0, 0, 0, 0, -1, -1).withPresence(Presence.dismissed());\n        tools.push(backTitleLayout);\n      }\n      let frontTitleLayout: ToolLayout;\n      if (oldBackLayout === null) {\n        frontTitleLayout = ToolLayout.create(frontKey, 1, 0, 0, 0.5, 0, 1);\n      } else {\n        frontTitleLayout = ToolLayout.create(frontKey, 1, 0, 0, 0.5, 1, 1);\n      }\n      tools.push(frontTitleLayout);\n      if (frontController !== null) {\n        const frontTitleView = frontController.title.insertView(this.bar.view, void 0, void 0, frontKey);\n        if (frontTitleView !== null) {\n          const timing = frontTitleView.getLookOr(Look.timing, Mood.navigating, false);\n          frontTitleView.style.color.setIntrinsic(Look.textColor, timing);\n          frontTitleView.style.zIndex.setIntrinsic(1);\n          frontTitleView.style.pointerEvents.setIntrinsic(\"auto\");\n        }\n      }\n    }\n\n    const searchButtonController = this.searchButton.controller;\n    if (searchButtonController !== null) {\n      const searchable = frontController !== null && frontController.searchable.value;\n      let searchButtonLayout = searchButtonController.layout.value;\n      if (searchButtonLayout !== null) {\n        if (!searchable) {\n          searchButtonLayout = searchButtonLayout.withKey(\"\");\n        }\n        tools.push(searchButtonLayout);\n      }\n      if (searchable) {\n        this.searchButton.insertView();\n      }\n    }\n\n    return BarLayout.create(tools);\n  }\n\n  protected createSearchLayout(): BarLayout | null {\n    const tools = new Array<ToolLayout>();\n\n    const searchInputController = this.searchInput.controller;\n    if (searchInputController !== null) {\n      const searchInputLayout = searchInputController.layout.value;\n      if (searchInputLayout !== null) {\n        tools.push(searchInputLayout);\n      }\n      this.searchInput.insertView();\n    }\n\n    const cancelSearchController = this.cancelSearch.controller;\n    if (cancelSearchController !== null) {\n      const cancelSearchLayout = cancelSearchController.layout.value;\n      if (cancelSearchLayout !== null) {\n        tools.push(cancelSearchLayout);\n      }\n      if (cancelSearchController.tool.view !== null) {\n        this.cancelSearch.insertView();\n      }\n    }\n\n    return BarLayout.create(tools);\n  }\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"closeButton\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressCloseButton\", input, event, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new ButtonToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 48);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView();\n      toolView.iconLayout.setIntrinsic({width: 24, height: 24});\n      toolView.graphics.setIntrinsic(this.owner.closeIcon);\n      return toolController;\n    },\n  })\n  readonly closeButton!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ButtonToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"backButton\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressBackButton\", input, event, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new ButtonToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 48);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView();\n      toolView.iconLayout.setIntrinsic({width: 24, height: 24});\n      toolView.graphics.setIntrinsic(this.owner.backIcon);\n      return toolController;\n    },\n  })\n  readonly backButton!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ButtonToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"searchButton\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressSearchButton\", input, event, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new ButtonToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 48);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView();\n      toolView.iconLayout.setIntrinsic({width: 24, height: 24});\n      toolView.graphics.setIntrinsic(this.owner.searchIcon);\n      return toolController;\n    },\n  })\n  readonly searchButton!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ButtonToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"searchInput\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidUpdateSearch(query: string, inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidUpdateSearch\", query, inputView, this.owner);\n    },\n    controllerDidSubmitSearch(query: string, inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidSubmitSearch\", query, inputView, this.owner);\n    },\n    controllerDidCancelSearch(inputView: HtmlView): void {\n      this.owner.callObservers(\"controllerDidCancelSearch\", inputView, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new SearchToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 1, 0, 0, 0.5);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView()!;\n      toolView.stylesheet.insertView();\n      toolView.input.insertView().setIntrinsic({\n        attributes: {\n          placeholder: \"Search\",\n        },\n        style: {\n          marginLeft: 8,\n          marginRight: 8,\n        },\n      });\n      return toolController;\n    },\n  })\n  readonly searchInput!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<SearchToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"cancelSearch\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      const searchInputView = this.owner.searchInput.view;\n      const inputView = searchInputView instanceof SearchToolView ? searchInputView.input.view : null;\n      this.owner.callObservers(\"controllerDidCancelSearch\", inputView, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new TitleToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 72, 0.5);\n      toolController.layout.set(toolLayout);\n      toolController.tool.attachView().setIntrinsic({\n        style: {\n          color: Look.accentColor,\n          cursor: \"pointer\",\n        },\n        content: \"Cancel\",\n      });\n      return toolController;\n    },\n  })\n  readonly cancelSearch!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    inherits: true,\n    observes: true,\n    getTraitViewRef(frontController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return frontController.sheet;\n    },\n    willAttachController(frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachController(frontController: SheetController): void {\n      if (frontController.back.controller === null && frontController.forward.controller === null) {\n        this.owner.requireUpdate(Controller.NeedsAssemble);\n      }\n    },\n    controllerWillAttachBack(backController: SheetController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachBack(backController: SheetController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerWillAttachForward(forwardController: SheetController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachForward(forwardController: SheetController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidSetSearchable(searchable: boolean, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidSetSearching(searching: boolean, frontController: SheetController): void {\n      if (searching) {\n        this.owner.updateLayout();\n      } else {\n        this.owner.requireUpdate(Controller.NeedsAssemble);\n      }\n    },\n    controllerWillAttachTitle(titleController: ToolController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachTitle(titleController: ToolController, frontController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n  })\n  readonly front!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController>;\n\n  get closeIcon(): VectorIcon {\n    return NavBarController.closeIcon;\n  }\n\n  get backIcon(): VectorIcon {\n    return NavBarController.backIcon;\n  }\n\n  get searchIcon(): VectorIcon {\n    return NavBarController.searchIcon;\n  }\n\n  /** @internal */\n  @Lazy\n  static get closeIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M19,6.41L17.59,5L12,10.59L6.41,5L5,6.41L10.59,12L5,17.59L6.41,19L12,13.41L17.59,19L19,17.59L13.41,12Z\");\n  }\n\n  /** @internal */\n  @Lazy\n  static get backIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M17.77,3.77L16,2L6,12L16,22L17.77,20.23L9.54,12Z\").withFillLook(Look.accentColor);\n  }\n\n  /** @internal */\n  @Lazy\n  static get searchIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Length} from \"@swim/math\";\nimport type {ViewInsets} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {BarView} from \"@swim/toolbar\";\nimport {SheetView} from \"./SheetView\";\n\n/** @public */\nexport interface StackViewObserver<V extends StackView = StackView> extends HtmlViewObserver<V> {\n  viewWillAttachNavBar?(navBarView: BarView, targetView: View | null, view: V): void;\n\n  viewDidDetachNavBar?(navBarView: BarView, view: V): void;\n\n  viewWillAttachSheet?(sheetView: SheetView, targetView: View | null, view: V): void;\n\n  viewDidDetachSheet?(sheetView: SheetView, view: V): void;\n\n  viewWillAttachFront?(frontView: SheetView, targetView: View | null, view: V): void;\n\n  viewDidDetachFront?(frontView: SheetView, view: V): void;\n\n  viewWillPresentSheet?(sheetView: SheetView, view: V): void;\n\n  viewDidPresentSheet?(sheetView: SheetView, view: V): void;\n\n  viewWillDismissSheet?(sheetView: SheetView, view: V): void;\n\n  viewDidDismissSheet?(sheetView: SheetView, view: V): void;\n}\n\n/** @public */\nexport class StackView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initStack();\n  }\n\n  protected initStack(): void {\n    this.setIntrinsic<StackView>({\n      classList: [\"stack\"],\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<StackViewObserver>;\n\n  @ViewRef({\n    viewType: BarView,\n    binds: true,\n    observes: true,\n    initView(navBarView: BarView): void {\n      navBarView.placement.setIntrinsic(\"top\");\n      navBarView.style.setIntrinsic({\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: this.owner.style.width.cssState,\n        zIndex: 1,\n      });\n    },\n    willAttachView(navBarView: BarView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachNavBar\", navBarView, target, this.owner);\n    },\n    didAttachView(navBarView: BarView, target: View | null): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    willDetachView(navBarView: BarView): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    didDetachView(navBarView: BarView): void {\n      this.owner.callObservers(\"viewDidDetachNavBar\", navBarView, this.owner);\n    },\n    viewDidSetBarHeight(barHeight: Length | null): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidMount(): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    viewWillUnmount(): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly navBar!: ViewRef<this, BarView> & Observes<BarView>;\n\n  @ViewSet({\n    viewType: SheetView,\n    binds: true,\n    observes: true,\n    initView(sheetView: SheetView): void {\n      const stackWidth = this.owner.style.width.cssState;\n      const stackHeight = this.owner.style.height.cssState;\n\n      const navBarView = this.owner.navBar.view;\n      const navBarHeight = navBarView !== null && navBarView.mounted\n                         ? navBarView.style.height.cssState : null;\n\n      sheetView.style.setIntrinsic({\n        position: \"absolute\",\n        left: stackWidth,\n        top: 0,\n        width: stackWidth,\n        height: stackHeight,\n        paddingTop: navBarHeight,\n        boxSizing: \"border-box\",\n        zIndex: 0,\n      });\n    },\n    willAttachView(sheetView: SheetView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachSheet\", sheetView, target, this.owner);\n    },\n    didDetachView(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewDidDetachSheet\", sheetView, this.owner);\n    },\n    viewWillPresent(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewWillPresentSheet\", sheetView, this.owner);\n    },\n    viewDidPresent(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewDidPresentSheet\", sheetView, this.owner);\n    },\n    viewWillDismiss(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewWillDismissSheet\", sheetView, this.owner);\n    },\n    viewDidDismiss(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewDidDismissSheet\", sheetView, this.owner);\n    },\n    viewWillLayout(sheetView: SheetView): void {\n      sheetView.layoutSheet();\n    },\n  })\n  readonly sheets!: ViewSet<this, SheetView> & Observes<SheetView>;\n\n  @ViewRef({\n    viewType: SheetView,\n    binds: false,\n    willAttachView(sheetView: SheetView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachFront\", sheetView, target, this.owner);\n    },\n    didDetachView(sheetView: SheetView): void {\n      this.owner.callObservers(\"viewDidDetachFront\", sheetView, this.owner);\n    },\n  })\n  readonly front!: ViewRef<this, SheetView>;\n\n  @Property({\n    extends: true,\n    getOutletValue(outlet: Property<unknown, ViewInsets>): ViewInsets {\n      let edgeInsets = this.value;\n      let navBarView: BarView | null;\n      if (outlet.owner instanceof SheetView\n          && (navBarView = this.owner.navBar.view) !== null\n          && navBarView.mounted) {\n        edgeInsets = {\n          insetTop: 0,\n          insetRight: edgeInsets.insetRight,\n          insetBottom: edgeInsets.insetBottom,\n          insetLeft: edgeInsets.insetLeft,\n        };\n      }\n      return edgeInsets;\n    },\n  })\n  override get edgeInsets(): Property<this, ViewInsets> {\n    return Property.getter();\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizeStack();\n  }\n\n  protected resizeStack(): void {\n    const stackWidth = this.style.width.cssState;\n    const stackHeight = this.style.height.cssState;\n\n    const navBarView = this.navBar.view;\n    let navBarHeight: Length | null = null;\n    if (navBarView !== null && navBarView.mounted) {\n      navBarView.style.width.setIntrinsic(stackWidth);\n      navBarHeight = navBarView.style.height.cssState;\n    }\n\n    const sheetViews = this.sheets.views;\n    for (const viewId in sheetViews) {\n      const sheetView = sheetViews[viewId]!;\n      sheetView.style.setIntrinsic({\n        width: stackWidth,\n        height: stackHeight,\n        paddingTop: navBarHeight,\n      });\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {ToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"./SheetView\";\nimport {SheetController} from \"./SheetController\";\nimport {NavBarController} from \"./NavBarController\";\nimport {StackView} from \"./StackView\";\n\n/** @public */\nexport interface StackControllerObserver<C extends StackController = StackController> extends ControllerObserver<C> {\n  controllerWillAttachStackTrait?(stackTrait: Trait, controller: C): void;\n\n  controllerDidDetachStackTrait?(stackTrait: Trait, controller: C): void;\n\n  controllerWillAttachStackView?(stackView: StackView, controller: C): void;\n\n  controllerDidDetachStackView?(stackView: StackView, controller: C): void;\n\n  controllerWillAttachNavBar?(navBarController: BarController, controller: C): void;\n\n  controllerDidDetachNavBar?(navBarController: BarController, controller: C): void;\n\n  controllerWillAttachNavBarView?(navBarView: BarView, controller: C): void;\n\n  controllerDidDetachNavBarView?(navBarView: BarView, controller: C): void;\n\n  controllerDidPressCloseButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressBackButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressSearchButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerWillAttachSheet?(sheetController: SheetController, controller: C): void;\n\n  controllerDidDetachSheet?(sheetController: SheetController, controller: C): void;\n\n  controllerWillAttachSheetTrait?(sheetTrait: Trait, sheetController: SheetController, controller: C): void;\n\n  controllerDidDetachSheetTrait?(sheetTrait: Trait, sheetController: SheetController, controller: C): void;\n\n  controllerWillAttachSheetView?(sheetView: SheetView, sheetController: SheetController, controller: C): void;\n\n  controllerDidDetachSheetView?(sheetView: SheetView, sheetController: SheetController, controller: C): void;\n\n  controllerWillAttachSheetTitle?(titleController: ToolController, sheetController: SheetController, controller: C): void;\n\n  controllerDidDetachSheetTitle?(titleController: ToolController, sheetController: SheetController, controller: C): void;\n\n  controllerWillAttachRoot?(rootController: SheetController, controller: C): void;\n\n  controllerDidDetachRoot?(rootController: SheetController, controller: C): void;\n\n  controllerWillAttachRootTrait?(rootTrait: Trait, controller: C): void;\n\n  controllerDidDetachRootTrait?(rootTrait: Trait, controller: C): void;\n\n  controllerWillAttachRootView?(rootView: SheetView, controller: C): void;\n\n  controllerDidDetachRootView?(rootView: SheetView, controller: C): void;\n\n  controllerWillAttachFront?(frontController: SheetController, controller: C): void;\n\n  controllerDidDetachFront?(frontController: SheetController, controller: C): void;\n\n  controllerWillAttachFrontTrait?(frontTrait: Trait, controller: C): void;\n\n  controllerDidDetachFrontTrait?(frontTrait: Trait, controller: C): void;\n\n  controllerWillAttachFrontView?(frontView: SheetView, controller: C): void;\n\n  controllerDidDetachFrontView?(frontView: SheetView, controller: C): void;\n}\n\n/** @public */\nexport class StackController extends Controller {\n  declare readonly observerType?: Class<StackControllerObserver>;\n\n  @Property({valueType: Number, value: -(1 / 3)})\n  readonly backAlign!: Property<this, number>;\n\n  @TraitViewRef({\n    willAttachTrait(stackTrait: Trait): void {\n      this.owner.callObservers(\"controllerWillAttachStackTrait\", stackTrait, this.owner);\n    },\n    didDetachTrait(stackTrait: Trait): void {\n      this.owner.callObservers(\"controllerDidDetachStackTrait\", stackTrait, this.owner);\n    },\n    viewType: StackView,\n    observesView: true,\n    initView(stackView: StackView): void {\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        navBarController.bar.insertView(stackView);\n        if (stackView.navBar.view === null) {\n          stackView.navBar.setView(navBarController.bar.view);\n        }\n      }\n      const sheetControllers = this.owner.sheets.controllers;\n      for (const controllerId in sheetControllers) {\n        const sheetController = sheetControllers[controllerId]!;\n        const sheetView = sheetController.sheet.view;\n        if (sheetView !== null && sheetView.parent === null) {\n          const sheetTrait = sheetController.sheet.trait;\n          if (sheetTrait !== null) {\n            sheetController.sheet.insertView(stackView, void 0, void 0, sheetTrait.key);\n          }\n        }\n      }\n    },\n    willAttachView(stackView: StackView): void {\n      this.owner.callObservers(\"controllerWillAttachStackView\", stackView, this.owner);\n    },\n    didDetachView(stackView: StackView): void {\n      this.owner.callObservers(\"controllerDidDetachStackView\", stackView, this.owner);\n    },\n    viewWillAttachNavBar(navBarView: BarView): void {\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        navBarController.bar.setView(navBarView);\n      }\n    },\n    viewDidDetachNavBar(navBarView: BarView): void {\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        navBarController.bar.setView(null);\n      }\n    },\n  })\n  readonly stack!: TraitViewRef<this, Trait, StackView> & Observes<StackView>;\n\n  protected didPressCloseButton(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"controllerDidPressCloseButton\", input, event, this);\n  }\n\n  protected didPressBackButton(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"controllerDidPressBackButton\", input, event, this);\n    if (!input.defaultPrevented) {\n      this.front.dismiss();\n    }\n  }\n\n  protected didPressSearchButton(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"controllerDidPressSearchButton\", input, event, this);\n  }\n\n  @TraitViewControllerRef({\n    controllerType: BarController,\n    binds: true,\n    observes: true,\n    get parentView(): StackView | null {\n      return this.owner.stack.view;\n    },\n    getTraitViewRef(navBarController: BarController): TraitViewRef<unknown, Trait, BarView> {\n      return navBarController.bar;\n    },\n    willAttachController(navBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachNavBar\", navBarController, this.owner);\n    },\n    didAttachController(navBarController: BarController): void {\n      navBarController.bar.insertView();\n    },\n    willDetachController(navBarController: BarController): void {\n      const navBarView = navBarController.bar.view;\n      if (navBarView !== null) {\n        this.detachNavBarView(navBarView, navBarController);\n      }\n    },\n    didDetachController(navBarController: BarController): void {\n      this.owner.callObservers(\"controllerDidDetachNavBar\", navBarController, this.owner);\n    },\n    controllerWillAttachBarView(navBarView: BarView, navBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachNavBarView\", navBarView, this.owner);\n      this.attachNavBarView(navBarView, navBarController);\n    },\n    controllerDidDetachBarView(navBarView: BarView, navBarController: BarController): void {\n      this.detachNavBarView(navBarView, navBarController);\n      this.owner.callObservers(\"controllerDidDetachNavBarView\", navBarView, this.owner);\n    },\n    attachNavBarView(navBarView: BarView, navBarController: BarController): void {\n      const stackView = this.owner.stack.view;\n      if (stackView !== null && stackView.navBar.view === null) {\n        stackView.navBar.setView(navBarView);\n      }\n      const frontView = this.owner.front.view;\n      if (frontView !== null) {\n        this.frontViewDidScroll(frontView, navBarController);\n      }\n    },\n    detachNavBarView(navBarView: BarView, navBarController: BarController): void {\n      navBarView.remove();\n    },\n    controllerDidPressCloseButton(input: PositionGestureInput, event: Event | null): void {\n      this.owner.didPressCloseButton(input, event);\n    },\n    controllerDidPressBackButton(input: PositionGestureInput, event: Event | null): void {\n      this.owner.didPressBackButton(input, event);\n    },\n    controllerDidPressSearchButton(input: PositionGestureInput, event: Event | null): void {\n      this.owner.didPressSearchButton(input, event);\n    },\n    frontViewDidScroll(frontView: SheetView, navBarController: BarController): void {\n      // hook\n    },\n    createController(): BarController {\n      return new NavBarController();\n    },\n  })\n  readonly navBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & Observes<NavBarController> & {\n    attachNavBarView(navBarView: BarView, navBarController: BarController): void;\n    detachNavBarView(navBarView: BarView, navBarController: BarController): void;\n    frontViewDidScroll(frontView: SheetView, navBarController: BarController): void;\n  };\n\n  @TraitViewControllerSet({\n    controllerType: SheetController,\n    binds: false,\n    observes: true,\n    get parentView(): StackView | null {\n      return this.owner.stack.view;\n    },\n    getTraitViewRef(sheetController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return sheetController.sheet;\n    },\n    willAttachController(sheetController: SheetController): void {\n      const backController = this.owner.front.controller;\n      if (sheetController !== backController) {\n        sheetController.back.setController(backController);\n        if (backController !== null) {\n          backController.forward.setController(sheetController);\n        }\n        if (this.owner.root.controller === null) {\n          this.owner.root.setController(sheetController);\n        }\n        this.owner.front.setController(sheetController);\n      }\n      this.owner.callObservers(\"controllerWillAttachSheet\", sheetController, this.owner);\n    },\n    didAttachController(sheetController: SheetController): void {\n      const sheetTrait = sheetController.sheet.trait;\n      if (sheetTrait !== null) {\n        this.attachSheetTrait(sheetTrait, sheetController);\n      }\n      const sheetView = sheetController.sheet.view;\n      if (sheetView !== null) {\n        this.attachSheetView(sheetView, sheetController);\n      }\n    },\n    willDetachController(sheetController: SheetController): void {\n      const sheetView = sheetController.sheet.view;\n      if (sheetView !== null) {\n        this.detachSheetView(sheetView, sheetController);\n      }\n      const sheetTrait = sheetController.sheet.trait;\n      if (sheetTrait !== null) {\n        this.detachSheetTrait(sheetTrait, sheetController);\n      }\n    },\n    didDetachController(sheetController: SheetController): void {\n      const backController = sheetController.back.controller;\n      const forwardController = sheetController.forward.controller;\n      if (sheetController === this.owner.front.controller) {\n        this.owner.front.setController(backController, forwardController);\n      }\n      if (backController !== null) {\n        backController.forward.setController(forwardController);\n        sheetController.back.setController(null);\n      }\n      if (forwardController !== null) {\n        sheetController.forward.setController(null);\n        forwardController.back.setController(backController);\n      }\n      this.owner.callObservers(\"controllerDidDetachSheet\", sheetController, this.owner);\n    },\n    controllerWillAttachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachSheetTrait\", sheetTrait, sheetController, this.owner);\n      this.attachSheetTrait(sheetTrait, sheetController);\n    },\n    controllerDidDetachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void {\n      this.detachSheetTrait(sheetTrait, sheetController);\n      this.owner.callObservers(\"controllerDidDetachSheetTrait\", sheetTrait, sheetController, this.owner);\n    },\n    attachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void {\n      // hook\n    },\n    detachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachSheetView\", sheetView, sheetController, this.owner);\n      this.attachSheetView(sheetView, sheetController);\n    },\n    controllerDidDetachSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      this.detachSheetView(sheetView, sheetController);\n      this.owner.callObservers(\"controllerDidDetachSheetView\", sheetView, sheetController, this.owner);\n    },\n    attachSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      const titleController = sheetController.title.controller;\n      if (titleController !== null) {\n        this.attachTitle(titleController, sheetController);\n      }\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        stackView.sheets.addView(sheetView);\n      }\n    },\n    detachSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      const titleController = sheetController.title.controller;\n      if (titleController !== null) {\n        this.detachTitle(titleController, sheetController);\n      }\n      sheetView.remove();\n    },\n    controllerWillAttachTitle(titleController: ToolController, sheetController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachSheetTitle\", titleController, sheetController, this.owner);\n      this.attachTitle(titleController, sheetController);\n    },\n    controllerDidDetachTitle(titleController: ToolController, sheetController: SheetController): void {\n      this.detachTitle(titleController, sheetController);\n      this.owner.callObservers(\"controllerDidDetachSheetTitle\", titleController, sheetController, this.owner);\n    },\n    attachTitle(titleController: ToolController, sheetController: SheetController): void {\n      // hook\n    },\n    detachTitle(titleController: ToolController, sheetController: SheetController): void {\n      titleController.remove();\n    },\n    controllerWillPresentSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      // hook\n    },\n    controllerDidPresentSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      // hook\n    },\n    controllerWillDismissSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      if (sheetController === this.owner.front.controller) {\n        this.owner.front.setController(null);\n        const backController = sheetController.back.controller;\n        if (backController !== null) {\n          this.owner.front.setController(backController, sheetController);\n          backController.forward.setController(null);\n          sheetController.back.setController(null);\n        }\n      }\n    },\n    controllerDidDismissSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        if (sheetController.forward.controller !== null) {\n          stackView.sheets.removeView(sheetView);\n        } else {\n          stackView.sheets.deleteView(sheetView);\n        }\n      }\n      if (sheetController.forward.controller === null) {\n        this.deleteController(sheetController);\n      }\n    },\n  })\n  readonly sheets!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void;\n    detachSheetTrait(sheetTrait: Trait, sheetController: SheetController): void;\n    attachSheetView(sheetView: SheetView, sheetController: SheetController): void;\n    detachSheetView(sheetView: SheetView, sheetController: SheetController): void;\n    attachTitle(titleController: ToolController, sheetController: SheetController): void;\n    detachTitle(titleController: ToolController, sheetController: SheetController): void;\n  };\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    binds: false,\n    observes: true,\n    getTraitViewRef(rootController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return rootController.sheet;\n    },\n    willAttachController(rootController: SheetController, targetController: Controller | null): void {\n      this.owner.callObservers(\"controllerWillAttachRoot\", rootController, this.owner);\n    },\n    didAttachController(rootController: SheetController, targetController: Controller | null): void {\n      const rootTrait = rootController.sheet.trait;\n      if (rootTrait !== null) {\n        this.attachRootTrait(rootTrait, rootController);\n      }\n      const rootView = rootController.sheet.view;\n      if (rootView !== null) {\n        this.attachRootView(rootView, rootController);\n      }\n    },\n    willDetachController(rootController: SheetController): void {\n      const rootView = rootController.sheet.view;\n      if (rootView !== null) {\n        this.detachRootView(rootView, rootController);\n      }\n      const rootTrait = rootController.sheet.trait;\n      if (rootTrait !== null) {\n        this.detachRootTrait(rootTrait, rootController);\n      }\n    },\n    didDetachController(rootController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachRoot\", rootController, this.owner);\n    },\n    controllerWillAttachSheetTrait(rootTrait: Trait, rootController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachRootTrait\", rootTrait, this.owner);\n      this.attachRootTrait(rootTrait, rootController);\n    },\n    controllerDidDetachSheetTrait(rootTrait: Trait, rootController: SheetController): void {\n      this.detachRootTrait(rootTrait, rootController);\n      this.owner.callObservers(\"controllerDidDetachRootTrait\", rootTrait, this.owner);\n    },\n    attachRootTrait(rootTrait: Trait, rootController: SheetController): void {\n      // hook\n    },\n    detachRootTrait(rootTrait: Trait, rootController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(rootView: SheetView, rootController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachRootView\", rootView, this.owner);\n      this.attachRootView(rootView, rootController);\n    },\n    controllerDidDetachSheetView(rootView: SheetView, rootController: SheetController): void {\n      this.detachRootView(rootView, rootController);\n      this.owner.callObservers(\"controllerDidDetachRootView\", rootView, this.owner);\n    },\n    attachRootView(rootView: SheetView, rootController: SheetController): void {\n      // hook\n    },\n    detachRootView(rootView: SheetView, rootController: SheetController): void {\n      // hook\n    },\n  })\n  readonly root!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachRootTrait(rootTrait: Trait, rootController: SheetController): void;\n    detachRootTrait(rootTrait: Trait, rootController: SheetController): void;\n    attachRootView(rootView: SheetView, rootController: SheetController): void;\n    detachRootView(rootView: SheetView, rootController: SheetController): void;\n  };\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    binds: false,\n    observes: true,\n    getTraitViewRef(frontController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return frontController.sheet;\n    },\n    willAttachController(frontController: SheetController, targetController: Controller | null): void {\n      this.owner.callObservers(\"controllerWillAttachFront\", frontController, this.owner);\n    },\n    didAttachController(frontController: SheetController, targetController: Controller | null): void {\n      const frontTrait = frontController.sheet.trait;\n      if (frontTrait !== null) {\n        this.attachFrontTrait(frontTrait, frontController);\n      }\n      const frontView = frontController.sheet.view;\n      if (frontView !== null) {\n        const targetView = targetController instanceof SheetController ? targetController.sheet.view : null;\n        this.attachFrontView(frontView, targetView, frontController);\n      }\n    },\n    willDetachController(frontController: SheetController): void {\n      const frontView = frontController.sheet.view;\n      if (frontView !== null) {\n        this.detachFrontView(frontView, frontController);\n      }\n      const frontTrait = frontController.sheet.trait;\n      if (frontTrait !== null) {\n        this.detachFrontTrait(frontTrait, frontController);\n      }\n    },\n    didDetachController(frontController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachFront\", frontController, this.owner);\n    },\n    controllerWillAttachSheetTrait(frontTrait: Trait, frontController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachFrontTrait\", frontTrait, this.owner);\n      this.attachFrontTrait(frontTrait, frontController);\n    },\n    controllerDidDetachSheetTrait(frontTrait: Trait, frontController: SheetController): void {\n      this.detachFrontTrait(frontTrait, frontController);\n      this.owner.callObservers(\"controllerDidDetachFrontTrait\", frontTrait, this.owner);\n    },\n    attachFrontTrait(frontTrait: Trait, frontController: SheetController): void {\n      // hook\n    },\n    detachFrontTrait(frontTrait: Trait, frontController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(frontView: SheetView, frontController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachFrontView\", frontView, this.owner);\n      const targetController = frontController.nextSibling;\n      const targetView = targetController instanceof SheetController ? targetController.sheet.view : null;\n      this.attachFrontView(frontView, targetView, frontController);\n    },\n    controllerDidDetachSheetView(frontView: SheetView, frontController: SheetController): void {\n      this.detachFrontView(frontView, frontController);\n      this.owner.callObservers(\"controllerDidDetachFrontView\", frontView, this.owner);\n    },\n    attachFrontView(frontView: SheetView, targetView: SheetView | null, frontController: SheetController): void {\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        stackView.front.attachView(frontView, targetView);\n      }\n      this.presentFrontView(frontView, targetView, frontController);\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        this.owner.navBar.frontViewDidScroll(frontView, navBarController);\n      }\n    },\n    detachFrontView(frontView: SheetView, frontController: SheetController): void {\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        stackView.front.detachView();\n      }\n      this.dismissFrontView(frontView, frontController);\n    },\n    presentFrontView(frontView: SheetView, targetView: SheetView | null, frontController: SheetController): void {\n      let stackView: StackView | null;\n      if (frontView.parent === null && (stackView = this.owner.stack.view) !== null) {\n        stackView.insertChild(frontView, targetView);\n      }\n      if (frontController.forward.controller === null) {\n        frontView.sheetAlign.setIntrinsic(1);\n        frontView.present(frontController.back.controller !== null);\n      } else {\n        frontView.sheetAlign.setIntrinsic(this.owner.backAlign.value);\n        frontView.present();\n      }\n    },\n    dismissFrontView(frontView: SheetView, frontController: SheetController): void {\n      if (frontController.forward.controller !== null) {\n        frontView.sheetAlign.setIntrinsic(this.owner.backAlign.value);\n        frontView.dismiss();\n      } else {\n        frontView.sheetAlign.setIntrinsic(1);\n        frontView.dismiss();\n      }\n    },\n    controllerDidScrollSheetView(frontView: SheetView, frontController: SheetController): void {\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        this.owner.navBar.frontViewDidScroll(frontView, navBarController);\n      }\n    },\n    dismiss(timing?: TimingLike | boolean | null): SheetView | null {\n      const frontView = this.view;\n      if (frontView !== null) {\n        frontView.dismiss(timing);\n      }\n      return frontView;\n    },\n  })\n  readonly front!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachFrontTrait(frontTrait: Trait, frontController: SheetController): void;\n    detachFrontTrait(frontTrait: Trait, frontController: SheetController): void;\n    attachFrontView(frontView: SheetView, targetView: SheetView | null, frontController: SheetController): void;\n    detachFrontView(frontView: SheetView, frontController: SheetController): void;\n    presentFrontView(frontView: SheetView, targetView: SheetView | null, frontController: SheetController): void;\n    dismissFrontView(frontView: SheetView, frontController: SheetController): void;\n    dismiss(timing?: TimingLike | boolean | null): SheetView | null;\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Mood} from \"@swim/theme\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport {Controller} from \"@swim/controller\";\nimport type {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {ToolLayout} from \"@swim/toolbar\";\nimport {BarLayout} from \"@swim/toolbar\";\nimport type {ToolView} from \"@swim/toolbar\";\nimport {ToolController} from \"@swim/toolbar\";\nimport {ButtonToolView} from \"@swim/toolbar\";\nimport {ButtonToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport type {BarControllerObserver} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"./SheetView\";\nimport {SheetController} from \"./SheetController\";\n\n/** @public */\nexport interface AppBarControllerObserver<C extends AppBarController = AppBarController> extends BarControllerObserver<C> {\n  controllerDidPressMenuButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressActionButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n}\n\n/** @public */\nexport class AppBarController extends BarController {\n  declare readonly observerType?: Class<AppBarControllerObserver>;\n\n  protected override createLayout(): BarLayout | null {\n    const tools = new Array<ToolLayout>();\n\n    const menuButtonController = this.menuButton.controller;\n    if (menuButtonController !== null) {\n      const menuButtonLayout = menuButtonController.layout.value;\n      if (menuButtonLayout !== null) {\n        tools.push(menuButtonLayout);\n      }\n      if (menuButtonController.tool.view !== null) {\n        this.menuButton.insertView();\n      }\n    }\n\n    const modeToolControllers = new Array<ToolController>();\n    for (const controllerId in this.modeTools.controllers) {\n      modeToolControllers.push(this.modeTools.controllers[controllerId]!);\n    }\n    const modeToolCount = modeToolControllers.length;\n\n    for (let i = 0; i < modeToolCount; i += 1) {\n      const modeToolController = modeToolControllers[i]!;\n      let modeToolLayout = modeToolController.layout.value;\n      if (modeToolLayout !== null) {\n        const modeToolKey = \"mode\" + modeToolController.uid;\n        modeToolLayout = modeToolLayout.withKey(modeToolKey);\n        modeToolLayout = modeToolLayout.withPresence(void 0, null, null);\n        tools.push(modeToolLayout);\n        if (modeToolController.tool.view !== null) {\n          const targetToolController = i + 1 < modeToolCount ? modeToolControllers[i + 1] : null;\n          const targetToolView = targetToolController !== null ? modeToolController.tool.view : null;\n          modeToolController.tool.insertView(this.bar.view, void 0, targetToolView, modeToolKey);\n        }\n      }\n    }\n\n    if (modeToolCount !== 0) {\n      tools.push(ToolLayout.create(\"coverPadding\", 0, 0, 12));\n    }\n\n    const coverLayout = ToolLayout.create(\"cover\", 1, 0, 0, 0);\n    tools.push(coverLayout);\n    const coverController = this.cover.controller;\n    if (coverController !== null) {\n      const coverTitleView = coverController.title.insertView(this.bar.view, void 0, void 0, \"cover\");\n      if (coverTitleView !== null) {\n        const timing = coverTitleView.getLookOr(Look.timing, Mood.navigating, false);\n        coverTitleView.style.color.setIntrinsic(Look.textColor, timing);\n        coverTitleView.style.zIndex.setIntrinsic(1);\n      }\n    }\n\n    const actionButtonController = this.actionButton.controller;\n    if (actionButtonController !== null) {\n      const actionButtonLayout = actionButtonController.layout.value;\n      if (actionButtonLayout !== null) {\n        tools.push(actionButtonLayout);\n      }\n      if (actionButtonController.tool.view !== null) {\n        this.actionButton.insertView();\n      }\n    }\n\n    return BarLayout.create(tools);\n  }\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"menuButton\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressMenuButton\", input, event, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new ButtonToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 48);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView();\n      toolView.iconLayout.setIntrinsic({width: 24, height: 24});\n      if (this.owner.fullScreen.value) {\n        toolView.graphics.setIntrinsic(this.owner.menuIcon);\n      } else {\n        toolView.graphics.setIntrinsic(this.owner.menuCloseIcon);\n      }\n      return toolController;\n    },\n  })\n  readonly menuButton!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ButtonToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: ToolController,\n    binds: true,\n    viewKey: \"actionButton\",\n    observes: true,\n    get parentView(): BarView | null {\n      return this.owner.bar.view;\n    },\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    controllerDidPressToolView(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressActionButton\", input, event, this.owner);\n    },\n    createController(): ToolController {\n      const toolController = new ButtonToolController();\n      const toolLayout = ToolLayout.create(this.viewKey!, 0, 0, 48);\n      toolController.layout.set(toolLayout);\n      const toolView = toolController.tool.attachView();\n      toolView.iconLayout.setIntrinsic({width: 24, height: 24});\n      toolView.graphics.setIntrinsic(this.owner.actionIcon);\n      return toolController;\n    },\n  })\n  readonly actionButton!: TraitViewControllerRef<this, Trait, ToolView, ToolController> & Observes<ButtonToolController>;\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    inherits: true,\n    observes: true,\n    getTraitViewRef(coverController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return coverController.sheet;\n    },\n    willAttachController(coverController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachController(coverController: SheetController): void {\n      if (coverController.back.controller === null && coverController.forward.controller === null) {\n        this.owner.requireUpdate(Controller.NeedsAssemble);\n      }\n    },\n    controllerWillAttachTitle(titleController: ToolController, coverController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachTitle(titleController: ToolController, coverController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n  })\n  readonly cover!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController>;\n\n  @TraitViewControllerSet({\n    controllerType: ToolController,\n    ordered: true,\n    inherits: true,\n    observes: true,\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    willAttachController(toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachController(toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerWillAttachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n  })\n  readonly modeTools!: TraitViewControllerSet<this, Trait, ToolView, ToolController> & Observes<ToolController>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    inherits: true,\n    didSetValue(fullScreen: boolean): void {\n      const toolView = this.owner.menuButton.view;\n      if (toolView instanceof ButtonToolView) {\n        if (fullScreen) {\n          toolView.graphics.setIntrinsic(this.owner.menuIcon);\n        } else {\n          toolView.graphics.setIntrinsic(this.owner.menuCloseIcon);\n        }\n      }\n    },\n  })\n  readonly fullScreen!: Property<this, boolean>;\n\n  get menuIcon(): VectorIcon {\n    return AppBarController.menuIcon;\n  }\n\n  get menuCloseIcon(): VectorIcon {\n    return AppBarController.menuCloseIcon;\n  }\n\n  get actionIcon(): VectorIcon {\n    return AppBarController.actionIcon;\n  }\n\n  /** @internal */\n  @Lazy\n  static get menuIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M19,3C20.1,3,21,3.9,21,5L21,19C21,20.1,20.1,21,19,21L5,21C3.9,21,3,20.1,3,19L3,5C3,3.9,3.9,3,5,3L19,3ZM9,5L6,5C5.49,5,5.06,5.39,5.01,5.88L5,6L5,18C5,18.51,5.39,18.94,5.88,18.99L6,19L9,19L9,5ZM18,5L11,5L11,19L18,19C18.51,19,18.94,18.61,18.99,18.12L19,18L19,6C19,5.49,18.61,5.06,18.12,5.01L18,5ZM8,11L8,12L6,12L6,11L8,11ZM8,9L8,10L6,10L6,9L8,9ZM8,7L8,8L6,8L6,7L8,7Z\");\n  }\n\n  /** @internal */\n  @Lazy\n  static get menuCloseIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M19,3C20.1,3,21,3.9,21,5L21,19C21,20.1,20.1,21,19,21L5,21C3.9,21,3,20.1,3,19L3,5C3,3.9,3.9,3,5,3L19,3ZM9,5L6,5C5.49,5,5.06,5.39,5.01,5.88L5,6L5,18C5,18.51,5.39,18.94,5.88,18.99L6,19L9,19L9,5ZM18,5L11,5L11,19L18,19C18.51,19,18.94,18.61,18.99,18.12L19,18L19,6C19,5.49,18.61,5.06,18.12,5.01L18,5ZM8,11L8,12L6,12L6,11L8,11ZM8,9L8,10L6,10L6,9L8,9ZM8,7L8,8L6,8L6,7L8,7Z\");\n  }\n\n  /** @internal */\n  @Lazy\n  static get actionIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M6 10c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm12 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm-6 0c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Length} from \"@swim/math\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {Presence} from \"@swim/style\";\nimport type {ViewInsets} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\nimport {BarView} from \"@swim/toolbar\";\nimport {DrawerView} from \"@swim/window\";\nimport {SheetView} from \"./SheetView\";\nimport {StackView} from \"./StackView\";\n\n/** @public */\nexport type FolioStyle = \"stacked\" | \"unstacked\";\n\n/** @public */\nexport interface FolioViewObserver<V extends FolioView = FolioView> extends HtmlViewObserver<V> {\n  viewDidSetFolioStyle?(folioStyle: FolioStyle | undefined, view: V): void;\n\n  viewDidSetFullBleed?(fullBleed: boolean, view: V): void;\n\n  viewWillAttachAppBar?(appBarView: BarView, targetView: View | null, view: V): void;\n\n  viewDidDetachAppBar?(appBarView: BarView, view: V): void;\n\n  viewWillAttachDrawer?(drawerView: DrawerView, targetView: View | null, view: V): void;\n\n  viewDidDetachDrawer?(drawerView: DrawerView, view: V): void;\n\n  viewWillAttachStack?(stackView: StackView, targetView: View | null, view: V): void;\n\n  viewDidDetachStack?(stackView: StackView, view: V): void;\n\n  viewWillAttachCover?(coverView: SheetView, targetView: View | null, view: V): void;\n\n  viewDidDetachCover?(coverView: SheetView, view: V): void;\n}\n\n/** @public */\nexport class FolioView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initFolio();\n  }\n\n  protected initFolio(): void {\n    this.setIntrinsic<FolioView>({\n      classList: [\"folio\"],\n      style: {\n        display: \"flex\",\n        position: \"relative\",\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<FolioViewObserver>;\n\n  @Property({\n    valueType: String,\n    updateFlags: View.NeedsResize,\n    didSetValue(folioStyle: FolioStyle | undefined): void {\n      this.owner.callObservers(\"viewDidSetFolioStyle\", folioStyle, this.owner);\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly folioStyle!: Property<this, FolioStyle | undefined>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(fullBleed: boolean): void {\n      this.owner.requireUpdate(View.NeedsResize, true);\n      this.owner.callObservers(\"viewDidSetFullBleed\", fullBleed, this.owner);\n    },\n  })\n  readonly fullBleed!: Property<this, boolean>;\n\n  @ViewRef({\n    viewType: BarView,\n    binds: true,\n    initView(appBarView: BarView): void {\n      const folioWidth = this.owner.style.width.cssState!;\n\n      const drawerView = this.owner.drawer.view;\n      const drawerWidth = drawerView !== null ? drawerView.effectiveWidth.value : null;\n      const sheetWidth = drawerWidth !== null ? folioWidth.minus(drawerWidth) : folioWidth;\n\n      appBarView.placement.setIntrinsic(\"top\");\n      appBarView.style.setIntrinsic({\n        position: \"absolute\",\n        left: drawerWidth,\n        top: 0,\n        width: sheetWidth,\n        zIndex: 1,\n      });\n    },\n    willAttachView(appBarView: BarView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachAppBar\", appBarView, target, this.owner);\n    },\n    didAttachView(navBarView: BarView, target: View | null): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    willDetachView(navBarView: BarView): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    didDetachView(appBarView: BarView): void {\n      this.owner.callObservers(\"viewDidDetachAppBar\", appBarView, this.owner);\n    },\n  })\n  readonly appBar!: ViewRef<this, BarView>;\n\n  @ViewRef({\n    viewType: DrawerView,\n    binds: true,\n    observes: true,\n    initView(drawerView: DrawerView): void {\n      drawerView.style.setIntrinsic({\n        overflow: \"hidden\",\n        zIndex: 2,\n      });\n      drawerView.present(false);\n    },\n    willAttachView(drawerView: DrawerView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachDrawer\", drawerView, target, this.owner);\n    },\n    didDetachView(drawerView: DrawerView): void {\n      this.owner.callObservers(\"viewDidDetachDrawer\", drawerView, this.owner);\n    },\n    insertChild(parent: View, childView: DrawerView, targetView: View | null, key: string | undefined): void {\n      parent.prependChild(childView, key);\n    },\n    viewDidSetPresence(presence: Presence, drawerView: DrawerView): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    viewDidSetEffectiveWidth(effectiveWidth: Length | null, drawerView: DrawerView): void {\n      if (this.owner.folioStyle.value === \"unstacked\") {\n        this.owner.requireUpdate(View.NeedsResize);\n      }\n    },\n  })\n  readonly drawer!: ViewRef<this, DrawerView> & Observes<DrawerView>;\n\n  @ViewRef({\n    viewType: StackView,\n    initView(stackView: StackView): void {\n      stackView.style.flexGrow.setIntrinsic(1);\n    },\n    willAttachView(stackView: StackView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachStack\", stackView, target, this.owner);\n    },\n    didDetachView(stackView: StackView): void {\n      this.owner.callObservers(\"viewDidDetachStack\", stackView, this.owner);\n    },\n  })\n  readonly stack!: ViewRef<this, StackView>;\n\n  @ViewRef({\n    viewType: SheetView,\n    binds: false,\n    observes: true,\n    initView(coverView: SheetView): void {\n      if (this.owner.folioStyle.value === \"unstacked\") {\n        const folioWidth = this.owner.style.width.cssState!;\n        const folioHeight = this.owner.style.height.cssState!;\n\n        const drawerView = this.owner.drawer.view;\n        const drawerWidth = drawerView !== null ? drawerView.effectiveWidth.value : null;\n        const sheetWidth = drawerWidth !== null ? folioWidth.minus(drawerWidth) : folioWidth;\n\n        const appBarView = this.owner.appBar.view;\n        const appBarHeight = appBarView !== null ? appBarView.style.height.cssState : null;\n\n        coverView.style.setIntrinsic({\n          position: \"absolute\",\n          left: drawerWidth,\n          top: 0,\n          width: sheetWidth,\n          height: folioHeight,\n          paddingTop: appBarHeight,\n          boxSizing: \"border-box\",\n          zIndex: 0,\n        });\n      }\n    },\n    willAttachView(coverView: SheetView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachCover\", coverView, target, this.owner);\n    },\n    didAttachView(coverView: SheetView, target: View | null): void {\n      this.owner.fullBleed.setIntrinsic(coverView.fullBleed.value);\n    },\n    willDetachView(coverView: SheetView): void {\n      coverView.remove();\n    },\n    didDetachView(coverView: SheetView): void {\n      this.owner.callObservers(\"viewDidDetachCover\", coverView, this.owner);\n    },\n    viewDidSetFullBleed(fullBleed: boolean, coverView: SheetView): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n  })\n  readonly cover!: ViewRef<this, SheetView> & Observes<SheetView>;\n\n  @Property({\n    extends: true,\n    getOutletValue(outlet: Property<unknown, ViewInsets>): ViewInsets {\n      let edgeInsets = this.value;\n      if (this.owner.folioStyle.value === \"unstacked\") {\n        let insetTop = edgeInsets.insetTop;\n        const insetRight = edgeInsets.insetRight;\n        const insetBottom = edgeInsets.insetBottom;\n        let insetLeft = edgeInsets.insetLeft;\n        if (outlet.owner === this.owner.appBar.view) {\n          const drawerView = this.owner.drawer.view;\n          if (drawerView !== null) {\n            insetLeft *= 1 - drawerView.presence.value.phase;\n          }\n          edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n        } else if (outlet.owner === this.owner.cover.view) {\n          if (this.owner.appBar.view !== null) {\n            insetTop = 0;\n          }\n          const drawerView = this.owner.drawer.view;\n          if (drawerView !== null) {\n            insetLeft *= 1 - drawerView.presence.value.phase;\n          }\n          edgeInsets = {insetTop, insetRight, insetBottom, insetLeft};\n        }\n      }\n      return edgeInsets;\n    },\n  })\n  override get edgeInsets(): Property<this, ViewInsets> {\n    return Property.getter();\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizeFolio();\n  }\n\n  protected resizeFolio(): void {\n    let folioStyle = this.folioStyle.value;\n    if (this.folioStyle.hasAffinity(Affinity.Intrinsic)) {\n      folioStyle = this.viewIdiom === \"mobile\" ? \"stacked\" : \"unstacked\";\n      this.folioStyle.setIntrinsic(folioStyle);\n    }\n\n    if (folioStyle === \"stacked\") {\n      this.resizeStacked();\n    } else if (folioStyle === \"unstacked\") {\n      this.resizeUnstacked();\n    }\n  }\n\n  protected resizeStacked(): void {\n    this.drawer.removeView();\n    this.appBar.removeView();\n    this.stack.insertView(this);\n\n    const coverView = this.cover.view;\n    if (coverView !== null) {\n      if (coverView.parent === this) {\n        coverView.remove();\n      }\n\n      coverView.style.paddingLeft.setIntrinsic(null);\n    }\n  }\n\n  protected resizeUnstacked(): void {\n    const folioWidth = this.style.width.cssState!;\n    const folioHeight = this.style.height.cssState!;\n\n    const drawerView = this.drawer.insertView();\n    const drawerWidth = drawerView.effectiveWidth.value;\n    const sheetWidth = drawerWidth !== null ? folioWidth.minus(drawerWidth) : folioWidth;\n\n    const appBarView = this.appBar.view;\n    let appBarHeight: Length | null = null;\n    if (appBarView !== null) {\n      this.appBar.insertView().style.setIntrinsic({\n        left: drawerWidth,\n        width: sheetWidth,\n      });\n      appBarHeight = appBarView.style.height.cssState;\n    }\n\n    this.stack.insertView(drawerView);\n\n    const coverView = this.cover.view;\n    if (coverView !== null) {\n      this.cover.insertView(this);\n      if (this.fullBleed.value) {\n        coverView.style.setIntrinsic({\n          left: 0,\n          top: 0,\n          width: folioWidth,\n          height: folioHeight,\n          paddingTop: appBarHeight,\n          paddingLeft: drawerWidth,\n        });\n      } else {\n        coverView.style.setIntrinsic({\n          left: drawerWidth,\n          top: 0,\n          width: sheetWidth,\n          height: folioHeight,\n          paddingTop: appBarHeight,\n          paddingLeft: null,\n        });\n      }\n      coverView.present(false);\n    }\n  }\n\n  protected override didLayout(): void {\n    this.layoutFolio();\n    super.didLayout();\n  }\n\n  protected layoutFolio(): void {\n    const folioStyle = this.folioStyle.value;\n    if (folioStyle === \"stacked\") {\n      this.layoutStacked();\n    } else if (folioStyle === \"unstacked\") {\n      this.layoutUnstacked();\n    }\n  }\n\n  protected layoutStacked(): void {\n    // hook\n  }\n\n  protected layoutUnstacked(): void {\n    const folioWidth = this.style.width.cssState!;\n\n    const drawerView = this.drawer.insertView();\n    const drawerWidth = drawerView.effectiveWidth.value;\n    const sheetWidth = drawerWidth !== null ? folioWidth.minus(drawerWidth) : folioWidth;\n\n    const appBarView = this.appBar.view;\n    if (appBarView !== null) {\n      appBarView.style.setIntrinsic({\n        left: drawerWidth,\n        width: sheetWidth,\n      });\n    }\n\n    const coverView = this.cover.view;\n    if (coverView !== null) {\n      if (this.fullBleed.value) {\n        coverView.style.setIntrinsic({\n          left: 0,\n          width: folioWidth,\n          paddingLeft: drawerWidth,\n        });\n      } else {\n        coverView.style.setIntrinsic({\n          left: drawerWidth,\n          width: 0,\n          paddingLeft: null,\n        });\n      }\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {ToolView} from \"@swim/toolbar\";\nimport {ToolController} from \"@swim/toolbar\";\nimport {SearchToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport {DrawerView} from \"@swim/window\";\nimport type {SheetView} from \"./SheetView\";\nimport {SheetController} from \"./SheetController\";\nimport {NavBarController} from \"./NavBarController\";\nimport type {StackView} from \"./StackView\";\nimport type {StackControllerObserver} from \"./StackController\";\nimport {StackController} from \"./StackController\";\nimport {AppBarController} from \"./AppBarController\";\nimport type {FolioStyle} from \"./FolioView\";\nimport {FolioView} from \"./FolioView\";\n\n/** @public */\nexport interface FolioControllerObserver<C extends FolioController = FolioController> extends StackControllerObserver<C> {\n  controllerWillAttachFolioTrait?(folioTrait: Trait, controller: C): void;\n\n  controllerDidDetachFolioTrait?(folioTrait: Trait, controller: C): void;\n\n  controllerWillAttachFolioView?(folioView: FolioView, controller: C): void;\n\n  controllerDidDetachFolioView?(folioView: FolioView, controller: C): void;\n\n  controllerDidSetFolioStyle(folioStyle: FolioStyle | undefined, controller: C): void;\n\n  controllerDidSetFullBleed(fullBleed: boolean, controller: C): void;\n\n  controllerDidSetFullScreen(fullScreen: boolean, controller: C): void;\n\n  controllerWillAttachAppBar?(appBarController: BarController, controller: C): void;\n\n  controllerDidDetachAppBar?(appBarController: BarController, controller: C): void;\n\n  controllerWillAttachAppBarView?(appBarView: BarView, controller: C): void;\n\n  controllerDidDetachAppBarView?(appBarView: BarView, controller: C): void;\n\n  controllerWillAttachDrawerView?(drawerView: DrawerView, controller: C): void;\n\n  controllerDidDetachDrawerView?(drawerView: DrawerView, controller: C): void;\n\n  controllerDidPressMenuButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerDidPressActionButton?(input: PositionGestureInput, event: Event | null, controller: C): void;\n\n  controllerWillAttachCover?(coverController: SheetController, controller: C): void;\n\n  controllerDidDetachCover?(coverController: SheetController, controller: C): void;\n\n  controllerWillAttachCoverTrait?(coverTrait: Trait, controller: C): void;\n\n  controllerDidDetachCoverTrait?(coverTrait: Trait, controller: C): void;\n\n  controllerWillAttachCoverView?(coverView: SheetView, controller: C): void;\n\n  controllerDidDetachCoverView?(coverView: SheetView, controller: C): void;\n\n  controllerWillAttachCoverModeTool?(modeToolController: ToolController, controller: C): void;\n\n  controllerDidDetachCoverModeTool?(modeToolController: ToolController, controller: C): void;\n\n  controllerWillAttachCoverModeToolView?(modeToolView: ToolView, modeToolController: ToolController, controller: C): void;\n\n  controllerDidDetachCoverModeToolView?(modeToolView: ToolView, modeToolController: ToolController, controller: C): void;\n}\n\n/** @public */\nexport class FolioController extends StackController {\n  declare readonly observerType?: Class<FolioControllerObserver>;\n\n  @Property({\n    valueType: String,\n    didSetValue(folioStyle: FolioStyle | undefined): void {\n      const coverController = this.owner.cover.controller;\n      if (coverController !== null) {\n        if (folioStyle === \"stacked\") {\n          this.owner.sheets.attachController(coverController);\n        } else if (folioStyle === \"unstacked\") {\n          if (this.owner.cover.view !== null) {\n            this.owner.cover.insertView(this.owner.folio.view);\n          }\n          this.owner.sheets.detachController(coverController);\n        }\n      }\n\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        this.owner.stack.updateFolioStyle(folioStyle, stackView);\n      }\n      const navBarController = this.owner.navBar.controller;\n      if (navBarController !== null) {\n        this.owner.navBar.updateFolioStyle(folioStyle, navBarController);\n      }\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        this.owner.appBar.updateFolioStyle(folioStyle, appBarController);\n      }\n      const sheetControllers = this.owner.sheets.controllers;\n      for (const controllerId in sheetControllers) {\n        const sheetController = sheetControllers[controllerId]!;\n        const sheetView = sheetController.sheet.view;\n        if (sheetView !== null) {\n          this.owner.sheets.updateFolioStyle(folioStyle, sheetView, sheetController);\n        }\n      }\n      this.owner.callObservers(\"controllerDidSetFolioStyle\", folioStyle, this.owner);\n      const folioView = this.owner.folio.view;\n      if (folioView !== null) {\n        folioView.folioStyle.setValue(folioStyle, Affinity.Inherited);\n      }\n    },\n  })\n  readonly folioStyle!: Property<this, FolioStyle | undefined>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(fullBleed: boolean): void {\n      const drawerView = this.owner.drawer.view;\n      if (drawerView !== null) {\n        this.owner.drawer.updateFullBleed(fullBleed, drawerView);\n      }\n      const stackView = this.owner.stack.view;\n      if (stackView !== null) {\n        this.owner.stack.updateFullBleed(fullBleed, stackView);\n      }\n      const sheetControllers = this.owner.sheets.controllers;\n      for (const controllerId in sheetControllers) {\n        const sheetController = sheetControllers[controllerId]!;\n        const sheetView = sheetController.sheet.view;\n        if (sheetView !== null) {\n          this.owner.sheets.updateFullBleed(fullBleed, sheetView, sheetController);\n        }\n      }\n      this.owner.callObservers(\"controllerDidSetFullBleed\", fullBleed, this.owner);\n      const folioView = this.owner.folio.view;\n      if (folioView !== null) {\n        folioView.fullBleed.setValue(fullBleed, Affinity.Inherited);\n      }\n    },\n  })\n  readonly fullBleed!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(fullScreen: boolean): void {\n      const drawerView = this.owner.drawer.view;\n      if (drawerView !== null) {\n        if (fullScreen) {\n          drawerView.dismiss();\n        } else {\n          drawerView.present();\n        }\n      }\n      this.owner.callObservers(\"controllerDidSetFullScreen\", fullScreen, this.owner);\n    },\n  })\n  readonly fullScreen!: Property<this, boolean>;\n\n  @TraitViewRef({\n    willAttachTrait(folioTrait: Trait): void {\n      this.owner.callObservers(\"controllerWillAttachFolioTrait\", folioTrait, this.owner);\n    },\n    didDetachTrait(folioTrait: Trait): void {\n      this.owner.callObservers(\"controllerDidDetachFolioTrait\", folioTrait, this.owner);\n    },\n    viewType: FolioView,\n    observesView: true,\n    initView(folioView: FolioView): void {\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        appBarController.bar.attachView();\n        if (folioView.appBar.view === null) {\n          folioView.appBar.setView(appBarController.bar.view);\n        }\n      }\n      const coverController = this.owner.cover.controller;\n      if (coverController !== null) {\n        folioView.cover.setView(coverController.sheet.view);\n      }\n    },\n    willAttachView(folioView: FolioView): void {\n      this.owner.callObservers(\"controllerWillAttachFolioView\", folioView, this.owner);\n    },\n    didAttachView(folioView: FolioView): void {\n      this.owner.folioStyle.setIntrinsic(folioView.folioStyle.value);\n      this.owner.fullBleed.setIntrinsic(folioView.fullBleed.value);\n      this.owner.drawer.setView(folioView.drawer.attachView());\n      this.owner.stack.setView(folioView.stack.attachView());\n    },\n    willDetachView(folioView: FolioView): void {\n      this.owner.stack.setView(null);\n      this.owner.drawer.setView(null);\n    },\n    didDetachView(folioView: FolioView): void {\n      this.owner.callObservers(\"controllerDidDetachFolioView\", folioView, this.owner);\n    },\n    viewDidSetFolioStyle(folioStyle: FolioStyle | undefined, folioView: FolioView): void {\n      this.owner.folioStyle.setIntrinsic(folioStyle);\n    },\n    viewDidSetFullBleed(fullBleed: boolean, folioView: FolioView): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n    viewWillAttachDrawer(drawerView: DrawerView): void {\n      this.owner.drawer.setView(drawerView);\n    },\n    viewDidDetachDrawer(drawerView: DrawerView): void {\n      this.owner.drawer.setView(null);\n    },\n    viewWillAttachAppBar(appBarView: BarView): void {\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        appBarController.bar.setView(appBarView);\n      }\n    },\n    viewDidDetachAppBar(appBarView: BarView): void {\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        appBarController.bar.setView(null);\n      }\n    },\n  })\n  readonly folio!: TraitViewRef<this, Trait, FolioView> & Observes<FolioView>;\n\n  @TraitViewRef({\n    extends: true,\n    didAttachView(stackView: StackView, targetView: View | null): void {\n      super.didAttachView(stackView, targetView);\n      this.updateFolioStyle(this.owner.folioStyle.value, stackView);\n      this.updateFullBleed(this.owner.fullBleed.value, stackView);\n    },\n    updateFolioStyle(folioStyle: FolioStyle | undefined, stackView: StackView): void {\n      // hook\n    },\n    updateFullBleed(fullBleed: boolean, stackView: StackView): void {\n      // hook\n    },\n  })\n  override readonly stack!: TraitViewRef<this, Trait, StackView> & StackController[\"stack\"] & {\n    updateFolioStyle(folioStyle: FolioStyle | undefined, stackView: StackView): void;\n    updateFullBleed(fullBleed: boolean, stackView: StackView): void;\n  };\n\n  @TraitViewControllerSet({\n    extends: true,\n    attachSheetView(sheetView: SheetView, sheetController: SheetController): void {\n      super.attachSheetView(sheetView, sheetController);\n      this.updateFolioStyle(this.owner.folioStyle.value, sheetView, sheetController);\n      this.updateFullBleed(this.owner.fullBleed.value, sheetView, sheetController);\n    },\n    updateFolioStyle(folioStyle: FolioStyle | undefined, sheetView: SheetView, sheetController: SheetController): void {\n      // hook\n    },\n    updateFullBleed(fullBleed: boolean, sheetView: SheetView, sheetController: SheetController): void {\n      // hook\n    },\n  })\n  override readonly sheets!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & StackController[\"sheets\"] & {\n    updateFolioStyle(folioStyle: FolioStyle | undefined, sheetView: SheetView, sheetController: SheetController): void,\n    updateFullBleed(fullBleed: boolean, sheetView: SheetView, sheetController: SheetController): void,\n  };\n\n  @TraitViewControllerRef({\n    extends: true,\n    initController(navBarController: BarController): void {\n      super.initController(navBarController);\n      this.updateFolioStyle(this.owner.folioStyle.value, navBarController);\n    },\n    updateFolioStyle(folioStyle: FolioStyle | undefined, navBarController: BarController): void {\n      // hook\n    },\n    controllerDidPressSearchButton(input: PositionGestureInput, event: Event | null, navBarController: BarController): void {\n      const frontController = this.owner.front.controller;\n      if (frontController !== null) {\n        frontController.searching.set(true);\n      }\n      if (navBarController instanceof NavBarController) {\n        const searchInputController = navBarController.searchInput.controller;\n        if (searchInputController instanceof SearchToolController) {\n          const inputView = searchInputController.input.view;\n          if (inputView !== null) {\n            inputView.node.focus();\n          }\n        }\n      }\n    },\n    controllerDidUpdateSearch(query: string, inputView: HtmlView, navBarController: BarController): void {\n      const frontController = this.owner.front.controller;\n      if (frontController !== null) {\n        frontController.updateSearch(query, inputView);\n      }\n    },\n    controllerDidSubmitSearch(query: string, inputView: HtmlView, navBarController: BarController): void {\n      const frontController = this.owner.front.controller;\n      if (frontController !== null) {\n        frontController.submitSearch(query, inputView);\n      }\n    },\n    controllerDidCancelSearch(inputView: HtmlView | null, navBarController: BarController): void {\n      const frontController = this.owner.front.controller;\n      if (frontController !== null) {\n        frontController.searching.set(false);\n      }\n    },\n  })\n  override readonly navBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & StackController[\"navBar\"] & {\n    updateFolioStyle(folioStyle: FolioStyle | undefined, navBarController: BarController): void,\n  };\n\n  protected didPressMenuButton(input: PositionGestureInput, event: Event | null): void {\n    this.fullScreen.setIntrinsic(!this.fullScreen.value);\n    this.callObservers(\"controllerDidPressMenuButton\", input, event, this);\n  }\n\n  protected didPressActionButton(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"controllerDidPressActionButton\", input, event, this);\n  }\n\n  @TraitViewControllerRef({\n    controllerType: BarController,\n    binds: true,\n    observes: true,\n    get parentView(): FolioView | null {\n      return this.owner.folio.view;\n    },\n    getTraitViewRef(appBarController: BarController): TraitViewRef<unknown, Trait, BarView> {\n      return appBarController.bar;\n    },\n    initController(appBarController: BarController): void {\n      appBarController.bar.attachView();\n    },\n    willAttachController(appBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachAppBar\", appBarController, this.owner);\n    },\n    didAttachController(appBarController: BarController): void {\n      const appBarView = appBarController.bar.view;\n      if (appBarView !== null) {\n        this.attachAppBarView(appBarView, appBarController);\n      }\n    },\n    willDetachController(appBarController: BarController): void {\n      const appBarView = appBarController.bar.view;\n      if (appBarView !== null) {\n        this.detachAppBarView(appBarView, appBarController);\n      }\n    },\n    didDetachController(appBarController: BarController): void {\n      this.owner.callObservers(\"controllerDidDetachAppBar\", appBarController, this.owner);\n    },\n    controllerWillAttachBarView(appBarView: BarView, appBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachAppBarView\", appBarView, this.owner);\n      this.attachAppBarView(appBarView, appBarController);\n    },\n    controllerDidDetachBarView(appBarView: BarView, appBarController: BarController): void {\n      this.detachAppBarView(appBarView, appBarController);\n      this.owner.callObservers(\"controllerDidDetachAppBarView\", appBarView, this.owner);\n    },\n    attachAppBarView(appBarView: BarView, appBarController: BarController): void {\n      const folioView = this.owner.folio.view;\n      if (folioView !== null && folioView.appBar.view === null) {\n        folioView.appBar.setView(appBarView);\n      }\n      const coverView = this.owner.cover.view;\n      if (coverView !== null) {\n        this.coverViewDidScroll(coverView, appBarController);\n      }\n    },\n    detachAppBarView(appBarView: BarView, appBarController: BarController): void {\n      appBarView.remove();\n    },\n    updateFolioStyle(folioStyle: FolioStyle | undefined, appBarController: BarController): void {\n      appBarController.updateLayout();\n    },\n    coverViewDidScroll(coverView: SheetView, appBarController: BarController): void {\n      // hook\n    },\n    controllerDidPressMenuButton(input: PositionGestureInput, event: Event | null): void {\n      this.owner.didPressMenuButton(input, event);\n    },\n    controllerDidPressActionButton(input: PositionGestureInput, event: Event | null): void {\n      this.owner.didPressActionButton(input, event);\n    },\n    createController(): BarController {\n      return new AppBarController();\n    },\n  })\n  readonly appBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & Observes<AppBarController> & {\n    attachAppBarView(appBarView: BarView, appBarController: BarController): void,\n    detachAppBarView(appBarView: BarView, appBarController: BarController): void,\n    updateFolioStyle(folioStyle: FolioStyle | undefined, appBarController: BarController): void,\n    coverViewDidScroll(coverView: SheetView, appBarController: BarController): void,\n  };\n\n  @ViewRef({\n    viewType: DrawerView,\n    get parentView(): FolioView | null {\n      return this.owner.folio.view;\n    },\n    willAttachView(drawerView: DrawerView): void {\n      this.owner.callObservers(\"controllerWillAttachDrawerView\", drawerView, this.owner);\n    },\n    didAttachView(drawerView: DrawerView): void {\n      this.updateFullBleed(this.owner.fullBleed.value, drawerView);\n      if (this.owner.fullScreen.value) {\n        drawerView.dismiss();\n      } else {\n        drawerView.present();\n      }\n    },\n    didDetachView(drawerView: DrawerView): void {\n      this.owner.callObservers(\"controllerDidDetachDrawerView\", drawerView, this.owner);\n    },\n    updateFullBleed(fullBleed: boolean, drawerView: DrawerView): void {\n      // hook\n    },\n  })\n  readonly drawer!: ViewRef<this, DrawerView> & {\n    updateFullBleed(fullBleed: boolean, drawerView: DrawerView): void,\n  };\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    consumed: true,\n    binds: false,\n    observes: true,\n    getTraitViewRef(coverController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return coverController.sheet;\n    },\n    willAttachController(coverController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachCover\", coverController, this.owner);\n    },\n    didAttachController(coverController: SheetController): void {\n      this.owner.fullBleed.setIntrinsic(coverController.fullBleed.value);\n      const coverTrait = coverController.sheet.trait;\n      if (coverTrait !== null) {\n        this.attachCoverTrait(coverTrait, coverController);\n      }\n      const coverView = coverController.sheet.view;\n      if (coverView !== null) {\n        this.attachCoverView(coverView, coverController);\n      }\n      const modeToolControllers = coverController.modeTools.controllers;\n      for (const controllerId in modeToolControllers) {\n        this.owner.modeTools.attachController(modeToolControllers[controllerId]!);\n      }\n    },\n    willDetachController(coverController: SheetController): void {\n      const modeToolControllers = coverController.modeTools.controllers;\n      for (const controllerId in modeToolControllers) {\n        this.owner.modeTools.detachController(modeToolControllers[controllerId]!);\n      }\n      const coverView = coverController.sheet.view;\n      if (coverView !== null) {\n        this.detachCoverView(coverView, coverController);\n      }\n      const coverTrait = coverController.sheet.trait;\n      if (coverTrait !== null) {\n        this.detachCoverTrait(coverTrait, coverController);\n      }\n    },\n    didDetachController(coverController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachCover\", coverController, this.owner);\n    },\n    controllerWillAttachSheetTrait(coverTrait: Trait, coverController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachCoverTrait\", coverTrait, this.owner);\n      this.attachCoverTrait(coverTrait, coverController);\n    },\n    controllerDidDetachSheetTrait(coverTrait: Trait, coverController: SheetController): void {\n      this.detachCoverTrait(coverTrait, coverController);\n      this.owner.callObservers(\"controllerDidDetachCoverTrait\", coverTrait, this.owner);\n    },\n    attachCoverTrait(coverTrait: Trait, coverController: SheetController): void {\n      // hook\n    },\n    detachCoverTrait(coverTrait: Trait, coverController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(coverView: SheetView, coverController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachCoverView\", coverView, this.owner);\n      this.attachCoverView(coverView, coverController);\n    },\n    controllerDidDetachSheetView(coverView: SheetView, coverController: SheetController): void {\n      this.detachCoverView(coverView, coverController);\n      this.owner.callObservers(\"controllerDidDetachCoverView\", coverView, this.owner);\n    },\n    attachCoverView(coverView: SheetView, coverController: SheetController): void {\n      const folioView = this.owner.folio.view;\n      if (folioView !== null) {\n        folioView.cover.attachView(coverView);\n      }\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        this.owner.appBar.coverViewDidScroll(coverView, appBarController);\n      }\n    },\n    detachCoverView(coverView: SheetView, coverController: SheetController): void {\n      const folioView = this.owner.folio.view;\n      if (folioView !== null) {\n        folioView.cover.removeView();\n      }\n      this.detachController();\n    },\n    controllerDidSetFullBleed(fullBleed: boolean): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n    controllerWillAttachModeTool(toolController: ToolController, targetToolController: ToolController | null): void {\n      this.owner.modeTools.attachController(toolController, targetToolController);\n    },\n    controllerDidDetachModeTool(toolController: ToolController): void {\n      this.owner.modeTools.detachController(toolController);\n    },\n    controllerDidScrollSheetView(coverView: SheetView): void {\n      const appBarController = this.owner.appBar.controller;\n      if (appBarController !== null) {\n        this.owner.appBar.coverViewDidScroll(coverView, appBarController);\n      }\n    },\n    present(timing?: TimingLike | boolean | null): SheetView | null {\n      const coverController = this.controller;\n      const coverView = coverController !== null ? coverController.sheet.view : null;\n      if (coverView !== null) {\n        if (this.owner.folioStyle.value === \"stacked\") {\n          if (this.owner.sheets.controllers[coverController!.uid] !== void 0) {\n            this.owner.sheets.detachController(coverController!);\n          }\n          this.owner.sheets.attachController(coverController!);\n          coverView.present(timing);\n        } else {\n          this.insertView(this.owner.folio.view);\n        }\n      }\n      return coverView;\n    },\n  })\n  readonly cover!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachCoverTrait(coverTrait: Trait, coverController: SheetController): void;\n    detachCoverTrait(coverTrait: Trait, coverController: SheetController): void;\n    attachCoverView(coverView: SheetView, coverController: SheetController): void;\n    detachCoverView(coverView: SheetView, coverController: SheetController): void;\n    present(timing?: TimingLike | boolean | null): SheetView | null;\n  };\n\n  @TraitViewControllerSet({\n    controllerType: ToolController,\n    binds: false,\n    ordered: true,\n    observes: true,\n    getTraitViewRef(toolController: ToolController): TraitViewRef<unknown, Trait, ToolView> {\n      return toolController.tool;\n    },\n    willAttachController(toolController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachCoverModeTool\", toolController, this.owner);\n    },\n    didAttachController(toolController: ToolController): void {\n      const toolView = toolController.tool.view;\n      if (toolView !== null) {\n        this.attachToolView(toolView, toolController);\n      }\n    },\n    willDetachController(toolController: ToolController): void {\n      const toolView = toolController.tool.view;\n      if (toolView !== null) {\n        this.detachToolView(toolView, toolController);\n      }\n    },\n    didDetachController(toolController: ToolController): void {\n      this.owner.callObservers(\"controllerDidDetachCoverModeTool\", toolController, this.owner);\n    },\n    controllerWillAttachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.owner.callObservers(\"controllerWillAttachCoverModeToolView\", toolView, toolController, this.owner);\n      this.attachToolView(toolView, toolController);\n    },\n    controllerDidDetachToolView(toolView: ToolView, toolController: ToolController): void {\n      this.detachToolView(toolView, toolController);\n      this.owner.callObservers(\"controllerDidDetachCoverModeToolView\", toolView, toolController, this.owner);\n    },\n    attachToolView(toolView: ToolView, toolController: ToolController): void {\n      // hook\n    },\n    detachToolView(toolView: ToolView, toolController: ToolController): void {\n      // hook\n    },\n  })\n  readonly modeTools!: TraitViewControllerSet<this, Trait, ToolView, ToolController> & Observes<ToolController> & {\n    attachToolView(toolView: ToolView, toolController: ToolController): void,\n    detachToolView(toolView: ToolView, toolController: ToolController): void,\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {Property} from \"@swim/component\";\nimport {Controller} from \"@swim/controller\";\nimport type {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {ToolLayout} from \"@swim/toolbar\";\nimport {BarLayout} from \"@swim/toolbar\";\nimport type {ToolController} from \"@swim/toolbar\";\nimport type {BarControllerObserver} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"./SheetView\";\nimport {SheetController} from \"./SheetController\";\nimport type {BinderTabStyle} from \"./BinderView\";\n\n/** @public */\nexport interface TabBarControllerObserver<C extends TabBarController = TabBarController> extends BarControllerObserver<C> {\n  controllerDidPressTabHandle?(input: PositionGestureInput, event: Event | null, tabController: SheetController, controller: C): void;\n\n  controllerDidLongPressTabHandle?(input: PositionGestureInput, tabController: SheetController, controller: C): void;\n}\n\n/** @public */\nexport class TabBarController extends BarController {\n  declare readonly observerType?: Class<TabBarControllerObserver>;\n\n  protected override createLayout(): BarLayout | null {\n    const tools = new Array<ToolLayout>();\n    tools.push(ToolLayout.create(\"leftPadding\", 0.5, 0, 0, 0));\n\n    const tabControllers = new Array<SheetController>();\n    for (const controllerId in this.tabs.controllers) {\n      tabControllers.push(this.tabs.controllers[controllerId]!);\n    }\n    if (this.tabStyle.value === \"bottom\") {\n      for (let i = 0, n = tabControllers.length; i < n; i += 1) {\n        const tabController = tabControllers[i]!;\n        const tabHandleView = tabController.handle.attachView();\n        const tabKey = \"tab\" + tabHandleView.uid;\n        const tabHandleLayout = ToolLayout.create(tabKey, 1, 0, 0, 0.5);\n        tools.push(tabHandleLayout);\n        const targetTabController = i + 1 < n ? tabControllers[i + 1] : null;\n        const targetToolView = targetTabController !== null ? tabController.handle.view : null;\n        tabController.handle.insertView(this.bar.view, void 0, targetToolView, tabKey);\n      }\n    }\n\n    tools.push(ToolLayout.create(\"rightPadding\", 0.5, 0, 0, 1));\n    return BarLayout.create(tools);\n  }\n\n  @TraitViewControllerSet({\n    controllerType: SheetController,\n    ordered: true,\n    inherits: true,\n    observes: true,\n    getTraitViewRef(tabController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return tabController.sheet;\n    },\n    willAttachController(tabController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachController(tabController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerWillAttachHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidPressHandle(input: PositionGestureInput, event: Event | null, tabController: SheetController): void {\n      this.owner.callObservers(\"controllerDidPressTabHandle\", input, event, tabController, this.owner);\n    },\n    controllerDidLongPressHandle(input: PositionGestureInput, tabController: SheetController): void {\n      this.owner.callObservers(\"controllerDidLongPressTabHandle\", input, tabController, this.owner);\n    },\n  })\n  readonly tabs!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & Observes<SheetController>;\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    inherits: true,\n    observes: true,\n    getTraitViewRef(activeController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return activeController.sheet;\n    },\n    willAttachController(activeController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    didDetachController(activeController: SheetController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerWillAttachHandle(tabHandleController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n    controllerDidDetachHandle(tabHandleController: ToolController): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n  })\n  readonly active!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController>;\n\n  @Property({\n    valueType: String,\n    value: \"none\",\n    inherits: true,\n    didSetValue(tabStyle: BinderTabStyle): void {\n      this.owner.requireUpdate(Controller.NeedsAssemble);\n    },\n  })\n  readonly tabStyle!: Property<this, BinderTabStyle>;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Length} from \"@swim/math\";\nimport type {ViewInsets} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport {BarView} from \"@swim/toolbar\";\nimport type {SheetViewObserver} from \"./SheetView\";\nimport {SheetView} from \"./SheetView\";\n\n/** @public */\nexport type BinderTabStyle = \"bottom\" | \"mode\" | \"none\";\n\n/** @public */\nexport interface BinderViewObserver<V extends BinderView = BinderView> extends SheetViewObserver<V> {\n  viewDidSetTabStyle?(tabStyle: BinderTabStyle, view: V): void;\n\n  viewWillAttachTabBar?(tabBarView: BarView, targetView: View | null, view: V): void;\n\n  viewDidDetachTabBar?(tabBarView: BarView, view: V): void;\n\n  viewWillAttachTab?(tabView: SheetView, targetView: View | null, view: V): void;\n\n  viewDidDetachTab?(tabView: SheetView, view: V): void;\n\n  viewWillAttachActive?(activeView: SheetView, targetView: View | null, view: V): void;\n\n  viewDidDetachActive?(activeView: SheetView, view: V): void;\n}\n\n/** @public */\nexport class BinderView extends SheetView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initBinder();\n  }\n\n  protected initBinder(): void {\n    this.setIntrinsic<BinderView>({\n      classList: [\"binder\"],\n      style: {\n        position: \"relative\",\n        overflow: \"hidden\",\n      },\n    });\n  }\n\n  declare readonly observerType?: Class<BinderViewObserver>;\n\n  @Property({\n    valueType: String,\n    value: \"none\",\n    updateFlags: View.NeedsResize,\n    didSetValue(tabStyle: BinderTabStyle): void {\n      this.owner.callObservers(\"viewDidSetTabStyle\", tabStyle, this.owner);\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly tabStyle!: Property<this, BinderTabStyle>;\n\n  @ViewRef({\n    viewType: BarView,\n    binds: true,\n    observes: true,\n    initView(tabBarView: BarView): void {\n      tabBarView.placement.setIntrinsic(\"bottom\");\n      tabBarView.style.setIntrinsic({\n        position: \"absolute\",\n        left: 0,\n        bottom: 0,\n        width: this.owner.style.width.cssState,\n        zIndex: 1,\n      });\n    },\n    willAttachView(tabBarView: BarView, targetView: View | null): void {\n      this.owner.callObservers(\"viewWillAttachTabBar\", tabBarView, targetView, this.owner);\n    },\n    didAttachView(navBarView: BarView, target: View | null): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    willDetachView(navBarView: BarView): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    didDetachView(tabBarView: BarView): void {\n      this.owner.callObservers(\"viewDidDetachTabBar\", tabBarView, this.owner);\n    },\n    viewDidSetBarHeight(barHeight: Length | null): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidMount(): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n    viewWillUnmount(): void {\n      this.owner.edgeInsets.decohereOutlets();\n    },\n  })\n  readonly tabBar!: ViewRef<this, BarView> & Observes<BarView>;\n\n  getTab<F extends Class<SheetView>>(key: string, tabViewClass: F): InstanceType<F> | null;\n  getTab(key: string): SheetView | null;\n  getTab(key: string, tabViewClass?: Class<SheetView>): SheetView | null {\n    if (tabViewClass === void 0) {\n      tabViewClass = SheetView;\n    }\n    const tabView = this.getChild(key);\n    return tabView instanceof tabViewClass ? tabView : null;\n  }\n\n  getOrCreateTab<F extends Class<Instance<F, SheetView>> & Creatable<Instance<F, SheetView>>>(key: string, tabViewClass: F): InstanceType<F> {\n    let tabView = this.getChild(key, tabViewClass);\n    if (tabView === null) {\n      tabView = tabViewClass.create();\n      this.setChild(key, tabView);\n    }\n    return tabView!;\n  }\n\n  setTab(key: string, tabView: SheetView | null): void {\n    this.setChild(key, tabView);\n  }\n\n  @ViewSet({\n    viewType: SheetView,\n    binds: false,\n    observes: true,\n    initView(tabView: SheetView): void {\n      const tabBarView = this.owner.tabBar.view;\n      const tabBarHeight = tabBarView !== null && tabBarView.mounted\n                         ? tabBarView.style.height.cssState : null;\n      tabView.style.setIntrinsic({\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: this.owner.style.width.cssState,\n        height: this.owner.style.height.cssState,\n        paddingTop: this.owner.style.paddingTop.state,\n        paddingBottom: tabBarHeight,\n        boxSizing: \"border-box\",\n        zIndex: 0,\n      });\n    },\n    willAttachView(tabView: SheetView, targetView: View | null): void {\n      this.owner.callObservers(\"viewWillAttachTab\", tabView, targetView, this.owner);\n    },\n    willDetachView(tabView: SheetView): void {\n      if (tabView === this.owner.active.view) {\n        this.owner.active.setView(null);\n      }\n    },\n    didDetachView(tabView: SheetView): void {\n      this.owner.callObservers(\"viewDidDetachTab\", tabView, this.owner);\n    },\n    detectView(view: View): SheetView | null {\n      return view instanceof SheetView ? view : null;\n    },\n  })\n  readonly tabs!: ViewSet<this, SheetView> & Observes<SheetView>;\n\n  @ViewRef({\n    viewType: SheetView,\n    binds: false,\n    observes: true,\n    willAttachView(tabView: SheetView, targetView: View | null): void {\n      this.owner.callObservers(\"viewWillAttachActive\", tabView, targetView, this.owner);\n    },\n    didAttachView(tabView: SheetView, targetView: View | null): void {\n      this.owner.fullBleed.setIntrinsic(tabView.fullBleed.value);\n      if (tabView.parent === null) {\n        this.owner.insertChild(tabView, targetView);\n      }\n    },\n    didDetachView(tabView: SheetView): void {\n      this.owner.callObservers(\"viewDidDetachActive\", tabView, this.owner);\n    },\n    viewDidSetFullBleed(fullBleed: boolean, tabView: SheetView): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n  })\n  readonly active!: ViewRef<this, SheetView> & Observes<SheetView>;\n\n  @Property({\n    extends: true,\n    getOutletValue(outlet: Property<unknown, ViewInsets>): ViewInsets {\n      let edgeInsets = this.value;\n      if (outlet.owner instanceof SheetView) {\n        const tabBarView = this.owner.tabBar.view;\n        if (tabBarView !== null && tabBarView.mounted) {\n          edgeInsets = {\n            insetTop: edgeInsets.insetTop,\n            insetRight: edgeInsets.insetRight,\n            insetBottom: 0,\n            insetLeft: edgeInsets.insetLeft,\n          };\n        }\n      }\n      return edgeInsets;\n    },\n  })\n  override get edgeInsets(): Property<this, ViewInsets> {\n    return Property.getter();\n  }\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizeBinder();\n  }\n\n  protected resizeBinder(): void {\n    const binderWidth = this.style.width.cssState!;\n    const binderHeight = this.style.height.cssState!;\n    const paddingLeft = this.style.paddingLeft.value;\n    const paddingRight = this.style.paddingRight.value;\n\n    const tabBarView = this.tabBar.view;\n    let tabBarHeight: Length | null = null;\n    if (tabBarView !== null && tabBarView.mounted) {\n      let tabBarWidth = binderWidth;\n      tabBarHeight = tabBarView.style.height.cssState;\n      if (paddingLeft !== null) {\n        tabBarWidth = tabBarWidth.minus(paddingLeft);\n      }\n      if (paddingRight !== null) {\n        tabBarWidth = tabBarWidth.minus(paddingRight);\n      }\n      tabBarView.style.setIntrinsic({\n        left: paddingLeft,\n        right: paddingRight,\n        width: tabBarWidth,\n      });\n    }\n\n    const tabViews = this.tabs.views;\n    for (const viewId in tabViews) {\n      const tabView = tabViews[viewId]!;\n      tabView.style.setIntrinsic({\n        width: binderWidth,\n        height: binderHeight,\n        paddingTop: this.style.paddingTop.state,\n        paddingRight,\n        paddingBottom: tabBarHeight,\n        paddingLeft,\n      });\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {Trait} from \"@swim/model\";\nimport type {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {ToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"./SheetView\";\nimport type {SheetControllerObserver} from \"./SheetController\";\nimport {SheetController} from \"./SheetController\";\nimport type {FolioStyle} from \"./FolioView\";\nimport {TabBarController} from \"./TabBarController\";\nimport type {BinderTabStyle} from \"./BinderView\";\nimport {BinderView} from \"./BinderView\";\n\n/** @public */\nexport interface BinderControllerObserver<C extends BinderController = BinderController> extends SheetControllerObserver<C> {\n  controllerWillAttachBinderTrait?(binderTrait: Trait, controller: C): void;\n\n  controllerDidDetachBinderTrait?(binderTrait: Trait, controller: C): void;\n\n  controllerWillAttachBinderView?(binderView: BinderView, controller: C): void;\n\n  controllerDidDetachBinderView?(binderView: BinderView, controller: C): void;\n\n  controllerDidSetTabStyle(tabStyle: BinderTabStyle, controller: C): void;\n\n  controllerWillAttachTabBar?(tabBarController: BarController, controller: C): void;\n\n  controllerDidDetachTabBar?(tabBarController: BarController, controller: C): void;\n\n  controllerWillAttachTabBarView?(tabBarView: BarView, controller: C): void;\n\n  controllerDidDetachTabBarView?(tabBarView: BarView, controller: C): void;\n\n  controllerWillAttachTab?(tabController: SheetController, controller: C): void;\n\n  controllerDidDetachTab?(tabController: SheetController, controller: C): void;\n\n  controllerWillAttachTabTrait?(tabTrait: Trait, tabController: SheetController, controller: C): void;\n\n  controllerDidDetachTabTrait?(tabTrait: Trait, tabController: SheetController, controller: C): void;\n\n  controllerWillAttachTabView?(tabView: SheetView, tabController: SheetController, controller: C): void;\n\n  controllerDidDetachTabView?(tabView: SheetView, tabController: SheetController, controller: C): void;\n\n  controllerWillAttachTabHandle?(tabHandleController: ToolController, tabController: SheetController, controller: C): void;\n\n  controllerDidDetachTabHandle?(tabHandleController: ToolController, tabController: SheetController, controller: C): void;\n\n  controllerDidPressTabHandle?(input: PositionGestureInput, event: Event | null, tabController: SheetController, controller: C): void;\n\n  controllerDidLongPressTabHandle?(input: PositionGestureInput, tabController: SheetController, controller: C): void;\n\n  controllerWillAttachActive?(activeController: SheetController, controller: C): void;\n\n  controllerDidDetachActive?(activeController: SheetController, controller: C): void;\n\n  controllerWillAttachActiveTrait?(activeTrait: Trait, controller: C): void;\n\n  controllerDidDetachActiveTrait?(activeTrait: Trait, controller: C): void;\n\n  controllerWillAttachActiveView?(activeView: SheetView, controller: C): void;\n\n  controllerDidDetachActiveView?(activeView: SheetView, controller: C): void;\n}\n\n/** @public */\nexport class BinderController extends SheetController {\n  declare readonly observerType?: Class<BinderControllerObserver>;\n\n  @Property({\n    valueType: String,\n    inherits: true,\n    didSetValue(folioStyle: FolioStyle | undefined): void {\n      if (folioStyle === \"stacked\") {\n        this.owner.tabStyle.setIntrinsic(\"bottom\");\n      } else if (folioStyle === \"unstacked\") {\n        this.owner.tabStyle.setIntrinsic(\"mode\");\n      }\n    },\n  })\n  readonly folioStyle!: Property<this, FolioStyle | undefined>;\n\n  @Property({\n    valueType: String,\n    value: \"none\",\n    didSetValue(tabStyle: BinderTabStyle): void {\n      const tabBarController = this.owner.tabBar.controller;\n      if (tabBarController !== null) {\n        this.owner.tabBar.updateTabStyle(tabStyle, tabBarController);\n      }\n      const tabControllers = this.owner.tabs.controllers;\n      for (const controllerId in tabControllers) {\n        const tabController = tabControllers[controllerId]!;\n        this.owner.tabs.updateTabStyle(tabStyle, tabController);\n      }\n      this.owner.callObservers(\"controllerDidSetTabStyle\", tabStyle, this.owner);\n      const binderView = this.owner.binder.view;\n      if (binderView !== null) {\n        binderView.tabStyle.setValue(tabStyle, Affinity.Inherited);\n      }\n    },\n  })\n  readonly tabStyle!: Property<this, BinderTabStyle>;\n\n  @TraitViewRef({\n    willAttachTrait(binderTrait: Trait): void {\n      this.owner.callObservers(\"controllerWillAttachBinderTrait\", binderTrait, this.owner);\n    },\n    didDetachTrait(binderTrait: Trait): void {\n      this.owner.callObservers(\"controllerDidDetachBinderTrait\", binderTrait, this.owner);\n    },\n    viewType: BinderView,\n    observesView: true,\n    initView(binderView: BinderView): void {\n      binderView.tabStyle.setValue(this.owner.tabStyle.value, Affinity.Inherited);\n      const tabBarController = this.owner.tabBar.controller;\n      if (tabBarController !== null) {\n        binderView.tabBar.setView(tabBarController.bar.view);\n      }\n      const activeController = this.owner.active.controller;\n      if (activeController !== null) {\n        binderView.active.setView(activeController.sheet.attachView());\n      }\n    },\n    willAttachView(binderView: BinderView): void {\n      this.owner.callObservers(\"controllerWillAttachBinderView\", binderView, this.owner);\n      if (this.owner.sheet.view === null) {\n        this.owner.sheet.setView(binderView);\n      }\n    },\n    didAttachView(binderView: BinderView): void {\n      //this.owner.tabStyle.setIntrinsic(binderView.tabStyle.value);\n      const activeController = this.owner.active.controller;\n      if (activeController !== null) {\n        activeController.sheet.removeView();\n      }\n    },\n    willDetachView(binderView: BinderView): void {\n      this.owner.active.setController(null);\n    },\n    didDetachView(binderView: BinderView): void {\n      if (this.owner.sheet.view === binderView) {\n        this.owner.sheet.detachView();\n      }\n      this.owner.callObservers(\"controllerDidDetachBinderView\", binderView, this.owner);\n    },\n    //viewDidSetTabStyle(tabStyle: BinderTabStyle, binderView: BinderView): void {\n    //  this.owner.tabStyle.setIntrinsic(tabStyle);\n    //},\n    viewWillAttachTabBar(tabBarView: BarView): void {\n      const tabBarController = this.owner.tabBar.controller;\n      if (tabBarController !== null) {\n        tabBarController.bar.setView(tabBarView);\n      }\n    },\n    viewDidDetachTabBar(tabBarView: BarView): void {\n      const tabBarController = this.owner.tabBar.controller;\n      if (tabBarController !== null) {\n        tabBarController.bar.setView(null);\n      }\n    },\n  })\n  readonly binder!: TraitViewRef<this, Trait, BinderView> & Observes<BinderView>;\n\n  protected didPressTabHandle(input: PositionGestureInput, event: Event | null, tabController: SheetController): void {\n    this.callObservers(\"controllerDidPressTabHandle\", input, event, tabController, this);\n    if (input.defaultPrevented) {\n      return;\n    }\n    this.active.setController(tabController);\n  }\n\n  protected didLongPressTabHandle(input: PositionGestureInput, tabController: SheetController): void {\n    this.callObservers(\"controllerDidLongPressTabHandle\", input, tabController, this);\n  }\n\n  @TraitViewControllerRef({\n    controllerType: BarController,\n    binds: true,\n    observes: true,\n    get parentView(): BinderView | null {\n      return this.owner.binder.view;\n    },\n    getTraitViewRef(tabBarController: BarController): TraitViewRef<unknown, Trait, BarView> {\n      return tabBarController.bar;\n    },\n    initController(tabBarController: BarController): void {\n      this.updateTabStyle(this.owner.tabStyle.value, tabBarController);\n    },\n    willAttachController(tabBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachTabBar\", tabBarController, this.owner);\n    },\n    didAttachController(tabBarController: BarController): void {\n      const tabBarView = tabBarController.bar.view;\n      if (tabBarView !== null) {\n        this.attachTabBarView(tabBarView, tabBarController);\n      }\n    },\n    willDetachController(tabBarController: BarController): void {\n      const tabBarView = tabBarController.bar.view;\n      if (tabBarView !== null) {\n        this.detachTabBarView(tabBarView, tabBarController);\n      }\n    },\n    didDetachController(tabBarController: BarController): void {\n      this.owner.callObservers(\"controllerDidDetachTabBar\", tabBarController, this.owner);\n    },\n    controllerWillAttachBarView(tabBarView: BarView, tabBarController: BarController): void {\n      this.owner.callObservers(\"controllerWillAttachTabBarView\", tabBarView, this.owner);\n      this.attachTabBarView(tabBarView, tabBarController);\n    },\n    controllerDidDetachBarView(tabBarView: BarView, tabBarController: BarController): void {\n      this.detachTabBarView(tabBarView, tabBarController);\n      this.owner.callObservers(\"controllerDidDetachTabBarView\", tabBarView, this.owner);\n    },\n    attachTabBarView(tabBarView: BarView, tabBarController: BarController): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null && binderView.tabBar.view === null) {\n        binderView.tabBar.attachView(tabBarView);\n      }\n    },\n    detachTabBarView(tabBarView: BarView, tabBarController: BarController): void {\n      tabBarView.remove();\n    },\n    controllerDidPressTabHandle(input: PositionGestureInput, event: Event | null, tabController: SheetController): void {\n      this.owner.didPressTabHandle(input, event, tabController);\n    },\n    controllerDidLongPressTabHandle(input: PositionGestureInput, tabController: SheetController): void {\n      this.owner.didLongPressTabHandle(input, tabController);\n    },\n    updateTabStyle(tabStyle: BinderTabStyle, tabBarController: BarController): void {\n      if (tabStyle === \"bottom\") {\n        this.insertView();\n      } else {\n        this.removeView();\n      }\n    },\n    createController(): BarController {\n      return new TabBarController();\n    },\n  })\n  readonly tabBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & Observes<TabBarController> & {\n    attachTabBarView(tabBarView: BarView, tabBarController: BarController): void,\n    detachTabBarView(tabBarView: BarView, tabBarController: BarController): void,\n    updateTabStyle(tabStyle: BinderTabStyle, tabBarController: BarController): void,\n  };\n\n  setTab(key: string, newTabController: SheetController | null): void {\n    const oldTabController = this.getChild(key, SheetController);\n    const active = oldTabController === this.active.controller;\n\n    let targetTabController: Controller | null;\n    if (oldTabController !== null) {\n      targetTabController = oldTabController.getNextSibling(SheetController);\n      this.tabs.deleteController(oldTabController);\n    } else {\n      targetTabController = null;\n    }\n\n    if (newTabController !== null) {\n      this.tabs.insertController(null, newTabController, targetTabController, key);\n      if (active) {\n        this.active.setController(newTabController);\n      }\n    }\n  }\n\n  @TraitViewControllerSet({\n    controllerType: SheetController,\n    binds: false,\n    ordered: true,\n    observes: true,\n    get parentView(): BinderView | null {\n      return this.owner.binder.view;\n    },\n    getTraitViewRef(tabController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return tabController.sheet;\n    },\n    initController(tabController: SheetController): void {\n      this.updateTabStyle(this.owner.tabStyle.value, tabController);\n    },\n    willAttachController(tabController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachTab\", tabController, this.owner);\n    },\n    didAttachController(tabController: SheetController): void {\n      const tabTrait = tabController.sheet.trait;\n      if (tabTrait !== null) {\n        this.attachTabTrait(tabTrait, tabController);\n      }\n      const tabView = tabController.sheet.attachView();\n      this.attachTabView(tabView, tabController);\n      const tabHandleController = tabController.handle.insertController();\n      this.attachTabHandle(tabHandleController, tabController);\n      if (this.owner.active.controller === null) {\n        this.owner.active.setController(tabController);\n      }\n    },\n    willDetachController(tabController: SheetController): void {\n      if (tabController === this.owner.active.controller) {\n        this.owner.active.setController(null);\n      }\n      const tabHandleController = tabController.handle.controller;\n      if (tabHandleController !== null) {\n        this.detachTabHandle(tabHandleController, tabController);\n      }\n      const tabView = tabController.sheet.view;\n      if (tabView !== null) {\n        this.detachTabView(tabView, tabController);\n      }\n      const tabTrait = tabController.sheet.trait;\n      if (tabTrait !== null) {\n        this.detachTabTrait(tabTrait, tabController);\n      }\n    },\n    didDetachController(tabController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachTab\", tabController, this.owner);\n    },\n    controllerWillAttachSheetTrait(tabTrait: Trait, tabController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachTabTrait\", tabTrait, tabController, this.owner);\n      this.attachTrait(tabTrait, void 0, tabController);\n      this.attachTabTrait(tabTrait, tabController);\n    },\n    controllerDidDetachSheetTrait(tabTrait: Trait, tabController: SheetController): void {\n      this.detachTabTrait(tabTrait, tabController);\n      this.detachTrait(tabTrait);\n      this.owner.callObservers(\"controllerDidDetachTabTrait\", tabTrait, tabController, this.owner);\n    },\n    attachTabTrait(tabTrait: Trait, tabController: SheetController): void {\n      // hook\n    },\n    detachTabTrait(tabTrait: Trait, tabController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(tabView: SheetView, tabController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachTabView\", tabView, tabController, this.owner);\n      this.attachTabView(tabView, tabController);\n    },\n    controllerDidDetachSheetView(tabView: SheetView, tabController: SheetController): void {\n      this.detachTabView(tabView, tabController);\n      this.owner.callObservers(\"controllerDidDetachTabView\", tabView, tabController, this.owner);\n    },\n    attachTabView(tabView: SheetView, tabController: SheetController): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null) {\n        binderView.tabs.attachView(tabView);\n      }\n    },\n    detachTabView(tabView: SheetView, tabController: SheetController): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null) {\n        binderView.tabs.deleteView(tabView);\n      }\n    },\n    controllerWillAttachHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachTabHandle\", tabHandleController, tabController, this.owner);\n      this.attachTabHandle(tabHandleController, tabController);\n    },\n    controllerDidDetachHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      this.detachTabHandle(tabHandleController, tabController);\n      this.owner.callObservers(\"controllerDidDetachTabHandle\", tabHandleController, tabController, this.owner);\n    },\n    attachTabHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      if (this.owner.tabStyle.value === \"mode\") {\n        const targetTabController = Objects.getNextValue(this.controllers, tabController.uid);\n        const targetToolController = targetTabController !== void 0 ? targetTabController.handle.controller : null;\n        this.owner.modeTools.attachController(tabHandleController, targetToolController);\n      }\n    },\n    detachTabHandle(tabHandleController: ToolController, tabController: SheetController): void {\n      if (this.owner.tabStyle.value === \"mode\") {\n        this.owner.modeTools.deleteController(tabHandleController);\n      }\n      tabHandleController.remove();\n    },\n    updateTabStyle(tabStyle: BinderTabStyle, tabController: SheetController): void {\n      const tabToolController = tabController.handle.controller;\n      if (tabToolController === null) {\n        return;\n      } else if (tabStyle === \"mode\") {\n        const targetTabController = Objects.getNextValue(this.controllers, tabController.uid);\n        const targetToolController = targetTabController !== void 0 ? targetTabController.handle.controller : null;\n        this.owner.modeTools.attachController(tabToolController, targetToolController);\n      } else {\n        this.owner.modeTools.detachController(tabToolController);\n      }\n    },\n  })\n  readonly tabs!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachTabTrait(tabTrait: Trait, tabController: SheetController): void,\n    detachTabTrait(tabTrait: Trait, tabController: SheetController): void,\n    attachTabView(tabView: SheetView, tabController: SheetController): void,\n    detachTabView(tabView: SheetView, tabController: SheetController): void,\n    attachTabHandle(tabHandleController: ToolController, tabController: SheetController): void,\n    detachTabHandle(tabHandleController: ToolController, tabController: SheetController): void,\n    updateTabStyle(tabStyle: BinderTabStyle, tabController: SheetController): void,\n  };\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    consumed: true,\n    binds: false,\n    observes: true,\n    getTraitViewRef(activeController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return activeController.sheet;\n    },\n    willAttachController(activeController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachActive\", activeController, this.owner);\n    },\n    didAttachController(activeController: SheetController): void {\n      this.owner.fullBleed.setIntrinsic(activeController.fullBleed.value);\n      const activeTrait = activeController.sheet.trait;\n      if (activeTrait !== null) {\n        this.attachActiveTrait(activeTrait, activeController);\n      }\n      const activeView = activeController.sheet.attachView();\n      if (activeView !== null) {\n        this.attachActiveView(activeView, activeController);\n      }\n      activeController.handle.setActive(true);\n    },\n    willDetachController(activeController: SheetController): void {\n      activeController.handle.setActive(false);\n      const activeView = activeController.sheet.view;\n      if (activeView !== null) {\n        this.detachActiveView(activeView, activeController);\n      }\n      const activeTrait = activeController.sheet.trait;\n      if (activeTrait !== null) {\n        this.detachActiveTrait(activeTrait, activeController);\n      }\n    },\n    didDetachController(activeController: SheetController): void {\n      this.owner.callObservers(\"controllerDidDetachActive\", activeController, this.owner);\n    },\n    controllerWillAttachSheetTrait(activeTrait: Trait, activeController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachActiveTrait\", activeTrait, this.owner);\n      this.attachActiveTrait(activeTrait, activeController);\n    },\n    controllerDidDetachSheetTrait(activeTrait: Trait, activeController: SheetController): void {\n      this.detachActiveTrait(activeTrait, activeController);\n      this.owner.callObservers(\"controllerDidDetachActiveTrait\", activeTrait, this.owner);\n    },\n    attachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      // hook\n    },\n    detachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(activeView: SheetView, activeController: SheetController): void {\n      this.owner.callObservers(\"controllerWillAttachActiveView\", activeView, this.owner);\n      this.attachActiveView(activeView, activeController);\n    },\n    controllerDidDetachSheetView(activeView: SheetView, activeController: SheetController): void {\n      this.detachActiveView(activeView, activeController);\n      this.owner.callObservers(\"controllerDidDetachActiveView\", activeView, this.owner);\n    },\n    attachActiveView(activeView: SheetView, activeController: SheetController): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null) {\n        binderView.active.setView(activeView);\n      }\n    },\n    detachActiveView(activeView: SheetView, activeController: SheetController): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null) {\n        binderView.active.deleteView();\n      }\n    },\n    controllerDidSetFullBleed(fullBleed: boolean, activeController: SheetController): void {\n      this.owner.fullBleed.setIntrinsic(fullBleed);\n    },\n    controllerDidScrollSheetView(activeView: SheetView, activeController: SheetController): void {\n      this.owner.callObservers(\"controllerDidScrollSheetView\", activeView, this.owner);\n    },\n  })\n  readonly active!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachActiveTrait(activeTrait: Trait, activeController: SheetController): void,\n    detachActiveTrait(activeTrait: Trait, activeController: SheetController): void,\n    attachActiveView(activeView: SheetView, activeController: SheetController): void,\n    detachActiveView(activeView: SheetView, activeController: SheetController): void,\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {HtmlViewObserver} from \"@swim/dom\";\nimport {HtmlView} from \"@swim/dom\";\n\n/** @public */\nexport type PaneLayout = \"frame\" | \"stack\";\n\n/** @public */\nexport type PanelStyle = \"card\" | \"none\";\n\n/** @public */\nexport interface PanelViewObserver<V extends PanelView = PanelView> extends HtmlViewObserver<V> {\n  viewDidSetUnitWidth?(unitWidth: number, view: V): void;\n\n  viewDidSetUnitHeight?(unitHeight: number, view: V): void;\n\n  viewDidSetMinPanelHeight?(minPanelHeight: number, view: V): void;\n\n  viewDidSetPanelStyle?(panelStyle: PanelStyle, view: V): void;\n\n  viewDidSetPaneLayout?(paneLayout: PaneLayout, view: V): void;\n\n  viewWillAttachHeader(headerView: HtmlView, view: V): void;\n\n  viewDidDetachHeader(headerView: HtmlView, view: V): void;\n\n  viewWillAttachHeaderTitle(titleView: HtmlView, view: V): void;\n\n  viewDidDetachHeaderTitle(titleView: HtmlView, view: V): void;\n\n  viewWillAttachHeaderSubtitle(subtitleView: HtmlView, view: V): void;\n\n  viewDidDetachHeaderSubtitle(subtitleView: HtmlView, view: V): void;\n\n  viewWillAttachPane?(paneView: PanelView, targetView: View | null, view: V): void;\n\n  viewDidDetachPane?(paneView: PanelView, view: V): void;\n}\n\n/** @public */\nexport class PanelView extends HtmlView {\n  constructor(node: HTMLElement) {\n    super(node);\n    this.initPanel();\n    node.addEventListener(\"scroll\", this.onPanelScroll.bind(this));\n  }\n\n  protected initPanel(): void {\n    this.setIntrinsic<PanelView>({\n      classList: [\"panel\"],\n      style: {\n        position: \"relative\",\n        boxSizing: \"border-box\",\n        overflow: \"hidden\",\n      },\n    });\n    this.panelStyle.applyPanelStyle(this.panelStyle.value);\n  }\n\n  declare readonly observerType?: Class<PanelViewObserver>;\n\n  @Property({valueType: Number, updateFlags: View.NeedsResize})\n  readonly widthBasis!: Property<this, number | undefined>;\n\n  @Property({valueType: Number, updateFlags: View.NeedsResize})\n  readonly heightBasis!: Property<this, number | undefined>;\n\n  @Property({\n    valueType: Number,\n    value: 1,\n    didSetValue(unitWidth: number): void {\n      this.owner.callObservers(\"viewDidSetUnitWidth\", unitWidth, this.owner);\n    },\n  })\n  readonly unitWidth!: Property<this, number>;\n\n  @Property({\n    valueType: Number,\n    value: 1,\n    didSetValue(unitHeight: number): void {\n      this.owner.callObservers(\"viewDidSetUnitHeight\", unitHeight, this.owner);\n    },\n  })\n  readonly unitHeight!: Property<this, number>;\n\n  @Property({\n    valueType: Number,\n    value: 180,\n    inherits: true,\n    didSetValue(minPanelHeight: number): void {\n      this.owner.callObservers(\"viewDidSetMinPanelHeight\", minPanelHeight, this.owner);\n    },\n  })\n  readonly minPanelHeight!: Property<this, number>;\n\n  @Property({\n    valueType: String,\n    value: \"none\",\n    updateFlags: View.NeedsResize,\n    didSetValue(panelStyle: PanelStyle): void {\n      this.applyPanelStyle(panelStyle);\n      this.owner.callObservers(\"viewDidSetPanelStyle\", panelStyle, this.owner);\n    },\n    applyPanelStyle(panelStyle: PanelStyle): void {\n      const panelView = this.owner;\n      if (panelStyle === \"card\") {\n        panelView.classList.add(\"panel-card\");\n        panelView.style.setIntrinsic({\n          margin: 6,\n          borderRadius: 4,\n          backgroundColor: Look.backgroundColor,\n        });\n        panelView.modifyTheme(Feel.default, [[Feel.raised, 1]]);\n      } else {\n        panelView.classList.remove(\"panel-card\");\n        panelView.style.setIntrinsic({\n          margin: 0,\n          borderRadius: null,\n          backgroundColor: null,\n        });\n        panelView.modifyTheme(Feel.default, [[Feel.raised, void 0]]);\n      }\n    },\n  })\n  readonly panelStyle!: Property<this, PanelStyle> & {\n    applyPanelStyle(panelStyle: PanelStyle): void,\n  };\n\n  @Property({\n    valueType: String,\n    value: \"frame\",\n    inherits: true,\n    updateFlags: View.NeedsResize,\n    didSetValue(paneLayout: PaneLayout): void {\n      this.owner.callObservers(\"viewDidSetPaneLayout\", paneLayout, this.owner);\n    },\n  })\n  readonly paneLayout!: Property<this, PaneLayout | undefined>;\n\n  @Property({\n    valueType: Number,\n    value: 720,\n    inherits: true,\n    updateFlags: View.NeedsResize,\n  })\n  readonly minFrameWidth!: Property<this, number>;\n\n  @Property({\n    valueType: Number,\n    value: 540,\n    inherits: true,\n    updateFlags: View.NeedsResize,\n  })\n  readonly minFrameHeight!: Property<this, number>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    binds: true,\n    willAttachView(headerView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachHeader\", headerView, this.owner);\n    },\n    didDetachView(headerView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachHeader\", headerView, this.owner);\n    },\n    insertChild(parent: View, child: HtmlView, target: View | null, key: string | undefined): void {\n      if (target !== null) {\n        parent.insertChild(child, target, key);\n      } else {\n        parent.prependChild(child, key);\n      }\n    },\n    createView(): HtmlView {\n      return (super.createView() as HtmlView).setIntrinsic({\n        classList: [\"panel-header\"],\n        style: {\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          position: \"absolute\",\n          left: 0,\n          top: 0,\n          width: Length.pct(100),\n          height: 30,\n          paddingLeft: 12,\n          paddingRight: 12,\n          boxSizing: \"border-box\",\n          userSelect: \"none\",\n          zIndex: 1,\n        },\n      });\n    }\n  })\n  readonly header!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: \"panel-title\",\n    binds: true,\n    get parentView(): HtmlView | null {\n      return this.owner.header.insertView();\n    },\n    willAttachView(titleView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachHeaderTitle\", titleView, this.owner);\n    },\n    didDetachView(titleView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachHeaderTitle\", titleView, this.owner);\n    },\n    insertChild(parent: View, child: HtmlView, target: View | null, key: string | undefined): void {\n      if (target === null) {\n        target = this.owner.headerSubtitle.view;\n      }\n      parent.insertChild(child, target, key);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        let view = this.view;\n        if (view === null) {\n          view = this.createView();\n        }\n        view.text(value);\n        return view;\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return (super.createView() as HtmlView).setIntrinsic({\n        classList: [\"header-title\"],\n        style: {\n          alignSelf: \"center\",\n          color: Look.legendColor,\n        },\n      });\n    },\n  })\n  readonly headerTitle!: ViewRef<this, Like<HtmlView, string | undefined>>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: \"panel-subtitle\",\n    binds: true,\n    get parentView(): HtmlView | null {\n      return this.owner.header.insertView();\n    },\n    willAttachView(subtitleView: HtmlView): void {\n      this.owner.callObservers(\"viewWillAttachHeaderSubtitle\", subtitleView, this.owner);\n    },\n    didDetachView(subtitleView: HtmlView): void {\n      this.owner.callObservers(\"viewDidDetachHeaderSubtitle\", subtitleView, this.owner);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        let view = this.view;\n        if (view === null) {\n          view = this.createView();\n        }\n        view.text(value);\n        return view;\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return (super.createView() as HtmlView).setIntrinsic({\n        classList: [\"header-subtitle\"],\n        style: {\n          alignSelf: \"center\",\n          color: Look.legendColor,\n        },\n      });\n    },\n  })\n  readonly headerSubtitle!: ViewRef<this, Like<HtmlView, string | undefined>>;\n\n  @ViewSet({\n    get viewType(): typeof PanelView {\n      return PanelView;\n    },\n    binds: true,\n    observes: true,\n    initView(paneView: PanelView): void {\n      paneView.style.setIntrinsic({\n        position: \"absolute\",\n        visibility: \"hidden\",\n      });\n    },\n    willAttachView(paneView: PanelView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachPane\", paneView, target, this.owner);\n    },\n    didDetachView(paneView: PanelView): void {\n      this.owner.callObservers(\"viewDidDetachPane\", paneView, this.owner);\n    },\n    viewDidSetUnitWidth(unitWidth: number, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetUnitHeight(unitHeight: number, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetMinPanelHeight(minPanelHeight: number, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetPanelStyle(panelStyle: PanelStyle, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n  })\n  readonly panes!: ViewSet<this, PanelView> & Observes<PanelView>;\n\n  protected override onResize(): void {\n    super.onResize();\n    this.resizePanel();\n  }\n\n  protected resizePanel(): void {\n    if (!this.paneLayout.derived) {\n      const widthBasis = this.widthBasis.value;\n      const heightBasis = this.heightBasis.value;\n      const width = widthBasis !== void 0 ? widthBasis : this.style.width.pxValue();\n      const height = heightBasis !== void 0 ? heightBasis : this.style.height.pxValue();\n      let paneLayout: PaneLayout;\n      if (width >= this.minFrameWidth.value && height >= this.minFrameHeight.value) {\n        paneLayout = \"frame\";\n      } else {\n        paneLayout = \"stack\";\n      }\n      this.paneLayout.setIntrinsic(paneLayout);\n    }\n\n    if (this.panes.viewCount === 0) {\n      const widthBasis = this.widthBasis.value;\n      if (widthBasis !== void 0) {\n        this.style.width.setIntrinsic(widthBasis);\n      }\n      const heightBasis = this.heightBasis.value;\n      if (heightBasis !== void 0) {\n        this.style.height.setIntrinsic(heightBasis);\n      }\n    }\n  }\n\n  protected override processChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    if ((processFlags & View.NeedsResize) !== 0 && this.panes.viewCount !== 0) {\n      this.paneLayout.recohere(this.updateTime);\n      const paneLayout = this.paneLayout.value;\n      if (paneLayout === \"frame\") {\n        this.resizeFrameChildren(processFlags, processChild);\n      } else {\n        this.resizeStackChildren(processFlags, processChild);\n      }\n    } else {\n      super.processChildren(processFlags, processChild);\n    }\n  }\n\n  protected resizeFrameChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    let x = this.style.paddingLeft.pxValue();\n    let y = this.style.paddingTop.pxValue();\n    const widthBasis = this.widthBasis.value;\n    const heightBasis = this.heightBasis.value;\n    const width = (widthBasis !== void 0 ? widthBasis : this.style.width.pxValue()) - x;\n    const height = (heightBasis !== void 0 ? heightBasis : this.style.height.pxValue()) - y;\n    const left = x;\n    const epsilon = 0.01;\n    let rowHeight = 0;\n    let rightView: PanelView | null = null;\n\n    type self = this;\n    function resizeBlockChild(this: self, child: View, processFlags: ViewFlags): void {\n      if (child instanceof PanelView) {\n        if (rightView === null) { // allocate row\n          let unitRowWidth = 0;\n          let paneView: PanelView | null = child;\n          while (paneView !== null) {\n            const unitPanelWidth = paneView.unitWidth.value;\n            if (rightView === null || unitRowWidth + unitPanelWidth < 1 + epsilon) {\n              unitRowWidth += unitPanelWidth;\n              rightView = paneView;\n              paneView = paneView.getNextSibling(PanelView);\n            } else {\n              break;\n            }\n          }\n        }\n\n        const paneWidth = child.unitWidth.value * width;\n        const paneHeight = Math.max(child.minPanelHeight.value, child.unitHeight.value * height);\n        child.setIntrinsic({\n          style: {\n            left: x,\n            top: y,\n            visibility: void 0,\n          },\n          widthBasis: paneWidth - child.style.marginLeft.pxValue() - child.style.marginRight.pxValue(),\n          heightBasis: paneHeight - child.style.marginTop.pxValue() - child.style.marginBottom.pxValue(),\n        });\n        x += paneWidth;\n      }\n\n      processChild.call(this, child, processFlags);\n\n      if (child instanceof PanelView) {\n        rowHeight = Math.max(rowHeight, child.style.marginTop.pxValue() + child.style.height.pxValue() + child.style.marginBottom.pxValue());\n        if (child === rightView) { // begin new row\n          x = left;\n          y += rowHeight;\n          rowHeight = 0;\n          rightView = null;\n        }\n      }\n    }\n    super.processChildren(processFlags, resizeBlockChild);\n\n    if (widthBasis !== void 0) {\n      this.style.width.setIntrinsic(width);\n    }\n    if (heightBasis !== void 0) {\n      this.style.height.setIntrinsic(y);\n    }\n  }\n\n  protected resizeStackChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    const x = this.style.paddingLeft.pxValue();\n    let y = this.style.paddingTop.pxValue();\n    const widthBasis = this.widthBasis.value;\n    const heightBasis = this.heightBasis.value;\n    const width = (widthBasis !== void 0 ? widthBasis : this.style.width.pxValue()) - x;\n    const height = (heightBasis !== void 0 ? heightBasis : this.style.height.pxValue()) - y;\n\n    type self = this;\n    function resizeStackChild(this: self, child: View, processFlags: ViewFlags): void {\n      if (child instanceof PanelView) {\n        const paneHeight = Math.max(child.minPanelHeight.value, child.unitHeight.value * height);\n        child.setIntrinsic({\n          style: {\n            left: x,\n            top: y,\n          },\n          widthBasis: width - child.style.marginLeft.pxValue() - child.style.marginRight.pxValue(),\n          heightBasis: paneHeight - child.style.marginTop.pxValue() - child.style.marginBottom.pxValue(),\n        });\n      }\n      processChild.call(this, child, processFlags);\n      if (child instanceof PanelView) {\n        child.style.visibility.setIntrinsic(void 0);\n        y += child.style.marginTop.pxValue() + child.style.height.pxValue() + child.style.marginBottom.pxValue();\n      }\n    }\n    super.processChildren(processFlags, resizeStackChild);\n\n    if (widthBasis !== void 0) {\n      this.style.width.setIntrinsic(width);\n    }\n    if (heightBasis !== void 0) {\n      this.style.height.setIntrinsic(y + this.style.paddingBottom.pxValue());\n    }\n  }\n\n  protected onPanelScroll(event: Event): void {\n    this.requireUpdate(View.NeedsScroll);\n  }\n\n  static override readonly InsertChildFlags: ViewFlags = View.InsertChildFlags | this.NeedsResize;\n  static override readonly RemoveChildFlags: ViewFlags = View.RemoveChildFlags | this.NeedsResize;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Like} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {PanelView} from \"./PanelView\";\n\n/** @public */\nexport interface PanelControllerObserver<C extends PanelController = PanelController> extends ControllerObserver<C> {\n  controllerWillAttachPanelTrait?(panelTrait: Trait, controller: C): void;\n\n  controllerDidDetachPanelTrait?(panelTrait: Trait, controller: C): void;\n\n  controllerWillAttachPanelView?(panelView: PanelView, controller: C): void;\n\n  controllerDidDetachPanelView?(panelView: PanelView, controller: C): void;\n\n  controllerWillAttachPane?(paneController: PanelController, controller: C): void;\n\n  controllerDidDetachPane?(paneController: PanelController, controller: C): void;\n\n  controllerWillAttachPaneTrait?(paneTrait: Trait, paneController: PanelController, controller: C): void;\n\n  controllerDidDetachPaneTrait?(paneTrait: Trait, paneController: PanelController, controller: C): void;\n\n  controllerWillAttachPaneView?(paneView: PanelView, paneController: PanelController, controller: C): void;\n\n  controllerDidDetachPaneView?(paneView: PanelView, paneController: PanelController, controller: C): void;\n}\n\n/** @public */\nexport class PanelController extends Controller {\n  declare readonly observerType?: Class<PanelControllerObserver>;\n\n  @TraitViewRef({\n    willAttachTrait(panelTrait: Trait): void {\n      this.owner.callObservers(\"controllerWillAttachPanelTrait\", panelTrait, this.owner);\n    },\n    didDetachTrait(panelTrait: Trait): void {\n      this.owner.callObservers(\"controllerDidDetachPanelTrait\", panelTrait, this.owner);\n    },\n    viewType: PanelView,\n    observesView: true,\n    didAttachView(panelView: PanelView, targetView: View | null): void {\n      this.owner.panelHeader.setView(panelView.header.view);\n      this.owner.panelTitle.setView(panelView.headerTitle.view);\n      this.owner.panelSubtitle.setView(panelView.headerSubtitle.view);\n    },\n    willDetachView(panelView: PanelView): void {\n      this.owner.panelHeader.setView(null);\n      this.owner.panelTitle.setView(null);\n      this.owner.panelSubtitle.setView(null);\n    },\n    willAttachView(panelView: PanelView): void {\n      this.owner.callObservers(\"controllerWillAttachPanelView\", panelView, this.owner);\n    },\n    didDetachView(panelView: PanelView): void {\n      this.owner.callObservers(\"controllerDidDetachPanelView\", panelView, this.owner);\n    },\n    viewWillAttachHeader(headerView: HtmlView): void {\n      this.owner.panelHeader.setView(headerView);\n    },\n    viewDidDetachHeader(headerView: HtmlView): void {\n      this.owner.panelHeader.setView(null);\n    },\n    viewWillAttachHeaderTitle(titleView: HtmlView): void {\n      this.owner.panelTitle.setView(titleView);\n    },\n    viewDidDetachHeaderTitle(titleView: HtmlView): void {\n      this.owner.panelTitle.setView(null);\n    },\n    viewWillAttachHeaderSubtitle(subtitleView: HtmlView): void {\n      this.owner.panelSubtitle.setView(subtitleView);\n    },\n    viewDidDetachHeaderSubtitle(subtitleView: HtmlView): void {\n      this.owner.panelSubtitle.setView(null);\n    },\n  })\n  readonly panel!: TraitViewRef<this, Trait, PanelView> & Observes<PanelView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().header.parentView;\n    },\n    initView(headerView: HtmlView): void {\n      this.owner.panel.attachView().header.setView(headerView);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().header.createView();\n    },\n  })\n  readonly panelHeader!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().headerTitle.parentView;\n    },\n    initView(titleView: HtmlView): void {\n      this.owner.panel.attachView().headerTitle.setView(titleView);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        return this.owner.panel.attachView().headerTitle.fromLike(value);\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().headerTitle.createView();\n    },\n  })\n  readonly panelTitle!: ViewRef<this, Like<HtmlView, string | undefined>>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().headerSubtitle.parentView;\n    },\n    initView(subtitleView: HtmlView): void {\n      this.owner.panel.attachView().headerSubtitle.setView(subtitleView);\n    },\n    fromLike(value: HtmlView | LikeType<HtmlView> | string | undefined): HtmlView {\n      if (value === void 0 || typeof value === \"string\") {\n        return this.owner.panel.attachView().headerSubtitle.fromLike(value);\n      }\n      return super.fromLike(value);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().headerSubtitle.createView();\n    },\n  })\n  readonly panelSubtitle!: ViewRef<this, Like<HtmlView, string | undefined>>;\n\n  @TraitViewControllerSet({\n    get controllerType(): typeof PanelController {\n      return PanelController;\n    },\n    binds: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    getTraitViewRef(paneController: PanelController): TraitViewRef<unknown, Trait, PanelView> {\n      return paneController.panel;\n    },\n    willAttachController(paneController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPane\", paneController, this.owner);\n    },\n    didAttachController(paneController: PanelController): void {\n      const paneTrait = paneController.panel.trait;\n      if (paneTrait !== null) {\n        this.attachPaneTrait(paneTrait, paneController);\n      }\n      const paneView = paneController.panel.view;\n      if (paneView !== null) {\n        this.attachPaneView(paneView, paneController);\n      }\n    },\n    willDetachController(paneController: PanelController): void {\n      const paneView = paneController.panel.view;\n      if (paneView !== null) {\n        this.detachPaneView(paneView, paneController);\n      }\n      const paneTrait = paneController.panel.trait;\n      if (paneTrait !== null) {\n        this.detachPaneTrait(paneTrait, paneController);\n      }\n    },\n    didDetachController(paneController: PanelController): void {\n      this.owner.callObservers(\"controllerDidDetachPane\", paneController, this.owner);\n    },\n    controllerWillAttachPanelTrait(paneTrait: Trait, paneController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPaneTrait\", paneTrait, paneController, this.owner);\n      this.attachPaneTrait(paneTrait, paneController);\n    },\n    controllerDidDetachPanelTrait(paneTrait: Trait, paneController: PanelController): void {\n      this.detachPaneTrait(paneTrait, paneController);\n      this.owner.callObservers(\"controllerDidDetachPaneTrait\", paneTrait, paneController, this.owner);\n    },\n    attachPaneTrait(paneTrait: Trait, paneController: PanelController): void {\n      // hook\n    },\n    detachPaneTrait(paneTrait: Trait, paneController: PanelController): void {\n      // hook\n    },\n    controllerWillAttachPanelView(paneView: PanelView, paneController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPaneView\", paneView, paneController, this.owner);\n      this.attachPaneView(paneView, paneController);\n    },\n    controllerDidDetachPanelView(paneView: PanelView, paneController: PanelController): void {\n      this.detachPaneView(paneView, paneController);\n      this.owner.callObservers(\"controllerDidDetachPaneView\", paneView, paneController, this.owner);\n    },\n    attachPaneView(paneView: PanelView, paneController: PanelController): void {\n      // hook\n    },\n    detachPaneView(paneView: PanelView, paneController: PanelController): void {\n      paneView.remove();\n    },\n  })\n  readonly panes!: TraitViewControllerSet<this, Trait, PanelView, PanelController> & Observes<PanelController> & {\n    attachPaneTrait(paneTrait: Trait, paneController: PanelController): void,\n    detachPaneTrait(paneTrait: Trait, paneController: PanelController): void,\n    attachPaneView(paneView: PanelView, paneController: PanelController): void,\n    detachPaneView(paneView: PanelView, paneController: PanelController): void,\n  };\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport type {ViewFlags} from \"@swim/view\";\nimport {View} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport type {SheetViewObserver} from \"@swim/sheet\";\nimport {SheetView} from \"@swim/sheet\";\nimport type {PanelStyle} from \"./PanelView\";\nimport {PanelView} from \"./PanelView\";\n\n/** @public */\nexport interface BoardViewObserver<V extends BoardView = BoardView> extends SheetViewObserver<V> {\n  viewWillAttachPanel?(panelView: PanelView, targetView: View | null, view: V): void;\n\n  viewDidDetachPanel?(panelView: PanelView, view: V): void;\n}\n\n/** @public */\nexport class BoardView extends SheetView {\n  protected override initSheet(): void {\n    super.initSheet();\n    this.classList.add(\"board\");\n  }\n\n  declare readonly observerType?: Class<BoardViewObserver>;\n\n  @ViewSet({\n    viewType: PanelView,\n    binds: true,\n    observes: true,\n    initView(panelView: PanelView): void {\n      panelView.style.setIntrinsic({\n        position: \"absolute\",\n        visibility: \"hidden\",\n      });\n    },\n    willAttachView(panelView: PanelView, target: View | null): void {\n      this.owner.callObservers(\"viewWillAttachPanel\", panelView, target, this.owner);\n    },\n    didDetachView(panelView: PanelView): void {\n      this.owner.callObservers(\"viewDidDetachPanel\", panelView, this.owner);\n    },\n    viewDidSetUnitWidth(unitWidth: number, panelView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetUnitHeight(unitHeight: number, panelView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetMinPanelHeight(minPanelHeight: number, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n    viewDidSetPanelStyle(panelStyle: PanelStyle, paneView: PanelView): void {\n      this.owner.requireUpdate(View.NeedsResize);\n    },\n  })\n  readonly panels!: ViewSet<this, PanelView> & Observes<PanelView>;\n\n  protected override processChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    if ((processFlags & View.NeedsResize) !== 0) {\n      this.resizeChildren(processFlags, processChild);\n    } else {\n      super.processChildren(processFlags, processChild);\n    }\n  }\n\n  protected resizeChildren(processFlags: ViewFlags, processChild: (this: this, child: View, processFlags: ViewFlags) => void): void {\n    const edgeInsets = this.edgeInsets.value;\n    const insetTop = Math.max(this.style.paddingTop.pxValue(), edgeInsets.insetTop);\n    const insetRight = Math.max(this.style.paddingRight.pxValue(), edgeInsets.insetRight);\n    const insetBottom = Math.max(this.style.paddingBottom.pxValue(), edgeInsets.insetBottom);\n    const insetLeft = Math.max(this.style.paddingLeft.pxValue(), edgeInsets.insetLeft);\n    const width = this.style.width.pxValue() - this.style.marginLeft.pxValue() - insetLeft - insetRight - this.style.marginRight.pxValue();\n    const height = this.style.height.pxValue() - this.style.marginTop.pxValue() - insetTop - insetBottom - this.style.marginBottom.pxValue();\n    const x = insetLeft;\n    let y = insetTop;\n\n    type self = this;\n    function resizeChild(this: self, child: View, processFlags: ViewFlags): void {\n      if (child instanceof PanelView) {\n        const panelHeight = Math.max(child.minPanelHeight.value, child.unitHeight.value * height);\n        child.setIntrinsic({\n          style: {\n            left: x,\n            top: y,\n          },\n          widthBasis: width - child.style.marginLeft.pxValue() - child.style.marginRight.pxValue(),\n          heightBasis: panelHeight - child.style.marginTop.pxValue() - child.style.marginBottom.pxValue(),\n        });\n      }\n      if (child instanceof HtmlView) {\n        child.style.paddingBottom.setState(child.nextSibling === null ? this.style.paddingBottom.value : null, Affinity.Transient);\n      }\n      processChild.call(this, child, processFlags);\n      if (child instanceof PanelView) {\n        child.style.visibility.setIntrinsic(void 0);\n        y += child.style.marginTop.pxValue() + child.style.height.pxValue() + child.style.marginBottom.pxValue();\n      }\n    }\n    super.processChildren(processFlags, resizeChild);\n  }\n\n  static override readonly InsertChildFlags: ViewFlags = View.InsertChildFlags | this.NeedsResize;\n  static override readonly RemoveChildFlags: ViewFlags = View.RemoveChildFlags | this.NeedsResize;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Trait} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {SheetControllerObserver} from \"@swim/sheet\";\nimport {SheetController} from \"@swim/sheet\";\nimport type {PanelView} from \"./PanelView\";\nimport {PanelController} from \"./PanelController\";\nimport {BoardView} from \"./BoardView\";\n\n/** @public */\nexport interface BoardControllerObserver<C extends BoardController = BoardController> extends SheetControllerObserver<C> {\n  controllerWillAttachSheetTrait?(boatdTrait: Trait, controller: C): void;\n\n  controllerDidDetachSheetTrait?(boatdTrait: Trait, controller: C): void;\n\n  controllerWillAttachSheetView?(boardView: BoardView, controller: C): void;\n\n  controllerDidDetachSheetView?(boardView: BoardView, controller: C): void;\n\n  controllerWillAttachPanel?(panelController: PanelController, controller: C): void;\n\n  controllerDidDetachPanel?(panelController: PanelController, controller: C): void;\n\n  controllerWillAttachPanelTrait?(panelTrait: Trait, panelController: PanelController, controller: C): void;\n\n  controllerDidDetachPanelTrait?(panelTrait: Trait, panelController: PanelController, controller: C): void;\n\n  controllerWillAttachPanelView?(panelView: PanelView, panelController: PanelController, controller: C): void;\n\n  controllerDidDetachPanelView?(panelView: PanelView, panelController: PanelController, controller: C): void;\n}\n\n/** @public */\nexport class BoardController extends SheetController {\n  declare readonly observerType?: Class<BoardControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    viewType: BoardView,\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, BoardView> & SheetController[\"sheet\"];\n\n  @TraitViewControllerSet({\n    controllerType: PanelController,\n    binds: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.sheet.attachView();\n    },\n    getTraitViewRef(panelController: PanelController): TraitViewRef<unknown, Trait, PanelView> {\n      return panelController.panel;\n    },\n    willAttachController(panelController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPanel\", panelController, this.owner);\n    },\n    didAttachController(panelController: PanelController): void {\n      const panelTrait = panelController.panel.trait;\n      if (panelTrait !== null) {\n        this.attachPanelTrait(panelTrait, panelController);\n      }\n      const panelView = panelController.panel.view;\n      if (panelView !== null) {\n        this.attachPanelView(panelView, panelController);\n      }\n    },\n    willDetachController(panelController: PanelController): void {\n      const panelView = panelController.panel.view;\n      if (panelView !== null) {\n        this.detachPanelView(panelView, panelController);\n      }\n      const panelTrait = panelController.panel.trait;\n      if (panelTrait !== null) {\n        this.detachPanelTrait(panelTrait, panelController);\n      }\n    },\n    didDetachController(panelController: PanelController): void {\n      this.owner.callObservers(\"controllerDidDetachPanel\", panelController, this.owner);\n    },\n    controllerWillAttachPanelTrait(panelTrait: Trait, panelController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPanelTrait\", panelTrait, panelController, this.owner);\n      this.attachPanelTrait(panelTrait, panelController);\n    },\n    controllerDidDetachPanelTrait(panelTrait: Trait, panelController: PanelController): void {\n      this.detachPanelTrait(panelTrait, panelController);\n      this.owner.callObservers(\"controllerDidDetachPanelTrait\", panelTrait, panelController, this.owner);\n    },\n    attachPanelTrait(panelTrait: Trait, panelController: PanelController): void {\n      // hook\n    },\n    detachPanelTrait(panelTrait: Trait, panelController: PanelController): void {\n      // hook\n    },\n    controllerWillAttachPanelView(panelView: PanelView, panelController: PanelController): void {\n      this.owner.callObservers(\"controllerWillAttachPanelView\", panelView, panelController, this.owner);\n      this.attachPanelView(panelView, panelController);\n    },\n    controllerDidDetachPanelView(panelView: PanelView, panelController: PanelController): void {\n      this.detachPanelView(panelView, panelController);\n      this.owner.callObservers(\"controllerDidDetachPanelView\", panelView, panelController, this.owner);\n    },\n    attachPanelView(panelView: PanelView, panelController: PanelController): void {\n      // hook\n    },\n    detachPanelView(panelView: PanelView, panelController: PanelController): void {\n      panelView.remove();\n    },\n  })\n  readonly panels!: TraitViewControllerSet<this, Trait, PanelView, PanelController> & Observes<PanelController> & {\n    attachPanelTrait(panelTrait: Trait, panelController: PanelController): void,\n    detachPanelTrait(panelTrait: Trait, panelController: PanelController): void,\n    attachPanelView(panelView: PanelView, panelController: PanelController): void,\n    detachPanelView(panelView: PanelView, panelController: PanelController): void,\n  };\n}\n"],"names":["__esDecorate","ctor","descriptorIn","decorators","contextIn","initializers","extraInitializers","accept","f","TypeError","_","kind","key","target","prototype","descriptor","Object","getOwnPropertyDescriptor","name","done","i","length","context","p","access","addInitializer","push","result","get","set","init","unshift","defineProperty","__runInitializers","thisArg","value","useValue","arguments","call","SuppressedError","ButtonGlow","_a","HtmlView","constructor","node","super","this","glowState","_instanceExtraInitializers","left","_left_initializers","opacity","_opacity_initializers","glowTimer","initGlow","setIntrinsic","classList","style","position","width","Length","zero","height","borderRadius","pct","pointerEvents","didMount","backgroundColor","hasAffinity","Affinity","Intrinsic","highlightColor","getLookOr","Look","alpha","onUnmount","cancelGlow","remove","onApplyTheme","theme","mood","timing","getOr","glow","clientX","clientY","delay","bind","setTimeout","Timing","fromLike","willGlow","offsetParent","clientBounds","getBoundingClientRect","cx","cy","top","rx","Math","max","ry","r","sqrt","getLook","didGlow","clearTimeout","pulse","willPulse","didPulse","fade","didFade","willFade","_left_decorators","Animator","inherits","parent","owner","didTransition","_opacity_decorators","static","private","has","obj","ButtonMembrane","glows","_glows_initializers","gesture","_gesture_initializers","initMembrane","add","input","detail","x","y","inputType","prependChild","_glows_decorators","Property","valueType","Boolean","_gesture_decorators","PositionGesture","bindsOwner","didBeginPress","event","didMovePress","isRunaway","cancelPress","contains","clearHoldTimer","beginHover","didEndPress","endHover","didCancelPress","FloatingButton","buttonType","_buttonType_initializers","icons","_icons_initializers","icon","_icon_initializers","presence","_presence_initializers","initButton","overflow","userSelect","cursor","accentColor","shadow","Mood","floating","shadowColor","color","phase","getPhaseOr","withColor","boxShadow","onLayout","_buttonType_decorators","String","updateButtonType","didSetValue","newButtonType","oldButtonType","_icons_decorators","ViewSet","viewType","HtmlIconView","observes","viewDidApplyTheme","iconView","iconColor","viewDidAnimate","tweening","view","deleteView","_icon_decorators","ViewRef","createView","create","state","transform","Transform","rotate","Angle","deg","iconLayout","setAffinity","Extrinsic","viewCount","oldIconView","newIconView","graphics","attachView","insertView","pop","iconViews","views","viewId","_presence_decorators","PresenceAnimator","extends","didStartHovering","modifyMood","Feel","default","hovering","didStopHovering","ButtonItem","initButtonItem","button","createButton","setChild","childView","getChild","buttonIcon","label","onInsertChild","targetView","childKey","onInsertButton","onInsertLabel","onRemoveChild","onRemoveButton","onRemoveLabel","display","right","bottom","fontSize","fontWeight","lineHeight","whiteSpace","labelColor","ButtonStack","stackHeight","_stackHeight_initializers","buttonSpacing","_buttonSpacing_initializers","itemSpacing","_itemSpacing_initializers","_button_initializers","items","_items_initializers","modality","_modality_initializers","click","_click_initializers","contextmenu","_contextmenu_initializers","initButtonStack","closeIcon","insertItem","item","index","childNodes","insertChild","removeItems","NodeView","removeChild","layoutStack","getPhase","childCount","buttonView","zIndex","itemIndex","pxValue","dy","show","willShowStack","didShowStack","callObservers","requireUpdate","View","NeedsLayout","hide","willHideStack","didHideStack","VectorIcon","Number","_buttonSpacing_decorators","ThemeAnimator","updateFlags","_itemSpacing_decorators","_button_decorators","viewKey","binds","willAttachView","Presence","presented","presenting","initView","_items_decorators","itemView","dismissed","transition","willPresent","modal","present","didPresent","willDismiss","didDismiss","_modality_decorators","defaultPrevented","min","y0","setPhase","asPresenting","t","t0","holdDelay","dismiss","buttons","toggle","didLongPress","preventDefault","_click_decorators","EventHandler","eventType","handle","stopPropagation","_contextmenu_decorators","Lazy","_static_get_closeIcon_decorators","_staticExtraInitializers","_stackHeight_decorators","IconButton","_iconLayout_initializers","_iconColor_initializers","_graphics_initializers","hovers","_hovers_initializers","initTheme","justifyContent","alignItems","modifyTheme","translucent","Color","derived","oldGraphics","Icon","newGraphics","withTheme","isThemed","onResize","_iconLayout_decorators","IconLayout","initValue","of","_iconColor_decorators","didSetState","_graphics_decorators","IconGraphicsAnimator","Graphics","SvgIconView","attributes","viewWillLayout","viewBox","setInherits","_hovers_decorators","DisclosureButton","disclosure","_disclosure_initializers","collapsedColor","_collapsedColor_initializers","expandedColor","_expandedColor_initializers","initDisclosureButton","flexGrow","flexShrink","appendChild","SvgView","points","translate","arrow","needsDisplay","displayFlags","flags","fill","colorInterpolator","interpolateTo","_disclosure_decorators","ExpansionAnimator","look","textColor","_collapsedColor_decorators","_expandedColor_decorators","ToolLayout","grow","shrink","basis","align","inAlign","outAlign","overlap","overpad","inPresence","outPresence","withKey","copy","withFlex","withAlign","withOverlap","withOverpad","withPresence","resized","that","ToolLayoutInterpolator","equivalentTo","epsilon","Equivalent","equals","Equals","debug","output","write","toString","Format","fromInit","_super","l0","l1","interpolator","u","growInterpolator","shrinkInterpolator","basisInterpolator","alignInterpolator","inAlignInterpolator","outAlignInterpolator","overlapInterpolator","overpadInterpolator","presenceInterpolator","inPresenceInterpolator","outPresenceInterpolator","widthInterpolator","leftInterpolator","rightInterpolator","setPrototypeOf","Interpolator","width0","width1","PxLength","StepInterpolator","configurable","BarLayout","spacing","tools","getTool","tool","oldTools","toolCount","newTools","Array","barWidth","barLeft","barRight","toolSpacing","k","toolWidth","delta","j","BarLayoutInterpolator","theseTools","thoseTools","n","Arrays","equal","barTools","spacingInterpolator","toolInterpolators","tools0","tools1","tool0","tool1","asDismissing","ToolView","xAlign","_xAlign_initializers","effectiveWidth","_effectiveWidth_initializers","initTool","_xAlign_decorators","ConstraintProperty","_effectiveWidth_decorators","TitleToolView","content","_content_initializers","overflowX","layoutTool","contentView","contentWidth","didPress","_content_decorators","didDetachView","text","fromTag","textOverflow","overflowY","ButtonToolView","svg","_svg_initializers","hover","_hover_initializers","boxSizing","getter","setState","Reflexive","svgView","_get_iconColor_decorators","_svg_decorators","_hover_decorators","FocusAnimator","Focus","unfocused","newHover","oldHover","transparent","viewDidUnmount","unfocus","focus","SearchToolView","_input_initializers","stylesheet","_stylesheet_initializers","inputRule","_inputRule_initializers","inputFocusRule","_inputFocusRule_initializers","inputPlaceholderRule","_inputPlaceholderRule_initializers","inputSearchCancelButtonRule","_inputSearchCancelButtonRule_initializers","inputView","toolHeight","inputWidth","excessWidth","excessHeight","_input_decorators","onInput","onKeyDown","didAttachView","addEventListener","willDetachView","removeEventListener","query","type","paddingTop","paddingRight","paddingBottom","paddingLeft","_stylesheet_decorators","StyleView","_inputRule_decorators","StyleRule","styleView","sheet","selector","appearance","borderWidth","borderStyle","borderColor","outlineWidth","outlineStyle","outlineColor","setStyle","_inputFocusRule_decorators","focusColor","_inputPlaceholderRule_decorators","placeholderColor","_inputSearchCancelButtonRule_decorators","ToolController","Controller","_tool_initializers","layout","_layout_initializers","_tool_decorators","TraitViewRef","observesView","toolView","viewDidPress","viewDidLongPress","_layout_decorators","toolLayout","TitleToolController","setView","deinitView","viewWillAttachContent","viewDidDetachContent","ButtonToolController","viewDidSetGraphics","toolIcon","SearchToolController","viewWillAttachInput","viewDidDetachInput","viewDidUpdateSearch","viewDidSubmitSearch","viewDidCancelSearch","BarView","placement","_placement_initializers","barHeight","_barHeight_initializers","_toolSpacing_initializers","_tools_initializers","initBar","primary","edgeInsets","toolViewClass","getOrCreateTool","setTool","resizeBar","resizeBarTop","resizeBarBottom","resizeBarNone","plus","insetTop","oldLayout","pxState","insetLeft","insetRight","getValue","newLayout","insetBottom","displayChildren","displayChild","layoutChildren","toolTop","px","toolBottom","child","dismissing","Transient","didLayout","layoutTools","overlapView","toolX","offsetLeft","overlapX","overlapWidth","_placement_decorators","NeedsResize","applyEdgeInsets","decohereOutlets","transformState","_barHeight_decorators","ThemeConstraintAnimator","_toolSpacing_decorators","_get_edgeInsets_decorators","getOutletValue","outlet","_tools_decorators","BarController","bar","_bar_initializers","createLayout","toolControllers","controllers","controllerId","updateLayout","barView","barLayout","navigating","toolControllerClass","toolController","getToolView","getOrCreateToolView","Error","setToolView","onAssemble","_bar_decorators","NeedsAssemble","viewDidSetBarLayout","viewDidDismissTool","TraitViewControllerSet","controllerType","parentView","getTraitViewRef","willAttachController","didAttachController","attachToolView","willDetachController","detachToolView","didDetachController","controllerWillAttachToolView","controllerDidDetachToolView","toolContentView","attachToolContentView","detachToolContentView","controllerDidSetToolLayout","controllerWillAttachToolContentView","controllerDidDetachToolContentView","controllerDidSetToolIcon","controllerDidUpdateSearch","controllerDidSubmitSearch","controllerDidCancelSearch","controllerDidPressToolView","controllerDidLongPressToolView","TokenView","tokenState","expandedPhase","_expandedPhase_initializers","shape","_shape_initializers","head","_head_initializers","headGesture","_headGesture_initializers","headIcon","_headIcon_initializers","body","_body_initializers","bodyGesture","_bodyGesture_initializers","foot","_foot_initializers","footGesture","_footGesture_initializers","footIcon","_footIcon_initializers","accessory","_accessory_initializers","labelContainer","_labelContainer_initializers","_label_initializers","onClickHead","onClickBody","onClickFoot","initToken","initShape","shapeView","initHead","headView","fillRule","initHeadIcon","headIconView","initBody","bodyView","initFoot","footView","initFootIcon","footIconView","initLabelContainer","initLabel","labelView","expanded","collapsed","fillLook","needsProcess","processFlags","NeedsAnimate","layoutToken","getStateOr","boxHeight","clientHeight","tokenHeight","radius","pad","gap","padAngle","asin","labelPaddingLeft","labelPaddingRight","accessoryPaddingRight","accessoryIcon","labelWidth","bodyWidth","clientWidth","accessoryWidth","footWidth","tokenWidth","bodyRight","PathContext","setPrecision","arc","PI","closePath","embossed","renderer","PathRenderer","frame","R2Box","render","removeView","d","expand","willExpand","onExpand","didExpand","collapse","willCollapse","onCollapse","didCollapse","blur","didPressHead","didPressBody","didPressFoot","_expandedPhase_decorators","_shape_decorators","_head_decorators","forTag","viewDidMount","viewWillUnmount","updated","_headGesture_decorators","_headIcon_decorators","_body_decorators","_bodyGesture_decorators","_foot_decorators","_footGesture_decorators","_footIcon_decorators","_accessory_decorators","_labelContainer_decorators","_label_decorators","InputTokenView","placeholderRule","_placeholderRule_initializers","onInputUpdate","onInputChange","onInputKey","padding","placeholderLook","font","didUpdateInput","didChangeInput","didAcceptInput","_placeholderRule_decorators","ColLayout","optional","persistent","hidden","asOptional","asPersistent","withTextColor","ColorLook","asHidden","TableLayout","colSpacing","cols","getCol","col","oldCols","colCount","newCols","tableWidth","tableLeft","tableRight","colWidth","theseCols","thoseCols","tableCols","CellView","initCell","hyperlink","tryValue","activate","_get_hyperlink_decorators","Hyperlink","href","title","textDecorationLine","TextCellView","alignSelf","IconCellView","layoutIcon","DisclosureCellView","superDisclosure","inlet","CellTrait","Trait","createCellController","CellController","TextCellTrait","TextCellController","IconCellTrait","IconCellController","cell","_cell_initializers","_cell_decorators","traitType","willAttachTrait","cellTrait","initTrait","bindInlet","deinitTrait","unbindInlet","didDetachTrait","cellView","setContentView","observesTrait","traitDidSetContent","trait","setIcon","traitDidSetIcon","cellIcon","LeafView","depth","_depth_initializers","rowSpacing","_rowSpacing_initializers","rowHeight","_rowHeight_initializers","stretch","_stretch_initializers","highlight","_highlight_initializers","cells","_cells_initializers","initLeaf","getCell","cellViewClass","getOrCreateCell","setCell","recohere","updateTime","layoutLeaf","_stretch_decorators","willFocus","willUnfocus","_highlight_decorators","selectionColor","didFocus","didUnfocus","_cells_decorators","Node","parentNode","_depth_decorators","_rowSpacing_decorators","_rowHeight_decorators","LeafTrait","cellTraitClass","getTrait","setTrait","onStartConsuming","consumeTraits","onStopConsuming","unconsumeTraits","TraitSet","targetTrait","didAttachTrait","consuming","consume","willDetachTrait","unconsume","detectModel","model","LeafController","leaf","_leaf_initializers","cellControllerClass","cellController","getCellTrait","leafTrait","getOrCreateCellTrait","setCellTrait","getCellView","leafView","getOrCreateCellView","setCellView","_leaf_decorators","addTraits","traits","deleteTraits","traitWillAttachCell","addTrait","traitDidDetachCell","deleteTrait","cellControllers","viewWillHighlight","viewDidHighlight","viewWillUnhighlight","viewDidUnhighlight","viewDidEnter","viewDidLeave","attachCellTrait","attachCellView","detachCellView","detachCellTrait","controllerWillAttachCellTrait","controllerDidDetachCellTrait","controllerWillAttachCellView","controllerDidDetachCellView","cellContentView","attachCellContentView","detachCellContentView","controllerDidPressCellView","controllerDidLongPressCellView","controllerWillAttachCellContentView","controllerDidDetachCellContentView","controllerDidSetCellIcon","createController","RowView","tree","_tree_initializers","expansion","_expansion_initializers","expanding","_expanding_initializers","disclosing","_disclosing_initializers","visibleFrame","_visibleFrame_initializers","initRow","detectVisibleFrame","yBleed","getValueOr","parentVisibleFrame","xMin","yMin","xMax","yMax","bounds","window","innerWidth","innerHeight","onProcess","setOutletValue","NeedsScroll","onDisplay","resizeRow","superLayout","inletValue","layoutRow","disclosingPhase","leafHeightValue","leafHeightState","treeHeightValue","treeHeightState","treeView","heightValue","heightState","setInterpolatedValue","onCull","onUncull","newDepth","oldDepth","_tree_decorators","TableView","_expansion_decorators","_expanding_decorators","Expansion","newDisclosure","oldDisclosure","direction","tableView","getRoot","_disclosing_decorators","_visibleFrame_decorators","outletValue","newOutletValue","oldOutletValue","equalValues","RowTrait","TraitRef","TableTrait","treeTrait","detectTrait","RowController","row","_row_initializers","_row_decorators","rowTrait","traitWillAttachTree","traitDidDetachTree","rowView","treeController","controller","table","viewWillExpand","viewDidExpand","viewWillCollapse","viewDidCollapse","viewWillAttachTree","TraitViewControllerRef","TableController","initController","attachTreeTrait","attachTreeView","deinitController","detachTreeTrait","detachTreeView","controllerWillAttachTreeTrait","controllerDidDetachTreeTrait","controllerWillAttachTableView","controllerDidDetachTableView","detectController","ColView","initCol","TextColView","legendColor","IconColView","DisclosureColView","inheritName","ColTrait","createColController","ColController","TextColTrait","TextColController","IconColTrait","IconColController","_col_initializers","_col_decorators","colTrait","traitDidSetLayout","colLayout","colView","setLabelView","traitDidSetLabel","viewWillAttachLabel","viewDidDetachLabel","colIcon","HeaderView","_cols_initializers","initHeader","colViewClass","getOrCreateCol","setCol","layoutHeader","_cols_decorators","HeaderTrait","colTraitClass","HeaderController","header","_header_initializers","colControllerClass","colController","getColTrait","headerTrait","getOrCreateColTrait","setColTrait","getColView","headerView","getOrCreateColView","setColView","_header_decorators","traitWillAttachCol","traitDidDetachCol","colControllers","insertChildView","attachColTrait","attachColView","detachColView","detachColTrait","controllerWillAttachColTrait","controllerDidDetachColTrait","controllerWillAttachColView","controllerDidDetachColView","controllerDidSetColLayout","colLabelView","attachColLabelView","detachColLabelView","controllerDidPressColView","controllerDidLongPressColView","controllerWillAttachColLabelView","controllerDidDetachColLabelView","controllerDidSetColIcon","rows","_rows_initializers","visibleViews","initTable","getRow","rowViewClass","getOrCreateRow","setRow","resizeTable","processVisibleViews","processChild","RemovingFlag","setFlags","processChildren","culled","scrollChildren","expandingPhase","yValue","yState","rowIndex","isVisible","yMin0","yMax0","yMin1","yMax1","setCulled","displayVisibleViews","disclosurePhase","nested","newExpansion","oldExpansion","_rows_decorators","viewWillAttachLeaf","viewDidDetachLeaf","viewDidEnterLeaf","viewDidLeaveLeaf","viewDidPressLeaf","viewDidLongPressLeaf","viewDidDetachTree","viewWillHighlightLeaf","viewDidHighlightLeaf","viewWillUnhighlightLeaf","viewDidUnhighlightLeaf","_colSpacing_initializers","colLayouts","colTraits","traitId","_colSpacing_decorators","newColSpacing","oldColSpacing","_table_initializers","layoutTable","tableLayout","_table_decorators","tableTrait","traitDidSetTableLayout","traitWillAttachHeader","traitDidDetachHeader","traitWillAttachRow","traitDidDetachRow","headerController","rowControllers","rowController","getTargetView","viewWillAttachHeader","viewDidDetachHeader","attachHeaderTrait","attachHeaderView","detachHeaderView","detachHeaderTrait","controllerWillAttachHeaderTrait","controllerDidDetachHeaderTrait","controllerWillAttachHeaderView","controllerDidDetachHeaderView","controllerDidPressHeaderView","controllerDidLongPressHeaderView","attachRowTrait","attachRowView","detachRowView","detachRowTrait","controllerDidAttachParent","targetController","getNextSibling","reinsertChild","controllerWillAttachRowTrait","controllerDidDetachRowTrait","controllerWillAttachRowView","controllerDidDetachRowView","controllerWillAttachLeafTrait","attachLeafTrait","controllerDidDetachLeafTrait","detachLeafTrait","controllerWillAttachLeafView","attachLeafView","controllerDidDetachLeafView","detachLeafView","controllerWillAttachCell","attachCell","controllerDidDetachCell","detachCell","controllerWillAttachTree","attachTree","controllerDidDetachTree","detachTree","controllerWillAttachTreeView","controllerDidDetachTreeView","controllerWillExpandRowView","controllerDidExpandRowView","controllerWillCollapseRowView","controllerDidCollapseRowView","ScrimView","displayState","_backgroundColor_initializers","syntheticClick","_syntheticClick_initializers","HiddenState","initScrim","black","setDisplayState","isShown","ShownState","ShowingState","ShowState","isHidden","HidingState","HideState","willShowScrim","didShowScrim","willHideScrim","didHideScrim","Provider","serviceDidSetModality","newModality","oldModality","modalService","_backgroundColor_decorators","willTransition","_get_modal_decorators","didAttachService","service","willDetachService","initEventType","PointerEvent","TouchEvent","displaceModals","_syntheticClick_decorators","enabled","PopoverView","placementGap","_placementGap_initializers","arrowWidth","_arrowWidth_initializers","arrowHeight","_arrowHeight_initializers","source","_source_initializers","placementFrame","_placementFrame_initializers","dropdown","_dropdown_initializers","sourceFrame","currentPlacement","initArrow","createArrow","place","force","sourceView","oldSourceFrame","newSourceFrame","popoverFrame","placePopover","placeArrow","popoverWidth","popoverHeight","parentBounds","parentLeft","parentTop","sourceLeft","pageXOffset","sourceRight","sourceTop","pageYOffset","sourceBottom","sourceWidth","sourceHeight","sourceX","sourceY","placementLeft","placementRight","placementTop","placementBottom","marginLeft","marginRight","marginTop","marginBottom","allowedPlacement","offsetTop","oldWidth","oldHeight","oldMaxWidth","maxWidth","oldMaxHeight","maxHeight","round","willPlacePopover","onPlacePopover","didPlacePopover","offsetRight","offsetBottom","arrowXMin","arrowXMax","arrowYMin","arrowYMax","borderLeftWidth","borderLeftStyle","borderLeftColor","borderRightWidth","borderRightStyle","borderRightColor","borderTopWidth","borderTopStyle","borderTopColor","borderBottomWidth","borderBottomStyle","borderBottomColor","_placementGap_decorators","_arrowWidth_decorators","_arrowHeight_decorators","_source_decorators","viewDidResize","viewDidScroll","viewDidLayout","viewDidProject","viewDidSetAttribute","viewDidSetStyle","priority","visibility","a","b","_placementFrame_decorators","_dropdown_decorators","DrawerView","collapsedWidth","_collapsedWidth_initializers","expandedWidth","_expandedWidth_initializers","effectiveHeight","_effectiveHeight_initializers","initDrawer","overscrollBehaviorY","overflowScrolling","isHorizontal","isVertical","layoutDrawer","viewIdiom","layoutDrawerTop","layoutDrawerRight","layoutDrawerBottom","layoutDrawerLeft","presencePhase","getCssValue","times","stretchPhase","_collapsedWidth_decorators","_expandedWidth_decorators","newValue","oldValue","toNumber","_effectiveHeight_decorators","DrawerButton","drawerView","initIcon","hamburgerIcon","setDrawerView","_static_get_hamburgerIcon_decorators","SheetView","fullBleed","_fullBleed_initializers","sheetAlign","_sheetAlign_initializers","scroll","_scroll_initializers","initSheet","layoutSheet","sheetWidth","_fullBleed_decorators","_scroll_decorators","_sheetAlign_decorators","SheetController","searchable","_searchable_initializers","searching","_searching_initializers","_sheet_initializers","back","_back_initializers","forward","_forward_initializers","_title_initializers","_handle_initializers","modeTools","_modeTools_initializers","updateSearch","submitSearch","sheetView","setValue","Inherited","_searchable_decorators","_searching_decorators","_sheet_decorators","sheetTrait","viewDidSetFullBleed","viewWillPresent","viewDidPresent","viewWillDismiss","viewDidDismiss","_back_decorators","ControllerRef","backController","_forward_decorators","forwardController","_title_decorators","titleController","titleView","_handle_decorators","handleController","active","handleView","updateActive","setActive","inserting","insertController","_modeTools_decorators","ordered","modeToolController","targetToolController","Objects","getNextValue","uid","modeToolView","NavBarController","showBackTitle","_showBackTitle_initializers","closeButton","_closeButton_initializers","backButton","_backButton_initializers","searchButton","_searchButton_initializers","searchInput","_searchInput_initializers","cancelSearch","_cancelSearch_initializers","front","_front_initializers","frontController","createSearchLayout","createNavLayout","frontKey","backKey","closeButtonController","closeButtonLayout","closeButtonView","backButtonController","backButtonLayout","backTitleLayout","backTitleView","frontTitleLayout","frontTitleView","oldBarLayout","oldBackLayout","searchButtonController","searchButtonLayout","searchInputController","searchInputLayout","cancelSearchController","cancelSearchLayout","backIcon","searchIcon","withFillLook","_showBackTitle_decorators","_closeButton_decorators","_backButton_decorators","_searchButton_decorators","_searchInput_decorators","placeholder","_cancelSearch_decorators","searchInputView","_front_decorators","controllerWillAttachBack","controllerDidDetachBack","controllerWillAttachForward","controllerDidDetachForward","controllerDidSetSearchable","controllerDidSetSearching","controllerWillAttachTitle","controllerDidDetachTitle","_static_get_backIcon_decorators","_static_get_searchIcon_decorators","StackView","navBar","_navBar_initializers","sheets","_sheets_initializers","initStack","resizeStack","stackWidth","cssState","navBarView","navBarHeight","mounted","sheetViews","_navBar_decorators","viewDidSetBarHeight","_sheets_decorators","StackController","backAlign","_backAlign_initializers","stack","_stack_initializers","root","_root_initializers","didPressCloseButton","didPressBackButton","didPressSearchButton","_backAlign_decorators","_stack_decorators","stackTrait","stackView","navBarController","sheetControllers","sheetController","viewWillAttachNavBar","viewDidDetachNavBar","detachNavBarView","controllerWillAttachBarView","attachNavBarView","controllerDidDetachBarView","frontView","frontViewDidScroll","controllerDidPressCloseButton","controllerDidPressBackButton","controllerDidPressSearchButton","setController","attachSheetTrait","attachSheetView","detachSheetView","detachSheetTrait","controllerWillAttachSheetTrait","controllerDidDetachSheetTrait","controllerWillAttachSheetView","controllerDidDetachSheetView","attachTitle","addView","detachTitle","controllerWillPresentSheetView","controllerDidPresentSheetView","controllerWillDismissSheetView","controllerDidDismissSheetView","deleteController","_root_decorators","rootController","rootTrait","attachRootTrait","rootView","attachRootView","detachRootView","detachRootTrait","frontTrait","attachFrontTrait","attachFrontView","detachFrontView","detachFrontTrait","nextSibling","presentFrontView","detachView","dismissFrontView","controllerDidScrollSheetView","AppBarController","menuButton","_menuButton_initializers","actionButton","_actionButton_initializers","cover","_cover_initializers","fullScreen","_fullScreen_initializers","menuButtonController","menuButtonLayout","modeToolControllers","modeToolCount","modeToolLayout","modeToolKey","targetToolView","coverLayout","coverController","coverTitleView","actionButtonController","actionButtonLayout","menuIcon","menuCloseIcon","actionIcon","_menuButton_decorators","_actionButton_decorators","_cover_decorators","_fullScreen_decorators","_static_get_menuIcon_decorators","_static_get_menuCloseIcon_decorators","_static_get_actionIcon_decorators","FolioView","folioStyle","_folioStyle_initializers","appBar","_appBar_initializers","drawer","_drawer_initializers","initFolio","resizeFolio","resizeStacked","resizeUnstacked","coverView","folioWidth","folioHeight","drawerWidth","minus","appBarView","appBarHeight","layoutFolio","layoutStacked","layoutUnstacked","_folioStyle_decorators","_appBar_decorators","_drawer_decorators","viewDidSetPresence","viewDidSetEffectiveWidth","FolioController","folio","_folio_initializers","didPressMenuButton","didPressActionButton","attachController","detachController","updateFolioStyle","appBarController","folioView","updateFullBleed","_folio_decorators","folioTrait","viewDidSetFolioStyle","viewWillAttachDrawer","viewDidDetachDrawer","viewWillAttachAppBar","viewDidDetachAppBar","attachAppBarView","detachAppBarView","coverViewDidScroll","controllerDidPressMenuButton","controllerDidPressActionButton","consumed","coverTrait","attachCoverTrait","attachCoverView","detachCoverView","detachCoverTrait","controllerDidSetFullBleed","controllerWillAttachModeTool","controllerDidDetachModeTool","TabBarController","tabs","_tabs_initializers","_active_initializers","tabStyle","_tabStyle_initializers","tabControllers","tabController","tabKey","tabHandleLayout","_tabs_decorators","controllerWillAttachHandle","tabHandleController","controllerDidDetachHandle","controllerDidPressHandle","controllerDidLongPressHandle","_active_decorators","activeController","_tabStyle_decorators","BinderView","tabBar","_tabBar_initializers","initBinder","getTab","tabViewClass","tabView","getOrCreateTab","setTab","resizeBinder","binderWidth","binderHeight","tabBarView","tabBarHeight","tabBarWidth","tabViews","_tabBar_decorators","detectView","BinderController","binder","_binder_initializers","didPressTabHandle","didLongPressTabHandle","newTabController","oldTabController","targetTabController","tabBarController","updateTabStyle","binderView","_binder_decorators","binderTrait","viewWillAttachTabBar","viewDidDetachTabBar","attachTabBarView","detachTabBarView","controllerDidPressTabHandle","controllerDidLongPressTabHandle","tabTrait","attachTabTrait","attachTabView","attachTabHandle","detachTabHandle","detachTabView","detachTabTrait","attachTrait","detachTrait","tabToolController","activeTrait","attachActiveTrait","activeView","attachActiveView","detachActiveView","detachActiveTrait","PanelView","widthBasis","_widthBasis_initializers","heightBasis","_heightBasis_initializers","unitWidth","_unitWidth_initializers","unitHeight","_unitHeight_initializers","minPanelHeight","_minPanelHeight_initializers","panelStyle","_panelStyle_initializers","paneLayout","_paneLayout_initializers","minFrameWidth","_minFrameWidth_initializers","minFrameHeight","_minFrameHeight_initializers","headerTitle","_headerTitle_initializers","headerSubtitle","_headerSubtitle_initializers","panes","_panes_initializers","initPanel","onPanelScroll","applyPanelStyle","resizePanel","resizeFrameChildren","resizeStackChildren","rightView","unitRowWidth","paneView","unitPanelWidth","paneWidth","paneHeight","_widthBasis_decorators","_heightBasis_decorators","_unitWidth_decorators","_unitHeight_decorators","_minPanelHeight_decorators","_panelStyle_decorators","panelView","margin","raised","_paneLayout_decorators","_minFrameWidth_decorators","_minFrameHeight_decorators","_headerTitle_decorators","_headerSubtitle_decorators","subtitleView","_panes_decorators","viewDidSetUnitWidth","viewDidSetUnitHeight","viewDidSetMinPanelHeight","viewDidSetPanelStyle","InsertChildFlags","RemoveChildFlags","PanelController","panel","_panel_initializers","panelHeader","_panelHeader_initializers","panelTitle","_panelTitle_initializers","panelSubtitle","_panelSubtitle_initializers","_panel_decorators","panelTrait","viewWillAttachHeaderTitle","viewDidDetachHeaderTitle","viewWillAttachHeaderSubtitle","viewDidDetachHeaderSubtitle","_panelHeader_decorators","_panelTitle_decorators","_panelSubtitle_decorators","paneController","paneTrait","attachPaneTrait","attachPaneView","detachPaneView","detachPaneTrait","controllerWillAttachPanelTrait","controllerDidDetachPanelTrait","controllerWillAttachPanelView","controllerDidDetachPanelView","BoardView","panels","_panels_initializers","resizeChildren","panelHeight","_panels_decorators","BoardController","panelController","attachPanelTrait","attachPanelView","detachPanelView","detachPanelTrait"],"mappings":"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"}