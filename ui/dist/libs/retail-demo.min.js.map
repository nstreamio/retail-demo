{"version":3,"file":"retail-demo.min.js","sources":["../../node_modules/tslib/tslib.es6.mjs","../../src/order/OrderBoardController.ts","../../src/order/OrderAspectTrait.ts","../../src/order/OrderEntityTrait.ts","../../src/order/OrdersRelationTrait.ts","../../src/types.ts","../../src/order/widget/OrderController.ts","../../src/order/widget/OrderStatusPieController.ts","../../src/order/widget/OrderTypeChartController.ts","../../src/order/widget/CumulativeOrdersSectionController.ts","../../src/order/widget/OrderListController.ts","../../src/order/widget/CumulativeOrdersPanelController.ts","../../src/order/widget/OrderKanbanBoardController.ts","../../src/customer/CustomerAspectTrait.ts","../../src/customer/CustomerEntityTrait.ts","../../src/customer/CustomersRelationTrait.ts","../../src/store/StoreAspectTrait.ts","../../src/store/StoreEntityTrait.ts"],"sourcesContent":["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Trait, TraitRef} from \"@swim/model\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {PanelView, BoardView, BoardController} from \"@swim/panel\";\nimport {EntityTrait} from \"@swim/domain\";\n\n/** @public */\nexport class OrderBoardController extends BoardController {\n  constructor() {\n    super();\n    this.initBoard();\n  }\n\n  protected initBoard(): void {\n    const boardView = this.sheet.attachView();\n    boardView.appendChild(PanelView).style.set({\n      margin: 6,\n    });\n  }\n\n  @TraitViewRef({\n    extends: true,\n    viewDidMount(boardView: BoardView): void {\n      this.owner.consume(boardView);\n    },\n    viewWillUnmount(boardView: BoardView): void {\n      this.owner.unconsume(boardView);\n    },\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, BoardView> & BoardController[\"sheet\"];\n\n  @TraitRef({\n    traitType: EntityTrait,\n    inherits: true,\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.hostUri.bindInlet(entityTrait.hostUri);\n      this.owner.nodeUri.bindInlet(entityTrait.nodeUri);\n    }\n  })\n  readonly entity!: TraitRef<this, EntityTrait>;\n\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {AspectTrait} from \"@swim/domain\";\nimport { OrderBoardController } from \"./OrderBoardController\";\n\n/** @public */\nexport class OrderAspectTrait extends AspectTrait {\n  constructor() {\n    super();\n    this.id.setIntrinsic(\"portal\");\n    this.title.setIntrinsic(\"Portal\");\n    this.icon.setIntrinsic(OrderAspectTrait.icon);\n  }\n\n  // Define the board controller to be used that will control all the widgets/cards the orders will have\n  // We will use the 'OrderBoard' which is currently blank\n  override createTabController(): SheetController | null {\n    return new OrderBoardController();\n  }\n\n  // The icon to show the 'portal' (at the top - alternative to atlas)\n  @Lazy\n  static get icon(): Graphics {\n    return VectorIcon.create(24, 24, \"M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z\");\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\nimport {Class, Lazy} from \"@swim/util\";\nimport {EntityTrait, EntityTraitObserver} from \"@swim/domain\";\nimport { Graphics, VectorIcon } from \"@swim/graphics\";\nimport { Model, TraitModelRef } from \"@swim/model\";\nimport { OrderAspectTrait } from \"./OrderAspectTrait\";\n\n/** @public */\nexport interface OrderEntityTraitObserver<T extends OrderEntityTrait = OrderEntityTrait> extends EntityTraitObserver<T> {\n}\n\n/** @public */\nexport class OrderEntityTrait extends EntityTrait {\n  constructor() {\n    super();\n    this.icon.setIntrinsic(OrderEntityTrait.icon);\n  }\n\n  override readonly observerType?: Class<OrderEntityTraitObserver>;\n\n  // Aspect/Portal trait showing that this entity will have a board of widgets/cards\n  @TraitModelRef({\n    modelType: Model,\n    modelKey: \"portal\",\n    traitType: OrderAspectTrait,\n    traitKey: \"aspect\",\n  })\n  readonly portal!: TraitModelRef<this, OrderAspectTrait>;\n\n  // The icon of the entity, will be used in the navigation on the left\n  @Lazy\n  static get icon(): Graphics {\n    return VectorIcon.create(24, 24, \"M20,2L4,2C3,2,2,2.9,2,4L2,7C2,7.7,2.4,8.3,3,8.7L3,20C3,21.1,4.1,22,5,22L19,22C19.9,22,21,21.1,21,20L21,8.7C21.6,8.3,22,7.7,22,7L22,4C22,2.9,21,2,20,2ZM15,14L9,14L9,12L15,12L15,14ZM20,7L4,7L4,4L20,4L20,7Z\");\n  }\n\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {type Value} from \"@swim/structure\";\nimport {MapDownlink} from \"@swim/client\";\nimport {RelationTrait} from \"@swim/domain\";\nimport {OrderEntityTrait} from \"./OrderEntityTrait\";\nimport { Observes, Strings } from \"@swim/util\";\nimport { TraitModelSet } from \"@swim/model\";\nimport { Uri } from \"@swim/uri\";\n\n/** @public */\nexport class OrdersRelationTrait extends RelationTrait<OrderEntityTrait> {\n  constructor() {\n    super();\n    this.title.setIntrinsic(\"Orders\");\n    this.id.setIntrinsic(\"order\");\n  }\n\n  @TraitModelSet({\n    extends: true,\n    traitType: OrderEntityTrait,\n    observesTrait: true,\n    sorted: true,\n    initTrait(orderTrait: OrderEntityTrait): void {\n      // Create the order entity\n      const orderId = orderTrait.id.value!;\n      orderTrait.title.setIntrinsic(orderId);\n      orderTrait.nodeUri.setIntrinsic(\"/order/\" + orderId);\n      // Insert the portal (board of widgets) into the order entity\n      orderTrait.portal.insertModel();\n    },\n    compareTraits(a: OrderEntityTrait, b: OrderEntityTrait): number {\n      // Sort the order navigation alphabetically\n      return Strings.compare(a.title.value, b.title.value);\n    },\n  })\n  override readonly entities!: TraitModelSet<this, OrderEntityTrait> & RelationTrait<OrderEntityTrait>[\"entities\"] & Observes<OrderEntityTrait>;\n\n  // Open a downlink to the backend to get the map of orders, we can use this to create the navigation list\n  // The nodeUri of the downlink is inferred from the parent (the customer)\n  @MapDownlink({\n    laneUri: \"orders\",\n    keyForm: Uri.form(),\n    consumed: true,\n    didUpdate(nodeUri: Uri, status: Value): void {\n      // If there is a new order then insert it into the relation/navigation\n      let orderTrait = this.owner.entities.get(nodeUri.pathName);\n      if (orderTrait === null) {\n        orderTrait = this.owner.entities.createTrait(nodeUri.pathName);\n        orderTrait.nodeUri.set(nodeUri);\n        this.owner.entities.addTrait(orderTrait);\n      }\n    },\n    didRemove(nodeUri: Uri, status: Value): void {\n      // When an order is removed in the backend, remove it from the navigation/relation\n      this.owner.removeChild(nodeUri.pathName);\n    }\n  })\n  readonly orders!: MapDownlink<this, Uri, Value>;\n}","export enum OrderType {\n  OrderA = \"A\",\n  OrderB = \"B\",\n  OrderC = \"C\",\n  Unknown = \"Unknown\",\n}\n\nexport enum OrderStatus {\n  orderPlaced = 'orderPlaced',\n  orderProcessed = 'orderProcessed',\n  readyForPickup = 'readyForPickup',\n  pickupCompleted = 'pickupCompleted',\n}\n\nexport type StoreStatus = Record<OrderStatus, Record<OrderType | 'total', { count: number, value: number}>>;\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Property} from \"@swim/component\";\nimport {Value} from \"@swim/structure\";\nimport {MapDownlink} from \"@swim/client\";\nimport {Feel, Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {CellView, LeafView, RowView} from \"@swim/table\";\nimport {TextCellView} from \"@swim/table\";\nimport { Uri } from \"@swim/uri\";\nimport {TimeSeriesController} from \"@swim/widget\";\nimport { OrderStatus, OrderType } from \"../../types\";\nimport { Status } from \"@swim/domain\";\n\n/** @public */\nexport class OrderController extends TimeSeriesController {\n    readonly eventKey: OrderStatus;\n\n    constructor(nodeUri: string, orderStatus: OrderStatus) {\n        super();\n        this.setKey(nodeUri);\n        this.eventKey = orderStatus;\n        this.updateOrderDownlink.setNodeUri(nodeUri);\n        this.updateOrderDownlink.open();\n    }\n\n    @ViewRef({\n        viewType: RowView,\n        initView(rowView: RowView): void {\n            const that = this;\n            const handleClick = function(orderId: string) {\n                return function() {\n                    that.owner.updateOrder(orderId);\n                }\n            };\n            \n            rowView.set({\n                style: {\n                    cursor: 'pointer',\n                },\n            });\n            rowView.addEventListener('click', handleClick(this.owner.key!));\n        }\n    })\n    override readonly row!: ViewRef<this, RowView>;\n\n    @ViewRef({\n        viewType: LeafView,\n        extends: true,\n        initView(leafView: LeafView): void {\n            leafView.node.addEventListener('mouseenter', () => {\n                // console.log('mouseenter');\n                this.owner.leaf.attachView().highlight.set(true);\n            });\n            leafView.node.addEventListener('mouseleave', () => {\n                // console.log('mouseleave');\n                this.owner.leaf.attachView().highlight.set(false);\n            });\n            return;\n        }\n    })\n    override readonly leaf!: ViewRef<this, LeafView>;\n\n    @ViewRef({\n        viewType: CellView,\n        viewKey: \"customer\",\n        get parentView(): View | null {\n            return this.owner.leaf.insertView();\n        },\n        createView(): CellView {\n            return TextCellView.create().set({\n                style: {\n                    color: Look.accentColor,\n                }\n            });\n        },\n    })\n    readonly customerCell!: ViewRef<this, CellView>;\n\n    @ViewRef({\n        viewType: CellView,\n        viewKey: \"order\",\n        get parentView(): View | null {\n            return this.owner.leaf.insertView();\n        },\n        createView(): CellView {\n            return TextCellView.create().set({\n                style: {\n                    color: Look.accentColor,\n                }\n            });\n        },\n    })\n    readonly orderCell!: ViewRef<this, CellView>;\n\n    @ViewRef({\n        viewType: CellView,\n        viewKey: \"timeInProcessing\",\n        get parentView(): View | null {\n            return this.owner.leaf.insertView();\n        },\n        createView(): CellView {\n            return TextCellView.create().set({\n                style: {\n                    color: Look.accentColor,\n                }\n            });\n        },\n    })\n    readonly timeInProcessingCell!: ViewRef<this, CellView>;\n\n    @Property({\n        valueType: Value,\n        value: Value.absent(),\n        didSetValue(value: Value): void {\n\n        let moodStatus = OrderController.orderStatusMood.get(this.owner.eventKey);\n\n        // update content and mood of customerCell\n        const customerCellView = this.owner.customerCell.view as TextCellView | null;\n        if (customerCellView !== null) {\n            customerCellView.set({\n                content: '/' + value.get('customerId').stringValue(),\n                classList: ['customer-cell-view'],\n            });\n            customerCellView.modifyMood(Feel.default, moodStatus!.moodModifier);\n        }\n\n        // update content and mood of orderCell\n        const orderCellView = this.owner.orderCell.view as TextCellView | null;\n        if (orderCellView !== null) {\n            let orderType: OrderType = OrderType.Unknown;\n            if (value.get(\"products\").get(\"A\").numberValue() ?? 0) {\n            orderType = OrderType.OrderA;\n            } else if (value.get(\"products\").get(\"B\").numberValue() ?? 0) {\n            orderType = OrderType.OrderB;\n            } else if (value.get(\"products\").get(\"C\").numberValue() ?? 0) {\n            orderType = OrderType.OrderC;\n            }\n            orderCellView.content.set(`Order ${orderType}`);\n            orderCellView.set({\n                classList: ['order-cell-view'],\n            });\n            orderCellView.modifyMood(Feel.default, moodStatus!.moodModifier);\n        }\n\n        // update content and mood of timeInProcessingCell\n        const timeInProcessingCellView = this.owner.timeInProcessingCell.view as TextCellView | null;\n        if (timeInProcessingCellView !== null) {\n            timeInProcessingCellView.content.set(new Date(value.get('timestamp').numberValue() ?? 0).toString());\n            timeInProcessingCellView.set({\n                classList: ['time-in-processing-cell-view'],\n            });\n            timeInProcessingCellView.modifyMood(Feel.default, moodStatus!.moodModifier);\n        }\n        },\n    })\n    readonly stats!: Property<this, Value>;\n\n    protected updateOrder(orderId: string): void {\n        const idx = OrderController.orderStatusProgression.indexOf(this.eventKey);\n        const newStatus = OrderController.orderStatusProgression[idx + 1];\n\n        if (!this.updateOrderDownlink.opened) {\n            this.updateOrderDownlink.open();\n        }\n        this.updateOrderDownlink.command(`{status:${newStatus}}`);\n    }\n    \n    @MapDownlink({\n        hostUri: 'warp://localhost:9001',\n        laneUri: \"updateOrder\",\n        consumed: true,\n        keyForm: Uri.form(),\n    })\n    readonly updateOrderDownlink!: MapDownlink<this, Uri, Value>;\n\n    private static orderStatusProgression: OrderStatus[] = [\n        OrderStatus.orderPlaced,\n        OrderStatus.orderProcessed,\n        OrderStatus.readyForPickup,\n        OrderStatus.pickupCompleted,\n    ];\n\n\n    private static orderStatusMood: Map<OrderStatus, Status> = new Map<OrderStatus, Status>(\n        [\n          [OrderStatus.orderPlaced, Status.improving(0, 1, 2, 3, 4)(1.4)],\n          [OrderStatus.orderProcessed, Status.improving(0, 1, 2, 3, 4)(2)],\n          [OrderStatus.readyForPickup, Status.improving(0, 1, 2, 3, 4)(3)],\n          [OrderStatus.pickupCompleted, Status.unknown()],\n        ]\n    );\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport type {Mapping} from \"@swim/util\";\nimport type {Value} from \"@swim/structure\";\nimport {ValueDownlink} from \"@swim/client\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport type {PanelView} from \"@swim/panel\";\nimport {TimePieController} from \"@swim/widget\";\nimport {Status} from \"@swim/domain\";\nimport { OrderStatus, OrderType } from \"../../types\";\nimport { ViewRef } from \"@swim/view\";\nimport { PieView, SliceView } from \"@swim/pie\";\nimport { Feel, Look } from \"@swim/theme\";\nimport { HtmlView } from \"@swim/dom\";\nimport { StoreStatus } from \"../../types\";\nimport { OrderListController } from \"./OrderListController\";\n\n/** @public */\nexport class OrderStatusPieController extends TimePieController {\n\n  readonly orderStatus: OrderStatus;\n  readonly headerTitle: string;\n\n  constructor(orderStatus: OrderStatus, headerTitle: string) {\n    super();\n    this.orderStatus = orderStatus;\n    this.headerTitle = headerTitle;\n\n    // open downlink\n    window.setTimeout(() => {\n      this.statusDownlink.setNodeUri(this.nodeUri.value?.stringValue ?? '');\n      this.statusDownlink.open();\n    }, 300);\n  }\n\n  @TraitViewRef({\n    extends: true,\n    initView(panelView: PanelView): void {\n      super.initView(panelView);\n      panelView.set({\n        headerTitle: this.owner.headerTitle,\n        // headerSubtitle: `headerSubtitle: ${this.owner.orderStatus}`,\n      });\n\n      this.owner.piePanel.insertView().setIntrinsic({\n        unitHeight: 1,\n        style: {\n          marginTop: 24,\n          marginBottom: 24,\n        },\n      });\n      this.owner.pie.insertView();\n      this.owner.totalMonetaryValue.insertView(panelView);\n    },\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & TimePieController[\"panel\"];\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: \"totalMonetaryValue\",\n    extends: true,\n    createView(): HtmlView {\n      const el = document.createElement('h2');\n      el.innerText = '33%';\n      const htmlView = HtmlView.fromNode(el).set({\n        style: {\n          position: 'absolute',\n          top: '50%',\n          left: '50%',\n          margin: 0,\n          transform: 'translate(-50%, -50%)',\n          font: 'sans-serif',\n          fontSize: '16px',\n          fontWeight: '500',\n          textAlign: 'center',\n          color: '#CCCCCC'\n        },\n        classList: ['total-monetary-value'],\n      });\n      return htmlView;\n    }\n  })\n  readonly totalMonetaryValue!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: SliceView,\n    viewKey: OrderStatus.orderPlaced,\n    extends: true,\n    initView(sliceView: SliceView): void {\n      sliceView.set({\n        sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderA),\n        font: \"14px sans-serif\",\n        textColor: Look.backgroundColor,\n        innerRadius: 30,\n        outerRadius: 80,\n        value: 1 / 3,\n        legend: \"A\",\n      });\n      sliceView.modifyMood(Feel.default, Status.Normal!.moodModifier);\n      sliceView.legend.attachView().modifyMood(Feel.default, [[Feel.selected, 2]]);\n    }\n  })\n  readonly aSlice!: ViewRef<this, SliceView>;\n\n  @ViewRef({\n    viewType: SliceView,\n    viewKey: OrderStatus.orderProcessed,\n    extends: true,\n    initView(sliceView: SliceView): void {\n      sliceView.set({\n        sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderB),\n        font: \"14px sans-serif\",\n        textColor: Look.backgroundColor,\n        innerRadius: 30,\n        outerRadius: 80,\n        value: 1 / 3,\n        legend: \"B\",\n      });\n      sliceView.modifyMood(Feel.default, Status.Warning!.moodModifier);\n      sliceView.legend.attachView().modifyMood(Feel.default, [[Feel.selected, 2]]);\n    }\n  })\n  readonly bSlice!: ViewRef<this, SliceView>;\n\n  @ViewRef({\n    viewType: SliceView,\n    viewKey: OrderStatus.readyForPickup,\n    extends: true,\n    initView(sliceView: SliceView): void {\n      sliceView.set({\n        sliceColor: OrderStatusPieController.sliceColors.get(OrderType.OrderC),\n        font: \"14px sans-serif\",\n        textColor: Look.backgroundColor,\n        innerRadius: 30,\n        outerRadius: 80,\n        value: 1 / 3,\n        legend: \"C\",\n      });\n      sliceView.modifyMood(Feel.default, Status.Unknown!.moodModifier);\n      sliceView.legend.attachView().modifyMood(Feel.default, [[Feel.selected, 2]]);\n    }\n  })\n  readonly cSlice!: ViewRef<this, SliceView>;\n\n  @ViewRef({\n    viewType: PieView,\n    viewKey: 'pie',\n    extends: true,\n    initView(pieView: PieView): void {\n      this.owner.aSlice.insertView(pieView);\n      this.owner.bSlice.insertView(pieView);\n      this.owner.cSlice.insertView(pieView);\n    }\n  })\n  override readonly pie!: ViewRef<this, PieView>;\n\n  @ValueDownlink({\n    hostUri: 'warp://localhost:9001',\n    laneUri: 'status',\n    consumed: true,\n    didSet(value: Value): void {\n      const storeStatus = OrderListController.parseStoreStatus(value);\n      // if (this.owner.orderStatus === OrderStatus.orderProcessed) {\n      //   console.log('storeStatus: ', storeStatus);\n      // }\n      \n      this.owner.updateSlice(storeStatus, this.owner.aSlice, OrderType.OrderA);\n      this.owner.updateSlice(storeStatus, this.owner.bSlice, OrderType.OrderB);\n      this.owner.updateSlice(storeStatus, this.owner.cSlice, OrderType.OrderC);\n\n      const totalValue = storeStatus[this.owner.orderStatus].total.value;\n      this.owner.totalMonetaryValue.view!.node.innerText = totalValue ? `$${totalValue}` : this.owner.getEmptyStateText();\n    }\n  })\n  readonly statusDownlink!: ValueDownlink<this>;\n\n  private getEmptyStateText(): string {\n    if (this.orderStatus === OrderStatus.orderPlaced) {\n      return 'No new orders';\n    } else if (this.orderStatus === OrderStatus.orderProcessed) {\n      return 'No orders being processed';\n    } else {\n      return 'No orders ready for pickup';\n    }\n  };\n\n  private updateSlice(storeStatus: StoreStatus, slice: ViewRef<this, SliceView>, type: OrderType) {\n    const value = storeStatus[this.orderStatus][type].value;\n    const label = `$${storeStatus[this.orderStatus][type].value}`;\n    if (!value) {\n      slice.removeView();\n    } else {\n      slice.insertView(this.pie.attachView()).set({\n        value,\n        label: value / storeStatus[this.orderStatus].total.value > 0.2 ? label : '',\n      });\n    }\n  };\n\n  static readonly alertStatus: Mapping<number, Status> = Status.improving(0, 2.5, 3.5, 4.5, 5);\n\n  static readonly sliceColors: Map<OrderType, string> = new Map<OrderType, string>(\n    [\n      [OrderType.OrderA, '#5CA0E7'],\n      [OrderType.OrderB, '#A40E4C'],\n      [OrderType.OrderC, '#5A945E'],\n    ]\n  )\n}\n","import { TimeSeriesController, TimeTableController } from \"@swim/widget\";\nimport { OrderStatus, OrderType, StoreStatus } from \"../../types\";\nimport { Property } from \"@swim/component\";\nimport { DateTime, TimeZone } from \"@swim/time\";\nimport { DataPointView, LinePlotView, SeriesPlotView } from \"@swim/chart\";\nimport { Look } from \"@swim/theme\";\nimport { View, ViewRef } from \"@swim/view\";\nimport { Observes } from \"@swim/util\";\nimport { OrderStatusPieController } from \"./OrderStatusPieController\";\n\nexport class OrderTypeChartController extends TimeSeriesController {\n  readonly orderStatus: OrderStatus;\n  readonly orderType: OrderType;\n\n  constructor(orderStatus: OrderStatus, orderType: OrderType) {\n    super();\n    this.orderStatus = orderStatus;\n    this.orderType = orderType;\n\n    if (this.orderStatus === OrderStatus.orderPlaced) {\n      // console.log('constructor of OrderTypeChartController');\n    }\n  }\n\n  @ViewRef({\n    viewType: SeriesPlotView<DateTime, Number>,\n    extends: true,\n    get parentView(): View {\n      const parent = (this.owner.parent as TimeTableController).graph.attachView();\n      return parent;\n    },\n    createView(): SeriesPlotView<DateTime, number> {\n      return LinePlotView.create() as LinePlotView<DateTime, number>;\n    },\n    initView(seriesPlotView: SeriesPlotView<DateTime, number>): void {\n      super.initView(seriesPlotView);\n      seriesPlotView.setKey(this.owner.orderType);\n    }\n  })\n  override readonly plot!: ViewRef<this, SeriesPlotView<DateTime, number>> & TimeSeriesController['plot'];\n\n  @Property({\n    valueType: Number,\n    value: 0,\n    extends: true,\n    getNextTimestamp(): number {\n      let currentTimestamp = this.value.valueOf();\n      this.setValue(currentTimestamp + 1);\n      return currentTimestamp;\n    },\n  })\n  readonly fakeTimestamp!: Property<this, Number> & { getNextTimestamp: () => number };\n\n  stats(storeStatus: StoreStatus): void {\n    const timestamp = this.fakeTimestamp.getNextTimestamp();\n    const t = new DateTime(timestamp * 1000, TimeZone.local());\n    const dataPointKey = \"\" + t.time;\n    \n    const plotView = this.plot.attachView();\n    const value = storeStatus[this.orderStatus][this.orderType].value;\n    let dataPointView = plotView.getChild(\n      dataPointKey,\n      DataPointView\n    ) as DataPointView<DateTime, number>;\n    if (this.orderStatus === OrderStatus.orderPlaced) {\n      // console.log('plotView: ', plotView);\n      // console.log('plotView.parent: ', plotView.parent);\n      // console.log(`New data point for ${this.orderType.toUpperCase()}. TIME is ${timestamp}. VALUE is ${value}.`);\n    }\n    if (dataPointView === null) {\n      dataPointView = new DataPointView<DateTime, number>().set({\n        x: t,\n        y: value,\n        color: OrderStatusPieController.sliceColors.get(this.orderType),\n      });\n      // dataPointView.modifyMood(Feel.default, alertStatus.moodModifier);\n      plotView.dataPoints.insertView(null, dataPointView, null, \"\" + t.time);\n      if (this.orderStatus === OrderStatus.orderPlaced) {\n        // console.log(`Inserted new DataPointView in controller. Controller now has ${plotView.dataPoints.viewCount} datapoints`);\n      }\n\n    } else {\n      const timing = dataPointView.getLookOr(Look.timing, true);\n      dataPointView.y.set(value, timing);\n\n      if (this.orderStatus === OrderStatus.orderPlaced) {\n        // console.log(`Updated existing DataPointView in controller. Controller now has ${plotView.dataPoints.viewCount} datapoints`);\n      }\n      // dataPointView.modifyMood(\n      //   Feel.default,\n      //   alertStatus.moodModifier,\n      //   timing\n      // );\n    }\n  }\n}\n","import { TraitViewRef } from \"@swim/controller\";\nimport { PanelController, PanelView } from \"@swim/panel\";\nimport { TimeTableController } from \"@swim/widget\";\nimport { CumulativeOrdersPanelController } from \"./CumulativeOrdersPanelController\";\nimport { OrderType } from \"../../types\";\nimport { Trait } from \"@swim/model\";\n\nexport class CumulativeOrdersSectionController extends TimeTableController {\n  constructor() {\n    super();\n  }\n\n  @TraitViewRef({\n    extends: true,\n    initView(rootPanelView: PanelView): void {\n      rootPanelView.set({\n        style: {\n          paddingTop: '16px',\n        }\n      });\n\n      const cumulativeOrdersAController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderA), `CumulativeOrders${OrderType.OrderA}`);\n      cumulativeOrdersAController.panel.insertView(rootPanelView).set({\n        unitWidth: 1 / 2,\n        unitHeight: 1 / 2,\n        style: {\n          margin: 0\n        }\n      });\n\n      const cumulativeOrdersBController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderB), `CumulativeOrders${OrderType.OrderB}`);\n      cumulativeOrdersBController.panel.insertView(rootPanelView).set({\n        unitWidth: 1 / 2,\n        unitHeight: 1 / 2,\n        style: {\n          margin: 0\n        }\n      });\n\n      const cumulativeOrdersCController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.OrderC), `CumulativeOrders${OrderType.OrderC}`);\n      cumulativeOrdersCController.panel.insertView(rootPanelView).set({\n        unitWidth: 1 / 2,\n        unitHeight: 1 / 2,\n        style: {\n          margin: 0\n        }\n      });\n\n      const cumulativeOrdersTotalController = this.owner.appendChild(new CumulativeOrdersPanelController(OrderType.Unknown, true), `CumulativeOrdersTotal`);\n      cumulativeOrdersTotalController.panel.insertView(rootPanelView).set({\n        unitWidth: 1 / 2,\n        unitHeight: 1 / 2,\n        style: {\n          margin: 0\n        }\n      });\n    }\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & TimeTableController['panel'];\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport { PanelView } from \"@swim/panel\";\nimport { TimeTableController} from \"@swim/widget\";\nimport {View, ViewRef} from \"@swim/view\";\nimport { MapDownlink, ValueDownlink } from \"@swim/client\";\nimport { Value } from \"@swim/structure\";\nimport { TraitViewRef } from \"@swim/controller\";\nimport { Trait } from \"@swim/model\";\nimport { ColView, HeaderView, TextColView } from \"@swim/table\";\nimport { ColLayout, TableLayout, TableView } from \"@swim/table\";\nimport { Uri } from \"@swim/uri\";\nimport { Length } from \"@swim/math\";\nimport { Look } from \"@swim/theme\";\nimport { OrderController } from \"./OrderController\";\nimport { OrderStatus, OrderType, StoreStatus } from \"../../types\";\nimport { Color } from \"@swim/style\";\nimport { OrderTypeChartController } from \"./OrderTypeChartController\";\nimport { CumulativeOrdersSectionController } from \"./CumulativeOrdersSectionController\";\nimport { ChartView } from \"@swim/chart\";\nimport { DateTime } from \"@swim/time\";\nimport { Observes } from \"@swim/util\";\n\n/** @public */\nexport class OrderListController extends TimeTableController {\n\n  readonly eventKey: OrderStatus;\n\n  constructor(key: OrderStatus) {\n    super();\n    this.setKey(`orderListController-${key}`);\n    this.eventKey = key;\n  }\n\n  @TraitViewRef({\n    extends: true,\n    initView(panelView: PanelView): void {\n      super.initView(panelView);\n\n      // chart stuff first\n      this.owner.chartPanel.attachView();\n      this.owner.chart.insertView();\n      const graphView = this.owner.graph.insertView();\n      // add some classes\n      this.owner.chartCanvas.view?.classList.add('olc-chart-canvas');\n      // add an OrderTypeChartController for each OrderType to this.series\n      const orderTypeChartControllerA = this.owner.series.addController(\n        new OrderTypeChartController(this.owner.eventKey, OrderType.OrderA),\n        null,\n        OrderType.OrderA\n      );\n      orderTypeChartControllerA.plot.insertView(graphView, void 0, void 0, OrderType.OrderA);\n\n      const orderTypeChartControllerB = this.owner.series.addController(\n        new OrderTypeChartController(this.owner.eventKey, OrderType.OrderB),\n        null,\n        OrderType.OrderB\n      );\n      orderTypeChartControllerB.plot.insertView(graphView, void 0, void 0, OrderType.OrderB);\n\n      const orderTypeChartControllerC = this.owner.series.addController(\n        new OrderTypeChartController(this.owner.eventKey, OrderType.OrderC),\n        null,\n        OrderType.OrderC\n      );\n      orderTypeChartControllerC.plot.insertView(graphView, void 0, void 0, OrderType.OrderC);\n\n      // then table stuff\n      const tablePanel = this.owner.tablePanel.insertView().set({\n        unitWidth: 1,\n        unitHeight: (this.owner.eventKey === OrderStatus.readyForPickup ? 3 : 5) / 6,\n        minFrameHeight: 0,\n        minFrameWidth: 0,\n        style: {\n          margin: 0,\n        }\n      });\n      tablePanel.classList.add('olc-table-panel');\n      this.owner.table.insertView();  // Insert the table when we insert this panel\n      this.owner.header.insertView();  // Insert the table's header when we insert this panel\n\n      // conditionally insert CumulativeOrdersSectionController\n      if (this.owner.eventKey === OrderStatus.readyForPickup) {\n        const cumulativeOrdersSectionController = this.owner.appendChild(new CumulativeOrdersSectionController());\n        cumulativeOrdersSectionController.panel.insertView(this.owner.panel.attachView()).set({\n          unitWidth: 1,\n          unitHeight: 2 / 6,\n          style: {\n            margin: 0,\n          },\n        });\n      }\n\n      // open downlink\n      window.setTimeout(() => {\n        this.owner.statusDownlink.setNodeUri(this.owner.nodeUri.value?.stringValue ?? '');\n        this.owner.statusDownlink.open();\n      }, 300);\n    },\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & TimeTableController[\"panel\"];\n\n  @ViewRef({\n    viewType: PanelView,\n    extends: true,\n    initView(chartPanelView): void {\n      chartPanelView.set({\n        unitWidth: 1,\n        unitHeight: 1 / 6,\n        minFrameHeight: 200,\n        minFrameWidth: 0,\n        style: {\n          margin: 0,\n        },\n        classList: ['olc-chart-panel'],\n      });\n    }\n  })\n  override readonly chartPanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: ChartView,\n    extends: true,\n    initView(chartView: ChartView<DateTime, number>): void {\n      chartView.setIntrinsic({\n        gutterTop: 0,\n        gutterRight: 12,\n        gutterBottom: 12,\n        gutterLeft: 18,\n      });\n    }\n  })\n  override readonly chart!: ViewRef<this, ChartView<DateTime, number>> & Observes<ChartView<DateTime, number>>;\n\n  @ViewRef({\n    extends: true,\n    createView(): HeaderView {\n      const headerView = super.createView() as HeaderView;\n      this.owner.customerCol.insertView(headerView);\n      this.owner.orderCol.insertView(headerView);\n      this.owner.timeInProcessingCol.insertView(headerView);\n      return headerView;\n    },\n  })\n  override readonly header!: ViewRef<this, HeaderView> & TimeTableController[\"header\"];\n\n  @ViewRef({\n    extends: true,\n    createLayout(): TableLayout {\n      const cols = new Array<ColLayout>();\n      cols.push(ColLayout.create(\"customer\", 1, 1, 0, false, false, Look.accentColor));\n      cols.push(ColLayout.create(\"order\", 1, 0, 0, false, false, Look.accentColor));\n      cols.push(ColLayout.create(\"timeInProcessing\", 0, 0, '124px', false, false, Look.accentColor));\n      return new TableLayout(null, null, null, Length.px(12), cols);\n    },\n  })\n  override readonly table!: ViewRef<this, TableView> & TimeTableController[\"table\"];\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"customer\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().set({\n        label: \"Customer\",\n      });\n    },\n  })\n  readonly customerCol!: ViewRef<this, ColView>;\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"order\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().set({\n        label: \"Order\",\n      });\n    },\n  })\n  readonly orderCol!: ViewRef<this, ColView>;\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"timeInProcessing\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().set({\n        label: \"Time In Processing\",\n      });\n    },\n  })\n  readonly timeInProcessingCol!: ViewRef<this, ColView>;\n\n  @MapDownlink({\n    laneUri: \"orders\",\n    keyForm: Uri.form(),\n    consumed: true,\n    didUpdate(nodeUri: Uri, value: Value): void {\n      let orderController = this.owner.getChild(nodeUri.pathName, OrderController);\n      let orderStatus = value.get(\"status\").stringValue(\"\");\n      \n      if (orderController === null && this.owner.eventKey === orderStatus) {\n        // create new OrderController (row in list)\n        orderController = new OrderController(nodeUri.toString(), this.owner.eventKey);\n\n        // insert leaf of OrderController (row)\n        orderController.leaf.insertView().set({\n          style: {\n            cursor: 'pointer',\n          }\n        });\n\n        // insert cells into row\n        orderController.customerCell.insertView();\n        orderController.orderCell.insertView();\n        orderController.timeInProcessingCell.insertView();\n\n        // call .stats() method on controller to populate cells\n        orderController.stats.set(value);\n\n        // add newly created controller this this.series ControllerSet\n        this.owner.series.addController(orderController, null, nodeUri.pathName);\n      }\n      \n      // remove orderController if its status does not fit this column anymore\n      if (orderController !== null && this.owner.eventKey !== orderStatus) {\n        this.owner.removeChild(nodeUri.pathName);\n      }\n    },\n      didRemove(nodeUri: Uri) {\n        // When an order is removed in the backend, remove it from the list\n        this.owner.removeChild(nodeUri.pathName);\n      }\n  })\n  readonly orderDownlink!: MapDownlink<this, Uri, Value>;\n\n  @ValueDownlink({\n    hostUri: 'warp://localhost:9001',\n    laneUri: 'status',\n    consumed: true,\n    didSet(value: Value): void {\n      const storeStatus = OrderListController.parseStoreStatus(value);\n      // if (this.owner.eventKey === OrderStatus.orderProcessed) {\n      //   console.log('storeStatus in OrderListController: ', storeStatus);\n      // }\n     \n      // get orderTypeChartController out of this.owner.children or this.series.controllers\n      [OrderType.OrderA, OrderType.OrderB, OrderType.OrderC].forEach(t => {\n        const orderTypeChartController = this.owner.getChild(t, OrderTypeChartController);\n        if (orderTypeChartController !== null) {\n          // call .stats() on typeChartController\n          orderTypeChartController.stats(storeStatus);\n        } else {\n          console.log('orderTypeChartController is null for some reason!');\n        }\n      })\n    }\n  })\n  readonly statusDownlink!: ValueDownlink<this>;\n\n  static parseStoreStatus(v: Value): StoreStatus {\n    return [OrderStatus.orderPlaced, OrderStatus.orderProcessed, OrderStatus.readyForPickup, OrderStatus.pickupCompleted].reduce((acc, s) => {\n      [OrderType.OrderA, OrderType.OrderB, OrderType.OrderC].forEach(t => {\n        let count = v.get(s).get(t).numberValue(0);\n        let value = count * OrderListController.valuePerOrderType[t];\n        if (!acc[s]) { acc[s] = { total: { count: 0, value: 0 } } as StoreStatus[OrderStatus]; }\n        acc[s][t] = { count, value };\n        acc[s].total.count += count;\n        acc[s].total.value += value;\n      });\n      return acc;\n    }, {} as StoreStatus);\n  };\n\n  private static valuePerOrderType: Record<OrderType, number> = {\n    [OrderType.OrderA]: 10,\n    [OrderType.OrderB]: 20,\n    [OrderType.OrderC]: 30,\n    [OrderType.Unknown]: 0,\n  };\n\n  private static plotStrokes: Record<OrderType, Color> = {\n    [OrderType.OrderA]: Color.parse('#00EE11'),\n    [OrderType.OrderB]: Color.parse('#DD2200'),\n    [OrderType.OrderC]: Color.parse('#0000FF'),\n    [OrderType.Unknown]: Color.parse('#FFFFFF'),\n  }\n}\n","import { HtmlView } from \"@swim/dom\";\nimport { PanelController } from \"@swim/panel\"\nimport { ViewRef } from \"@swim/view\";\nimport { OrderStatus, OrderType } from \"../../types\";\nimport { ValueDownlink } from \"@swim/client\";\nimport { StoreStatus } from \"../../types\";\nimport { Value } from \"@swim/structure\";\nimport { OrderListController } from \"./OrderListController\";\n\nexport class CumulativeOrdersPanelController extends PanelController {\n  readonly orderType: OrderType;\n  readonly isCumulative: boolean;\n\n  constructor(orderType: OrderType, isCumulative: boolean = false) {\n    super();\n    this.orderType = orderType;\n    this.isCumulative = isCumulative;\n    window.setTimeout(() => {\n      this.statusDownlink.setNodeUri(this.nodeUri.value?.stringValue ?? '');\n      this.statusDownlink.open();\n    }, 300);\n    this.initView();\n  }\n\n  private initView(): void {\n    const panelView = this.panel.insertView().set({\n      minPanelHeight: 106,\n      style: {\n        backgroundColor: '#212121',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        alignItems: 'flex-start',\n        paddingTop: '0px',\n        paddingLeft: '16px',\n        paddingBottom: '16px',\n        paddingRight: '16px',\n      }\n    });\n    this.header.insertView(panelView);\n    this.count.insertView(panelView);\n    this.value.insertView(panelView);\n  }\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: 'header',\n    extends: true,\n    createView(): HtmlView {\n      const el = document.createElement('h2');\n      el.innerText = `Processed ${this.owner.isCumulative ? 'All' : this.owner.orderType} Orders`;\n      return HtmlView.fromNode(el).set({\n        style: {\n          fontFamily: 'sans-serif',\n          fontSize: '16px',\n          fontWeight: '400',\n          textAlign: 'center',\n          margin: 0,\n          marginBottom: '16px',\n          color: '#CCCCCC',\n        }\n      })\n    }\n  })\n  readonly header!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: 'count',\n    extends: true,\n    createView(): HtmlView {\n      const el = document.createElement('p');\n      el.innerText = `Count: 0`;\n      return HtmlView.fromNode(el).set({\n        style: {\n          margin: 0,\n          marginBottom: '4px',\n          fontFamily: 'sans-serif',\n          fontSize: '14px',\n          fontWeight: '400',\n          textAlign: 'center', \n          whiteSpace: 'nowrap',\n          color: '#CCCCCC',\n        }\n      })\n    }\n  })\n  readonly count!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: 'value',\n    extends: true,\n    createView(): HtmlView {\n      const el = document.createElement('p');\n      el.innerText = `Value: $0.00`;\n      return HtmlView.fromNode(el).set({\n        style: {\n          margin: '0px',\n          fontFamily: 'sans-serif',\n          fontSize: '14px',\n          fontWeight: '400',\n          textAlign: 'center',\n          whiteSpace: 'nowrap',\n          color: '#CCCCCC',\n        }\n      })\n    }\n  })\n  readonly value!: ViewRef<this, HtmlView>;\n\n  @ValueDownlink({\n    hostUri: 'warp://localhost:9001',\n    laneUri: 'status',\n    consumed: true,\n    didSet(value: Value): void {\n      const storeStatus = OrderListController.parseStoreStatus(value);\n\n      if (this.owner.orderType !== OrderType.Unknown) {\n        const readyCount = storeStatus[OrderStatus.readyForPickup][this.owner.orderType].count;\n        const pickedUpCount = storeStatus[OrderStatus.pickupCompleted][this.owner.orderType].count;\n        this.owner.count.attachView().node.innerText = `Count: ${readyCount + pickedUpCount}`;\n\n        const readyValue = storeStatus[OrderStatus.readyForPickup][this.owner.orderType].value;\n        const pickedUpValue = storeStatus[OrderStatus.pickupCompleted][this.owner.orderType].value;\n        this.owner.value.attachView().node.innerText = `Value: $${readyValue + pickedUpValue}.00`;\n      } else {\n        const totalCount = storeStatus[OrderStatus.readyForPickup].total.count + storeStatus[OrderStatus.pickupCompleted].total.count;\n        this.owner.count.attachView().node.innerText = `Count: ${totalCount}`;\n        \n        const totalValue = storeStatus[OrderStatus.readyForPickup].total.value + storeStatus[OrderStatus.pickupCompleted].total.value;\n        this.owner.value.attachView().node.innerText = `Value: $${totalValue}.00`;\n      }\n    }\n  })\n  readonly statusDownlink!: ValueDownlink<this>;\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Trait, TraitRef} from \"@swim/model\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {PanelView, BoardView, BoardController, PanelController} from \"@swim/panel\";\nimport {EntityTrait} from \"@swim/domain\";\nimport { OrderListController } from \"..\";\nimport { OrderStatus } from \"../../types\";\nimport { OrderStatusPieController } from \"./OrderStatusPieController\";\n\n/** @public */\nexport class OrderKanbanBoardController extends BoardController {\n  constructor() {\n    super();\n    this.initBoard();\n  }\n\n  protected initBoard(): void {\n    const boardView = this.sheet.attachView();\n    const rootPanelView = boardView.appendChild(PanelView).style.set({\n      margin: 6,\n    });\n\n    // The order kanban board consists of 3 lists of orders (the same except they have different statuses)\n    // Each panel takes up the full height of the sheet and 1/3 of the width\n    // We insert each widget by inserting each controller's 'panel'\n\n    const orderPlacedPanelController = this.appendChild(new PanelController(), `Panel${OrderStatus.orderPlaced}`)\n    const orderPlacedPanelView = orderPlacedPanelController.panel.insertView(rootPanelView).set({\n      unitWidth: 1 / 3,\n      unitHeight: 1,\n      style: {\n        margin: 6,\n      },\n    });\n\n    const orderPlacedPieController = orderPlacedPanelController.appendChild(new OrderStatusPieController(OrderStatus.orderPlaced, \"New Orders\"), `Pie${OrderStatus.orderPlaced}`);\n    orderPlacedPieController.panel.insertView(orderPlacedPanelView).set({\n      unitWidth: 1,\n      unitHeight: 1 / 3,\n      style: {\n        margin: 0,\n      }\n    });\n\n    const orderPlacedListController = orderPlacedPanelController.appendChild(new OrderListController(OrderStatus.orderPlaced), `List${OrderStatus.orderPlaced}`);\n    orderPlacedListController.panel.insertView(orderPlacedPanelView).set({\n      unitWidth: 1,\n      unitHeight: 2 / 3,\n      style: {\n        margin: 0\n      }\n    });\n\n    const orderProcessedPanelController = this.appendChild(new PanelController(), `Panel${OrderStatus.orderProcessed}`)\n    const orderProcessedPanelView = orderProcessedPanelController.panel.insertView(rootPanelView).set({\n      unitWidth: 1 / 3,\n      unitHeight: 1,\n      style: {\n        margin: 6,\n      },\n    });\n\n    const orderProcessedPieController = orderProcessedPanelController.appendChild(new OrderStatusPieController(OrderStatus.orderProcessed, \"Processing\"), `Pie${OrderStatus.orderProcessed}`);\n    orderProcessedPieController.panel.insertView(orderProcessedPanelView).set({\n      unitWidth: 1,\n      unitHeight: 1 / 3,\n      style: {\n        margin: 0,\n      }\n    });\n\n    const orderProcessedListController = orderProcessedPanelController.appendChild(new OrderListController(OrderStatus.orderProcessed), `List${OrderStatus.orderProcessed}`);\n    orderProcessedListController.panel.insertView(orderProcessedPanelView).set({\n      unitWidth: 1,\n      unitHeight: 2 / 3,\n      style: {\n        margin: 0\n      }\n    });\n\n    const orderReadyPanelController = this.appendChild(new PanelController(), `Panel${OrderStatus.readyForPickup}`)\n    const orderReadyPanelView = orderReadyPanelController.panel.insertView(rootPanelView).set({\n      unitWidth: 1 / 3,\n      unitHeight: 1,\n      style: {\n        margin: 6,\n      },\n    });\n\n    const orderReadyPieController = orderReadyPanelController.appendChild(new OrderStatusPieController(OrderStatus.readyForPickup, \"Ready Orders\"), `Pie${OrderStatus.readyForPickup}`);\n    orderReadyPieController.panel.insertView(orderReadyPanelView).set({\n      unitWidth: 1,\n      unitHeight: 1 / 3,\n      style: {\n        margin: 0,\n      }\n    });\n\n    const orderReadyListController = orderReadyPanelController.appendChild(new OrderListController(OrderStatus.readyForPickup), `List${OrderStatus.readyForPickup}`);\n    orderReadyListController.panel.insertView(orderReadyPanelView).set({\n      unitWidth: 1,\n      unitHeight: 2 / 3,\n      style: {\n        margin: 0\n      }\n    });\n  }\n\n  @TraitViewRef({\n    extends: true,\n    viewDidMount(boardView: BoardView): void {\n      this.owner.consume(boardView);\n    },\n    viewWillUnmount(boardView: BoardView): void {\n      this.owner.unconsume(boardView);\n    },\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, BoardView> & BoardController[\"sheet\"];\n\n  @TraitRef({\n    traitType: EntityTrait,\n    inherits: true,\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.hostUri.bindInlet(entityTrait.hostUri);\n      this.owner.nodeUri.bindInlet(entityTrait.nodeUri);\n    }\n  })\n  readonly entity!: TraitRef<this, EntityTrait>;\n\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {AspectTrait} from \"@swim/domain\";\nimport { OrderKanbanBoardController } from \"../order\";\n\n/** @public */\nexport class CustomerAspectTrait extends AspectTrait {\n  constructor() {\n    super();\n    this.id.setIntrinsic(\"portal\");\n    this.title.setIntrinsic(\"Portal\");\n    this.icon.setIntrinsic(CustomerAspectTrait.icon);\n  }\n\n  // Define the board controller to be used that will control all the widgets/cards the customer will have\n  // We will use the 'OrderKanbanBoard' which is 3 panels showing order status\n  override createTabController(): SheetController | null {\n    return new OrderKanbanBoardController();\n  }\n\n  // The icon to show the 'portal' (at the top - alternative to atlas)\n  @Lazy\n  static get icon(): Graphics {\n    return VectorIcon.create(24, 24, \"M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z\");\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\nimport {Class, Lazy} from \"@swim/util\";\nimport {EntityTrait, EntityTraitObserver} from \"@swim/domain\";\nimport { Model, TraitModelRef } from \"@swim/model\";\nimport { OrdersRelationTrait } from \"../order/OrdersRelationTrait\";\nimport { Graphics, PolygonIcon } from \"@swim/graphics\";\nimport { CustomerAspectTrait } from \"./CustomerAspectTrait\";\n\n/** @public */\nexport interface CustomerEntityTraitObserver<T extends CustomerEntityTrait = CustomerEntityTrait> extends EntityTraitObserver<T> {\n}\n\n/** @public */\nexport class CustomerEntityTrait extends EntityTrait {\n  constructor() {\n    super();\n    this.icon.setIntrinsic(CustomerEntityTrait.icon);\n  }\n\n  override readonly observerType?: Class<CustomerEntityTraitObserver>;\n\n  // Aspect/Portal trait showing that this entity will have a board of widgets/cards\n  @TraitModelRef({\n    modelType: Model,\n    modelKey: \"portal\",\n    traitType: CustomerAspectTrait,\n    traitKey: \"aspect\",\n  })\n  readonly portal!: TraitModelRef<this, CustomerAspectTrait>;\n\n  // Relation trait showing that this entity will have a list of orders that can be traversed to on the left\n  @TraitModelRef({\n    modelType: Model,\n    modelKey: \"orders\",\n    traitType: OrdersRelationTrait,\n    traitKey: \"relation\",\n  })\n  readonly ordersRelation!: TraitModelRef<this, OrdersRelationTrait>;\n\n  // The icon of the entity, will be used in the navigation on the left\n  @Lazy\n  static get icon(): Graphics {\n    return PolygonIcon.create(3);\n  }\n\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Strings, Observes} from \"@swim/util\";\nimport {type Value} from \"@swim/structure\";\nimport {MapDownlink} from \"@swim/client\";\nimport {TraitModelSet} from \"@swim/model\";\nimport {RelationTrait} from \"@swim/domain\";\nimport {CustomerEntityTrait} from \"./CustomerEntityTrait\";\nimport { Uri } from \"@swim/uri\";\n\n/** @public */\nexport class CustomersRelationTrait extends RelationTrait<CustomerEntityTrait> {\n  constructor() {\n    super();\n    this.title.setIntrinsic(\"Customers\");\n    this.id.setIntrinsic(\"customer\");\n  }\n\n  @TraitModelSet({\n    extends: true,\n    traitType: CustomerEntityTrait,\n    observesTrait: true,\n    sorted: true,\n    initTrait(customerTrait: CustomerEntityTrait): void {\n      // Create the customer entity\n      const customerId = customerTrait.id.value!;\n      customerTrait.title.setIntrinsic(customerId);\n      customerTrait.nodeUri.setIntrinsic(\"/customer/\" + customerId);\n      // Insert the portal (board of widgets) and the ordersRelation (list of orders to navigate to) into the customer entity\n      customerTrait.portal.insertModel();\n      customerTrait.ordersRelation.insertModel();\n    },\n    compareTraits(a: CustomerEntityTrait, b: CustomerEntityTrait): number {\n      // Sort the customer navigation alphabetically\n      return Strings.compare(a.title.value, b.title.value);\n    },\n  })\n  override readonly entities!: TraitModelSet<this, CustomerEntityTrait> & RelationTrait<CustomerEntityTrait>[\"entities\"] & Observes<CustomerEntityTrait>;\n\n  // Open a downlink to the backend to get the map of customers, we can use this to create the navigation list\n  // The nodeUri of the downlink is inferred from the parent (the store)\n  @MapDownlink({\n    laneUri: \"customers\",\n    keyForm: Uri.form(),\n    consumed: true,\n    didUpdate(nodeUri: Uri, status: Value): void {\n      // If there is a new customer then insert it into the relation/navigation\n      let customerTrait = this.owner.entities.get(nodeUri.pathName);\n      if (customerTrait === null) {\n        customerTrait = this.owner.entities.createTrait(nodeUri.pathName);\n        customerTrait.nodeUri.set(nodeUri); \n        this.owner.entities.addTrait(customerTrait);\n      }\n    },\n    didRemove(nodeUri: Uri, status: Value): void {\n      // When a customer is removed in the backend, remove it from the navigation/relation\n      this.owner.removeChild(nodeUri.pathName);\n    }\n  })\n  readonly customers!: MapDownlink<this, Uri, Value>;\n}","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {AspectTrait} from \"@swim/domain\";\nimport { OrderKanbanBoardController } from \"../order\";\n\n/** @public */\nexport class StoreAspectTrait extends AspectTrait {\n  constructor() {\n    super();\n    this.id.setIntrinsic(\"portal\");\n    this.title.setIntrinsic(\"Portal\");\n    this.icon.setIntrinsic(StoreAspectTrait.icon);\n  }\n\n  // Define the board controller to be used that will control all the widgets/cards the store will have\n  // We will use the 'OrderKanbanBoard' which is 3 panels showing order status\n  override createTabController(): SheetController | null {\n    return new OrderKanbanBoardController();\n  }\n\n  // The icon to show the 'portal' (at the top - alternative to atlas)\n  @Lazy\n  static get icon(): Graphics {\n    return VectorIcon.create(24, 24, \"M19 5v2h-4V5h4M9 5v6H5V5h4m10 8v6h-4v-6h4M9 17v2H5v-2h4M21 3h-8v6h8V3zM11 3H3v10h8V3zm10 8h-8v10h8V11zm-10 4H3v6h8v-6z\");\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n// All rights reserved.\nimport {Class} from \"@swim/util\";\nimport {EntityTrait, EntityTraitObserver} from \"@swim/domain\";\nimport { CustomersRelationTrait } from \"../customer\";\nimport { Model, TraitModelRef } from \"@swim/model\";\nimport { StoreAspectTrait } from \"./StoreAspectTrait\";\n\n/** @public */\nexport interface StoreEntityTraitObserver<T extends StoreEntityTrait = StoreEntityTrait> extends EntityTraitObserver<T> {\n}\n\n/** @public */\nexport class StoreEntityTrait extends EntityTrait {\n  constructor() {\n    super();\n    this.title.setIntrinsic(\"Main Store\");\n  }\n\n  declare readonly observerType?: Class<StoreEntityTraitObserver>;\n\n  // Aspect/Portal trait showing that this entity will have a board of widgets/cards\n  @TraitModelRef({\n    modelType: Model,\n    modelKey: \"portal\",\n    traitType: StoreAspectTrait,\n    traitKey: \"aspect\",\n  })\n  readonly portal!: TraitModelRef<this, StoreAspectTrait>;\n\n  // Relation trait showing that this entity will have a list of customers that can be traversed to on the left\n  @TraitModelRef({\n    modelType: Model,\n    modelKey: \"customers\",\n    traitType: CustomersRelationTrait,\n    traitKey: \"relation\",\n  })\n  readonly customersRelation!: TraitModelRef<this, CustomersRelationTrait>;\n\n}\n"],"names":["__esDecorate","ctor","descriptorIn","decorators","contextIn","initializers","extraInitializers","accept","f","TypeError","kind","key","target","prototype","descriptor","Object","getOwnPropertyDescriptor","name","_","done","i","length","context","p","access","addInitializer","push","result","get","set","init","unshift","defineProperty","__runInitializers","thisArg","value","useValue","arguments","call","SuppressedError","error","suppressed","message","e","Error","OrderBoardController","_a","BoardController","constructor","super","this","sheet","_instanceExtraInitializers","_sheet_initializers","entity","_entity_initializers","initBoard","boardView","attachView","appendChild","PanelView","style","margin","_sheet_decorators","TraitViewRef","extends","viewDidMount","owner","consume","viewWillUnmount","unconsume","_entity_decorators","TraitRef","traitType","EntityTrait","inherits","initTrait","entityTrait","hostUri","bindInlet","nodeUri","static","private","has","obj","OrderAspectTrait","AspectTrait","id","setIntrinsic","title","icon","createTabController","VectorIcon","create","Lazy","_static_get_icon_decorators","_staticExtraInitializers","OrderEntityTrait","observerType","portal","_portal_initializers","_portal_decorators","TraitModelRef","modelType","Model","modelKey","traitKey","OrdersRelationTrait","RelationTrait","entities","_entities_initializers","orders","_orders_initializers","_entities_decorators","TraitModelSet","observesTrait","sorted","orderTrait","orderId","insertModel","compareTraits","a","b","Strings","compare","_orders_decorators","MapDownlink","laneUri","keyForm","Uri","form","consumed","didUpdate","status","pathName","createTrait","addTrait","didRemove","removeChild","OrderType","OrderStatus","OrderController","TimeSeriesController","orderStatus","eventKey","row","_row_initializers","leaf","_leaf_initializers","customerCell","_customerCell_initializers","orderCell","_orderCell_initializers","timeInProcessingCell","_timeInProcessingCell_initializers","stats","_stats_initializers","updateOrderDownlink","_updateOrderDownlink_initializers","setKey","setNodeUri","open","updateOrder","idx","orderStatusProgression","indexOf","newStatus","opened","command","_row_decorators","ViewRef","viewType","RowView","initView","rowView","that","handleClick","cursor","addEventListener","_leaf_decorators","LeafView","leafView","node","highlight","_customerCell_decorators","CellView","viewKey","parentView","insertView","createView","TextCellView","color","Look","accentColor","_orderCell_decorators","_timeInProcessingCell_decorators","_stats_decorators","Property","valueType","Value","absent","didSetValue","moodStatus","orderStatusMood","customerCellView","view","content","stringValue","classList","modifyMood","Feel","default","moodModifier","orderCellView","orderType","Unknown","numberValue","OrderA","_b","OrderB","_c","OrderC","timeInProcessingCellView","Date","_d","toString","_updateOrderDownlink_decorators","orderPlaced","orderProcessed","readyForPickup","pickupCompleted","Map","Status","improving","unknown","OrderStatusPieController","TimePieController","headerTitle","panel","_panel_initializers","totalMonetaryValue","_totalMonetaryValue_initializers","aSlice","_aSlice_initializers","bSlice","_bSlice_initializers","cSlice","_cSlice_initializers","pie","_pie_initializers","statusDownlink","_statusDownlink_initializers","window","setTimeout","getEmptyStateText","updateSlice","storeStatus","slice","type","label","removeView","total","_panel_decorators","panelView","piePanel","unitHeight","marginTop","marginBottom","_totalMonetaryValue_decorators","HtmlView","el","document","createElement","innerText","htmlView","fromNode","position","top","left","transform","font","fontSize","fontWeight","textAlign","_aSlice_decorators","SliceView","sliceView","sliceColor","sliceColors","textColor","backgroundColor","innerRadius","outerRadius","legend","Normal","selected","_bSlice_decorators","Warning","_cSlice_decorators","_pie_decorators","PieView","pieView","_statusDownlink_decorators","ValueDownlink","didSet","OrderListController","parseStoreStatus","totalValue","alertStatus","OrderTypeChartController","plot","_plot_initializers","fakeTimestamp","_fakeTimestamp_initializers","timestamp","getNextTimestamp","t","DateTime","TimeZone","local","dataPointKey","time","plotView","dataPointView","getChild","DataPointView","x","y","dataPoints","timing","getLookOr","_plot_decorators","SeriesPlotView","parent","graph","LinePlotView","seriesPlotView","_fakeTimestamp_decorators","Number","currentTimestamp","valueOf","setValue","CumulativeOrdersSectionController","TimeTableController","rootPanelView","paddingTop","cumulativeOrdersAController","CumulativeOrdersPanelController","unitWidth","cumulativeOrdersBController","cumulativeOrdersCController","cumulativeOrdersTotalController","chartPanel","_chartPanel_initializers","chart","_chart_initializers","header","_header_initializers","table","_table_initializers","customerCol","_customerCol_initializers","orderCol","_orderCol_initializers","timeInProcessingCol","_timeInProcessingCol_initializers","orderDownlink","_orderDownlink_initializers","v","reduce","acc","s","forEach","count","valuePerOrderType","graphView","chartCanvas","add","orderTypeChartControllerA","series","addController","orderTypeChartControllerB","orderTypeChartControllerC","tablePanel","minFrameHeight","minFrameWidth","cumulativeOrdersSectionController","_chartPanel_decorators","chartPanelView","_chart_decorators","ChartView","chartView","gutterTop","gutterRight","gutterBottom","gutterLeft","_header_decorators","headerView","_table_decorators","createLayout","cols","Array","ColLayout","TableLayout","Length","px","_customerCol_decorators","ColView","TextColView","_orderCol_decorators","_timeInProcessingCol_decorators","_orderDownlink_decorators","orderController","orderTypeChartController","console","log","plotStrokes","Color","parse","PanelController","isCumulative","_count_initializers","_value_initializers","minPanelHeight","display","flexDirection","justifyContent","alignItems","paddingLeft","paddingBottom","paddingRight","fontFamily","_count_decorators","whiteSpace","_value_decorators","readyCount","pickedUpCount","readyValue","pickedUpValue","totalCount","OrderKanbanBoardController","orderPlacedPanelController","orderPlacedPanelView","orderPlacedPieController","orderPlacedListController","orderProcessedPanelController","orderProcessedPanelView","orderProcessedPieController","orderProcessedListController","orderReadyPanelController","orderReadyPanelView","orderReadyPieController","orderReadyListController","CustomerAspectTrait","CustomerEntityTrait","ordersRelation","_ordersRelation_initializers","PolygonIcon","_ordersRelation_decorators","CustomersRelationTrait","customers","_customers_initializers","customerTrait","customerId","_customers_decorators","StoreAspectTrait","StoreEntityTrait","customersRelation","_customersRelation_initializers","_customersRelation_decorators"],"mappings":"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"}