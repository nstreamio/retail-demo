import java.util.regex.Matcher

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

plugins {
  id "java"
  id "java-library"
  id "application"
  id 'com.google.cloud.tools.jib' version '3.3.1'
}

group = 'org.swimos'
description = 'Customer Retail Demo'
ext.moduleName = 'swim.retail'
sourceCompatibility = 11
version = project.property('application.version')
mainClassName = 'swim.retail.RetailPlane'

def jvmVersion = System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = jvmVersion >= 9 && !project.hasProperty('no-modules')

repositories {
  mavenCentral()
}

dependencies {
  api group: 'org.swimos', name: 'swim-server', version: project.property('swim.version')
  api group: 'org.swimos', name:'swim-meta', version: project.property('swim.version')
  api group: 'org.swimos', name: 'swim-service-web', version: project.property('swim.version')
}

afterEvaluate {

  sourceSets {
    main.output.resourcesDir = main.java.classesDirectory
  }

  compileJava {
    if (useModules) {
      doFirst {
        options.compilerArgs += [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName="
                        + files(sourceSets.main.resources.srcDirs).asPath,
        ]
        classpath = files()
      }
    }
    options.compilerArgs += ['-Xlint']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
              'Implementation-Title': moduleName,
              'Implementation-Version': archiveVersion,
              'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (!useModules) {
      exclude '*module-info*'
    }
  }

  run {
    dependsOn jar
    doFirst {
      jvmArgs += [
              '--module-path', files(configurations.runtimeClasspath, jar.archiveFile).asPath,
              '--module', "${moduleName}/${mainClassName}"
      ]
      classpath = files()
    }
  }

  jib {
    from {
      image = "openjdk:11"
    }
    to {
      image = "nstream/demo-retail:${version}"
      auth {
        username = "$System.env.REGISTRY_USERNAME"
        password = "$System.env.REGISTRY_PASSWORD"
      }
    }
    container {
      mainClass = mainClassName
      ports = ['9001/tcp']
      jvmFlags = ['-Dswim.config=/config/server.recon']
    }
    extraDirectories {
      paths {
        path {
          // copies a single-file.xml
          from = 'src/main/resources'
          into = '/config'
          includes = ['*.recon']
        }
      }
    }
  }

}
