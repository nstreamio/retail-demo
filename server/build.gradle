import java.util.regex.Matcher

buildscript {
  repositories {
    maven { url 'https://plugins.gradle.org/m2/' }
  }
}

plugins {
  id "java"
  id "java-library"
  id "application"
}

group = 'org.swimos'
description = 'Customer Retail Demo'
ext.moduleName = 'swim.retail'
sourceCompatibility = 11
version = project.property('swim.version')
mainClassName = 'swim.retail.RetailPlane'

def jvmVersion = System.getProperty('java.version').split('\\.')[0] as Integer
def useModules = jvmVersion >= 9 && !project.hasProperty('no-modules')

repositories {
  mavenCentral()
}

dependencies {
  api group: 'org.swimos', name: 'swim-server', version: version
  api group: 'org.swimos', name:'swim-meta', version: version
}

afterEvaluate {

  sourceSets {
    main.output.resourcesDir = main.java.classesDirectory
  }

  compileJava {
    if (useModules) {
      doFirst {
        options.compilerArgs += [
                '--module-path', classpath.asPath,
                '--patch-module', "$moduleName="
                        + files(sourceSets.main.resources.srcDirs).asPath,
        ]
        classpath = files()
      }
    }
    options.compilerArgs += ['-Xlint']
    options.encoding = 'UTF-8'
  }

  jar {
    inputs.property('moduleName', moduleName)
    manifest {
      attributes(
              'Implementation-Title': moduleName,
              'Implementation-Version': archiveVersion,
              'Main-Class': mainClassName)
    }
  }

  tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    if (!useModules) {
      exclude '*module-info*'
    }
  }

  run {
    dependsOn jar
    doFirst {
      jvmArgs += [
              '--module-path', files(configurations.runtimeClasspath, jar.archiveFile).asPath,
              '--module', "${moduleName}/${mainClassName}"
      ]
      classpath = files()
    }
  }

  startScripts {
    inputs.property("moduleName", moduleName)
    doFirst {
      classpath = files()
      defaultJvmOpts = [
              '-Dswim.config=/server.recon',
              '-Xms3g',
              '-Xmx3g',
              '--module-path', 'APP_HOME_LIBS',
              '--module', "${moduleName}/${mainClass}"
      ]
    }
    doLast {
      def bashFile = new File(outputDir, applicationName)
      String bashContent = bashFile.text
      bashFile.text = bashContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('$APP_HOME/lib'))

      def batFile = new File(outputDir, applicationName + ".bat")
      String batContent = batFile.text
      batFile.text = batContent.replaceFirst('APP_HOME_LIBS', Matcher.quoteReplacement('%APP_HOME%\\lib'))
    }
  }

}
