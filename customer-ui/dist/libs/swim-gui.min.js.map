{"version":3,"file":"swim-gui.min.js","sources":["../../../node_modules/tslib/tslib.es6.mjs","../swim-domain/src/main/Status.ts","../swim-domain/src/main/AspectTrait.ts","../swim-domain/src/main/EntityTrait.ts","../swim-domain/src/main/RelationTrait.ts","../swim-domain/src/main/CalendarService.ts","../swim-session/src/main/LoginController.ts","../swim-session/src/main/SessionController.ts","../swim-shell/src/main/AspectRowController.ts","../swim-shell/src/main/AspectBinderController.ts","../swim-shell/src/main/EntityRowController.ts","../swim-shell/src/main/EntityTableController.ts","../swim-shell/src/main/RelationTableController.ts","../swim-shell/src/main/EntityNavController.ts","../swim-shell/src/main/EntityFolioController.ts","../swim-atlas/src/main/AtlasController.ts","../swim-atlas/src/main/AtlasAspectTrait.ts","../swim-atlas/src/main/AtlasEntityTrait.ts","../swim-atlas/src/main/AtlasEntityController.ts","../swim-widget/src/main/TimeGaugeController.ts","../swim-widget/src/main/TimeSeriesController.ts","../swim-widget/src/main/TimeTableController.ts","../swim-widget/src/main/TimePieController.ts"],"sourcesContent":["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport {Mapping} from \"@swim/util\";\nimport {Constant} from \"@swim/util\";\nimport {Piecewise} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {LinearDomain} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Feel} from \"@swim/theme\";\nimport type {MoodVectorUpdates} from \"@swim/theme\";\n\n/** @public */\nexport class Status implements Interpolate<Status>, HashCode, Equivalent, Debug {\n  /** @internal */\n  constructor(unknown: number, warning: number, alert: number) {\n    this.unknown = unknown;\n    this.warning = warning;\n    this.alert = alert;\n  }\n\n  readonly unknown: number;\n\n  withUnknown(unknown?: number): Status {\n    if (unknown === void 0) {\n      unknown = 1;\n    } else if (isFinite(unknown)) {\n      unknown = Math.min(Math.max(0, unknown), 1);\n    } else {\n      throw new Error(\"invalid unknown level: \" + unknown);\n    }\n    return new Status(unknown, this.warning, this.alert);\n  }\n\n  readonly warning: number;\n\n  withWarning(warning?: number): Status {\n    if (warning === void 0) {\n      warning = 1;\n    } else if (isFinite(warning)) {\n      warning = Math.min(Math.max(0, warning), 1);\n    } else {\n      throw new Error(\"invalid warning level: \" + warning);\n    }\n    return new Status(this.unknown, warning, this.alert);\n  }\n\n  readonly alert: number;\n\n  withAlert(alert?: number): Status {\n    if (alert === void 0) {\n      alert = 1;\n    } else if (isFinite(alert)) {\n      alert = Math.min(Math.max(0, alert), 1);\n    } else {\n      throw new Error(\"invalid alert level: \" + alert);\n    }\n    return new Status(this.unknown, this.warning, alert);\n  }\n\n  get moodModifier(): MoodVectorUpdates {\n    return [[Feel.primary, 1],\n            [Feel.inactive, this.unknown !== 0 ? this.unknown : void 0],\n            [Feel.warning, this.warning !== 0 ? this.warning : void 0],\n            [Feel.alert, this.alert !== 0 ? this.alert : void 0]];\n  }\n\n  interpolateTo(that: Status): Interpolator<Status>;\n  interpolateTo(that: unknown): Interpolator<Status> | null;\n  interpolateTo(that: unknown): Interpolator<Status> | null {\n    if (that instanceof Status) {\n      return StatusInterpolator(this, that);\n    } else {\n      return null;\n    }\n  }\n\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Status) {\n      return Numbers.equivalent(this.unknown, that.unknown, epsilon)\n          && Numbers.equivalent(this.warning, that.warning, epsilon)\n          && Numbers.equivalent(this.alert, that.alert, epsilon);\n    }\n    return false;\n  }\n\n  canEqual(that: unknown): boolean {\n    return that instanceof Status;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Status) {\n      return that.canEqual(this)\n          && this.unknown === that.unknown\n          && this.warning === that.warning\n          && this.alert === that.alert;\n    }\n    return false;\n  }\n\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Constructors.hash(Status),\n        Numbers.hash(this.unknown)), Numbers.hash(this.warning)), Numbers.hash(this.alert)));\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    const unknown = this.unknown;\n    const warning = this.warning;\n    const alert = this.alert;\n    output = output.write(\"Status\").write(46/*'.'*/);\n    if (unknown !== 0) {\n      output = output.write(\"unknown\").write(40/*'('*/);\n      if (unknown !== 1) {\n        output = output.debug(unknown);\n      }\n      output = output.write(41/*')'*/);\n      if (warning !== 0) {\n        output = output.write(46/*'.'*/).write(\"withWarning\").write(40/*'('*/);\n        if (warning !== 1) {\n          output = output.debug(warning);\n        }\n        output = output.write(41/*')'*/);\n      }\n      if (alert !== 0) {\n        output = output.write(46/*'.'*/).write(\"withAlert\").write(40/*'('*/);\n        if (alert !== 1) {\n          output = output.debug(alert);\n        }\n        output = output.write(41/*')'*/);\n      }\n    } else if (warning !== 0) {\n      output = output.write(\"warning\").write(40/*'('*/);\n      if (warning !== 1) {\n        output = output.debug(warning);\n      }\n      output = output.write(41/*')'*/);\n      if (alert !== 0) {\n        output = output.write(46/*'.'*/).write(\"withAlert\").write(40/*'('*/);\n        if (alert !== 1) {\n          output = output.debug(alert);\n        }\n        output = output.write(41/*')'*/);\n      }\n    } else if (alert !== 0) {\n      output = output.write(\"alert\").write(40/*'('*/);\n      if (alert !== 1) {\n        output = output.debug(alert);\n      }\n      output = output.write(41/*')'*/);\n    } else {\n      output = output.write(\"normal\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  /** @internal */\n  static Normal: Status | null = null;\n  static normal(): Status {\n    let status = Status.Normal;\n    if (status === null) {\n      status = new Status(0, 0, 0);\n      Status.Normal = status;\n    }\n    return status;\n  }\n\n  /** @internal */\n  static Unknown: Status | null = null;\n  static unknown(unknown?: number): Status {\n    let status: Status | null;\n    if (unknown === void 0 || unknown === 1) {\n      status = Status.Unknown;\n      if (status === null) {\n        status = new Status(1, 0, 0);\n        Status.Unknown = status;\n      }\n    } else if (isFinite(unknown)) {\n      unknown = Math.min(Math.max(0, unknown), 1);\n      status = new Status(unknown, 0, 0);\n    } else {\n      throw new Error(\"invalid unknown level: \" + unknown);\n    }\n    return status;\n  }\n\n  /** @internal */\n  static Warning: Status | null = null;\n  static warning(warning?: number): Status {\n    let status: Status | null;\n    if (warning === void 0 || warning === 1) {\n      status = Status.Warning;\n      if (status === null) {\n        status = new Status(0, 1, 0);\n        Status.Warning = status;\n      }\n    } else if (isFinite(warning)) {\n      warning = Math.min(Math.max(0, warning), 1);\n      status = new Status(0, warning, 0);\n    } else {\n      throw new Error(\"invalid warning level: \" + warning);\n    }\n    return status;\n  }\n\n  /** @internal */\n  static Alert: Status | null = null;\n  static alert(alert?: number): Status {\n    let status: Status | null;\n    if (alert === void 0 || alert === 1) {\n      status = Status.Alert;\n      if (status === null) {\n        status = new Status(0, 1, 1);\n        Status.Alert = status;\n      }\n    } else if (isFinite(alert)) {\n      alert = Math.min(Math.max(0, alert), 1);\n      status = new Status(0, 1, alert);\n    } else {\n      throw new Error(\"invalid alert level: \" + alert);\n    }\n    return status;\n  }\n\n  /** @internal */\n  static NormalRange: Constant<Status> | null = null;\n  static normalRange(): Constant<Status> {\n    let range = Status.NormalRange;\n    if (range === null) {\n      range = Constant(Status.normal());\n      Status.NormalRange = range;\n    }\n    return range;\n  }\n\n  /** @internal */\n  static WarningAscending: Interpolator<Status> | null = null;\n  /** @internal */\n  static WarningDescending: Interpolator<Status> | null = null;\n  static warningRange(warning0?: number, warning1?: number): Interpolator<Status> {\n    if (warning0 === void 0) {\n      warning0 = 0;\n    } else if (isFinite(warning0)) {\n      warning0 = Math.min(Math.max(0, warning0), 1);\n    } else {\n      throw new Error(\"invalid warning level: \" + warning0);\n    }\n    if (warning1 === void 0) {\n      warning1 = 1;\n    } else if (isFinite(warning1)) {\n      warning1 = Math.min(Math.max(0, warning1), 1);\n    } else {\n      throw new Error(\"invalid warning level: \" + warning1);\n    }\n    let range: Interpolator<Status> | null;\n    if (warning0 === 0 && warning1 === 1) {\n      range = Status.WarningAscending;\n      if (range === null) {\n        range = Status.normal().interpolateTo(Status.warning());\n        Status.WarningAscending = range;\n      }\n    } else if (warning0 === 1 && warning1 === 0) {\n      range = Status.WarningDescending;\n      if (range === null) {\n        range = Status.warning().interpolateTo(Status.normal());\n        Status.WarningDescending = range;\n      }\n    } else {\n      range = new Status(0, warning0, 0).interpolateTo(new Status(0, warning1, 0));\n    }\n    return range;\n  }\n\n  /** @internal */\n  static AlertAscending: Interpolator<Status> | null = null;\n  static AlertDescending: Interpolator<Status> | null = null;\n  static alertRange(alert0?: number, alert1?: number): Interpolator<Status> {\n    if (alert0 === void 0) {\n      alert0 = 0;\n    } else if (isFinite(alert0)) {\n      alert0 = Math.min(Math.max(0, alert0), 1);\n    } else {\n      throw new Error(\"invalid alert level: \" + alert0);\n    }\n    if (alert1 === void 0) {\n      alert1 = 1;\n    } else if (isFinite(alert1)) {\n      alert1 = Math.min(Math.max(0, alert1), 1);\n    } else {\n      throw new Error(\"invalid alert level: \" + alert1);\n    }\n    let range: Interpolator<Status> | null;\n    if (alert0 === 0 && alert1 === 1) {\n      range = Status.AlertAscending;\n      if (range === null) {\n        range = Status.warning().interpolateTo(Status.alert());\n        Status.AlertAscending = range;\n      }\n    } else if (alert0 === 1 && alert1 === 0) {\n      range = Status.AlertDescending;\n      if (range === null) {\n        range = Status.alert().interpolateTo(Status.warning());\n        Status.AlertDescending = range;\n      }\n    } else {\n      range = new Status(0, 1, alert0).interpolateTo(new Status(0, 1, alert1));\n    }\n    return range;\n  }\n\n  /** @internal */\n  static PanicRange: Constant<Status> | null = null;\n  static panicRange(): Constant<Status> {\n    let range = Status.PanicRange;\n    if (range === null) {\n      range = Constant(Status.alert());\n      Status.PanicRange = range;\n    }\n    return range;\n  }\n\n  static worsening(lowerBound: number, warningThreshold: number, alertThreshold: number, panicThreshold: number, upperBound: number): Piecewise<number, Status> {\n    const normalMapping = Mapping(LinearDomain(lowerBound, warningThreshold), this.normalRange());\n    const warningMapping = Mapping(LinearDomain(warningThreshold, alertThreshold), this.warningRange(0, 1));\n    const alertMapping = Mapping(LinearDomain(alertThreshold, panicThreshold), this.alertRange(0, 1));\n    const panicMapping = Mapping(LinearDomain(panicThreshold, upperBound), this.panicRange());\n    return Piecewise(normalMapping, warningMapping, alertMapping, panicMapping);\n  }\n\n  static improving(lowerBound: number, panicThreshold: number, alertThreshold: number, warningThreshold: number, upperBound: number): Piecewise<number, Status> {\n    const panicMapping = Mapping(LinearDomain(lowerBound, panicThreshold), this.panicRange());\n    const alertMapping = Mapping(LinearDomain(panicThreshold, alertThreshold), this.alertRange(1, 0));\n    const warningMapping = Mapping(LinearDomain(alertThreshold, warningThreshold), this.warningRange(1, 0));\n    const normalMapping = Mapping(LinearDomain(warningThreshold, upperBound), this.normalRange());\n    return Piecewise(panicMapping, alertMapping, warningMapping, normalMapping);\n  }\n}\n\n/** @internal */\nexport const StatusInterpolator = (function (_super: typeof Interpolator) {\n  const StatusInterpolator = function (s0: Status, s1: Status): Interpolator<Status> {\n    const interpolator = function (u: number): Status {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const unknown = s0.unknown + u * (s1.unknown - s0.unknown);\n      const warning = s0.warning + u * (s1.warning - s0.warning);\n      const alert = s0.alert + u * (s1.alert - s0.alert);\n      return new Status(unknown, warning, alert);\n    } as Interpolator<Status>;\n    Object.setPrototypeOf(interpolator, StatusInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: Status, s1: Status): Interpolator<Status>;\n\n    /** @internal */\n    prototype: Interpolator<Status>;\n  };\n\n  StatusInterpolator.prototype = Object.create(_super.prototype);\n  StatusInterpolator.prototype.constructor = StatusInterpolator;\n\n  return StatusInterpolator;\n})(Interpolator);\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport {SelectableTrait} from \"@swim/model\";\nimport {Graphics} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {Status} from \"./Status\";\nimport {EntityTrait} from \"./\"; // forward import\n\n/** @public */\nexport interface AspectTraitObserver<T extends AspectTrait = AspectTrait> extends TraitObserver<T> {\n  traitDidSetTitle?(title: string, trait: T): void;\n\n  traitDidSetIcon?(icon: Graphics | null, trait: T): void;\n\n  traitDidSetStatus?(status: Status, trait: T): void;\n\n  traitWillAttachEntity?(entityTrait: EntityTrait, targetTrait: Trait | null, trait: T): void;\n\n  traitDidDetachEntity?(entityTrait: EntityTrait, trait: T): void;\n}\n\n/** @public */\nexport class AspectTrait extends Trait {\n  declare readonly observerType?: Class<AspectTraitObserver>;\n\n  @Property({valueType: String})\n  readonly id!: Property<this, string | undefined>;\n\n  @TraitRef({\n    get traitType(): typeof EntityTrait {\n      return EntityTrait;\n    },\n    willAttachTrait(entityTrait: EntityTrait, targetTrait: Trait | null): void {\n      this.owner.callObservers(\"traitWillAttachEntity\", entityTrait, targetTrait, this.owner);\n    },\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.status.bindInlet(entityTrait.status);\n    },\n    deinitTrait(entityTrait: EntityTrait): void {\n      this.owner.status.unbindInlet(entityTrait.status);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"traitDidDetachEntity\", entityTrait, this.owner);\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @Property({\n    valueType: String,\n    value: \"\",\n    didSetValue(newTitle: string, oldTitle: string): void {\n      this.owner.callObservers(\"traitDidSetTitle\", newTitle, this.owner);\n    },\n    equalValues(newTitle: string, oldTitle: string): boolean {\n      return newTitle === oldTitle;\n    },\n  })\n  readonly title!: Property<this, string>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(icon: Graphics | null): void {\n      this.owner.callObservers(\"traitDidSetIcon\", icon, this.owner);\n    },\n    equalValues(newIcon: Graphics | null, oldIcon: Graphics | null): boolean {\n      return newIcon === oldIcon;\n    },\n  })\n  readonly icon!: Property<this, Graphics | null>;\n\n  @Property({\n    valueType: Status,\n    value: Status.normal(),\n    didSetValue(status: Status): void {\n      this.owner.callObservers(\"traitDidSetStatus\", status, this.owner);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  createTabController(): SheetController | null {\n    return null;\n  }\n\n  protected override onAttachModel(model: Model): void {\n    super.onAttachModel(model);\n    if (model.getTrait(SelectableTrait) === null) {\n      model.appendTrait(SelectableTrait, \"selectable\");\n    }\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {Uri} from \"@swim/uri\";\nimport {UriPath} from \"@swim/uri\";\nimport {UriPathBuilder} from \"@swim/uri\";\nimport {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport {TraitModelSet} from \"@swim/model\";\nimport {SelectableTrait} from \"@swim/model\";\nimport {Graphics} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {Status} from \"./Status\";\nimport {AspectTrait} from \"./AspectTrait\";\nimport {RelationTrait} from \"./\"; // forward import\n\n/** @public */\nexport interface EntityTraitObserver<T extends EntityTrait = EntityTrait> extends TraitObserver<T> {\n  traitDidSetPath?(path: UriPath | null, trait: T): void;\n\n  traitDidSetTitle?(title: string, trait: T): void;\n\n  traitDidSetIcon?(icon: Graphics | null, trait: T): void;\n\n  traitDidSetStatus?(status: Status, trait: T): void;\n\n  traitDidSetRelatable?(relatable: boolean, trait: T): void;\n\n  traitDidSetSearchable?(searchable: boolean, trait: T): void;\n\n  traitDidSetSearching?(searching: boolean, trait: T): void;\n\n  traitDidSetSearchQuery?(query: string, trait: T): void;\n\n  traitWillAttachAspect?(aspectTrait: AspectTrait, trait: T): void;\n\n  traitDidDetachAspect?(aspectTrait: AspectTrait, trait: T): void;\n\n  traitDidReinsertAspect?(aspectTrait: AspectTrait, targetTrait: AspectTrait | null, trait: T): void;\n\n  traitWillAttachRelation?(relationTrait: RelationTrait, trait: T): void;\n\n  traitDidDetachRelation?(relationTrait: RelationTrait, trait: T): void;\n\n  traitDidReinsertRelation?(relationTrait: RelationTrait, targetTrait: RelationTrait | null, trait: T): void;\n\n  traitDidSetRelationHidden?(hidden: boolean, relationTrait: RelationTrait, trait: T): void;\n\n  traitDidSetRelationDisclosed?(disclosed: boolean, relationTrait: RelationTrait, trait: T): void;\n\n  traitWillAttachRelatedEntity?(relatedEntityTrait: EntityTrait, relationTrait: RelationTrait, trait: T): void;\n\n  traitDidDetachRelatedEntity?(relatedEntityTrait: EntityTrait, relationTrait: RelationTrait, trait: T): void;\n}\n\n/** @public */\nexport class EntityTrait extends Trait {\n  declare readonly observerType?: Class<EntityTraitObserver>;\n\n  @Property({\n    extends: true,\n    inherits: false,\n  })\n  override get nodeUri(): Property<this, Uri | null> {\n    return Property.getter();\n  }\n\n  @Property({valueType: String})\n  readonly id!: Property<this, string | undefined>;\n\n  @Property({\n    valueType: UriPath,\n    value: null,\n    inherits: true,\n    get parentType(): typeof RelationTrait {\n      return RelationTrait;\n    },\n    deriveValue(basePath: UriPath | null): UriPath | null {\n      const id = this.owner.id.value;\n      if (id === void 0) {\n        return null;\n      }\n      const pathBuilder = new UriPathBuilder();\n      if (basePath !== null) {\n        pathBuilder.addPath(basePath);\n      }\n      pathBuilder.addSegment(id);\n      return pathBuilder.build();\n    },\n    didSetValue(newPath: UriPath | null, oldPath: UriPath | null): void {\n      this.owner.callObservers(\"traitDidSetPath\", newPath, this.owner);\n    },\n    onMount(): void {\n      super.onMount();\n      if (this.inherits && !this.derived) {\n        this.setValue(UriPath.slash(), Affinity.Reflexive);\n      }\n    },\n  })\n  readonly path!: Property<this, UriPath | null>;\n\n  @Property({\n    valueType: String,\n    value: \"\",\n    didSetValue(newTitle: string, oldTitle: string): void {\n      this.owner.callObservers(\"traitDidSetTitle\", newTitle, this.owner);\n    },\n    equalValues(newTitle: string, oldTitle: string): boolean {\n      return newTitle === oldTitle;\n    },\n  })\n  readonly title!: Property<this, string>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(icon: Graphics | null): void {\n      this.owner.callObservers(\"traitDidSetIcon\", icon, this.owner);\n    },\n    equalValues(newIcon: Graphics | null, oldIcon: Graphics | null): boolean {\n      return newIcon === oldIcon;\n    },\n  })\n  readonly icon!: Property<this, Graphics | null>;\n\n  @Property({\n    valueType: Status,\n    value: Status.normal(),\n    didSetValue(status: Status): void {\n      this.owner.callObservers(\"traitDidSetStatus\", status, this.owner);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  @TraitRef({\n    traitType: AspectTrait,\n  })\n  readonly aspect!: TraitRef<this, AspectTrait>;\n\n  @TraitModelSet({\n    traitType: AspectTrait,\n    traitKey: \"aspect\",\n    modelType: Model,\n    binds: true,\n    observes: true,\n    init(): void {\n      this.ids = {};\n    },\n    willAttachTrait(aspectTrait: AspectTrait): void {\n      if (aspectTrait.id.value !== void 0) {\n        this.ids[aspectTrait.id.value] = aspectTrait;\n      }\n      aspectTrait.entity.attachTrait(this.owner);\n      this.owner.callObservers(\"traitWillAttachAspect\", aspectTrait, this.owner);\n      if (this.owner.aspect.trait === null) {\n        this.owner.aspect.attachTrait(aspectTrait);\n      }\n    },\n    didDetachTrait(aspectTrait: AspectTrait): void {\n      if (this.owner.aspect.trait === aspectTrait) {\n        this.owner.aspect.detachTrait();\n      }\n      this.owner.callObservers(\"traitDidDetachAspect\", aspectTrait, this.owner);\n      aspectTrait.entity.detachTrait();\n      if (aspectTrait.id.value !== void 0) {\n        delete this.ids[aspectTrait.id.value];\n      }\n    },\n    modelDidAttachParent(parent: Model, model: Model): void {\n      const aspectTrait = this.detectModelTrait(model);\n      const targetModel = model.nextSibling;\n      const targetTrait = targetModel !== null ? this.detectModelTrait(targetModel) : null;\n      if (aspectTrait !== null) {\n        this.owner.callObservers(\"traitDidReinsertAspect\", aspectTrait, targetTrait, this.owner);\n      }\n    },\n    createTrait(id?: string): AspectTrait {\n      const trait = super.createTrait();\n      if (id !== void 0) {\n        trait.id.setIntrinsic(id);\n      }\n      this.createModel(trait);\n      return trait;\n    },\n    get(id?: string): any/*Model | AspectTrait | null*/ {\n      if (arguments.length === 0) {\n        return null;\n      }\n      const trait = this.ids[id as string];\n      return trait !== void 0 ? trait : null;\n    },\n  })\n  readonly aspects!: TraitModelSet<this, AspectTrait, Model> & Observes<Model> & {\n    /** @internal */\n    ids: {[id: string]: AspectTrait | undefined};\n    /** @override */\n    createTrait(id?: string): AspectTrait;\n    get(id: string): AspectTrait | null;\n  };\n\n  @TraitModelSet({\n    get traitType(): typeof RelationTrait {\n      return RelationTrait;\n    },\n    traitKey: \"entity\",\n    modelType: Model,\n    binds: true,\n    observes: true,\n    observesTrait: true,\n    init(): void {\n      this.ids = {};\n    },\n    willAttachTrait(relationTrait: RelationTrait): void {\n      if (relationTrait.id.value !== void 0) {\n        this.ids[relationTrait.id.value] = relationTrait;\n      }\n      this.owner.callObservers(\"traitWillAttachRelation\", relationTrait, this.owner);\n    },\n    didDetachTrait(relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"traitDidDetachRelation\", relationTrait, this.owner);\n      if (relationTrait.id.value !== void 0) {\n        delete this.ids[relationTrait.id.value];\n      }\n    },\n    traitWillAttachEntity(relatedEntityTrait: EntityTrait, relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"traitWillAttachRelatedEntity\", relatedEntityTrait, relationTrait, this.owner);\n    },\n    traitDidDetachEntity(relatedEntityTrait: EntityTrait, relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"traitDidDetachRelatedEntity\", relatedEntityTrait, relationTrait, this.owner);\n    },\n    traitDidSetHidden(hidden: boolean, relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"traitDidSetRelationHidden\", hidden, relationTrait, this.owner);\n    },\n    traitDidSetDisclosed(disclosed: boolean, relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"traitDidSetRelationDisclosed\", disclosed, relationTrait, this.owner);\n    },\n    modelDidAttachParent(parent: Model, model: Model): void {\n      const relationTrait = this.detectModelTrait(model);\n      const targetModel = model.nextSibling;\n      const targetTrait = targetModel !== null ? this.detectModelTrait(targetModel) : null;\n      if (relationTrait !== null) {\n        this.owner.callObservers(\"traitDidReinsertRelation\", relationTrait, targetTrait, this.owner);\n      }\n    },\n    createTrait(id?: string): RelationTrait {\n      const trait = super.createTrait();\n      if (id !== void 0) {\n        trait.id.setIntrinsic(id);\n      }\n      this.createModel(trait);\n      return trait;\n    },\n    get(id?: string): any/*Model | RelationTrait | null*/ {\n      if (arguments.length === 0) {\n        return null;\n      }\n      const trait = this.ids[id as string];\n      return trait !== void 0 ? trait : null;\n    },\n  })\n  readonly relations!: TraitModelSet<this, RelationTrait, Model> & Observes<Model> & Observes<RelationTrait> & {\n    /** @internal */\n    ids: {[id: string]: RelationTrait | undefined};\n    /** @override */\n    createTrait(id?: string): RelationTrait;\n    get(id: string): RelationTrait | null;\n  };\n\n  @Property({\n    valueType: Boolean,\n    value: true,\n    didSetValue(relatable: boolean): void {\n      this.owner.callObservers(\"traitDidSetRelatable\", relatable, this.owner);\n    },\n  })\n  readonly relatable!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(searchable: boolean): void {\n      this.owner.callObservers(\"traitDidSetSearchable\", searchable, this.owner);\n    },\n  })\n  readonly searchable!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(searching: boolean): void {\n      if (searching) {\n        this.owner.onStartSearching();\n      } else {\n        this.owner.onStopSearching();\n      }\n      this.owner.callObservers(\"traitDidSetSearching\", searching, this.owner);\n    },\n  })\n  readonly searching!: Property<this, boolean>;\n\n  protected onStartSearching(): void {\n    // hook\n  }\n\n  protected onStopSearching(): void {\n    // hook\n  }\n\n  updateSearch(query: string): void {\n    // hook\n  }\n\n  submitSearch(query: string): void {\n    // hook\n  }\n\n  createNavController(): SheetController | null {\n    return null;\n  }\n\n  protected override onAttachModel(model: Model): void {\n    super.onAttachModel(model);\n    if (model.getTrait(SelectableTrait) === null) {\n      model.appendTrait(SelectableTrait, \"selectable\");\n    }\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {UriPath} from \"@swim/uri\";\nimport {UriPathBuilder} from \"@swim/uri\";\nimport {Model} from \"@swim/model\";\nimport type {TraitObserver} from \"@swim/model\";\nimport {Trait} from \"@swim/model\";\nimport {TraitModelSet} from \"@swim/model\";\nimport {Status} from \"./Status\";\nimport {EntityTrait} from \"./EntityTrait\";\n\n/** @public */\nexport interface RelationTraitObserver<E extends EntityTrait = EntityTrait, T extends RelationTrait<E> = RelationTrait<E>> extends TraitObserver<T> {\n  traitDidSetPath?(path: UriPath | null, trait: T): void;\n\n  traitDidSetTitle?(title: string, trait: T): void;\n\n  traitDidSetStatus?(status: Status, trait: T): void;\n\n  traitDidSetHidden?(hidden: boolean, trait: T): void;\n\n  traitDidSetDisclosed?(disclosed: boolean, trait: T): void;\n\n  traitWillAttachEntity?(entityTrait: EntityTrait, trait: T): void;\n\n  traitDidDetachEntity?(entityTrait: EntityTrait, trait: T): void;\n\n  traitDidReinsertEntity?(entityTrait: EntityTrait, targetTrait: EntityTrait | null, trait: T): void;\n}\n\n/** @public */\nexport class RelationTrait<E extends EntityTrait = EntityTrait> extends Trait {\n  declare readonly observerType?: Class<RelationTraitObserver<E>>;\n\n  @Property({valueType: String})\n  readonly id!: Property<this, string | undefined>;\n\n  @Property({\n    valueType: UriPath,\n    value: null,\n    inherits: true,\n    parentType: EntityTrait,\n    deriveValue(basePath: UriPath | null): UriPath | null {\n      const id = this.owner.id.value;\n      if (id === void 0) {\n        return null;\n      }\n      const pathBuilder = new UriPathBuilder();\n      if (basePath !== null) {\n        pathBuilder.addPath(basePath);\n      }\n      pathBuilder.addSegment(id);\n      return pathBuilder.build();\n    },\n    didSetValue(newPath: UriPath | null, oldPath: UriPath | null): void {\n      this.owner.callObservers(\"traitDidSetPath\", newPath, this.owner);\n    },\n  })\n  readonly path!: Property<this, UriPath | null>;\n\n  @Property({\n    valueType: String,\n    value: \"\",\n    didSetValue(newTitle: string, oldTitle: string): void {\n      this.owner.callObservers(\"traitDidSetTitle\", newTitle, this.owner);\n    },\n    equalValues(newTitle: string, oldTitle: string): boolean {\n      return newTitle === oldTitle;\n    },\n  })\n  readonly title!: Property<this, string>;\n\n  @Property({\n    valueType: Status,\n    value: Status.normal(),\n    didSetValue(status: Status): void {\n      this.owner.callObservers(\"traitDidSetStatus\", status, this.owner);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(hidden: boolean): void {\n      this.owner.callObservers(\"traitDidSetHidden\", hidden, this.owner);\n    },\n  })\n  readonly hidden!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: true,\n    didSetValue(disclosed: boolean): void {\n      this.owner.callObservers(\"traitDidSetDisclosed\", disclosed, this.owner);\n    },\n  })\n  readonly disclosed!: Property<this, boolean>;\n\n  @TraitModelSet({\n    traitType: EntityTrait,\n    traitKey: \"entity\",\n    modelType: Model,\n    binds: true,\n    observes: true,\n    init(): void {\n      this.ids = {};\n    },\n    willAttachTrait(entityTrait: E): void {\n      if (entityTrait.id.value !== void 0) {\n        this.ids[entityTrait.id.value] = entityTrait;\n      }\n      this.owner.callObservers(\"traitWillAttachEntity\", entityTrait, this.owner);\n    },\n    didDetachTrait(entityTrait: E): void {\n      this.owner.callObservers(\"traitDidDetachEntity\", entityTrait, this.owner);\n      if (entityTrait.id.value !== void 0) {\n        delete this.ids[entityTrait.id.value];\n      }\n    },\n    modelDidAttachParent(parent: Model, model: Model): void {\n      const entityTrait = this.detectModelTrait(model);\n      const targetModel = model.nextSibling;\n      const targetTrait = targetModel !== null ? this.detectModelTrait(targetModel) : null;\n      if (entityTrait !== null) {\n        this.owner.callObservers(\"traitDidReinsertEntity\", entityTrait, targetTrait, this.owner);\n      }\n    },\n    createTrait(id?: string): E {\n      const trait = super.createTrait();\n      if (id !== void 0) {\n        trait.id.setIntrinsic(id);\n      }\n      this.createModel(trait);\n      return trait;\n    },\n    get(id?: string): any/*Model | E | null*/ {\n      if (arguments.length === 0) {\n        return null;\n      }\n      const trait = this.ids[id as string];\n      return trait !== void 0 ? trait : null;\n    },\n    getOrInsert(id: string): E | null {\n      let trait = this.get(id);\n      if (trait === null) {\n        trait = this.createTrait(id);\n        this.addTrait(trait);\n      }\n      return trait;\n    },\n  })\n  readonly entities!: TraitModelSet<this, E, Model> & Observes<Model> & {\n    /** @internal */\n    ids: {[id: string]: E | undefined};\n    /** @override */\n    createTrait(id?: string): E;\n    get(id: string): E | null;\n    getOrInsert(id: string): E | null;\n  };\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {ServiceObserver} from \"@swim/component\";\nimport {Service} from \"@swim/component\";\nimport {DateTime} from \"@swim/time\";\nimport {TimeZone} from \"@swim/time\";\n\n/** @public */\nexport interface CalendarServiceObserver<S extends CalendarService = CalendarService> extends ServiceObserver<S> {\n  serviceDidSetTimeZone?(timeZone: TimeZone, service: S): void;\n\n  serviceDidSetScrubTime?(newScrubTime: DateTime | null, service: S): void;\n}\n\n/** @public */\nexport class CalendarService extends Service {\n  declare readonly observerType?: Class<CalendarServiceObserver>;\n\n  @Property({\n    valueType: TimeZone,\n    value: TimeZone.local(),\n    didSetValue(timeZone: TimeZone): void {\n      this.owner.callObservers(\"serviceDidSetTimeZone\", timeZone, this.owner);\n    },\n  })\n  readonly timeZone!: Property<this, TimeZone>;\n\n  @Property({\n    valueType: DateTime,\n    value: null,\n    didSetValue(scrubTime: DateTime | null): void {\n      this.owner.callObservers(\"serviceDidSetScrubTime\", scrubTime, this.owner);\n    },\n  })\n  readonly scrubTime!: Property<this, DateTime | null>;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\n\n/** @public */\nexport interface LoginControllerObserver<C extends LoginController = LoginController> extends ControllerObserver<C> {\n}\n\n/** @public */\nexport class LoginController extends Controller {\n  declare readonly observerType?: Class<LoginControllerObserver>;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\n\n/** @public */\nexport interface SessionControllerObserver<C extends SessionController = SessionController> extends ControllerObserver<C> {\n}\n\n/** @public */\nexport class SessionController extends Controller {\n  declare readonly observerType?: Class<SessionControllerObserver>;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {SelectionOptions} from \"@swim/model\";\nimport {SelectableTrait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TextCellView} from \"@swim/table\";\nimport {IconCellView} from \"@swim/table\";\nimport type {LeafView} from \"@swim/table\";\nimport type {LeafTrait} from \"@swim/table\";\nimport type {RowControllerObserver} from \"@swim/table\";\nimport {RowController} from \"@swim/table\";\nimport {Status} from \"@swim/domain\";\nimport {AspectTrait} from \"@swim/domain\";\n\n/** @public */\nexport interface AspectRowControllerObserver<C extends AspectRowController = AspectRowController> extends RowControllerObserver<C> {\n  controllerWillAttachAspectTrait?(aspectTrait: AspectTrait, controller: C): void;\n\n  controllerDidDetachAspectTrait?(aspectTrait: AspectTrait, controller: C): void;\n\n  controllerWillAttachIconCellView?(iconCellView: IconCellView, controller: C): void;\n\n  controllerDidDetachIconCellView?(iconCellView: IconCellView, controller: C): void;\n\n  controllerWillAttachTitleCellView?(titleCellView: TextCellView, controller: C): void;\n\n  controllerDidDetachTitleCellView?(titleCellView: TextCellView, controller: C): void;\n}\n\n/** @public */\nexport class AspectRowController extends RowController {\n  declare readonly observerType?: Class<AspectRowControllerObserver>;\n\n  @Property({\n    valueType: Status,\n    value: Status.unknown(),\n    didSetValue(status: Status): void {\n      this.owner.leaf.updateStatus(status);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  @TraitRef({\n    traitType: AspectTrait,\n    consumed: true,\n    observes: true,\n    initTrait(aspectTrait: AspectTrait): void {\n      this.owner.status.setIntrinsic(aspectTrait.status.value);\n    },\n    willAttachTrait(aspectTrait: AspectTrait): void {\n      this.owner.callObservers(\"controllerWillAttachAspectTrait\", aspectTrait, this.owner);\n    },\n    didAttachTrait(aspectTrait: AspectTrait): void {\n      this.owner.selectable.setTrait(aspectTrait.getTrait(SelectableTrait));\n      const rowView = this.owner.row.attachView();\n      const leafView = rowView.leaf.insertView();\n      this.owner.iconCell.insertView(leafView).setIntrinsic({\n        graphics: aspectTrait.icon.value,\n      });\n      this.owner.titleCell.insertView(leafView).setIntrinsic({\n        content: aspectTrait.title.value,\n      });\n    },\n    deinitTrait(aspectTrait: AspectTrait): void {\n      this.owner.status.setIntrinsic(Status.unknown());\n    },\n    willDetachTrait(aspectTrait: AspectTrait): void {\n      this.owner.selectable.setTrait(null);\n    },\n    didDetachTrait(aspectTrait: AspectTrait): void {\n      this.owner.callObservers(\"controllerDidDetachAspectTrait\", aspectTrait, this.owner);\n    },\n    traitDidInsertTrait(memberTrait: Trait, targetTrait: Trait | null): void {\n      if (memberTrait instanceof SelectableTrait) {\n        this.owner.selectable.setTrait(memberTrait);\n      }\n    },\n    traitDidSetTitle(title: string): void {\n      const titleCellView = this.owner.titleCell.view;\n      if (titleCellView !== null) {\n        titleCellView.content.setIntrinsic(title);\n      }\n    },\n    traitDidSetIcon(icon: Graphics | null): void {\n      const iconCellView = this.owner.iconCell.view;\n      if (iconCellView !== null) {\n        iconCellView.graphics.setIntrinsic(icon);\n      }\n    },\n    traitDidSetStatus(status: Status): void {\n      this.owner.status.setIntrinsic(status);\n    },\n  })\n  readonly aspect!: TraitRef<this, AspectTrait> & Observes<AspectTrait>;\n\n  @TraitRef({\n    traitType: SelectableTrait,\n    observes: true,\n    initTrait(selectableTrait: SelectableTrait): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.setIntrinsic(selectableTrait.selected);\n      }\n    },\n    traitDidSelect(options: SelectionOptions | null): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.focus();\n      }\n    },\n    traitWillUnselect(): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.unfocus();\n      }\n    },\n  })\n  readonly selectable!: TraitRef<this, SelectableTrait> & Observes<SelectableTrait>;\n\n  @TraitViewRef({\n    extends: true,\n    initView(leafView: LeafView): void {\n      super.initView(leafView);\n      this.updateStatus(this.owner.status.value);\n\n      leafView.style.cursor.setIntrinsic(\"pointer\");\n      this.owner.iconCell.insertView(leafView);\n      this.owner.titleCell.insertView(leafView);\n\n      const selectableTrait = this.owner.selectable.trait;\n      if (selectableTrait !== null) {\n        leafView.highlight.setIntrinsic(selectableTrait.selected);\n      }\n    },\n    didAttachView(leafView: LeafView, targetView: View | null): void {\n      super.didAttachView(leafView, targetView);\n      if (leafView.mounted && !leafView.culled) {\n        this.owner.consume(leafView);\n      }\n    },\n    viewDidMount(leafView: LeafView): void {\n      if (!leafView.culled) {\n        this.owner.consume(leafView);\n      }\n    },\n    viewWillUnmount(leafView: LeafView): void {\n      this.owner.unconsume(leafView);\n    },\n    viewDidCull(leafView: LeafView): void {\n      this.owner.unconsume(leafView);\n    },\n    viewWillUncull(leafView: LeafView): void {\n      this.owner.consume(leafView);\n    },\n    updateStatus(status: Status): void {\n      const leafView = this.view;\n      if (leafView !== null) {\n        leafView.modifyMood(Feel.default, status.moodModifier);\n      }\n    },\n  })\n  override readonly leaf!: TraitViewRef<this, LeafTrait, LeafView> & RowController[\"leaf\"] & {\n    updateStatus(status: Status): void;\n  };\n\n  @ViewRef({\n    viewType: IconCellView,\n    viewKey: \"icon\",\n    get parentView(): View | null {\n      return this.owner.leaf.attachView();\n    },\n    willAttachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerWillAttachIconCellView\", iconCellView, this.owner);\n    },\n    didDetachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerDidDetachIconCellView\", iconCellView, this.owner);\n    },\n    createView(): IconCellView {\n      return (super.createView() as IconCellView).setIntrinsic({\n        iconLayout: {width: 32, height: 32},\n        iconColor: Look.accentColor,\n      });\n    },\n  })\n  readonly iconCell!: ViewRef<this, IconCellView>;\n\n  @ViewRef({\n    viewType: TextCellView,\n    viewKey: \"title\",\n    get parentView(): View | null {\n      return this.owner.leaf.attachView();\n    },\n    willAttachView(titleCellView: TextCellView): void {\n      this.owner.callObservers(\"controllerWillAttachTitleCellView\", titleCellView, this.owner);\n    },\n    didDetachView(titleCellView: TextCellView): void {\n      this.owner.callObservers(\"controllerDidDetachTitleCellView\", titleCellView, this.owner);\n    },\n  })\n  readonly titleCell!: ViewRef<this, TextCellView>;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Provider} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerFlags} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {HistoryState} from \"@swim/controller\";\nimport {HistoryService} from \"@swim/controller\";\nimport {TitleToolView} from \"@swim/toolbar\";\nimport type {ButtonToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport type {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"@swim/sheet\";\nimport {SheetController} from \"@swim/sheet\";\nimport type {BinderView} from \"@swim/sheet\";\nimport type {BinderControllerObserver} from \"@swim/sheet\";\nimport {BinderController} from \"@swim/sheet\";\nimport {AspectTrait} from \"@swim/domain\";\nimport {EntityTrait} from \"@swim/domain\";\n\n/** @public */\nexport interface AspectBinderControllerObserver<C extends AspectBinderController = AspectBinderController> extends BinderControllerObserver<C> {\n  controllerWillAttachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerDidDetachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n}\n\n/** @public */\nexport class AspectBinderController extends BinderController {\n  declare readonly observerType?: Class<AspectBinderControllerObserver>;\n\n  @TraitViewRef({\n    extends: true,\n    didAttachTrait(sheetTrait: Trait): void {\n      if (sheetTrait instanceof EntityTrait) {\n        this.owner.entity.setTrait(sheetTrait);\n      }\n    },\n    willDetachTrait(sheetTrait: Trait): void {\n      if (this.owner.entity.trait === sheetTrait) {\n        this.owner.entity.setTrait(null);\n      }\n    },\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, SheetView> & BinderController[\"sheet\"];\n\n  @TraitRef({\n    traitType: EntityTrait,\n    willAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTrait\", entityTrait, this.owner);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.tabs.sort(entityTrait.aspects.sorted);\n\n      // Replace or insert new aspect tabs.\n      const aspectTraits = entityTrait.aspects.traits;\n      const aspectControllers = {} as {[aspectId: string]: SheetController | undefined};\n      for (const traitId in aspectTraits) {\n        const aspectTrait = aspectTraits[traitId]!;\n        const aspectId = aspectTrait.id.value;\n        if (aspectId === void 0) {\n          continue;\n        }\n        const tabController = this.owner.tabs.createController(aspectTrait);\n        tabController.sheet.setTrait(aspectTrait);\n        if (tabController !== this.owner.getChild(aspectId)) {\n          this.owner.setTab(aspectId, tabController);\n        }\n        aspectControllers[aspectId] = tabController;\n      }\n\n      // Remove old aspect tabs.\n      const tabControllers = this.owner.tabs.controllers;\n      for (const controllerId in tabControllers) {\n        const tabController = tabControllers[controllerId]!;\n        const tabTrait = tabController.sheet.trait;\n        let aspectId: string | undefined;\n        if (tabTrait instanceof AspectTrait && (aspectId = tabTrait.id.value) !== void 0 && !(aspectId in aspectControllers)) {\n          this.owner.tabs.deleteController(tabController);\n        }\n      }\n\n      const binderView = this.owner.binder.view;\n      if (binderView !== null && binderView.mounted) {\n        this.mountBinder(binderView, entityTrait);\n      }\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      const binderView = this.owner.binder.view;\n      if (binderView !== null && binderView.mounted) {\n        this.unmountBinder(binderView, entityTrait);\n      }\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTrait\", entityTrait, this.owner);\n    },\n    traitWillAttachAspect(aspectTrait: AspectTrait): void {\n      this.owner.tabs.insertTrait(void 0, aspectTrait);\n    },\n    traitDidDetachAspect(aspectTrait: AspectTrait): void {\n      this.owner.tabs.deleteTrait(aspectTrait);\n    },\n    traitDidReinsertAspect(aspectTrait: AspectTrait, targetTrait: AspectTrait | null): void {\n      this.owner.tabs.reinsertTrait(aspectTrait, targetTrait);\n    },\n    mountBinder(binderView: BinderView, entityTrait: EntityTrait): void {\n      entityTrait.consume(this.owner);\n    },\n    unmountBinder(binderView: BinderView, entityTrait: EntityTrait): void {\n      entityTrait.unconsume(this.owner);\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait> & {\n    mountBinder(binderView: BinderView, entityTrait: EntityTrait): void,\n    unmountBinder(binderView: BinderView, entityTrait: EntityTrait): void,\n  };\n\n  @TraitRef({\n    traitType: AspectTrait,\n    observes: true,\n    initTrait(aspectTrait: AspectTrait): void {\n      this.owner.title.set(aspectTrait.title.value);\n    },\n    deinitTrait(aspectTrait: AspectTrait): void {\n      this.owner.title.set(void 0);\n    },\n    traitDidSetTitle(title: string): void {\n      const titleController = this.owner.title.attachController();\n      const titleView = titleController.tool.attachView();\n      if (titleView instanceof TitleToolView) {\n        titleView.content.set(title);\n      }\n    },\n  })\n  readonly aspect!: TraitRef<this, AspectTrait> & Observes<AspectTrait>;\n\n  @TraitViewRef({\n    extends: true,\n    observesView: true,\n    initView(binderView: BinderView): void {\n      super.initView(binderView);\n    },\n    didAttachView(binderView: BinderView, targetView: View): void {\n      const entityTrait = this.owner.entity.trait;\n      if (binderView.mounted && entityTrait !== null) {\n        this.owner.entity.mountBinder(binderView, entityTrait);\n      }\n      super.didAttachView(binderView, targetView);\n    },\n    willDetachView(binderView: BinderView): void {\n      super.willDetachView(binderView);\n      const entityTrait = this.owner.entity.trait;\n      if (binderView.mounted && entityTrait !== null) {\n        this.owner.entity.unmountBinder(binderView, entityTrait);\n      }\n    },\n    viewDidMount(binderView: BinderView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.mountBinder(binderView, entityTrait);\n      }\n    },\n    viewWillUnmount(binderView: BinderView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.unmountBinder(binderView, entityTrait);\n      }\n    },\n  })\n  override readonly binder!: TraitViewRef<this, Trait, BinderView> & BinderController[\"binder\"];\n\n  protected override didPressTabHandle(input: PositionGestureInput, event: Event | null, tabController: SheetController): void {\n    super.didPressTabHandle(input, event, tabController);\n    const tabTrait = tabController.sheet.trait;\n    let aspectId: string | undefined;\n    if (!(tabTrait instanceof AspectTrait) || (aspectId = tabTrait.id.value) === void 0) {\n      return;\n    }\n    this.history.getService().pushHistory({\n      parameters: {\n        aspect: aspectId,\n      },\n      environment: {\n        aspect: aspectId,\n      },\n    });\n  }\n\n  @TraitViewControllerRef({\n    extends: true,\n    initController(tabBarController: BarController): void {\n      super.initController(tabBarController);\n    },\n    attachTabBarView(tabBarView: BarView, tabBarController: BarController): void {\n      super.attachTabBarView(tabBarView, tabBarController);\n      tabBarView.setIntrinsic({\n        style: {\n          backgroundColor: Look.backgroundColor,\n          backdropFilter: \"blur(2px)\",\n        },\n        barHeight: 48,\n      });\n      tabBarView.modifyMood(Feel.default, [[Feel.transparent, 0], [Feel.translucent, 1]]);\n    },\n  })\n  override readonly tabBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & BinderController[\"tabBar\"];\n\n  @TraitViewControllerSet({\n    extends: true,\n    controllerKey(tabController: SheetController): string | undefined {\n      const tabTrait = tabController.sheet.trait;\n      if (tabTrait instanceof AspectTrait) {\n        return tabTrait.id.value;\n      }\n      return void 0;\n    },\n    initController(tabController: SheetController): void {\n      super.initController(tabController);\n      const handleController = tabController.handle.attachController() as ButtonToolController;\n      const handleView = handleController.tool.attachView();\n      if (handleView.graphics.value === null) {\n        const tabTrait = tabController.sheet.trait;\n        if (tabTrait instanceof AspectTrait) {\n          handleView.graphics.setIntrinsic(tabTrait.icon.value);\n        }\n      }\n    },\n    createController(trait?: Trait): SheetController {\n      if (trait instanceof AspectTrait) {\n        const tabController = trait.createTabController();\n        if (tabController !== null) {\n          return tabController;\n        }\n      }\n      return super.createController(trait);\n    },\n    compare(a: SheetController, b: SheetController): number {\n      const entityTrait = this.owner.entity.trait;\n      const aTrait = a.sheet.trait;\n      const bTrait = b.sheet.trait;\n      if (entityTrait !== null && aTrait instanceof AspectTrait && bTrait instanceof AspectTrait) {\n        return entityTrait.aspects.compareTraits(aTrait, bTrait);\n      }\n      return 0;\n    },\n  })\n  override readonly tabs!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & BinderController[\"tabs\"];\n\n  @TraitViewControllerRef({\n    extends: true,\n    attachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      super.attachActiveTrait(activeTrait, activeController);\n      if (activeTrait instanceof AspectTrait) {\n        this.owner.aspect.setTrait(activeTrait);\n      }\n    },\n    detachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      this.owner.aspect.setTrait(null);\n      super.detachActiveTrait(activeTrait, activeController);\n    },\n  })\n  override readonly active!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & BinderController[\"active\"];\n\n  protected updateNavigationState(): void {\n    const historyState = this.history.getService().historyState;\n    let aspectId = historyState.parameters.aspect;\n    if (aspectId === void 0 || aspectId.length === 0) {\n      aspectId = historyState.environment.aspect;\n    }\n    if (aspectId === void 0 || aspectId.length === 0) {\n      const entityTrait = this.entity.trait;\n      const aspectTrait = entityTrait !== null ? entityTrait.aspect.trait : null;\n      aspectId = aspectTrait !== null ? aspectTrait.id.value : void 0;\n    }\n    if (aspectId === void 0 || aspectId.length === 0) {\n      return;\n    }\n    const tabController = this.getChild(aspectId, SheetController);\n    if (tabController === null) {\n      return;\n    }\n    this.active.setController(tabController);\n  }\n\n  @Provider({\n    serviceType: HistoryService,\n    observes: true,\n    updateHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState | null): void {\n      this.owner.requireUpdate(Controller.NeedsResolve);\n    },\n    serviceDidPushHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState): void {\n      this.updateHistory(newHistoryState, oldHistoryState);\n    },\n    serviceDidPopHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState): void {\n      this.updateHistory(newHistoryState, oldHistoryState);\n    },\n  })\n  readonly history!: Provider<this, HistoryService> & Observes<HistoryService> & {\n    updateHistory(historyState: HistoryState, oldHistoryState: HistoryState | null): void;\n  };\n\n  protected override onResolve(): void {\n    super.onResolve();\n    this.updateNavigationState();\n  }\n\n  static override MountFlags: ControllerFlags = BinderController.MountFlags | Controller.NeedsResolve;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {SelectionOptions} from \"@swim/model\";\nimport {SelectableTrait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TextCellView} from \"@swim/table\";\nimport {IconCellView} from \"@swim/table\";\nimport type {LeafView} from \"@swim/table\";\nimport type {LeafTrait} from \"@swim/table\";\nimport type {RowControllerObserver} from \"@swim/table\";\nimport {RowController} from \"@swim/table\";\nimport {Status} from \"@swim/domain\";\nimport {EntityTrait} from \"@swim/domain\";\n\n/** @public */\nexport interface EntityRowControllerObserver<C extends EntityRowController = EntityRowController> extends RowControllerObserver<C> {\n  controllerWillAttachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerDidDetachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerWillAttachIconCellView?(iconCellView: IconCellView, controller: C): void;\n\n  controllerDidDetachIconCellView?(iconCellView: IconCellView, controller: C): void;\n\n  controllerWillAttachTitleCellView?(titleCellView: TextCellView, controller: C): void;\n\n  controllerDidDetachTitleCellView?(titleCellView: TextCellView, controller: C): void;\n\n  controllerWillAttachMoreCellView?(moreCellView: IconCellView, controller: C): void;\n\n  controllerDidDetachMoreCellView?(moreCellView: IconCellView, controller: C): void;\n\n  controllerDidPressMoreCellView?(input: PositionGestureInput, event: Event | null, controller: C): void;\n}\n\n/** @public */\nexport class EntityRowController extends RowController {\n  declare readonly observerType?: Class<EntityRowControllerObserver>;\n\n  @Property({\n    valueType: Status,\n    value: Status.unknown(),\n    didSetValue(status: Status): void {\n      this.owner.leaf.updateStatus(status);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    consumed: true,\n    observes: true,\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.status.setIntrinsic(entityTrait.status.value);\n    },\n    willAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTrait\", entityTrait, this.owner);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.selectable.setTrait(entityTrait.getTrait(SelectableTrait));\n      const rowView = this.owner.row.attachView();\n      const leafView = rowView.leaf.insertView();\n      this.owner.iconCell.insertView(leafView).setIntrinsic({\n        graphics: entityTrait.icon.value,\n      });\n      this.owner.titleCell.insertView(leafView).setIntrinsic({\n        content: entityTrait.title.value,\n      });\n      if (entityTrait.relatable.value && this.owner.moreCell.enabled) {\n        this.owner.moreCell.insertView(leafView);\n      }\n    },\n    deinitTrait(entityTrait: EntityTrait): void {\n      this.owner.status.setIntrinsic(Status.unknown());\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.selectable.setTrait(null);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTrait\", entityTrait, this.owner);\n    },\n    traitDidInsertTrait(memberTrait: Trait, targetTrait: Trait | null): void {\n      if (memberTrait instanceof SelectableTrait) {\n        this.owner.selectable.setTrait(memberTrait);\n      }\n    },\n    traitDidSetTitle(title: string): void {\n      const titleCellView = this.owner.titleCell.view;\n      if (titleCellView !== null) {\n        titleCellView.content.setIntrinsic(title);\n      }\n    },\n    traitDidSetIcon(icon: Graphics | null): void {\n      const iconCellView = this.owner.iconCell.view;\n      if (iconCellView !== null) {\n        iconCellView.graphics.setIntrinsic(icon);\n      }\n    },\n    traitDidSetStatus(status: Status): void {\n      this.owner.status.setIntrinsic(status);\n    },\n    traitDidSetRelatable(relatable: boolean): void {\n      if (!this.owner.moreCell.enabled) {\n        return;\n      } else if (relatable) {\n        this.owner.moreCell.insertView();\n      } else {\n        this.owner.moreCell.removeView();\n      }\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @TraitRef({\n    traitType: SelectableTrait,\n    observes: true,\n    initTrait(selectableTrait: SelectableTrait): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.setIntrinsic(selectableTrait.selected);\n      }\n    },\n    traitDidSelect(options: SelectionOptions | null): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.focus();\n      }\n    },\n    traitWillUnselect(): void {\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        leafView.highlight.unfocus();\n      }\n    },\n  })\n  readonly selectable!: TraitRef<this, SelectableTrait> & Observes<SelectableTrait>;\n\n  @TraitViewRef({\n    extends: true,\n    initView(leafView: LeafView): void {\n      super.initView(leafView);\n      this.updateStatus(this.owner.status.value);\n\n      leafView.style.cursor.setIntrinsic(\"pointer\");\n      this.owner.iconCell.insertView(leafView);\n      this.owner.titleCell.insertView(leafView);\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null && entityTrait.relatable.value && this.owner.moreCell.enabled) {\n        this.owner.moreCell.insertView(leafView);\n      }\n\n      const selectableTrait = this.owner.selectable.trait;\n      if (selectableTrait !== null) {\n        leafView.highlight.setIntrinsic(selectableTrait.selected);\n      }\n    },\n    didAttachView(leafView: LeafView, targetView: View | null): void {\n      super.didAttachView(leafView, targetView);\n      if (leafView.mounted && !leafView.culled) {\n        this.owner.consume(leafView);\n      }\n    },\n    viewDidMount(leafView: LeafView): void {\n      if (!leafView.culled) {\n        this.owner.consume(leafView);\n      }\n    },\n    viewWillUnmount(leafView: LeafView): void {\n      this.owner.unconsume(leafView);\n    },\n    viewDidCull(leafView: LeafView): void {\n      this.owner.unconsume(leafView);\n    },\n    viewWillUncull(leafView: LeafView): void {\n      this.owner.consume(leafView);\n    },\n    updateStatus(status: Status): void {\n      const leafView = this.view;\n      if (leafView !== null) {\n        leafView.modifyMood(Feel.default, status.moodModifier);\n      }\n    },\n  })\n  override readonly leaf!: TraitViewRef<this, LeafTrait, LeafView> & RowController[\"leaf\"] & {\n    updateStatus(status: Status): void;\n  };\n\n  @ViewRef({\n    viewType: IconCellView,\n    viewKey: \"icon\",\n    get parentView(): View | null {\n      return this.owner.leaf.attachView();\n    },\n    willAttachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerWillAttachIconCellView\", iconCellView, this.owner);\n    },\n    didDetachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerDidDetachIconCellView\", iconCellView, this.owner);\n    },\n    createView(): IconCellView {\n      return (super.createView() as IconCellView).setIntrinsic({\n        iconLayout: {width: 32, height: 32},\n        iconColor: Look.accentColor,\n      });\n    },\n  })\n  readonly iconCell!: ViewRef<this, IconCellView>;\n\n  @ViewRef({\n    viewType: TextCellView,\n    viewKey: \"title\",\n    get parentView(): View | null {\n      return this.owner.leaf.attachView();\n    },\n    willAttachView(titleCellView: TextCellView): void {\n      this.owner.callObservers(\"controllerWillAttachTitleCellView\", titleCellView, this.owner);\n    },\n    didDetachView(titleCellView: TextCellView): void {\n      this.owner.callObservers(\"controllerDidDetachTitleCellView\", titleCellView, this.owner);\n    },\n  })\n  readonly titleCell!: ViewRef<this, TextCellView>;\n\n  @ViewRef({\n    viewType: IconCellView,\n    viewKey: \"more\",\n    observes: true,\n    init(): void {\n      this.enabled = true;\n    },\n    get parentView(): View | null {\n      return this.owner.leaf.attachView();\n    },\n    willAttachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerWillAttachMoreCellView\", iconCellView, this.owner);\n    },\n    didDetachView(iconCellView: IconCellView): void {\n      this.owner.callObservers(\"controllerDidDetachMoreCellView\", iconCellView, this.owner);\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null): void {\n      this.owner.callObservers(\"controllerDidPressMoreCellView\", input, event, this.owner);\n    },\n    createView(): IconCellView {\n      return (super.createView() as IconCellView).setIntrinsic({\n        iconLayout: {width: 24, height: 24},\n        iconColor: Look.legendColor,\n        graphics: EntityRowController.moreIcon,\n      });\n    },\n  })\n  readonly moreCell!: ViewRef<this, IconCellView> & Observes<IconCellView> & {\n    /** @internal */\n    enabled: boolean;\n  };\n\n  /** @internal */\n  @Lazy\n  static get moreIcon(): VectorIcon {\n    return VectorIcon.create(24, 24, \"M9.59,8.92 L12.67,12 L9.59,15.08 L11,16.5 L15.5,12 L11,7.5 L9.59,8.92 Z M2,12 C2,17.52 6.48,22 12,22 C17.52,22 22,17.52 22,12 C22,6.48 17.52,2 12,2 C6.48,2 2,6.48 2,12 Z M20,12 C20,16.42 16.42,20 12,20 C7.58,20 4,16.42 4,12 C4,7.58 7.58,4 12,4 C16.42,4 20,7.58 20,12 Z\");\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {TraitRef} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {ColLayout} from \"@swim/table\";\nimport {TableLayout} from \"@swim/table\";\nimport type {LeafView} from \"@swim/table\";\nimport type {RowView} from \"@swim/table\";\nimport type {RowTrait} from \"@swim/table\";\nimport type {RowController} from \"@swim/table\";\nimport type {TableView} from \"@swim/table\";\nimport type {TableTrait} from \"@swim/table\";\nimport type {TableControllerObserver} from \"@swim/table\";\nimport {TableController} from \"@swim/table\";\nimport {EntityTrait} from \"@swim/domain\";\nimport {AspectRowController} from \"./AspectRowController\";\nimport {EntityRowController} from \"./EntityRowController\";\n\n/** @public */\nexport interface EntityTableControllerObserver<C extends EntityTableController = EntityTableController> extends TableControllerObserver<C> {\n  controllerWillAttachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerDidDetachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerWillAttachEntityRow?(entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidDetachEntityRow?(entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidPressEntityRow?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidLongPressEntityRow?(input: PositionGestureInput, entityRowController: EntityRowController, controller: C): void;\n\n  controllerWillAttachAspectRow?(aspectRowController: AspectRowController, controller: C): void;\n\n  controllerDidDetachAspectRow?(aspectRowController: AspectRowController, controller: C): void;\n\n  controllerDidPressAspectRow?(input: PositionGestureInput, event: Event | null, aspectRowController: AspectRowController, controller: C): void;\n\n  controllerDidLongPressAspectRow?(input: PositionGestureInput, aspectRowController: AspectRowController, controller: C): void;\n}\n\n/** @public */\nexport class EntityTableController extends TableController {\n  declare readonly observerType?: Class<EntityTableControllerObserver>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    observes: true,\n    willAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTrait\", entityTrait, this.owner);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.entityRow.insertTrait(void 0, entityTrait);\n\n      const tableView = this.owner.table.view;\n      if (tableView !== null && tableView.mounted) {\n        this.mountTable(tableView, entityTrait);\n      }\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      const tableView = this.owner.table.view;\n      if (tableView !== null && tableView.mounted) {\n        this.unmountTable(tableView, entityTrait);\n      }\n\n      this.owner.entityRow.deleteTrait(entityTrait);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTrait\", entityTrait, this.owner);\n    },\n    mountTable(tableView: TableView, entityTrait: EntityTrait): void {\n      entityTrait.consume(this.owner);\n    },\n    unmountTable(tableView: TableView, entityTrait: EntityTrait): void {\n      entityTrait.unconsume(this.owner);\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait> & {\n    mountTable(tableView: TableView, entityTrait: EntityTrait): void,\n    unmountTable(tableView: TableView, entityTrait: EntityTrait): void,\n  };\n\n  @TraitViewRef({\n    extends: true,\n    observesView: true,\n    initView(tableView: TableView): void {\n      super.initView(tableView);\n\n      tableView.style.backgroundColor.set(null);\n      tableView.style.userSelect.setIntrinsic(\"none\");\n      tableView.rowHeight.setIntrinsic(tableView.viewIdiom === \"mobile\" ? 48 : 36);\n\n      const iconLayout = ColLayout.create(\"icon\", 0, 0, 48);\n      const titleLayout = ColLayout.create(\"title\", 1, 0);\n      const moreLayout = ColLayout.create(\"more\", 0, 0, 48);\n      const tableLayout = TableLayout.create([iconLayout, titleLayout, moreLayout]);\n      tableView.layout.setIntrinsic(tableLayout);\n    },\n    didAttachView(tableView: TableView, targetView: View): void {\n      const entityTrait = this.owner.entity.trait;\n      if (tableView.mounted && entityTrait !== null) {\n        this.owner.entity.mountTable(tableView, entityTrait);\n      }\n      super.didAttachView(tableView, targetView);\n    },\n    willDetachView(tableView: TableView): void {\n      super.willDetachView(tableView);\n      const entityTrait = this.owner.entity.trait;\n      if (tableView.mounted && entityTrait !== null) {\n        this.owner.entity.unmountTable(tableView, entityTrait);\n      }\n    },\n    viewWillExpand(tableView: TableView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.mountTable(tableView, entityTrait);\n      }\n    },\n    viewDidCollapse(tableView: TableView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.unmountTable(tableView, entityTrait);\n      }\n    },\n    viewWillResize(tableView: TableView): void {\n      tableView.rowHeight.setIntrinsic(tableView.viewIdiom === \"mobile\" ? 48 : 36);\n    },\n    viewDidMount(tableView: TableView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.mountTable(tableView, entityTrait);\n      }\n    },\n    viewWillUnmount(tableView: TableView): void {\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        this.owner.entity.unmountTable(tableView, entityTrait);\n      }\n    },\n  })\n  override readonly table!: TraitViewRef<this, TableTrait, TableView> & TableController[\"table\"];\n\n  @TraitViewControllerSet({\n    extends: true,\n    compare(a: RowController, b: RowController): number {\n      return this.owner.compareRowControllers(a, b);\n    },\n  })\n  override readonly rows!: TraitViewControllerSet<this, RowTrait, RowView, RowController> & TableController[\"rows\"];\n\n  @TraitControllerRef({\n    controllerType: EntityRowController,\n    binds: false,\n    observes: true,\n    getTraitRef(entityRowController: EntityRowController): TraitRef<unknown, EntityTrait> {\n      return entityRowController.entity;\n    },\n    willAttachController(entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerWillAttachEntityRow\", entityRowController, this.owner);\n    },\n    didAttachController(entityRowController: EntityRowController): void {\n      const targetView = this.owner.rows.getTargetView(entityRowController);\n      entityRowController.row.insertView(this.owner.table.view, void 0, targetView);\n    },\n    didDetachController(entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidDetachEntityRow\", entityRowController, this.owner);\n    },\n    controllerDidPressLeafView(input: PositionGestureInput, event: Event | null, leafView: LeafView, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressEntityRow\", input, event, entityRowController, this.owner);\n    },\n    controllerDidLongPressLeafView(input: PositionGestureInput, leafView: LeafView, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidLongPressEntityRow\", input, entityRowController, this.owner);\n    },\n    createController(trait?: EntityTrait): EntityRowController {\n      const entityRowController = super.createController(trait);\n      entityRowController.moreCell.enabled = false;\n      return entityRowController;\n    },\n  })\n  readonly entityRow!: TraitControllerRef<this, EntityTrait, EntityRowController> & Observes<EntityRowController>;\n\n  protected compareRowControllers(a: RowController, b: RowController): number {\n    const entityTrait = this.entity.trait;\n    if (entityTrait !== null && a instanceof AspectRowController && b instanceof AspectRowController) {\n      const x = a.aspect.trait;\n      const y = b.aspect.trait;\n      if (x !== null && y !== null) {\n        return entityTrait.aspects.compareTraits(x, y);\n      }\n    }\n    return 0;\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {TraitRef} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitControllerSet} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport {ColLayout} from \"@swim/table\";\nimport {TableLayout} from \"@swim/table\";\nimport type {LeafView} from \"@swim/table\";\nimport type {RowView} from \"@swim/table\";\nimport type {RowTrait} from \"@swim/table\";\nimport type {RowController} from \"@swim/table\";\nimport {TextColView} from \"@swim/table\";\nimport {DisclosureColView} from \"@swim/table\";\nimport type {HeaderView} from \"@swim/table\";\nimport type {HeaderTrait} from \"@swim/table\";\nimport type {HeaderController} from \"@swim/table\";\nimport type {TableView} from \"@swim/table\";\nimport type {TableTrait} from \"@swim/table\";\nimport type {TableControllerObserver} from \"@swim/table\";\nimport {TableController} from \"@swim/table\";\nimport type {EntityTrait} from \"@swim/domain\";\nimport {RelationTrait} from \"@swim/domain\";\nimport {EntityRowController} from \"./EntityRowController\";\n\n/** @public */\nexport interface RelationTableControllerObserver<C extends RelationTableController = RelationTableController> extends TableControllerObserver<C> {\n  controllerWillAttachRelationTrait?(relationTrait: RelationTrait, controller: C): void;\n\n  controllerDidDetachRelationTrait?(relationTrait: RelationTrait, controller: C): void;\n\n  controllerWillAttachDisclosureColView?(disclosureColView: DisclosureColView, controller: C): void;\n\n  controllerDidDetachDisclosureColView?(disclosureColView: DisclosureColView, controller: C): void;\n\n  controllerWillAttachTitleColView?(titleColView: TextColView, controller: C): void;\n\n  controllerDidDetachTitleColView?(titleColView: TextColView, controller: C): void;\n\n  controllerWillAttachEntityRow?(entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidDetachEntityRow?(entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidPressEntityRow?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidLongPressEntityRow?(input: PositionGestureInput, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidPressEntityMore?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n}\n\n/** @public */\nexport class RelationTableController extends TableController {\n  declare readonly observerType?: Class<RelationTableControllerObserver>;\n\n  @TraitRef({\n    traitType: RelationTrait,\n    observes: true,\n    willAttachTrait(relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"controllerWillAttachRelationTrait\", relationTrait, this.owner);\n    },\n    didAttachTrait(relationTrait: RelationTrait): void {\n      this.owner.rows.sort(relationTrait.entities.sorted);\n      this.owner.entityRows.sort(relationTrait.entities.sorted);\n      this.owner.entityRows.insertTraits(void 0, relationTrait.entities.traits);\n\n      this.owner.titleCol.attachView().setIntrinsic({\n        label: relationTrait.title.value,\n      });\n\n      const tableView = this.owner.table.view;\n      if (tableView !== null) {\n        tableView.expansion.set(relationTrait.disclosed.value);\n        if (tableView.mounted) {\n          this.mountTable(tableView, relationTrait);\n        }\n      }\n    },\n    willDetachTrait(relationTrait: RelationTrait): void {\n      const tableView = this.owner.table.view;\n      if (tableView !== null && tableView.mounted) {\n        this.unmountTable(tableView, relationTrait);\n      }\n      this.owner.entityRows.deleteTraits(relationTrait.entities.traits);\n    },\n    didDetachTrait(relationTrait: RelationTrait): void {\n      this.owner.callObservers(\"controllerDidDetachRelationTrait\", relationTrait, this.owner);\n    },\n    traitDidSetTitle(relationTitle: string): void {\n      this.owner.titleCol.attachView().setIntrinsic({\n        label: relationTitle,\n      });\n    },\n    traitDidSetDisclosed(disclosed: boolean): void {\n      const tableView = this.owner.table.view;\n      if (tableView !== null) {\n        tableView.expansion.set(disclosed);\n      }\n    },\n    traitWillAttachEntity(entityTrait: EntityTrait): void {\n      this.owner.entityRows.insertTrait(void 0, entityTrait);\n    },\n    traitDidDetachEntity(entityTrait: EntityTrait): void {\n      this.owner.entityRows.deleteTrait(entityTrait);\n    },\n    traitDidReinsertEntity(entityTrait: EntityTrait, targetTrait: EntityTrait | null): void {\n      this.owner.entityRows.reinsertTrait(entityTrait, targetTrait);\n    },\n    mountTable(tableView: TableView, relationTrait: RelationTrait): void {\n      if (!tableView.expansion.collapsed) {\n        relationTrait.consume(this.owner);\n      }\n    },\n    unmountTable(tableView: TableView, relationTrait: RelationTrait): void {\n      relationTrait.unconsume(this.owner);\n    },\n  })\n  readonly relation!: TraitRef<this, RelationTrait> & Observes<RelationTrait> & {\n    mountTable(tableView: TableView, relationTrait: RelationTrait): void,\n    unmountTable(tableView: TableView, relationTrait: RelationTrait): void,\n  };\n\n  @TraitViewRef({\n    extends: true,\n    observesView: true,\n    initView(tableView: TableView): void {\n      super.initView(tableView);\n\n      tableView.header.setView(this.owner.header.attachView());\n      tableView.set({\n        style: {\n          backgroundColor: null,\n          userSelect: \"none\",\n        },\n        rowHeight: tableView.viewIdiom === \"mobile\" ? 48 : 36,\n      });\n\n      const iconLayout = ColLayout.create(\"icon\", 0, 0, 48);\n      const titleLayout = ColLayout.create(\"title\", 1, 0);\n      const moreLayout = ColLayout.create(\"more\", 0, 0, 48);\n      const tableLayout = TableLayout.create([iconLayout, titleLayout, moreLayout]);\n      tableView.layout.setIntrinsic(tableLayout);\n\n      const relationTrait = this.owner.relation.trait;\n      if (relationTrait !== null) {\n        tableView.expansion.set(relationTrait.disclosed.value);\n      }\n    },\n    didAttachView(tableView: TableView, targetView: View): void {\n      const relationTrait = this.owner.relation.trait;\n      if (tableView.mounted && relationTrait !== null) {\n        this.owner.relation.mountTable(tableView, relationTrait);\n      }\n      super.didAttachView(tableView, targetView);\n    },\n    willDetachView(tableView: TableView): void {\n      super.willDetachView(tableView);\n      const relationTrait = this.owner.relation.trait;\n      if (tableView.mounted && relationTrait !== null) {\n        this.owner.relation.unmountTable(tableView, relationTrait);\n      }\n    },\n    viewWillExpand(tableView: TableView): void {\n      const relationTrait = this.owner.relation.trait;\n      if (relationTrait !== null) {\n        this.owner.relation.mountTable(tableView, relationTrait);\n      }\n    },\n    viewDidCollapse(tableView: TableView): void {\n      const relationTrait = this.owner.relation.trait;\n      if (relationTrait !== null) {\n        this.owner.relation.unmountTable(tableView, relationTrait);\n      }\n    },\n    viewWillResize(tableView: TableView): void {\n      tableView.rowHeight.setIntrinsic(tableView.viewIdiom === \"mobile\" ? 48 : 36);\n    },\n    viewDidMount(tableView: TableView): void {\n      const relationTrait = this.owner.relation.trait;\n      if (relationTrait !== null) {\n        this.owner.relation.mountTable(tableView, relationTrait);\n      }\n    },\n    viewWillUnmount(tableView: TableView): void {\n      const relationTrait = this.owner.relation.trait;\n      if (relationTrait !== null) {\n        this.owner.relation.unmountTable(tableView, relationTrait);\n      }\n    },\n  })\n  override readonly table!: TraitViewRef<this, TableTrait, TableView> & TableController[\"table\"];\n\n  @TraitViewControllerRef({\n    extends: true,\n    attachHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      super.attachHeaderView(headerView, headerController);\n      this.initHeaderView(headerView, headerController);\n    },\n    initHeaderView(headerView: HeaderView, headerController: HeaderController): void {\n      this.owner.disclosureCol.insertView(headerView);\n      this.owner.titleCol.insertView(headerView);\n    },\n  })\n  override readonly header!: TraitViewControllerRef<this, HeaderTrait, HeaderView, HeaderController> & TableController[\"header\"] & {\n    initHeaderView(headerView: HeaderView, headerController: HeaderController): void;\n  };\n\n  @ViewRef({\n    viewType: DisclosureColView,\n    viewKey: \"icon\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    initView(disclosureColView: DisclosureColView): void {\n      const disclosureButton = disclosureColView.button.view;\n      if (disclosureButton !== null) {\n        disclosureButton.set({\n          collapsedColor: Look.legendColor,\n          expandedColor: Look.legendColor,\n        });\n      }\n    },\n    willAttachView(disclosureColView: DisclosureColView): void {\n      this.owner.callObservers(\"controllerWillAttachDisclosureColView\", disclosureColView, this.owner);\n    },\n    didDetachView(disclosureColView: DisclosureColView): void {\n      this.owner.callObservers(\"controllerDidDetachDisclosureColView\", disclosureColView, this.owner);\n    },\n  })\n  readonly disclosureCol!: ViewRef<this, DisclosureColView>;\n\n  @ViewRef({\n    viewType: TextColView,\n    viewKey: \"title\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    willAttachView(titleCellView: TextColView): void {\n      this.owner.callObservers(\"controllerWillAttachTitleColView\", titleCellView, this.owner);\n    },\n    didDetachView(titleCellView: TextColView): void {\n      this.owner.callObservers(\"controllerDidDetachTitleColView\", titleCellView, this.owner);\n    },\n  })\n  readonly titleCol!: ViewRef<this, TextColView>;\n\n  @TraitViewControllerSet({\n    extends: true,\n    compare(a: RowController, b: RowController): number {\n      return this.owner.compareRowControllers(a, b);\n    },\n  })\n  override readonly rows!: TraitViewControllerSet<this, RowTrait, RowView, RowController> & TableController[\"rows\"];\n\n  @TraitControllerSet({\n    controllerType: EntityRowController,\n    binds: false,\n    observes: true,\n    getTraitRef(entityRowController: EntityRowController): TraitRef<unknown, EntityTrait> {\n      return entityRowController.entity;\n    },\n    willAttachController(entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerWillAttachEntityRow\", entityRowController, this.owner);\n    },\n    didAttachController(entityRowController: EntityRowController): void {\n      const targetView = this.owner.rows.getTargetView(entityRowController);\n      entityRowController.row.insertView(this.owner.table.view, void 0, targetView);\n    },\n    didDetachController(entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidDetachEntityRow\", entityRowController, this.owner);\n    },\n    controllerDidPressLeafView(input: PositionGestureInput, event: Event | null, leafView: LeafView, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressEntityRow\", input, event, entityRowController, this.owner);\n    },\n    controllerDidLongPressLeafView(input: PositionGestureInput, leafView: LeafView, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidLongPressEntityRow\", input, entityRowController, this.owner);\n    },\n    controllerDidPressMoreCellView(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressEntityMore\", input, event, entityRowController, this.owner);\n    },\n    compare(a: EntityRowController, b: EntityRowController): number {\n      return this.owner.compareRowControllers(a, b);\n    },\n  })\n  readonly entityRows!: TraitControllerSet<this, EntityTrait, EntityRowController> & Observes<EntityRowController>;\n\n  protected compareRowControllers(a: RowController, b: RowController): number {\n    const relationTrait = this.relation.trait;\n    if (relationTrait !== null && a instanceof EntityRowController && b instanceof EntityRowController) {\n      const x = a.entity.trait;\n      const y = b.entity.trait;\n      if (x !== null && y !== null) {\n        return relationTrait.entities.compareTraits(x, y);\n      }\n    }\n    return 0;\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitControllerRef} from \"@swim/controller\";\nimport {TraitControllerSet} from \"@swim/controller\";\nimport {TitleToolView} from \"@swim/toolbar\";\nimport type {SheetView} from \"@swim/sheet\";\nimport type {SheetControllerObserver} from \"@swim/sheet\";\nimport {SheetController} from \"@swim/sheet\";\nimport {EntityTrait} from \"@swim/domain\";\nimport type {RelationTrait} from \"@swim/domain\";\nimport type {AspectRowController} from \"./AspectRowController\";\nimport type {EntityRowController} from \"./EntityRowController\";\nimport {EntityTableController} from \"./EntityTableController\";\nimport {RelationTableController} from \"./RelationTableController\";\n\n/** @public */\nexport interface EntityNavControllerObserver<C extends EntityNavController = EntityNavController> extends SheetControllerObserver<C> {\n  controllerWillAttachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerDidDetachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerWillAttachEntityTable?(entityTableController: EntityTableController, controller: C): void;\n\n  controllerDidDetachEntityTable?(entityTableController: EntityTableController, controller: C): void;\n\n  controllerDidPressEntityRow?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidLongPressEntityRow?(input: PositionGestureInput, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidPressAspectRow?(input: PositionGestureInput, event: Event | null, aspectRowController: AspectRowController, controller: C): void;\n\n  controllerDidLongPressAspectRow?(input: PositionGestureInput, aspectRowController: AspectRowController, controller: C): void;\n\n  controllerWillAttachRelationTable?(relationTableController: RelationTableController, controller: C): void;\n\n  controllerDidDetachRelationTable?(relationTableController: RelationTableController, controller: C): void;\n\n  controllerDidPressRelatedEntityRow?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidLongPressRelatedEntityRow?(input: PositionGestureInput, entityRowController: EntityRowController, controller: C): void;\n\n  controllerDidPressRelatedEntityMore?(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController, controller: C): void;\n}\n\n/** @public */\nexport class EntityNavController extends SheetController {\n  declare readonly observerType?: Class<EntityNavControllerObserver>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    observes: true,\n    willAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTrait\", entityTrait, this.owner);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.sheet.attachView();\n      this.owner.title.set(entityTrait.title.value);\n      this.owner.searchable.set(entityTrait.searchable.value);\n      this.owner.entityTable.attachTrait(entityTrait);\n      const relationTraits = entityTrait.relations.traits;\n      for (const traitId in relationTraits) {\n        const relationTrait = relationTraits[traitId]!;\n        if (!relationTrait.hidden.value) {\n          this.owner.relationTables.addTrait(relationTrait);\n        }\n      }\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.relationTables.deleteTraits(entityTrait.relations.traits);\n      this.owner.entityTable.deleteTrait(entityTrait);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTrait\", entityTrait, this.owner);\n    },\n    traitDidSetTitle(title: string): void {\n      const titleController = this.owner.title.attachController();\n      const titleView = titleController.tool.attachView();\n      if (titleView instanceof TitleToolView) {\n        titleView.content.set(title);\n      }\n    },\n    traitDidSetSearchable(searchable: boolean): void {\n      this.owner.searchable.setIntrinsic(searchable);\n    },\n    traitWillAttachRelation(relationTrait: RelationTrait, targetTrait: Trait | null): void {\n      if (!relationTrait.hidden.value) {\n        this.owner.relationTables.addTrait(relationTrait, targetTrait);\n      }\n    },\n    traitDidDetachRelation(relationTrait: RelationTrait): void {\n      this.owner.relationTables.deleteTrait(relationTrait);\n    },\n    traitDidSetRelationHidden(hidden: boolean, relationTrait: RelationTrait): void {\n      if (hidden) {\n        this.owner.relationTables.deleteTrait(relationTrait);\n      } else {\n        this.owner.relationTables.addTrait(relationTrait);\n      }\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @TraitViewRef({\n    extends: true,\n    //initView(sheetView: SheetView): void {\n    //  super.initView(sheetView);\n    //},\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, SheetView> & SheetController[\"sheet\"];\n\n  @Property({\n    extends: true,\n    didSetValue(newSearching: boolean, oldSearching: boolean): void {\n      super.didSetValue(newSearching, oldSearching);\n      const entityTrait = this.owner.entity.trait;\n      if (entityTrait !== null) {\n        entityTrait.searching.setIntrinsic(newSearching);\n      }\n    },\n  })\n  override readonly searching!: Property<this, boolean>;\n\n  override updateSearch(query: string, inputView: HtmlView): void {\n    const entityTrait = this.entity.trait;\n    if (entityTrait !== null) {\n      entityTrait.updateSearch(query);\n    }\n  }\n\n  override submitSearch(query: string, inputView: HtmlView): void {\n    const entityTrait = this.entity.trait;\n    if (entityTrait !== null) {\n      entityTrait.submitSearch(query);\n    }\n  }\n\n  @TraitControllerRef({\n    controllerType: EntityTableController,\n    binds: true,\n    observes: true,\n    getTraitRef(entityTableController: EntityTableController): TraitRef<unknown, EntityTrait> {\n      return entityTableController.entity;\n    },\n    willAttachController(entityTableController: EntityTableController): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTable\", entityTableController, this.owner);\n    },\n    didAttachController(entityTableController: EntityTableController): void {\n      entityTableController.table.insertView(this.owner.sheet.view);\n    },\n    didDetachController(entityTableController: EntityTableController): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTable\", entityTableController, this.owner);\n    },\n    controllerDidPressEntityRow(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressEntityRow\", input, event, entityRowController, this.owner);\n    },\n    controllerDidLongPressEntityRow(input: PositionGestureInput, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidLongPressEntityRow\", input, entityRowController, this.owner);\n    },\n    controllerDidPressAspectRow(input: PositionGestureInput, event: Event | null, aspectRowController: AspectRowController): void {\n      this.owner.callObservers(\"controllerDidPressAspectRow\", input, event, aspectRowController, this.owner);\n    },\n    controllerDidLongPressAspectRow(input: PositionGestureInput, aspectRowController: AspectRowController): void {\n      this.owner.callObservers(\"controllerDidLongPressAspectRow\", input, aspectRowController, this.owner);\n    },\n  })\n  readonly entityTable!: TraitControllerRef<this, EntityTrait, EntityTableController> & Observes<EntityTableController>;\n\n  @TraitControllerSet({\n    controllerType: RelationTableController,\n    binds: true,\n    observes: true,\n    getTraitRef(relationTableController: RelationTableController): TraitRef<unknown, RelationTrait> {\n      return relationTableController.relation;\n    },\n    willAttachController(relationTableController: RelationTableController): void {\n      this.owner.callObservers(\"controllerWillAttachRelationTable\", relationTableController, this.owner);\n    },\n    didAttachController(relationTableController: RelationTableController): void {\n      relationTableController.table.insertView(this.owner.sheet.view);\n    },\n    didDetachController(relationTableController: RelationTableController): void {\n      this.owner.callObservers(\"controllerDidDetachRelationTable\", relationTableController, this.owner);\n    },\n    controllerDidPressEntityRow(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressRelatedEntityRow\", input, event, entityRowController, this.owner);\n    },\n    controllerDidLongPressEntityRow(input: PositionGestureInput, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidLongPressRelatedEntityRow\", input, entityRowController, this.owner);\n    },\n    controllerDidPressEntityMore(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      this.owner.callObservers(\"controllerDidPressRelatedEntityMore\", input, event, entityRowController, this.owner);\n    },\n  })\n  readonly relationTables!: TraitControllerSet<this, RelationTrait, RelationTableController> & Observes<RelationTableController>;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Provider} from \"@swim/component\";\nimport {UriPath} from \"@swim/uri\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport {SelectionService} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport type {ControllerFlags} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {ControllerRef} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport {TraitViewControllerSet} from \"@swim/controller\";\nimport type {HistoryStateInit} from \"@swim/controller\";\nimport type {HistoryState} from \"@swim/controller\";\nimport {HistoryService} from \"@swim/controller\";\nimport type {DrawerView} from \"@swim/window\";\nimport type {ToolController} from \"@swim/toolbar\";\nimport type {BarView} from \"@swim/toolbar\";\nimport {BarController} from \"@swim/toolbar\";\nimport type {SheetView} from \"@swim/sheet\";\nimport {SheetController} from \"@swim/sheet\";\nimport {NavBarController} from \"@swim/sheet\";\nimport type {StackView} from \"@swim/sheet\";\nimport {AppBarController} from \"@swim/sheet\";\nimport type {FolioStyle} from \"@swim/sheet\";\nimport type {FolioView} from \"@swim/sheet\";\nimport type {FolioControllerObserver} from \"@swim/sheet\";\nimport {FolioController} from \"@swim/sheet\";\nimport type {TabBarController} from \"@swim/sheet\";\nimport type {BinderView} from \"@swim/sheet\";\nimport {Status} from \"@swim/domain\";\nimport {EntityTrait} from \"@swim/domain\";\nimport type {RelationTrait} from \"@swim/domain\";\nimport {AspectBinderController} from \"./AspectBinderController\";\nimport type {EntityRowController} from \"./EntityRowController\";\nimport {EntityNavController} from \"./EntityNavController\";\n\n/** @public */\nexport interface EntityFolioControllerObserver<C extends EntityFolioController = EntityFolioController> extends FolioControllerObserver<C> {\n}\n\n/** @public */\nexport class EntityFolioController extends FolioController {\n  declare readonly observerType?: Class<EntityFolioControllerObserver>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    didAttachTrait(entityTrait: EntityTrait): void {\n      if (this.owner.mounted) {\n        this.owner.requireUpdate(Controller.NeedsResolve);\n      }\n    },\n  })\n  readonly rootEntity!: TraitRef<this, EntityTrait>;\n\n  @ViewRef({\n    extends: true,\n    initView(drawerView: DrawerView): void {\n      super.initView(drawerView);\n      drawerView.style.backgroundColor.setIntrinsic(Look.backgroundColor);\n    },\n    updateFullBleed(fullBleed: boolean, drawerView: DrawerView): void {\n      super.updateFullBleed(fullBleed, drawerView);\n      drawerView.style.backdropFilter.setIntrinsic(fullBleed ? \"blur(2px)\" : \"none\");\n      drawerView.modifyMood(Feel.default, [[Feel.translucent, fullBleed ? 1 : 0]], false);\n    },\n  })\n  override readonly drawer!: ViewRef<this, DrawerView> & FolioController[\"drawer\"];\n\n  @TraitViewRef({\n    extends: true,\n    updateFolioStyle(folioStyle: FolioStyle | undefined, stackView: StackView): void {\n      const fullBleed = this.owner.fullBleed.value;\n      this.owner.backAlign.setIntrinsic(fullBleed && folioStyle === \"unstacked\" ? -1 : -(1 / 3));\n    },\n    updateFullBleed(fullBleed: boolean, stackView: StackView): void {\n      super.updateFullBleed(fullBleed, stackView);\n      const folioStyle = this.owner.folioStyle.value;\n      this.owner.backAlign.setIntrinsic(fullBleed && folioStyle === \"unstacked\" ? -1 : -(1 / 3));\n      this.owner.navBar.updateFrontScroll(this.owner.front.view);\n    },\n  })\n  override readonly stack!: TraitViewRef<this, Trait, StackView> & FolioController[\"stack\"];\n\n  @TraitViewControllerSet({\n    extends: true,\n    updateFolioStyle(folioStyle: FolioStyle | undefined, sheetView: SheetView, sheetController: SheetController): void {\n      super.updateFolioStyle(folioStyle, sheetView, sheetController);\n      const fullBleed = this.owner.fullBleed.value;\n      sheetView.modifyMood(Feel.default, [[Feel.transparent, fullBleed && folioStyle === \"unstacked\" ? 1 : 0]], false);\n    },\n    updateFullBleed(fullBleed: boolean, sheetView: SheetView, sheetController: SheetController): void {\n      super.updateFullBleed(fullBleed, sheetView, sheetController);\n      const folioStyle = this.owner.folioStyle.value;\n      sheetView.modifyMood(Feel.default, [[Feel.transparent, fullBleed && folioStyle === \"unstacked\" ? 1 : 0]], false);\n    },\n  })\n  override readonly sheets!: TraitViewControllerSet<this, Trait, SheetView, SheetController> & FolioController[\"sheets\"];\n\n  @TraitViewControllerRef({\n    extends: true,\n    didAttachController(frontController: SheetController, targetController: Controller | null): void {\n      super.didAttachController(frontController, targetController);\n      if (!(frontController instanceof EntityNavController)) {\n        return;\n      }\n      const frontEntityTrait = frontController.entity.trait;\n      this.owner.frontEntity.setTrait(frontEntityTrait);\n      this.owner.frontNav.setController(frontController);\n    },\n    willDetachController(frontController: SheetController): void {\n      super.willDetachController(frontController);\n      if (frontController instanceof EntityNavController) {\n        this.owner.frontNav.setController(null);\n        // Don't unset frontEntity trait.\n      }\n    },\n    controllerWillAttachTitle(titleController: ToolController, frontController: SheetController): void {\n      const titleView = titleController.tool.view;\n      if (titleView !== null) {\n        titleView.style.cursor.setIntrinsic(\"pointer\");\n      }\n    },\n  })\n  override readonly front!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & FolioController[\"front\"];\n\n  @ControllerRef({\n    controllerType: EntityNavController,\n    observes: true,\n    controllerDidPressEntityRow(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      const entityTrait = entityRowController.entity.trait;\n      let entityPath: UriPath | null;\n      if (entityTrait === null || (entityPath = entityTrait.path.value) === null) {\n        return;\n      }\n      const historyService = this.owner.history.getService();\n      const historyState = historyService.historyState;\n\n      let fragment: string | undefined;\n      if (entityPath.isAbsolute() && !entityPath.tail().isEmpty()) {\n        fragment = entityPath.appendedSlash().toString();\n      }\n\n      const parameters: HistoryStateInit[\"parameters\"] = {};\n      if (this.owner.folioStyle.value === \"stacked\") {\n        let aspectId = historyState.parameters.aspect;\n        if (aspectId === void 0 || aspectId.length === 0) {\n          aspectId = historyState.environment.aspect;\n        }\n        if (aspectId === void 0 || aspectId.length === 0) {\n          const aspectTrait = entityTrait.aspect.trait;\n          aspectId = aspectTrait !== null ? aspectTrait.id.value : void 0;\n        }\n        parameters.aspect = aspectId;\n      }\n\n      if (fragment !== historyState.fragment || parameters.aspect !== historyState.parameters.aspect) {\n        historyService.pushHistory({\n          fragment,\n          parameters,\n        });\n      }\n    },\n    controllerDidLongPressEntityRow(input: PositionGestureInput, entityRowController: EntityRowController): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      input.preventDefault();\n    },\n    controllerDidPressRelatedEntityRow(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      const entityTrait = entityRowController.entity.trait;\n      let entityPath: UriPath | null;\n      if (entityTrait === null || (entityPath = entityTrait.path.value) === null) {\n        return;\n      }\n      const historyService = this.owner.history.getService();\n      const historyState = historyService.historyState;\n\n      const fragment = entityPath.toString();\n\n      const parameters: HistoryStateInit[\"parameters\"] = {};\n      if (this.owner.folioStyle.value === \"stacked\") {\n        let aspectId = historyState.parameters.aspect;\n        if (aspectId === void 0 || aspectId.length === 0) {\n          aspectId = historyState.environment.aspect;\n        }\n        if (aspectId === void 0 || aspectId.length === 0) {\n          const aspectTrait = entityTrait.aspect.trait;\n          aspectId = aspectTrait !== null ? aspectTrait.id.value : void 0;\n        }\n        parameters.aspect = aspectId;\n      }\n\n      if (fragment !== historyState.fragment || parameters.aspect !== historyState.parameters.aspect) {\n        historyService.pushHistory({\n          fragment,\n          parameters,\n        });\n      }\n    },\n    controllerDidLongPressRelatedEntityRow(input: PositionGestureInput, entityRowController: EntityRowController): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      input.preventDefault();\n    },\n    controllerDidPressRelatedEntityMore(input: PositionGestureInput, event: Event | null, entityRowController: EntityRowController): void {\n      if (input.defaultPrevented) {\n        return;\n      }\n      input.preventDefault();\n      const entityTrait = entityRowController.entity.trait;\n      let entityPath: UriPath | null;\n      if (entityTrait === null || (entityPath = entityTrait.path.value) === null) {\n        return;\n      }\n      const historyService = this.owner.history.getService();\n      const historyState = historyService.historyState;\n\n      let fragment: string | undefined;\n      if (entityPath.isAbsolute() && !entityPath.tail().isEmpty()) {\n        fragment = entityPath.appendedSlash().toString();\n      }\n\n      if (fragment !== historyState.fragment) {\n        historyService.pushHistory({fragment});\n      }\n    },\n  })\n  readonly frontNav!: ControllerRef<this, EntityNavController> & Observes<EntityNavController>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    observes: true,\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.frontStatus.setIntrinsic(entityTrait.status.value);\n    },\n    traitDidSetStatus(status: Status): void {\n      this.owner.frontStatus.setIntrinsic(status);\n    },\n  })\n  readonly frontEntity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @Property({\n    valueType: Status,\n    value: Status.unknown(),\n    didSetValue(status: Status): void {\n      this.owner.navBar.updateStatus(status);\n    },\n  })\n  readonly frontStatus!: Property<this, Status>;\n\n  @TraitViewRef({\n    extends: true,\n    initView(folioView: FolioView): void {\n      super.initView(folioView);\n      const drawerView = folioView.drawer.attachView();\n      drawerView.expandedWidth.set(280);\n      drawerView.modifyTheme(Feel.default, [[Feel.raised, 1]]);\n    },\n    viewDidSetFolioStyle(folioStyle: FolioStyle | undefined, folioView: FolioView): void {\n      super.viewDidSetFolioStyle(folioStyle, folioView);\n      this.owner.requireUpdate(Controller.NeedsResolve);\n    },\n  })\n  override readonly folio!: TraitViewRef<this, Trait, FolioView> & FolioController[\"folio\"];\n\n  @TraitViewControllerRef({\n    extends: true,\n    initController(navBarController: BarController): void {\n      super.initController(navBarController);\n      if (!(navBarController instanceof NavBarController)) {\n        return;\n      }\n      const closeButtonController = navBarController.closeButton.insertController();\n      closeButtonController.tool.setView(null);\n      navBarController.backButton.insertController();\n      navBarController.searchButton.insertController();\n      navBarController.searchInput.insertController();\n      navBarController.cancelSearch.insertController();\n    },\n    attachNavBarView(navBarView: BarView, navBarController: BarController): void {\n      super.attachNavBarView(navBarView, navBarController);\n      navBarView.modifyMood(Feel.default, [[Feel.translucent, 0], [Feel.transparent, 1]]);\n      navBarView.style.backgroundColor.setIntrinsic(Look.backgroundColor);\n      navBarView.barHeight.setIntrinsic(48);\n      this.updateFrontScroll(this.owner.front.view);\n    },\n    updateFolioStyle(folioStyle: FolioStyle | undefined, navBarController: BarController): void {\n      super.updateFolioStyle(folioStyle, navBarController);\n      if (!(navBarController instanceof NavBarController)) {\n        return;\n      }\n      navBarController.showBackTitle.setIntrinsic(folioStyle === \"stacked\");\n    },\n    frontViewDidScroll(frontView: SheetView, navBarController: BarController): void {\n      super.frontViewDidScroll(frontView, navBarController);\n      this.updateFrontScroll(frontView);\n    },\n    updateFrontScroll(frontView: SheetView | null): void {\n      const navBarView = this.view;\n      if (navBarView === null) {\n        return;\n      }\n      const scrollTop = frontView !== null ? frontView.node.scrollTop : 0;\n      const folioStyle = this.owner.folioStyle.value;\n      const fullBleed = this.owner.fullBleed.value;\n      const transparent = scrollTop === 0 && (!fullBleed || folioStyle !== \"stacked\");\n      const timing = navBarView.getLook(Look.timing);\n      navBarView.style.backgroundColor.setIntrinsic(Look.backgroundColor, timing);\n      navBarView.style.backdropFilter.setIntrinsic(transparent ? \"none\" : \"blur(2px)\");\n      navBarView.modifyMood(Feel.default, [[Feel.translucent, 1],\n                                           [Feel.transparent, transparent ? 1 : 0]], timing);\n    },\n    updateStatus(status: Status): void {\n      const navBarView = this.view;\n      if (navBarView !== null) {\n        navBarView.modifyMood(Feel.default, status.moodModifier);\n      }\n    },\n  })\n  override readonly navBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & FolioController[\"navBar\"] & {\n    updateFrontScroll(frontView: SheetView | null): void,\n    updateStatus(status: Status): void,\n  };\n\n  @TraitViewControllerRef({\n    extends: true,\n    initController(appBarController: BarController): void {\n      super.initController(appBarController);\n      if (appBarController instanceof AppBarController) {\n        appBarController.menuButton.insertController();\n      }\n    },\n    attachAppBarView(appBarView: BarView, appBarController: BarController): void {\n      super.attachAppBarView(appBarView, appBarController);\n      appBarView.modifyMood(Feel.default, [[Feel.translucent, 1], [Feel.transparent, 1]]);\n      appBarView.style.backgroundColor.setIntrinsic(Look.backgroundColor);\n      appBarView.barHeight.setIntrinsic(48);\n    },\n    coverViewDidScroll(coverView: SheetView, appBarController: BarController): void {\n      super.coverViewDidScroll(coverView, appBarController);\n      const appBarView = appBarController.bar.view;\n      if (appBarView === null) {\n        return;\n      } else if (coverView.node.scrollTop === 0) {\n        appBarView.style.backdropFilter.setIntrinsic(\"none\");\n        appBarView.modifyMood(Feel.default, [[Feel.transparent, 1]]);\n      } else {\n        appBarView.style.backdropFilter.setIntrinsic(\"blur(2px)\");\n        appBarView.modifyMood(Feel.default, [[Feel.transparent, 0]]);\n      }\n    },\n  })\n  override readonly appBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & FolioController[\"appBar\"];\n\n  @TraitViewControllerRef({\n    extends: true,\n    attachCoverTrait(coverTrait: Trait, coverController: SheetController): void {\n      super.attachCoverTrait(coverTrait, coverController);\n      if (coverTrait instanceof EntityTrait) {\n        this.owner.coverEntity.setTrait(coverTrait);\n      }\n    },\n    detachCoverTrait(coverTrait: Trait, coverController: SheetController): void {\n      if (coverTrait instanceof EntityTrait) {\n        this.owner.coverEntity.setTrait(null);\n      }\n      super.detachCoverTrait(coverTrait, coverController);\n    },\n    controllerWillPresentSheetView(sheetView: SheetView, coverController: SheetController): void {\n      const coverTrait = coverController.sheet.trait;\n      if (coverTrait instanceof EntityTrait) {\n        this.owner.coverEntity.setTrait(coverTrait);\n      }\n    },\n    controllerWillDismissSheetView(sheetView: SheetView, coverController: SheetController): void {\n      const coverTrait = coverController.sheet.trait;\n      if (coverTrait instanceof EntityTrait) {\n        this.owner.coverEntity.setTrait(null);\n      }\n    },\n  })\n  override readonly cover!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & FolioController[\"cover\"];\n\n  @TraitRef({\n    traitType: EntityTrait,\n  })\n  readonly coverEntity!: TraitRef<this, EntityTrait>;\n\n  @TraitViewControllerRef({\n    controllerType: BarController,\n    observes: true,\n    getTraitViewRef(tabBarController: BarController): TraitViewRef<unknown, Trait, BarView> {\n      return tabBarController.bar;\n    },\n    didAttachController(tabBarController: BarController): void {\n      const tabBarView = tabBarController.bar.view;\n      if (tabBarView !== null) {\n        this.attachTabBarView(tabBarView, tabBarController);\n      }\n    },\n    willDetachController(tabBarController: BarController): void {\n      const tabBarView = tabBarController.bar.view;\n      if (tabBarView !== null) {\n        this.detachTabBarView(tabBarView, tabBarController);\n      }\n    },\n    controllerWillAttachBarView(tabBarView: BarView, tabBarController: BarController): void {\n      this.attachTabBarView(tabBarView, tabBarController);\n    },\n    controllerDidDetachBarView(tabBarView: BarView, tabBarController: BarController): void {\n      this.detachTabBarView(tabBarView, tabBarController);\n    },\n    attachTabBarView(tabBarView: BarView, tabBarController: BarController): void {\n      // hook\n    },\n    detachTabBarView(tabBarView: BarView, tabBarController: BarController): void {\n      // hook\n    },\n    controllerDidPressTabHandle(input: PositionGestureInput, event: Event | null, tabController: SheetController): void {\n      // hook\n    },\n    controllerDidLongPressTabHandle(input: PositionGestureInput, tabController: SheetController): void {\n      // hook\n    },\n  })\n  readonly tabBar!: TraitViewControllerRef<this, Trait, BarView, BarController> & Observes<TabBarController> & {\n    attachTabBarView(tabBarView: BarView, tabBarController: BarController): void,\n    detachTabBarView(tabBarView: BarView, tabBarController: BarController): void,\n  };\n\n  @TraitViewControllerRef({\n    controllerType: AspectBinderController,\n    observes: true,\n    getTraitViewRef(binderController: AspectBinderController): TraitViewRef<unknown, Trait, BinderView> {\n      return binderController.binder;\n    },\n    initController(binderController: AspectBinderController): void {\n      binderController.binder.attachView();\n      binderController.tabBar.insertController();\n    },\n    didAttachController(binderController: AspectBinderController): void {\n      const binderTrait = binderController.binder.trait;\n      if (binderTrait !== null) {\n        this.attachBinderTrait(binderTrait, binderController);\n      }\n      const binderView = binderController.binder.view;\n      if (binderView !== null) {\n        this.attachBinderView(binderView, binderController);\n      }\n      this.owner.tabBar.bindInlet(binderController.tabBar);\n      this.owner.active.bindInlet(binderController.active);\n    },\n    willDetachController(binderController: AspectBinderController): void {\n      this.owner.active.unbindInlet(binderController.active);\n      this.owner.tabBar.unbindInlet(binderController.tabBar);\n      const binderView = binderController.binder.view;\n      if (binderView !== null) {\n        this.detachBinderView(binderView, binderController);\n      }\n      const binderTrait = binderController.binder.trait;\n      if (binderTrait !== null) {\n        this.detachBinderTrait(binderTrait, binderController);\n      }\n    },\n    controllerWillAttachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void {\n      this.attachBinderTrait(binderTrait, binderController);\n    },\n    controllerDidDetachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void {\n      this.detachBinderTrait(binderTrait, binderController);\n    },\n    attachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void {\n      // hook\n    },\n    detachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void {\n      // hook\n    },\n    controllerWillAttachBinderView(binderView: BinderView, binderController: AspectBinderController): void {\n      this.attachBinderView(binderView, binderController);\n    },\n    controllerDidDetachBinderView(binderView: BinderView, binderController: AspectBinderController): void {\n      this.detachBinderView(binderView, binderController);\n    },\n    attachBinderView(binderView: BinderView, binderController: AspectBinderController): void {\n      // hook\n    },\n    detachBinderView(binderView: BinderView, binderController: AspectBinderController): void {\n      this.detachController();\n    },\n  })\n  readonly binder!: TraitViewControllerRef<this, Trait, BinderView, AspectBinderController> & Observes<AspectBinderController> & {\n    attachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void;\n    detachBinderTrait(binderTrait: Trait, binderController: AspectBinderController): void;\n    attachBinderView(binderView: BinderView, binderController: AspectBinderController): void;\n    detachBinderView(binderView: BinderView, binderController: AspectBinderController): void;\n  };\n\n  @TraitViewControllerRef({\n    controllerType: SheetController,\n    observes: true,\n    getTraitViewRef(activeController: SheetController): TraitViewRef<unknown, Trait, SheetView> {\n      return activeController.sheet;\n    },\n    didAttachController(activeController: SheetController): void {\n      const activeTrait = activeController.sheet.trait;\n      if (activeTrait !== null) {\n        this.attachActiveTrait(activeTrait, activeController);\n      }\n      const activeView = activeController.sheet.attachView();\n      this.attachActiveView(activeView, activeController);\n    },\n    willDetachController(activeController: SheetController): void {\n      const activeView = activeController.sheet.view;\n      if (activeView !== null) {\n        this.detachActiveView(activeView, activeController);\n      }\n      const activeTrait = activeController.sheet.trait;\n      if (activeTrait !== null) {\n        this.detachActiveTrait(activeTrait, activeController);\n      }\n    },\n    controllerWillAttachSheetTrait(activeTrait: Trait, activeController: SheetController): void {\n      this.attachActiveTrait(activeTrait, activeController);\n    },\n    controllerDidDetachSheetTrait(activeTrait: Trait, activeController: SheetController): void {\n      this.detachActiveTrait(activeTrait, activeController);\n    },\n    attachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      // hook\n    },\n    detachActiveTrait(activeTrait: Trait, activeController: SheetController): void {\n      // hook\n    },\n    controllerWillAttachSheetView(activeView: SheetView, activeController: SheetController): void {\n      this.attachActiveView(activeView, activeController);\n    },\n    controllerDidDetachSheetView(activeView: SheetView, activeController: SheetController): void {\n      this.detachActiveView(activeView, activeController);\n    },\n    attachActiveView(activeView: SheetView, activeController: SheetController): void {\n      // hook\n    },\n    detachActiveView(activeView: SheetView, activeController: SheetController): void {\n      // hook\n    },\n  })\n  readonly active!: TraitViewControllerRef<this, Trait, SheetView, SheetController> & Observes<SheetController> & {\n    attachActiveTrait(activeTrait: Trait, activeController: SheetController): void,\n    detachActiveTrait(activeTrait: Trait, activeController: SheetController): void,\n    attachActiveView(activeView: SheetView, activeController: SheetController): void,\n    detachActiveView(activeView: SheetView, activeController: SheetController): void,\n  };\n\n  @Provider({serviceType: SelectionService})\n  readonly selection!: Provider<this, SelectionService>;\n\n  protected createEntityNav(entityTrait: EntityTrait): SheetController {\n    let navController = entityTrait.createNavController();\n    if (navController === null) {\n      navController = new EntityNavController();\n      (navController as EntityNavController).entity.setTrait(entityTrait);\n    }\n    return navController;\n  }\n\n  showEntityNav(entityTrait: EntityTrait, timing?: TimingLike | boolean | null): void {\n    const navController = this.createEntityNav(entityTrait);\n    navController.sheet.setTrait(entityTrait);\n    const navView = navController.sheet.attachView();\n    navView.dismiss();\n    this.appendChild(navController);\n    this.sheets.addController(navController);\n    navView.present(timing);\n  }\n\n  showEntityBinder(entityTrait: EntityTrait, timing?: TimingLike | boolean | null): void {\n    const binderController = this.binder.insertController();\n    binderController.sheet.setTrait(entityTrait);\n    binderController.sheet.attachView().dismiss();\n    this.cover.setController(binderController);\n    this.cover.present(timing);\n  }\n\n  protected override didPressBackButton(input: PositionGestureInput, event: Event | null): void {\n    this.callObservers(\"controllerDidPressBackButton\", input, event, this);\n    if (input.defaultPrevented) {\n      return;\n    }\n\n    const frontTrait = this.frontEntity.trait;\n    let frontPath: UriPath | null;\n    if (frontTrait === null || (frontPath = frontTrait.path.value) === null) {\n      // Can't go back when uninitialized.\n      return;\n    }\n    const coverTrait = this.coverEntity.trait;\n    const coverPath = coverTrait !== null ? coverTrait.path.value : null;\n\n    const historyService = this.history.getService();\n    const historyState = historyService.historyState;\n\n    let fragment: string | undefined;\n    const parameters: HistoryStateInit[\"parameters\"] = {};\n    const environment: HistoryStateInit[\"parameters\"] = {};\n    if (this.folioStyle.value === \"unstacked\") {\n      // `/relation/entity/` => `/relation/entity`\n      fragment = frontPath.toString();\n    } else if (coverPath === null || frontPath.equals(UriPath.slash())) {\n      // `/relation/entity/` => `/`\n      let parentPath = frontPath.parent().parent();\n      if (parentPath.isEmpty()) {\n        parentPath = UriPath.slash();\n      }\n      fragment = parentPath.toString();\n      parameters.aspect = void 0;\n    } else {\n      fragment = frontPath.appendedSlash().toString();\n      parameters.aspect = void 0;\n    }\n    if (historyState.parameters.aspect !== void 0) {\n      environment.aspect = historyState.parameters.aspect;\n    }\n\n    historyService.pushHistory({\n      fragment,\n      parameters,\n      environment,\n    });\n  }\n\n  protected updateNavigationState(): void {\n    let targetTrait = this.rootEntity.trait;\n    if (targetTrait === null) {\n      return;\n    } else if (this.root.controller === null) {\n      // Inject the root navigation controller.\n      this.showEntityNav(targetTrait);\n    }\n\n    let targetController = this.root.controller;\n    if (!(targetController instanceof EntityNavController)) {\n      return;\n    }\n\n    const historyState = this.history.getService().historyState;\n    let targetPath: UriPath;\n    try {\n      targetPath = historyState.fragment !== void 0\n                 ? UriPath.parse(historyState.fragment)\n                 : UriPath.empty();\n    } catch (error) {\n      return; // swallow parse errors\n    }\n\n    //let unmatchedController = targetController.forward.controller;\n    let unmatchedPath = targetPath;\n    if (unmatchedPath.isAbsolute()) {\n      unmatchedPath = unmatchedPath.tail();\n    }\n\n    // Match the current navigation stack against the target path.\n    while (unmatchedPath.isSegment()) {\n      let subpath = unmatchedPath;\n\n      // Try to match a relation segment.\n      const relationId = subpath.head();\n      const relationTrait: RelationTrait | null = targetTrait.relations.get(relationId);\n      if (relationTrait === null) {\n        // Unknown relationId.\n        break;\n      }\n      subpath = subpath.tail();\n      if (subpath.isAbsolute()) {\n        subpath = subpath.tail();\n      }\n\n      // Try to match an entity segment.\n      const entityId = subpath.head();\n      const entityTrait: EntityTrait | null = relationTrait.entities.get(entityId);\n      if (entityTrait === null) {\n        // Unknown entityId.\n        break;\n      }\n      subpath = subpath.tail();\n\n      // Get the entity of the forward navigation sheet.\n      const forwardController: SheetController | null = targetController.forward.controller;\n      if (!(forwardController instanceof EntityNavController)) {\n        // Reached the end of the existing navigation stack.\n        break;\n      }\n      const forwardTrait = forwardController.entity.trait;\n      if (forwardTrait === null) {\n        // Uninitialized entity.\n        return;\n      }\n\n      // Compare the resolved entity path to the forward navigation sheet.\n      if (entityTrait !== forwardTrait) {\n        // Forward navigation sheet represents a different entity.\n        break;\n      }\n\n      if (!subpath.isAbsolute()) {\n        break;\n      }\n      subpath = subpath.tail();\n      targetTrait = forwardTrait;\n      targetController = forwardController;\n      unmatchedPath = subpath;\n    }\n\n    // Dismiss old navigation sheets.\n    let unmatchedController = targetController.forward.controller;\n    if (unmatchedController !== null) {\n      // First traverse forward to the top of the navigation stack.\n      do {\n        if (unmatchedController.forward.controller === null) {\n          break;\n        }\n        unmatchedController = unmatchedController.forward.controller;\n      } while (unmatchedController !== null);\n      // Then traverse backwards popping unmatched navigation sheets off the stack.\n      while (unmatchedController !== null && unmatchedController !== targetController) {\n        const backController: SheetController | null = unmatchedController.back.controller;\n        const sheetView = unmatchedController.sheet.view;\n        if (sheetView !== null) {\n          sheetView.dismiss();\n        }\n        unmatchedController = backController;\n      }\n    }\n\n    // Present new navigation sheets.\n    while (unmatchedPath.isSegment()) {\n      const relationId = unmatchedPath.head();\n      const relationTrait: RelationTrait | null = targetTrait.relations.get(relationId);\n      if (relationTrait === null) {\n        return;\n      }\n      unmatchedPath = unmatchedPath.tail();\n      if (!unmatchedPath.isAbsolute()) {\n        return;\n      }\n      unmatchedPath = unmatchedPath.tail();\n\n      const entityId = unmatchedPath.head();\n      const entityTrait: EntityTrait | null = relationTrait.entities.getOrInsert(entityId);\n      if (entityTrait === null) {\n        return;\n      }\n      unmatchedPath = unmatchedPath.tail();\n\n      if (unmatchedPath.isAbsolute()) {\n        this.showEntityNav(entityTrait);\n        unmatchedPath = unmatchedPath.tail();\n      }\n\n      targetTrait = entityTrait;\n    }\n\n    if (this.folioStyle.value === \"unstacked\"\n        || historyState.parameters.aspect !== void 0\n        || targetPath.isEmpty() || !targetPath.foot().isAbsolute()) {\n      this.showEntityBinder(targetTrait);\n      this.selection.getService().select(targetTrait.model!);\n    } else {\n      this.selection.getService().unselectAll();\n    }\n  }\n\n  @Provider({\n    serviceType: HistoryService,\n    observes: true,\n    updateHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState | null): void {\n      if (oldHistoryState === null\n          || newHistoryState.fragment !== oldHistoryState.fragment\n          || newHistoryState.parameters.aspect !== oldHistoryState.parameters.aspect) {\n        this.owner.requireUpdate(Controller.NeedsResolve);\n      }\n    },\n    serviceDidPushHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState): void {\n      this.updateHistory(newHistoryState, oldHistoryState);\n    },\n    serviceDidPopHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState): void {\n      this.updateHistory(newHistoryState, oldHistoryState);\n    },\n  })\n  readonly history!: Provider<this, HistoryService> & Observes<HistoryService> & {\n    updateHistory(newHistoryState: HistoryState, oldHistoryState: HistoryState | null): void;\n  };\n\n  protected override onResolve(): void {\n    super.onResolve();\n    this.updateNavigationState();\n  }\n\n  static override MountFlags: ControllerFlags = FolioController.MountFlags | Controller.NeedsResolve;\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {HtmlView} from \"@swim/dom\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {TraitViewControllerRef} from \"@swim/controller\";\nimport type {SheetView} from \"@swim/sheet\";\nimport type {SheetControllerObserver} from \"@swim/sheet\";\nimport {SheetController} from \"@swim/sheet\";\nimport {PanelView} from \"@swim/panel\";\nimport type {GeoPerspective} from \"@swim/map\";\nimport type {GeoView} from \"@swim/map\";\nimport {GeoTrait} from \"@swim/map\";\nimport {GeoController} from \"@swim/map\";\nimport type {MapTrait} from \"@swim/map\";\nimport type {MapView} from \"@swim/map\";\nimport {MapController} from \"@swim/map\";\nimport {MapboxView} from \"@swim/mapbox\";\nimport {EntityTrait} from \"@swim/domain\";\n\n/** @public */\nexport interface AtlasControllerObserver<C extends AtlasController = AtlasController> extends SheetControllerObserver<C> {\n  controllerWillAttachMap?(mapController: MapController, controller: C): void;\n\n  controllerDidDetachMap?(mapController: MapController, controller: C): void;\n}\n\n/** @public */\nexport class AtlasController extends SheetController {\n  declare readonly observerType?: Class<AtlasControllerObserver>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    inherits: true,\n    observes: true,\n    willAttachTrait(entityTrait: EntityTrait): void {\n      entityTrait.consume(this);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.hostUri.bindInlet(entityTrait.hostUri);\n      const geoTrait = entityTrait.getTrait(GeoTrait);\n      if (geoTrait !== null) {\n        this.owner.location.insertTrait(void 0, geoTrait);\n      }\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      if (entityTrait.getTrait(GeoTrait) === this.owner.location.trait) {\n        this.owner.location.setTrait(null);\n      }\n      this.owner.hostUri.unbindInlet(entityTrait.hostUri);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      entityTrait.unconsume(this);\n    },\n    traitDidInsertTrait(memberTrait: Trait, targetTrait: Trait | null): void {\n      if (memberTrait instanceof GeoTrait) {\n        this.owner.location.setTrait(memberTrait);\n      }\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @TraitViewControllerRef({\n    controllerType: GeoController,\n    observes: true,\n    getTraitViewRef(geoController: GeoController): TraitViewRef<unknown, GeoTrait, GeoView> {\n      return geoController.geo;\n    },\n    init(): void {\n      this.located = false;\n    },\n    didAttachController(geoController: GeoController): void {\n      const geoTrait = geoController.geo.trait;\n      if (geoTrait !== null) {\n        this.attachGeoTrait(geoTrait, geoController);\n      }\n      const geoView = geoController.geo.attachView();\n      this.attachGeoView(geoView, geoController);\n      this.owner.map.attachController().layers.addController(geoController);\n    },\n    willDetachController(geoController: GeoController): void {\n      const mapController = this.owner.map.controller;\n      if (mapController !== null) {\n        mapController.layers.deleteController(geoController);\n      }\n      const geoView = geoController.geo.view;\n      if (geoView !== null) {\n        this.detachGeoView(geoView, geoController);\n      }\n      const geoTrait = geoController.geo.trait;\n      if (geoTrait !== null) {\n        this.detachGeoTrait(geoTrait, geoController);\n      }\n    },\n    controllerWillAttachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void {\n      this.attachGeoTrait(geoTrait, geoController);\n    },\n    controllerDidDetachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void {\n      this.detachGeoTrait(geoTrait, geoController);\n    },\n    attachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void {\n      geoTrait.consume(this);\n      const geoPerspective = geoTrait.geoPerspective.value;\n      let mapView: MapView | null;\n      if (geoPerspective !== null && (mapView = this.owner.map.view) !== null) {\n        mapView.moveTo(geoPerspective, this.located);\n        this.located = true;\n      } else {\n        this.owner.locationTracking.setIntrinsic(true);\n      }\n    },\n    detachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void {\n      this.owner.locationTracking.setIntrinsic(false);\n      geoTrait.unconsume(this);\n      this.deleteController();\n    },\n    controllerWillAttachGeoView(geoView: GeoView, geoController: GeoController): void {\n      this.attachGeoView(geoView, geoController);\n    },\n    controllerDidDetachGeoView(geoView: GeoView, geoController: GeoController): void {\n      this.detachGeoView(geoView, geoController);\n    },\n    attachGeoView(geoView: GeoView, geoController: GeoController): void {\n      // hook\n    },\n    detachGeoView(geoView: GeoView, geoController: GeoController): void {\n      // hook\n    },\n    controllerDidSetGeoPerspective(geoPerspective: GeoPerspective | null): void {\n      let mapView: MapView | null;\n      if (geoPerspective !== null && this.owner.locationTracking.value\n          && (mapView = this.owner.map.view) !== null) {\n        mapView.moveTo(geoPerspective, this.located);\n        this.located = true;\n        this.owner.locationTracking.setIntrinsic(false);\n      }\n    },\n    createController(trait?: GeoTrait): GeoController {\n      if (trait !== void 0) {\n        return trait.createGeoController();\n      }\n      return super.createController(trait);\n    },\n  })\n  readonly location!: TraitViewControllerRef<this, GeoTrait, GeoView, GeoController> & Observes<GeoController> & {\n    /** @internal */\n    located: boolean;\n    attachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void,\n    detachGeoTrait(geoTrait: GeoTrait, geoController: GeoController): void,\n    attachGeoView(geoView: GeoView, geoController: GeoController): void,\n    detachGeoView(geoView: GeoView, geoController: GeoController): void,\n  };\n\n  @Property({valueType: Boolean, value: false})\n  readonly locationTracking!: Property<this, boolean>;\n\n  @TraitViewControllerRef({\n    controllerType: MapController,\n    consumed: true,\n    observes: true,\n    get parentView(): SheetView | null {\n      return this.owner.sheet.view;\n    },\n    getTraitViewRef(mapController: MapController): TraitViewRef<unknown, MapTrait, MapView> {\n      return mapController.map;\n    },\n    initController(mapController: MapController): void {\n      const sheetView = this.owner.sheet.view;\n      if (sheetView !== null) {\n        this.attachContainerView(sheetView, mapController);\n      }\n    },\n    deinitController(mapController: MapController): void {\n      const sheetView = this.owner.sheet.view;\n      if (sheetView !== null) {\n        this.detachContainerView(sheetView, mapController);\n      }\n    },\n    willAttachController(mapController: MapController): void {\n      this.owner.callObservers(\"controllerWillAttachMap\", mapController, this.owner);\n    },\n    didDetachController(mapController: MapController): void {\n      this.owner.callObservers(\"controllerDidDetachMap\", mapController, this.owner);\n    },\n    controllerWillAttachMapView(mapView: MapView, mapController: MapController): void {\n      mapView.canvas.attachView().setIntrinsic({\n        pointerEvents: true,\n      });\n    },\n    attachContainerView(containerView: HtmlView, mapController: MapController): void {\n      let mapView = mapController.map.view;\n      if (mapView === null) {\n        mapView = this.owner.createMapView(containerView);\n        mapController.map.setView(mapView);\n      }\n      mapController.container.setView(containerView);\n    },\n    detachContainerView(containerView: HtmlView, mapController: MapController): void {\n      const mapView = mapController.map.view;\n      if (mapView !== null) {\n        mapView.container.setView(null);\n      }\n    },\n  })\n  readonly map!: TraitViewControllerRef<this, MapTrait, MapView, MapController> & Observes<MapController> & {\n    attachContainerView(containerView: HtmlView, mapController: MapController): void,\n    detachContainerView(containerView: HtmlView, mapController: MapController): void,\n  };\n\n  protected createMapView(containerView: HtmlView): MapView {\n    const map = new mapboxgl.Map({\n      container: containerView.node,\n      boxZoom: false,\n      center: {lng: 0, lat: 0},\n      zoom: 1,\n    });\n    return new MapboxView(map);\n  }\n\n  @TraitViewRef({\n    extends: true,\n    initView(sheetView: SheetView): void {\n      super.initView(sheetView);\n      sheetView.fullBleed.setIntrinsic(true);\n      const mapController = this.owner.map.attachController();\n      this.owner.map.attachContainerView(sheetView, mapController);\n    },\n    deinitView(sheetView: SheetView): void {\n      const mapController = this.owner.map.controller;\n      if (mapController !== null) {\n        this.owner.map.detachContainerView(sheetView, mapController);\n      }\n      super.deinitView(sheetView);\n    },\n  })\n  override readonly sheet!: TraitViewRef<this, Trait, SheetView> & SheetController[\"sheet\"];\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    initView(mapPanelView: PanelView): void {\n      super.initView(mapPanelView);\n      const mapController = this.owner.map.attachController();\n      this.owner.map.attachContainerView(mapPanelView, mapController);\n    },\n    deinitView(mapPanelView: PanelView): void {\n      const mapController = this.owner.map.controller;\n      if (mapController !== null) {\n        this.owner.map.detachContainerView(mapPanelView, mapController);\n      }\n      super.deinitView(mapPanelView);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        classList: [\"map-panel\"],\n        unitWidth: 1,\n        unitHeight: 1,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly mapPanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: PanelView,\n    observes: true,\n    initView(panelView: PanelView): void {\n      this.owner.mapPanel.insertView(panelView);\n    },\n    didAttachView(panelView: PanelView, targetView: View | null): void {\n      this.owner.panelHeader.setView(panelView.header.view);\n      this.owner.panelTitle.setView(panelView.headerTitle.view);\n      this.owner.panelSubtitle.setView(panelView.headerSubtitle.view);\n    },\n    willDetachView(panelView: PanelView): void {\n      this.owner.panelHeader.setView(null);\n      this.owner.panelTitle.setView(null);\n      this.owner.panelSubtitle.setView(null);\n    },\n    viewWillAttachHeader(headerView: HtmlView): void {\n      this.owner.panelHeader.setView(headerView);\n    },\n    viewDidDetachHeader(headerView: HtmlView): void {\n      this.owner.panelHeader.setView(null);\n    },\n    viewWillAttachHeaderTitle(titleView: HtmlView): void {\n      this.owner.panelTitle.setView(titleView);\n    },\n    viewDidDetachHeaderTitle(titleView: HtmlView): void {\n      this.owner.panelTitle.setView(null);\n    },\n    viewWillAttachHeaderSubtitle(subtitleView: HtmlView): void {\n      this.owner.panelSubtitle.setView(subtitleView);\n    },\n    viewDidDetachHeaderSubtitle(subtitleView: HtmlView): void {\n      this.owner.panelSubtitle.setView(null);\n    },\n    viewDidMount(panelView: PanelView): void {\n      this.owner.consume(panelView);\n    },\n    viewWillUnmount(panelView: PanelView): void {\n      this.owner.unconsume(panelView);\n    },\n  })\n  readonly panel!: ViewRef<this, PanelView> & Observes<PanelView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().header.parentView;\n    },\n    initView(headerView: HtmlView): void {\n      headerView.style.pointerEvents.setIntrinsic(\"none\");\n      this.owner.panel.attachView().header.setView(headerView);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().header.createView();\n    },\n  })\n  readonly panelHeader!: ViewRef<this, HtmlView>;\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().headerTitle.parentView;\n    },\n    initView(titleView: HtmlView): void {\n      this.owner.panel.attachView().headerTitle.setView(titleView);\n    },\n    setText(title: string | undefined): HtmlView {\n      return this.owner.panel.attachView().headerTitle.set(title);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().headerTitle.createView();\n    },\n  })\n  readonly panelTitle!: ViewRef<this, HtmlView> & {\n    setText(title: string | undefined): HtmlView,\n  };\n\n  @ViewRef({\n    viewType: HtmlView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView().headerSubtitle.parentView;\n    },\n    initView(subtitleView: HtmlView): void {\n      this.owner.panel.attachView().headerSubtitle.setView(subtitleView);\n    },\n    setText(subtitle: string | undefined): HtmlView {\n      return this.owner.panel.attachView().headerSubtitle.set(subtitle);\n    },\n    createView(): HtmlView {\n      return this.owner.panel.attachView().headerSubtitle.createView();\n    },\n  })\n  readonly panelSubtitle!: ViewRef<this, HtmlView> & {\n    setText(subtitle: string | undefined): HtmlView,\n  };\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Graphics} from \"@swim/graphics\";\nimport {VectorIcon} from \"@swim/graphics\";\nimport type {SheetController} from \"@swim/sheet\";\nimport {AspectTrait} from \"@swim/domain\";\nimport {AtlasController} from \"./AtlasController\";\n\n/** @public */\nexport class AtlasAspectTrait extends AspectTrait {\n  constructor() {\n    super();\n    this.id.setIntrinsic(\"atlas\");\n    this.title.setIntrinsic(\"Atlas\");\n    this.icon.setIntrinsic(AtlasAspectTrait.icon);\n  }\n\n  override createTabController(): SheetController | null {\n    return (this.constructor as typeof AtlasAspectTrait).sharedController();\n  }\n\n  /** @internal */\n  static SharedController: AtlasController | null | undefined = void 0;\n  static sharedController(): AtlasController | null {\n    let sharedController: AtlasController | null | undefined;\n    if (Object.hasOwnProperty.call(this, \"SharedController\")) {\n      sharedController = this.SharedController;\n    }\n    if (sharedController === void 0) {\n      sharedController = this.createSharedController();\n      Object.defineProperty(this, \"SharedController\", {\n        value: sharedController,\n        enumerable: true,\n        configurable: true,\n      });\n    }\n    return sharedController;\n  }\n\n  static createSharedController(): AtlasController | null {\n    return new AtlasController();\n  }\n\n  /** @internal */\n  @Lazy\n  static get icon(): Graphics {\n    return VectorIcon.create(24, 24, \"M20.5 3l-.16.03L15 5.1 9 3 3.36 4.9c-.21.07-.36.25-.36.48V20.5c0 .28.22.5.5.5l.16-.03L9 18.9l6 2.1 5.64-1.9c.21-.07.36-.25.36-.48V3.5c0-.28-.22-.5-.5-.5zM10 5.47l4 1.4v11.66l-4-1.4V5.47zm-5 .99l3-1.01v11.7l-3 1.16V6.46zm14 11.08l-3 1.01V6.86l3-1.16v11.84z\");\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {GeoShape} from \"@swim/geo\";\nimport {GeoPoint} from \"@swim/geo\";\nimport {Graphics} from \"@swim/graphics\";\nimport {Hyperlink} from \"@swim/controller\";\nimport type {GeoLayerTraitObserver} from \"@swim/map\";\nimport {GeoLayerTrait} from \"@swim/map\";\nimport type {GeoLayerController} from \"@swim/map\";\nimport {AtlasEntityController} from \"./\"; // forward import\n\n/** @public */\nexport interface AtlasEntityTraitObserver<T extends AtlasEntityTrait = AtlasEntityTrait> extends GeoLayerTraitObserver<T> {\n  traitDidSetGeoShape?(geoShape: GeoShape | null, trait: T): void;\n\n  traitDidSetGeoCenter?(geoCenter: GeoPoint | null, trait: T): void;\n\n  traitDidSetGeoIcon?(geoIcon: Graphics | null, trait: T): void;\n}\n\n/** @public */\nexport class AtlasEntityTrait extends GeoLayerTrait {\n  declare readonly observerType?: Class<AtlasEntityTraitObserver>;\n\n  @Property({\n    valueType: GeoShape,\n    value: null,\n    didSetValue(geoShape: GeoShape | null): void {\n      this.owner.callObservers(\"traitDidSetGeoShape\", geoShape, this.owner);\n      this.owner.geoPerspective.setIntrinsic(geoShape);\n      if (geoShape !== null) {\n        this.owner.geoCenter.setIntrinsic(geoShape.bounds.center);\n      }\n    },\n  })\n  readonly geoShape!: Property<this, GeoShape | null>;\n\n  @Property({\n    valueType: GeoPoint,\n    value: null,\n    didSetValue(geoCenter: GeoPoint | null): void {\n      this.owner.callObservers(\"traitDidSetGeoCenter\", geoCenter, this.owner);\n    },\n  })\n  readonly geoCenter!: Property<this, GeoPoint | null>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(geoIcon: Graphics | null): void {\n      this.owner.callObservers(\"traitDidSetGeoIcon\", geoIcon, this.owner);\n    },\n  })\n  readonly geoIcon!: Property<this, Graphics | null>;\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n\n  override createGeoController(): GeoLayerController {\n    return new AtlasEntityController();\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Property} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport {GeoShape} from \"@swim/geo\";\nimport {GeoPoint} from \"@swim/geo\";\nimport type {Trait} from \"@swim/model\";\nimport {TraitRef} from \"@swim/model\";\nimport type {SelectionOptions} from \"@swim/model\";\nimport {SelectableTrait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {NumberOrLook} from \"@swim/theme\";\nimport {NumberLook} from \"@swim/theme\";\nimport type {ColorOrLook} from \"@swim/theme\";\nimport {ColorLook} from \"@swim/theme\";\nimport {Feel} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {Graphics} from \"@swim/graphics\";\nimport {IconLayout} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {Hyperlink} from \"@swim/controller\";\nimport {GeoView} from \"@swim/map\";\nimport type {GeoLayerControllerObserver} from \"@swim/map\";\nimport {GeoLayerController} from \"@swim/map\";\nimport {GeoShapeView} from \"@swim/map\";\nimport {GeoIconView} from \"@swim/map\";\nimport {Status} from \"@swim/domain\";\nimport {EntityTrait} from \"@swim/domain\";\nimport {AtlasEntityTrait} from \"./AtlasEntityTrait\";\n\n/** @public */\nexport interface AtlasEntityControllerObserver<C extends AtlasEntityController = AtlasEntityController> extends GeoLayerControllerObserver<C> {\n  controllerWillAttachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n\n  controllerDidDetachEntityTrait?(entityTrait: EntityTrait, controller: C): void;\n}\n\n/** @public */\nexport class AtlasEntityController extends GeoLayerController {\n  declare readonly observerType?: Class<AtlasEntityControllerObserver>;\n\n  @Property({\n    valueType: Status,\n    value: Status.unknown(),\n    didSetValue(status: Status): void {\n      this.owner.geo.updateStatus(status);\n    },\n  })\n  readonly status!: Property<this, Status>;\n\n  @TraitRef({\n    traitType: EntityTrait,\n    consumed: true,\n    observes: true,\n    willAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerWillAttachEntityTrait\", entityTrait, this.owner);\n    },\n    didAttachTrait(entityTrait: EntityTrait): void {\n      this.owner.selectable.setTrait(entityTrait.getTrait(SelectableTrait));\n    },\n    initTrait(entityTrait: EntityTrait): void {\n      this.owner.status.bindInlet(entityTrait.status);\n      this.owner.selectable.setTrait(entityTrait.getTrait(SelectableTrait));\n    },\n    deinitTrait(entityTrait: EntityTrait): void {\n      this.owner.selectable.setTrait(null);\n      this.owner.status.unbindInlet(entityTrait.status);\n    },\n    willDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.selectable.setTrait(null);\n    },\n    didDetachTrait(entityTrait: EntityTrait): void {\n      this.owner.callObservers(\"controllerDidDetachEntityTrait\", entityTrait, this.owner);\n    },\n    traitDidInsertTrait(memberTrait: Trait, targetTrait: Trait | null): void {\n      if (memberTrait instanceof SelectableTrait) {\n        this.owner.selectable.setTrait(memberTrait);\n      }\n    },\n  })\n  readonly entity!: TraitRef<this, EntityTrait> & Observes<EntityTrait>;\n\n  @TraitRef({\n    traitType: SelectableTrait,\n    observes: true,\n    initTrait(selectableTrait: SelectableTrait): void {\n      this.updateSelected(selectableTrait.selected);\n    },\n    traitDidSelect(options: SelectionOptions | null): void {\n      this.updateSelected(true);\n    },\n    traitWillUnselect(): void {\n      this.updateSelected(false);\n    },\n    updateSelected(selected: boolean): void {\n      this.owner.fillOpacity.setIntrinsic(selected ? 0.25 : 0.1);\n      this.owner.strokeOpacity.setIntrinsic(selected ? 0.5 : 0.2);\n    },\n  })\n  readonly selectable!: TraitRef<this, SelectableTrait> & Observes<SelectableTrait> & {\n    updateSelected(selected: boolean): void;\n  };\n\n  @TraitViewRef({\n    extends: true,\n    traitType: AtlasEntityTrait,\n    initTrait(geoTrait: AtlasEntityTrait): void {\n      if (this.owner.entity.trait === null) {\n        this.owner.entity.setTrait(geoTrait.getTrait(EntityTrait));\n      }\n      this.owner.geoPerspective.bindInlet(geoTrait.geoPerspective);\n      this.owner.geoShape.bindInlet(geoTrait.geoShape);\n      this.owner.geoCenter.bindInlet(geoTrait.geoCenter);\n      this.owner.geoIcon.bindInlet(geoTrait.geoIcon);\n      this.owner.hyperlink.bindInlet(geoTrait.hyperlink);\n    },\n    deinitTrait(geoTrait: AtlasEntityTrait): void {\n      this.owner.geoPerspective.unbindInlet(geoTrait.geoPerspective);\n      this.owner.geoShape.unbindInlet(geoTrait.geoShape);\n      this.owner.geoCenter.unbindInlet(geoTrait.geoCenter);\n      this.owner.geoIcon.unbindInlet(geoTrait.geoIcon);\n      this.owner.hyperlink.unbindInlet(geoTrait.hyperlink);\n      if (this.owner.entity.trait === geoTrait.getTrait(EntityTrait)) {\n        this.owner.entity.setTrait(null);\n      }\n    },\n    viewType: GeoView,\n    initView(geoView: GeoView): void {\n      super.initView(geoView);\n      this.updateStatus(this.owner.status.value);\n    },\n    updateStatus(status: Status): void {\n      const geoView = this.view;\n      if (geoView !== null) {\n        geoView.modifyMood(Feel.default, status.moodModifier);\n      }\n    },\n  })\n  override readonly geo!: TraitViewRef<this, AtlasEntityTrait, GeoView> & GeoLayerController[\"geo\"] & {\n    updateStatus(status: Status): void;\n  };\n\n  @ViewRef({\n    viewType: GeoShapeView,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.geo.attachView();\n    },\n    insertChild(parent: View, child: GeoShapeView, target: View | null, key: string | undefined): void {\n      if (target === null) {\n        target = this.owner.icon.view;\n      }\n      parent.insertChild(child, target, key);\n    },\n    initView(shapeView: GeoShapeView): void {\n      super.initView(shapeView);\n      shapeView.geoShape.bindInlet(this.owner.geoShape);\n      shapeView.fill.bindInlet(this.owner.fill);\n      shapeView.fillOpacity.bindInlet(this.owner.fillOpacity);\n      shapeView.stroke.bindInlet(this.owner.stroke);\n      shapeView.strokeOpacity.bindInlet(this.owner.strokeOpacity);\n      shapeView.strokeWidth.bindInlet(this.owner.strokeWidth);\n      shapeView.hyperlink.bindInlet(this.owner.hyperlink);\n    },\n    deinitView(shapeView: GeoShapeView): void {\n      shapeView.geoShape.unbindInlet(this.owner.geoShape);\n      shapeView.fill.unbindInlet(this.owner.fill);\n      shapeView.fillOpacity.unbindInlet(this.owner.fillOpacity);\n      shapeView.stroke.unbindInlet(this.owner.stroke);\n      shapeView.strokeOpacity.unbindInlet(this.owner.strokeOpacity);\n      shapeView.strokeWidth.unbindInlet(this.owner.strokeWidth);\n      shapeView.hyperlink.unbindInlet(this.owner.hyperlink);\n      super.deinitView(shapeView);\n    },\n    viewDidEnter(shapeView: GeoShapeView): void {\n      // hook\n    },\n    viewDidLeave(shapeView: GeoShapeView): void {\n      // hook\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, shapeView: GeoShapeView): void {\n      // hook\n    },\n    viewDidLongPress(input: PositionGestureInput, shapeView: GeoShapeView): void {\n      // hook\n    },\n  })\n  readonly shape!: ViewRef<this, GeoShapeView> & Observes<GeoShapeView>;\n\n  @Property({\n    valueType: GeoShape,\n    value: null,\n    didSetValue(geoShape: GeoShape | null): void {\n      this.owner.geoPerspective.setIntrinsic(geoShape);\n      if (geoShape !== null) {\n        this.owner.shape.insertView();\n      } else {\n        this.owner.shape.deleteView();\n      }\n    },\n  })\n  readonly geoShape!: Property<this, GeoShape | null>;\n\n  @Property({\n    valueType: ColorLook,\n    value: Look.accentColor,\n    transition: true,\n  })\n  get fill(): Property<this, ColorOrLook | null> {\n    return Property.getter();\n  }\n\n  @Property({\n    valueType: NumberLook,\n    value: 0.1,\n    transition: true,\n  })\n  get fillOpacity(): Property<this, NumberOrLook | undefined> {\n    return Property.getter();\n  }\n\n  @Property({\n    valueType: ColorLook,\n    value: Look.accentColor,\n    transition: true,\n  })\n  get stroke(): Property<this, ColorOrLook | null> {\n    return Property.getter();\n  }\n\n  @Property({\n    valueType: NumberLook,\n    value: 0.2,\n    transition: true,\n  })\n  get strokeOpacity(): Property<this, NumberOrLook | undefined> {\n    return Property.getter();\n  }\n\n  @Property({\n    valueType: Length,\n    value: 1,\n    transition: true,\n  })\n  get strokeWidth(): Property<this, Length | null> {\n    return Property.getter();\n  }\n\n  @ViewRef({\n    viewType: GeoIconView,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.geo.attachView();\n    },\n    initView(iconView: GeoIconView): void {\n      super.initView(iconView);\n      iconView.geoCenter.bindInlet(this.owner.geoCenter);\n      iconView.iconLayout.bindInlet(this.owner.iconLayout);\n      iconView.iconColor.bindInlet(this.owner.iconColor);\n      iconView.graphics.bindInlet(this.owner.geoIcon);\n      iconView.hyperlink.bindInlet(this.owner.hyperlink);\n    },\n    deinitView(iconView: GeoIconView): void {\n      iconView.geoCenter.unbindInlet(this.owner.geoCenter);\n      iconView.iconLayout.unbindInlet(this.owner.iconLayout);\n      iconView.iconColor.unbindInlet(this.owner.iconColor);\n      iconView.graphics.unbindInlet(this.owner.geoIcon);\n      iconView.hyperlink.unbindInlet(this.owner.hyperlink);\n      super.deinitView(iconView);\n    },\n    viewDidEnter(iconView: GeoIconView): void {\n      // hook\n    },\n    viewDidLeave(iconView: GeoIconView): void {\n      // hook\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, iconView: GeoIconView): void {\n      // hook\n    },\n    viewDidLongPress(input: PositionGestureInput, iconView: GeoIconView): void {\n      // hook\n    },\n  })\n  readonly icon!: ViewRef<this, GeoIconView> & Observes<GeoIconView>;\n\n  @Property({\n    valueType: Graphics,\n    value: null,\n    didSetValue(icon: Graphics | null): void {\n      if (icon !== null) {\n        this.owner.icon.insertView();\n      } else {\n        this.owner.icon.deleteView();\n      }\n    },\n  })\n  readonly geoIcon!: Property<this, Graphics | null>;\n\n  @Property({\n    valueType: GeoPoint,\n    value: null,\n    transition: true,\n  })\n  readonly geoCenter!: Property<this, GeoPoint | null>;\n\n  @Property({\n    valueType: IconLayout,\n    value: IconLayout.of(16, 16),\n  })\n  get iconLayout(): Property<this, IconLayout | null> {\n    return Property.getter();\n  }\n\n  @Property({\n    valueType: ColorLook,\n    value: Look.accentColor,\n    transition: true,\n  })\n  get iconColor(): Property<this, ColorOrLook | null> {\n    return Property.getter();\n  }\n\n  @Property({valueType: Hyperlink, value: null})\n  get hyperlink(): Property<this, Hyperlink | null> {\n    return Property.getter();\n  }\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {ContinuousScale} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Format} from \"@swim/codec\";\nimport {Provider} from \"@swim/component\";\nimport {Angle} from \"@swim/math\";\nimport {Length} from \"@swim/math\";\nimport type {DateTime} from \"@swim/time\";\nimport {DateTimeFormat} from \"@swim/time\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {GraphicsPointerEvent} from \"@swim/graphics\";\nimport {GraphicsView} from \"@swim/graphics\";\nimport {CanvasView} from \"@swim/graphics\";\nimport {TextRunView} from \"@swim/graphics\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {PanelView} from \"@swim/panel\";\nimport type {PanelControllerObserver} from \"@swim/panel\";\nimport {PanelController} from \"@swim/panel\";\nimport {DialView} from \"@swim/gauge\";\nimport {GaugeView} from \"@swim/gauge\";\nimport {DataPointView} from \"@swim/chart\";\nimport {SeriesPlotView} from \"@swim/chart\";\nimport {LinePlotView} from \"@swim/chart\";\nimport {GraphView} from \"@swim/chart\";\nimport {TickView} from \"@swim/chart\";\nimport {TopTickView} from \"@swim/chart\";\nimport {AxisView} from \"@swim/chart\";\nimport {TopAxisView} from \"@swim/chart\";\nimport {ChartView} from \"@swim/chart\";\nimport {CalendarService} from \"@swim/domain\";\n\n/** @public */\nexport interface TimeGaugeControllerObserver<C extends TimeGaugeController = TimeGaugeController> extends PanelControllerObserver<C> {\n}\n\n/** @public */\nexport class TimeGaugeController extends PanelController {\n  declare readonly observerType?: Class<TimeGaugeControllerObserver>;\n\n  protected formatPanelTitle(dataPointView: DataPointView<DateTime, number>): string | undefined {\n    return void 0;\n  }\n\n  protected formatPanelSubtitle(dataPointView: DataPointView<DateTime, number>): string | undefined {\n    const time = dataPointView.x.getValue();\n    return this.formatDate(time);\n  }\n\n  protected formatDialLabel(value: number, limit: number): string | undefined {\n    return void 0;\n  }\n\n  protected formatDialLegend(value: number, limit: number): string | undefined {\n    return void 0;\n  }\n\n  protected formatGaugeTitle(value: number, limit: number): string | undefined {\n    return Format.prefix(value, 1);\n  }\n\n  protected formatDate(time: DateTime): string {\n    return (this.constructor as typeof TimeGaugeController).dateFormat.format(time);\n  }\n\n  @TraitViewRef({\n    extends: true,\n    viewDidMount(panelView: PanelView): void {\n      this.owner.consume(panelView);\n    },\n    viewWillUnmount(panelView: PanelView): void {\n      this.owner.unconsume(panelView);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        classList: [\"time-gauge\"],\n        style: {\n          userSelect: \"none\",\n        },\n        panelStyle: \"card\",\n      });\n    },\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & PanelController[\"panel\"];\n\n  @ViewRef({\n    extends: true,\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void {\n      const title = this.owner.formatPanelTitle(dataPointView);\n      if (title !== void 0) {\n        this.set(title);\n      }\n    },\n  })\n  override readonly panelTitle!: ViewRef<this, HtmlView> & PanelController[\"panelTitle\"] & {\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void,\n  };\n\n  @ViewRef({\n    extends: true,\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void {\n      const subtitle = this.owner.formatPanelSubtitle(dataPointView);\n      if (subtitle !== void 0) {\n        this.set(subtitle);\n      }\n    },\n    updateScrubTime(scrubTime: DateTime | null): void {\n      const subtitleView = this.view;\n      if (subtitleView === null) {\n        return;\n      } else if (scrubTime !== null) {\n        subtitleView.style.color.setIntrinsic(Look.textColor, true);\n      } else {\n        subtitleView.style.color.setIntrinsic(Look.labelColor, true);\n      }\n    },\n  })\n  override readonly panelSubtitle!: ViewRef<this, HtmlView> & PanelController[\"panelSubtitle\"] & {\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void,\n    updateScrubTime(scrubTime: DateTime | null): void,\n  };\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    insertChild(parent: View, child: PanelView, target: View | null, key: string | undefined): void {\n      if (target === null) {\n        target = this.owner.chartPanel.view;\n      }\n      parent.insertChild(child, target, key);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        style: {\n          marginTop: 24,\n        },\n        unitWidth: 1,\n        unitHeight: 4 / 5,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly gaugePanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: CanvasView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.gaugePanel.insertView();\n    },\n  })\n  readonly gaugeCanvas!: ViewRef<this, CanvasView>;\n\n  @ViewRef({\n    viewType: GaugeView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.gaugeCanvas.insertView();\n    },\n    didAttachView(gaugeView: GaugeView): void {\n      this.owner.gaugeTitle.setView(gaugeView.title.view);\n    },\n    willDetachView(gaugeView: GaugeView): void {\n      this.owner.gaugeTitle.setView(null);\n    },\n    viewWillAttachTitle(titleView: GraphicsView): void {\n      this.owner.gaugeTitle.setView(titleView);\n    },\n    viewDidDetachTitle(titleView: GraphicsView): void {\n      this.owner.gaugeTitle.setView(null);\n    },\n    createView(): GaugeView {\n      return new GaugeView().setIntrinsic({\n        innerRadius: Length.pct(35),\n        outerRadius: Length.pct(45),\n        startAngle: Angle.rad(Math.PI * 5 / 8),\n        sweepAngle: Angle.rad(Math.PI * 11 / 8),\n        cornerRadius: Length.zero(),\n        tickAlign: 0.5,\n        tickRadius: Length.pct(50),\n        tickLength: Length.pct(45),\n        font: Look.font,\n      });\n    },\n  })\n  readonly gauge!: ViewRef<this, GaugeView> & Observes<GaugeView>;\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: \"title\",\n    get parentView(): View | null {\n      return this.owner.gauge.attachView();\n    },\n    initView(titleView: GraphicsView): void {\n      if (titleView instanceof TextRunView) {\n        titleView.font.setInherits(false);\n        titleView.font.setIntrinsic(Look.largeFont);\n        titleView.textColor.setIntrinsic(Look.textColor);\n      }\n    },\n    setText(title: string | undefined): GraphicsView {\n      return this.owner.gauge.attachView().title.set(title);\n    },\n  })\n  readonly gaugeTitle!: ViewRef<this, GraphicsView> & {\n    setText(title: string | undefined): GraphicsView,\n  };\n\n  @ViewRef({\n    viewType: DialView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.gauge.insertView();\n    },\n    initView(dialView: DialView): void {\n      this.updateValue(dialView.value.value, dialView.limit.value);\n    },\n    didAttachView(dialView: DialView): void {\n      this.owner.dialLabel.setView(dialView.label.view);\n      this.owner.dialLegend.setView(dialView.legend.view);\n    },\n    willDetachView(dialView: DialView): void {\n      this.owner.dialLabel.setView(null);\n      this.owner.dialLegend.setView(null);\n    },\n    viewWillAttachLabel(labelView: GraphicsView): void {\n      this.owner.dialLabel.setView(labelView);\n    },\n    viewDidDetachLabel(labelView: GraphicsView): void {\n      this.owner.dialLabel.setView(null);\n    },\n    viewWillAttachLegend(legendView: GraphicsView): void {\n      this.owner.dialLegend.setView(legendView);\n    },\n    viewDidDetachLegend(legendView: GraphicsView): void {\n      this.owner.dialLegend.setView(null);\n    },\n    viewDidSetValue(value: number, dialView: DialView): void {\n      this.updateValue(value, dialView.limit.value);\n    },\n    viewDidSetLimit(limit: number, dialView: DialView): void {\n      this.updateValue(dialView.value.value, limit);\n    },\n    updateValue(value: number, limit: number): void {\n      const title = this.owner.formatGaugeTitle(value, limit);\n      if (title !== void 0) {\n        this.owner.gaugeTitle.setText(title);\n      }\n      const label = this.owner.formatDialLabel(value, limit);\n      if (label !== void 0) {\n        this.owner.dialLabel.setText(label);\n      }\n      const legend = this.owner.formatDialLegend(value, limit);\n      if (legend !== void 0) {\n        this.owner.dialLegend.setText(legend);\n      }\n    },\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void {\n      const dialView = this.attachView();\n      let timing: Timing | undefined;\n      if (dialView.value.tweening) {\n        timing = void 0;\n      } else {\n        timing = dialView.getLookOr(Look.timing, void 0);\n      }\n\n      const dialValue = dataPointView.y.getValue();\n      dialView.value.setIntrinsic(dialValue, timing);\n\n      if (dataPointView.color.look !== null) {\n        dialView.meterColor.setIntrinsic(dataPointView.color.look, timing);\n        dialView.moodModifier.setIntrinsic(dataPointView.moodModifier.value);\n        if (dialView.theme.value !== null && dialView.mood.value !== null) {\n          dialView.applyTheme(dialView.theme.value, dialView.mood.value, timing);\n        }\n      } else if (dataPointView.color.value !== null) {\n        dialView.meterColor.setIntrinsic(dataPointView.color.value, timing);\n        dialView.moodModifier.setIntrinsic(null);\n      } else {\n        dialView.meterColor.setIntrinsic(Look.accentColor, timing);\n        dialView.moodModifier.setIntrinsic(null);\n        if (dialView.theme.value !== null && dialView.mood.value !== null) {\n          dialView.applyTheme(dialView.theme.value, dialView.mood.value, timing);\n        }\n      }\n    },\n  })\n  readonly dial!: ViewRef<this, DialView> & Observes<DialView> & {\n    updateValue(value: number, limit: number): void,\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void,\n  };\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: \"label\",\n    get parentView(): View | null {\n      return this.owner.dial.attachView();\n    },\n    initView(labelView: GraphicsView): void {\n      if (labelView instanceof TextRunView) {\n        labelView.font.setInherits(false);\n        labelView.font.setIntrinsic(Look.smallFont);\n        labelView.textColor.setIntrinsic(Look.labelColor);\n      }\n    },\n    setText(label: string | undefined): GraphicsView {\n      return this.owner.dial.attachView().label.set(label);\n    },\n  })\n  readonly dialLabel!: ViewRef<this, GraphicsView> & {\n    setText(label: string | undefined): GraphicsView,\n  };\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: \"legend\",\n    get parentView(): View | null {\n      return this.owner.dial.attachView();\n    },\n    initView(legendView: GraphicsView): void {\n      if (legendView instanceof TextRunView) {\n        legendView.font.setInherits(false);\n        legendView.font.setIntrinsic(Look.smallFont);\n        legendView.textColor.setIntrinsic(Look.labelColor);\n      }\n    },\n    setText(legend: string | undefined): GraphicsView {\n      return this.owner.dial.attachView().legend.set(legend);\n    },\n  })\n  readonly dialLegend!: ViewRef<this, GraphicsView> & {\n    setText(legend: string | undefined): GraphicsView,\n  };\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        unitWidth: 1,\n        unitHeight: 1 / 5,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly chartPanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: CanvasView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chartPanel.insertView();\n    },\n    createView(): CanvasView {\n      return (super.createView() as CanvasView).setIntrinsic({\n        pointerEvents: true,\n      });\n    },\n  })\n  readonly chartCanvas!: ViewRef<this, CanvasView>;\n\n  @ViewRef({\n    viewType: ChartView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.chartCanvas.insertView();\n    },\n    didAttachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(chartView.graph.view);\n    },\n    willDetachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    viewWillAttachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(graphView);\n    },\n    viewDidDetachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    viewDidSetYScale(yScale: ContinuousScale<number, number> | null): void {\n      if (yScale !== null) {\n        this.owner.dial.attachView().setIntrinsic({\n          limit: yScale.domain[1],\n        });\n      }\n    },\n    createView(): ChartView<DateTime, number> {\n      const chartView = super.createView() as ChartView<DateTime, number>;\n      chartView.domainTracking(true);\n      return chartView.setIntrinsic({\n        gutterTop: 6,\n        gutterRight: 12,\n        gutterBottom: 12,\n        gutterLeft: 12,\n      });\n    },\n  })\n  readonly chart!: ViewRef<this, ChartView<DateTime, number>> & Observes<ChartView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: AxisView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(tickAxisView: AxisView<DateTime>): void {\n      const scrubTime = this.owner.calendar.getService().scrubTime.value;\n      this.owner.currentTick.updateScrubTime(scrubTime);\n    },\n    createView(): AxisView<DateTime> {\n      return new TopAxisView<DateTime>().setIntrinsic({\n        tickGenerator: null,\n        tickMarkWidth: 2,\n        tickMarkLength: 6,\n        tickMarkColor: Look.textColor,\n        gridLineWidth: 2,\n        gridLineColor: Look.textColor,\n        borderWidth: 0,\n      });\n    },\n  })\n  readonly tickAxis!: ViewRef<this, AxisView<DateTime>>;\n\n  @ViewRef({\n    viewType: TickView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.tickAxis.view;\n    },\n    updateScrubTime(scrubTime: DateTime | null): void {\n      if (scrubTime === null) {\n        this.deleteView();\n        return;\n      }\n      const currentTickView = new TopTickView<DateTime>(scrubTime).setIntrinsic({\n        gridLineWidth: 1,\n      });\n      currentTickView.setIntangible(true);\n      this.insertView(null, currentTickView);\n    },\n  })\n  readonly currentTick!: ViewRef<this, TickView<DateTime>> & {\n    updateScrubTime(scrubTime: DateTime | null): void,\n  };\n\n  @ViewRef({\n    viewType: GraphView,\n    viewKey: true,\n    init(): void {\n      this.onPointerMove = this.onPointerMove.bind(this);\n      this.onPointerEnter = this.onPointerEnter.bind(this);\n      this.onPointerLeave = this.onPointerLeave.bind(this);\n    },\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(graphView: GraphView<DateTime, number>): void {\n      graphView.addEventListener(\"pointermove\", this.onPointerMove);\n      graphView.addEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.addEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    deinitView(graphView: GraphView<DateTime, number>): void {\n      graphView.removeEventListener(\"pointermove\", this.onPointerMove);\n      graphView.removeEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.removeEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    updatePointer(event: GraphicsPointerEvent): void {\n      const graphView = this.view;\n      const xScale = graphView !== null ? graphView.xScale.value : null;\n      if (xScale !== null) {\n        const clientBounds = graphView!.clientBounds;\n        const x = event.clientX - clientBounds.x;\n        const t = xScale.inverse(x);\n        this.owner.calendar.getService().scrubTime.setIntrinsic(t);\n      }\n    },\n    onPointerMove(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerEnter(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerLeave(event: GraphicsPointerEvent): void {\n      this.owner.calendar.getService().scrubTime.setIntrinsic(null);\n    },\n  })\n  readonly graph!: ViewRef<this, GraphView<DateTime, number>> & {\n    updatePointer(event: GraphicsPointerEvent): void,\n    onPointerMove(event: GraphicsPointerEvent): void,\n    onPointerEnter(event: GraphicsPointerEvent): void,\n    onPointerLeave(event: GraphicsPointerEvent): void,\n  };\n\n  @ViewRef({\n    viewType: SeriesPlotView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.graph.insertView();\n    },\n    didAttachView(plotView: SeriesPlotView<DateTime, number>, targetView: View | null): void {\n      this.owner.dataPoints.setViews(plotView.dataPoints.views);\n    },\n    willDetachView(plotView: SeriesPlotView<DateTime, number>): void {\n      this.owner.dataPoints.deleteViews();\n    },\n    viewWillAttachDataPoint(dataPointView: DataPointView<DateTime, number>, targetView: View | null): void {\n      this.owner.dataPoints.addView(dataPointView, targetView);\n    },\n    viewDidDetachDataPoint(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.dataPoints.removeView(dataPointView);\n    },\n    createView(): SeriesPlotView<DateTime, number> {\n      return new LinePlotView<DateTime, number>().setIntrinsic({\n        hitMode: \"none\",\n        strokeWidth: 1,\n      });\n    },\n  })\n  readonly plot!: ViewRef<this, SeriesPlotView<DateTime, number>> & Observes<SeriesPlotView<DateTime, number>>;\n\n  @ViewSet({\n    viewType: DataPointView,\n    get parentView(): View | null {\n      return this.owner.plot.attachView();\n    },\n  })\n  readonly dataPoints!: ViewSet<this, DataPointView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: DataPointView,\n    get parentView(): View | null {\n      return this.owner.plot.attachView();\n    },\n    didAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      if (this.owner.calendar.getService().scrubTime.value === null) {\n        this.owner.current.setView(dataPointView);\n      }\n    },\n    didDetachView(dataPointView: DataPointView<DateTime, number>): void {\n      dataPointView.remove();\n    },\n  })\n  readonly latest!: ViewRef<this, DataPointView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: DataPointView,\n    didAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.panelTitle.setCurrent(dataPointView);\n      this.owner.panelSubtitle.setCurrent(dataPointView);\n      this.owner.dial.setCurrent(dataPointView);\n    },\n  })\n  readonly current!: ViewRef<this, DataPointView<DateTime, number>>;\n\n  @Provider({\n    serviceType: CalendarService,\n    observes: true,\n    serviceDidSetScrubTime(scrubTime: DateTime | null): void {\n      let dataPointView: DataPointView<DateTime, number> | null | undefined = null;\n      if (scrubTime !== null) {\n        const plotView = this.owner.plot.view;\n        if (plotView !== null) {\n          dataPointView = plotView.dataPointViews.get(scrubTime);\n          if (dataPointView === void 0) {\n            dataPointView = plotView.dataPointViews.previousValue(scrubTime);\n            if (dataPointView === void 0) {\n              dataPointView = null;\n            }\n          }\n        }\n      } else {\n        dataPointView = this.owner.latest.view;\n      }\n      this.owner.current.setView(dataPointView);\n      this.owner.currentTick.updateScrubTime(scrubTime);\n      this.owner.panelSubtitle.updateScrubTime(scrubTime);\n    },\n  })\n  readonly calendar!: Provider<this, CalendarService> & Observes<CalendarService>;\n\n  static dateFormat: DateTimeFormat = DateTimeFormat.pattern(\"%b %d @ %H:%M\");\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Format} from \"@swim/codec\";\nimport {Property} from \"@swim/component\";\nimport {Provider} from \"@swim/component\";\nimport type {DateTime} from \"@swim/time\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {PositionGestureInput} from \"@swim/view\";\nimport {GraphicsView} from \"@swim/graphics\";\nimport {TextRunView} from \"@swim/graphics\";\nimport type {ControllerObserver} from \"@swim/controller\";\nimport {Controller} from \"@swim/controller\";\nimport {CellView} from \"@swim/table\";\nimport {TextCellView} from \"@swim/table\";\nimport {LeafView} from \"@swim/table\";\nimport {RowView} from \"@swim/table\";\nimport {SliceView} from \"@swim/pie\";\nimport {DataPointView} from \"@swim/chart\";\nimport {SeriesPlotView} from \"@swim/chart\";\nimport {LinePlotView} from \"@swim/chart\";\nimport {CalendarService} from \"@swim/domain\";\n\n/** @public */\nexport interface TimeSeriesControllerObserver<C extends TimeSeriesController = TimeSeriesController> extends ControllerObserver<C> {\n  controllerDidSetTitle?(title: string, controller: C): void;\n\n  controllerDidSetFocused?(focused: boolean, controller: C): void;\n\n  controllerDidSetPinned?(pinned: boolean, controller: C): void;\n\n  controllerWillAttachPlot?(plotView: SeriesPlotView<DateTime, number>, targetView: View | null, controller: C): void;\n\n  controllerDidDetachPlot?(plotView: SeriesPlotView<DateTime, number>, controller: C): void;\n\n  controllerWillAttachSlice?(sliceView: SliceView, targetView: View | null, controller: C): void;\n\n  controllerDidDetachSlice?(sliceView: SliceView, controller: C): void;\n\n  controllerWillAttachRow?(rowView: RowView, targetView: View | null, controller: C): void;\n\n  controllerDidDetachRow?(rowView: RowView, controller: C): void;\n\n  controllerWillAttachLatest?(dataPointView: DataPointView<DateTime, number>, controller: C): void;\n\n  controllerDidDetachLatest?(dataPointView: DataPointView<DateTime, number>, controller: C): void;\n\n  controllerWillAttachCurrent?(dataPointView: DataPointView<DateTime, number>, controller: C): void;\n\n  controllerDidDetachCurrent?(dataPointView: DataPointView<DateTime, number>, controller: C): void;\n}\n\n/** @public */\nexport class TimeSeriesController extends Controller {\n  declare readonly observerType?: Class<TimeSeriesControllerObserver>;\n\n  protected formatLatestCell(dataPointView: DataPointView<DateTime, number>): string | undefined {\n    return this.formatCell(dataPointView);\n  }\n\n  protected formatCurrentCell(dataPointView: DataPointView<DateTime, number>): string | undefined {\n    return this.formatCell(dataPointView);\n  }\n\n  protected formatCell(dataPointView: DataPointView<DateTime, number>): string | undefined {\n    const value = dataPointView.y.getValue();\n    return Format.prefix(value, 1);\n  }\n\n  protected formatSliceLabel(value: number, total: number): string | undefined {\n    return void 0;\n  }\n\n  protected formatSliceLegend(value: number, total: number): string | null | undefined {\n    return void 0;\n  }\n\n  protected applySliceStatus(sliceView: SliceView, dataPointView: DataPointView<DateTime, number>, timing: Timing | undefined): void {\n    if (dataPointView.color.look !== null) {\n      sliceView.sliceColor.setIntrinsic(dataPointView.color.look, timing);\n      sliceView.moodModifier.setIntrinsic(dataPointView.moodModifier.value);\n      if (sliceView.theme.value !== null && sliceView.mood.value !== null) {\n        sliceView.applyTheme(sliceView.theme.value, sliceView.mood.value, timing);\n      }\n    } else if (dataPointView.color.value !== null) {\n      sliceView.sliceColor.setIntrinsic(dataPointView.color.value, timing);\n      sliceView.moodModifier.setIntrinsic(null);\n    } else {\n      sliceView.sliceColor.setIntrinsic(Look.accentColor, timing);\n      sliceView.moodModifier.setIntrinsic(null);\n      if (sliceView.theme.value !== null && sliceView.mood.value !== null) {\n        sliceView.applyTheme(sliceView.theme.value, sliceView.mood.value, timing);\n      }\n    }\n  }\n\n  @Property({\n    valueType: String,\n    value: \"\",\n    didSetValue(title: string): void {\n      this.owner.callObservers(\"controllerDidSetTitle\", title, this.owner);\n    },\n  })\n  readonly title!: Property<this, string>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(focused: boolean): void {\n      this.owner.callObservers(\"controllerDidSetFocused\", focused, this.owner);\n    },\n  })\n  readonly focused!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(defocused: boolean): void {\n      const plotView = this.owner.plot.view;\n      if (plotView !== null) {\n        const timing = plotView.getLook(Look.timing);\n        if (defocused && !this.owner.focused.value) {\n          plotView.opacity.setIntrinsic(0.5, timing);\n        } else {\n          plotView.opacity.setIntrinsic(1, timing);\n        }\n      }\n      const leafView = this.owner.leaf.view;\n      if (leafView !== null) {\n        const timing = leafView.getLook(Look.timing);\n        if (defocused && !this.owner.focused.value) {\n          leafView.style.opacity.setIntrinsic(0.5, timing);\n        } else {\n          leafView.style.opacity.setIntrinsic(1, timing);\n        }\n      }\n    },\n  })\n  readonly defocused!: Property<this, boolean>;\n\n  @Property({\n    valueType: Boolean,\n    value: false,\n    didSetValue(pinned: boolean): void {\n      this.owner.callObservers(\"controllerDidSetPinned\", pinned, this.owner);\n    },\n    update(): void {\n      const leafView = this.owner.leaf.view;\n      const hovering = leafView !== null && leafView.hover.state.focused;\n      const highlighted = leafView !== null && leafView.highlight.state.focused;\n      const pinned = hovering || highlighted;\n      this.setIntrinsic(pinned);\n    },\n  })\n  readonly pinned!: Property<this, boolean> & {\n    update(): void,\n  };\n\n  @ViewRef({\n    viewType: SeriesPlotView,\n    observes: true,\n    init(): void {\n      this.onPointerEnter = this.onPointerEnter.bind(this);\n      this.onPointerLeave = this.onPointerLeave.bind(this);\n    },\n    willAttachView(plotView: SeriesPlotView<DateTime, number>, targetView: View | null): void {\n      this.owner.callObservers(\"controllerWillAttachPlot\", plotView, targetView, this.owner);\n    },\n    didAttachView(plotView: SeriesPlotView<DateTime, number>, targetView: View | null): void {\n      this.owner.dataPoints.setViews(plotView.dataPoints.views);\n      plotView.addEventListener(\"pointerenter\", this.onPointerEnter);\n      plotView.addEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    willDetachView(plotView: SeriesPlotView<DateTime, number>): void {\n      plotView.removeEventListener(\"pointerenter\", this.onPointerEnter);\n      plotView.removeEventListener(\"pointerleave\", this.onPointerLeave);\n      this.owner.dataPoints.deleteViews();\n    },\n    didDetachView(plotView: SeriesPlotView<DateTime, number>): void {\n      this.owner.callObservers(\"controllerDidDetachPlot\", plotView, this.owner);\n    },\n    viewWillAttachDataPoint(dataPointView: DataPointView<DateTime, number>, targetView: View | null): void {\n      this.owner.dataPoints.addView(dataPointView, targetView);\n    },\n    viewDidDetachDataPoint(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.dataPoints.removeView(dataPointView);\n    },\n    onPointerEnter(event: PointerEvent): void {\n      this.owner.focused.setIntrinsic(true);\n    },\n    onPointerLeave(event: PointerEvent): void {\n      this.owner.focused.setIntrinsic(false);\n    },\n    createView(): SeriesPlotView<DateTime, number> {\n      return new LinePlotView<DateTime, number>().setIntrinsic({\n        hitMode: \"plot\",\n        strokeWidth: 1,\n      });\n    },\n  })\n  readonly plot!: ViewRef<this, SeriesPlotView<DateTime, number>> & Observes<SeriesPlotView<DateTime, number>> & {\n    onPointerEnter(event: PointerEvent): void,\n    onPointerLeave(event: PointerEvent): void,\n  };\n\n  @ViewSet({\n    viewType: DataPointView,\n    get parentView(): View | null {\n      return this.owner.plot.attachView();\n    },\n  })\n  readonly dataPoints!: ViewSet<this, DataPointView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: DataPointView,\n    get parentView(): View | null {\n      return this.owner.plot.attachView();\n    },\n    willAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.callObservers(\"controllerWillAttachLatest\", dataPointView, this.owner);\n    },\n    didAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.latestCell.setLatest(dataPointView);\n      if (this.owner.calendar.getService().scrubTime.value === null) {\n        this.owner.current.setView(dataPointView);\n      }\n    },\n    didDetachView(dataPointView: DataPointView<DateTime, number>): void {\n      dataPointView.remove();\n      this.owner.callObservers(\"controllerDidDetachLatest\", dataPointView, this.owner);\n    },\n  })\n  readonly latest!: ViewRef<this, DataPointView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: DataPointView,\n    willAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.callObservers(\"controllerWillAttachCurrent\", dataPointView, this.owner);\n    },\n    didAttachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.slice.setCurrent(dataPointView);\n      this.owner.currentCell.setCurrent(dataPointView);\n    },\n    didDetachView(dataPointView: DataPointView<DateTime, number>): void {\n      this.owner.callObservers(\"controllerDidDetachCurrent\", dataPointView, this.owner);\n    },\n  })\n  readonly current!: ViewRef<this, DataPointView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: SliceView,\n    observes: true,\n    init(): void {\n      this.onPointerEnter = this.onPointerEnter.bind(this);\n      this.onPointerLeave = this.onPointerLeave.bind(this);\n    },\n    initView(sliceView: SliceView): void {\n      this.updateValue(sliceView.value.value, sliceView.total.value);\n    },\n    willAttachView(sliceView: SliceView, targetView: View | null): void {\n      this.owner.callObservers(\"controllerWillAttachSlice\", sliceView, targetView, this.owner);\n    },\n    didAttachView(sliceView: SliceView, targetView: View | null): void {\n      this.owner.sliceLabel.setView(sliceView.label.view);\n      this.owner.sliceLegend.setView(sliceView.legend.view);\n      sliceView.addEventListener(\"pointerenter\", this.onPointerEnter);\n      sliceView.addEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    willDetachView(sliceView: SliceView): void {\n      sliceView.removeEventListener(\"pointerenter\", this.onPointerEnter);\n      sliceView.removeEventListener(\"pointerleave\", this.onPointerLeave);\n      this.owner.sliceLabel.setView(null);\n      this.owner.sliceLegend.setView(null);\n    },\n    didDetachView(sliceView: SliceView): void {\n      this.owner.callObservers(\"controllerDidDetachSlice\", sliceView, this.owner);\n    },\n    viewWillAttachLabel(labelView: GraphicsView): void {\n      this.owner.sliceLabel.setView(labelView);\n    },\n    viewDidDetachLabel(labelView: GraphicsView): void {\n      this.owner.sliceLabel.setView(null);\n    },\n    viewWillAttachLegend(legendView: GraphicsView): void {\n      this.owner.sliceLegend.setView(legendView);\n    },\n    viewDidDetachLegend(legendView: GraphicsView): void {\n      this.owner.sliceLegend.setView(null);\n    },\n    onPointerEnter(event: PointerEvent): void {\n      this.owner.focused.setIntrinsic(true);\n    },\n    onPointerLeave(event: PointerEvent): void {\n      this.owner.focused.setIntrinsic(false);\n    },\n    viewDidSetValue(value: number, sliceView: SliceView): void {\n      this.updateValue(value, sliceView.total.value);\n    },\n    viewDidSetTotal(total: number, sliceView: SliceView): void {\n      this.updateValue(sliceView.value.value, total);\n    },\n    updateValue(value: number, total: number): void {\n      const label = this.owner.formatSliceLabel(value, total);\n      if (label !== void 0) {\n        this.owner.sliceLabel.setText(label);\n      }\n      const legend = this.owner.formatSliceLegend(value, total);\n      if (legend !== void 0) {\n        if (legend !== null) {\n          this.owner.sliceLegend.setText(legend);\n        } else {\n          this.owner.sliceLegend.deleteView();\n        }\n      }\n    },\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void {\n      const sliceView = this.view;\n      if (sliceView === null) {\n        return;\n      }\n      let timing: Timing | undefined;\n      if (sliceView.value.tweening) {\n        timing = void 0;\n      } else {\n        timing = sliceView.getLookOr(Look.timing, void 0);\n      }\n\n      const sliceValue = dataPointView.y.getValue();\n      sliceView.value.setIntrinsic(sliceValue, timing);\n\n      this.owner.applySliceStatus(sliceView, dataPointView, timing);\n    },\n  })\n  readonly slice!: ViewRef<this, SliceView> & Observes<SliceView> & {\n    onPointerEnter(event: PointerEvent): void,\n    onPointerLeave(event: PointerEvent): void,\n    updateValue(value: number, total: number): void,\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void,\n  };\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: \"label\",\n    get parentView(): View | null {\n      return this.owner.slice.attachView();\n    },\n    initView(labelView: GraphicsView): void {\n      if (labelView instanceof TextRunView) {\n        labelView.font.setInherits(false);\n        labelView.font.setIntrinsic(Look.smallFont);\n        labelView.textColor.setIntrinsic(Look.backgroundColor);\n      }\n    },\n    setText(label: string | undefined): GraphicsView {\n      return this.owner.slice.attachView().label.set(label);\n    },\n  })\n  readonly sliceLabel!: ViewRef<this, GraphicsView> & {\n    setText(label: string | undefined): GraphicsView,\n  };\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: \"legend\",\n    get parentView(): View | null {\n      return this.owner.slice.attachView();\n    },\n    initView(legendView: GraphicsView): void {\n      if (legendView instanceof TextRunView) {\n        legendView.font.setInherits(false);\n        legendView.font.setIntrinsic(Look.smallFont);\n        legendView.textColor.setIntrinsic(Look.labelColor);\n      }\n    },\n    setText(legend: string | undefined): GraphicsView {\n      return this.owner.slice.attachView().legend.set(legend);\n    },\n  })\n  readonly sliceLegend!: ViewRef<this, GraphicsView> & {\n    setText(legend: string | undefined): GraphicsView,\n  };\n\n  @ViewRef({\n    viewType: RowView,\n    observes: true,\n    willAttachView(rowView: RowView, targetView: View | null): void {\n      this.owner.callObservers(\"controllerWillAttachRow\", rowView, targetView, this.owner);\n    },\n    didAttachView(rowView: RowView, targetView: View | null): void {\n      this.owner.leaf.setView(rowView.leaf.view, targetView);\n    },\n    willDetachView(rowView: RowView): void {\n      this.owner.leaf.setView(null);\n    },\n    didDetachView(rowView: RowView): void {\n      this.owner.callObservers(\"controllerDidDetachRow\", rowView, this.owner);\n    },\n    viewWillAttachLeaf(leafView: LeafView, targetView: View | null): void {\n      this.owner.leaf.setView(leafView, targetView);\n    },\n    viewDidDetachLeaf(leafView: LeafView): void {\n      this.owner.leaf.setView(null);\n    },\n  })\n  readonly row!: ViewRef<this, RowView> & Observes<RowView>;\n\n  @ViewRef({\n    viewType: LeafView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.row.attachView();\n    },\n    didAttachView(leafView: LeafView, targetView: View | null): void {\n      this.owner.cells.setViews(leafView.cells.views);\n    },\n    willDetachView(leafView: LeafView): void {\n      this.owner.cells.deleteViews();\n    },\n    viewWillAttachCell(cellView: CellView, targetView: View | null): void {\n      this.owner.cells.addView(cellView, targetView);\n    },\n    viewDidDetachCell(cellView: CellView): void {\n      this.owner.cells.removeView(cellView);\n    },\n    viewDidEnter(leafView: LeafView): void {\n      if (leafView.hovers.value) {\n        this.owner.focused.setIntrinsic(true);\n        this.owner.pinned.update();\n      }\n    },\n    viewDidLeave(leafView: LeafView): void {\n      if (leafView.hovers.value) {\n        this.owner.focused.setIntrinsic(false);\n        this.owner.pinned.update();\n      }\n    },\n    viewWillHighlight(leafView: LeafView): void {\n      this.owner.pinned.update();\n    },\n    viewWillUnhighlight(leafView: LeafView): void {\n      this.owner.pinned.update();\n    },\n    viewDidPress(input: PositionGestureInput, event: Event | null, leafView: LeafView): void {\n      leafView.highlight.toggle();\n      this.owner.pinned.update();\n    },\n    createView(): LeafView {\n      return (super.createView() as LeafView).setIntrinsic({\n        //hovers: true,\n      });\n    },\n  })\n  readonly leaf!: ViewRef<this, LeafView> & Observes<LeafView>;\n\n  @ViewSet({\n    viewType: CellView,\n    get parentView(): View | null {\n      return this.owner.leaf.insertView();\n    },\n  })\n  readonly cells!: ViewSet<this, CellView>;\n\n  @ViewRef({\n    viewType: CellView,\n    viewKey: \"name\",\n    get parentView(): View | null {\n      return this.owner.leaf.insertView();\n    },\n    createView(): CellView {\n      return TextCellView.create();\n    },\n  })\n  readonly nameCell!: ViewRef<this, CellView>;\n\n  @ViewRef({\n    viewType: CellView,\n    viewKey: \"latest\",\n    get parentView(): View | null {\n      return this.owner.leaf.insertView();\n    },\n    initView(cellView: CellView): void {\n      const dataPointView = this.owner.latest.view;\n      if (dataPointView !== null) {\n        this.setLatest(dataPointView);\n      }\n    },\n    setLatest(dataPointView: DataPointView<DateTime, number>): void {\n      const cellView = this.view;\n      if (cellView instanceof TextCellView) {\n        const content = this.owner.formatLatestCell(dataPointView);\n        if (content !== void 0) {\n          cellView.content.set(content);\n        }\n      }\n    },\n    createView(): CellView {\n      return TextCellView.create();\n    },\n  })\n  readonly latestCell!: ViewRef<this, CellView> & {\n    setLatest(dataPointView: DataPointView<DateTime, number>): void,\n  };\n\n  @ViewRef({\n    viewType: CellView,\n    viewKey: \"current\",\n    get parentView(): View | null {\n      return this.owner.leaf.insertView();\n    },\n    initView(cellView: CellView): void {\n      const dataPointView = this.owner.latest.view;\n      if (dataPointView !== null) {\n        this.setCurrent(dataPointView);\n      }\n    },\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void {\n      const cellView = this.view;\n      if (cellView instanceof TextCellView) {\n        const content = this.owner.formatCurrentCell(dataPointView);\n        if (content !== void 0) {\n          cellView.content.set(content);\n        }\n      }\n    },\n    createView(): CellView {\n      return TextCellView.create();\n    },\n  })\n  readonly currentCell!: ViewRef<this, CellView> & {\n    setCurrent(dataPointView: DataPointView<DateTime, number>): void,\n  };\n\n  @Provider({\n    serviceType: CalendarService,\n    observes: true,\n    serviceDidSetScrubTime(scrubTime: DateTime | null): void {\n      let dataPointView: DataPointView<DateTime, number> | null | undefined = null;\n      if (scrubTime !== null) {\n        const plotView = this.owner.plot.view;\n        if (plotView !== null) {\n          dataPointView = plotView.dataPointViews.get(scrubTime);\n          if (dataPointView === void 0) {\n            dataPointView = plotView.dataPointViews.previousValue(scrubTime);\n            if (dataPointView === void 0) {\n              dataPointView = null;\n            }\n          }\n        }\n      }\n      this.setReferenceDataPoint(dataPointView);\n    },\n    setReferenceDataPoint(dataPointView: DataPointView<DateTime, number> | null): void {\n      if (dataPointView !== null) {\n        this.owner.current.setView(dataPointView);\n      } else {\n        this.owner.current.setView(this.owner.latest.view);\n      }\n    },\n  })\n  readonly calendar!: Provider<this, CalendarService> & Observes<CalendarService> & {\n    setReferenceDataPoint(dataPointView: DataPointView<DateTime, number> | null): void,\n  };\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Format} from \"@swim/codec\";\nimport {Provider} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport type {DateTime} from \"@swim/time\";\nimport {DateTimeFormat} from \"@swim/time\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {HtmlView} from \"@swim/dom\";\nimport type {GraphicsPointerEvent} from \"@swim/graphics\";\nimport {CanvasView} from \"@swim/graphics\";\nimport type {Controller,} from \"@swim/controller\";\nimport {ControllerSet} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {PanelView} from \"@swim/panel\";\nimport type {PanelControllerObserver} from \"@swim/panel\";\nimport {PanelController} from \"@swim/panel\";\nimport {ColLayout} from \"@swim/table\";\nimport {TableLayout} from \"@swim/table\";\nimport {RowView} from \"@swim/table\";\nimport {ColView} from \"@swim/table\";\nimport {TextColView} from \"@swim/table\";\nimport {HeaderView} from \"@swim/table\";\nimport {TableView} from \"@swim/table\";\nimport {SeriesPlotView} from \"@swim/chart\";\nimport {GraphView} from \"@swim/chart\";\nimport {TickView} from \"@swim/chart\";\nimport {TopTickView} from \"@swim/chart\";\nimport {AxisView} from \"@swim/chart\";\nimport {TopAxisView} from \"@swim/chart\";\nimport {BottomAxisView} from \"@swim/chart\";\nimport {LeftAxisView} from \"@swim/chart\";\nimport {ChartView} from \"@swim/chart\";\nimport {CalendarService} from \"@swim/domain\";\nimport {TimeSeriesController} from \"./TimeSeriesController\";\n\n/** @public */\nexport interface TimeTableControllerObserver<C extends TimeTableController = TimeTableController> extends PanelControllerObserver<C> {\n}\n\n/** @public */\nexport class TimeTableController extends PanelController {\n  declare readonly observerType?: Class<TimeTableControllerObserver>;\n\n  protected formatDate(time: DateTime): string {\n    return (this.constructor as typeof TimeTableController).dateFormat.format(time);\n  }\n\n  protected formatDateTickLabel(tickView: TickView<DateTime>): string | undefined {\n    return void 0;\n  }\n\n  protected formatValueTickLabel(tickView: TickView<number>): string | undefined {\n    return Format.prefix(tickView.value, 1);\n  }\n\n  @TraitViewRef({\n    extends: true,\n    viewDidMount(panelView: PanelView): void {\n      this.owner.consume(panelView);\n    },\n    viewWillUnmount(panelView: PanelView): void {\n      this.owner.unconsume(panelView);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        classList: [\"time-table\"],\n        style: {\n          userSelect: \"none\",\n        },\n        panelStyle: \"card\",\n      });\n    },\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & PanelController[\"panel\"];\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        style: {\n          marginTop: 24,\n        },\n        unitWidth: 1,\n        unitHeight: 1 / 2,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly chartPanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: CanvasView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chartPanel.insertView();\n    },\n    createView(): CanvasView {\n      return (super.createView() as CanvasView).setIntrinsic({\n        style: {\n          touchAction: \"manipulation\",\n        },\n        wheelEvents: true,\n        pointerEvents: true,\n      });\n    },\n  })\n  readonly chartCanvas!: ViewRef<this, CanvasView>;\n\n  @ViewRef({\n    viewType: ChartView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.chartCanvas.insertView();\n    },\n    didAttachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(chartView.graph.view);\n    },\n    willDetachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    viewWillAttachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(graphView);\n    },\n    viewDidDetachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    createView(): ChartView<DateTime, number> {\n      const chartView = super.createView() as ChartView<DateTime, number>;\n      chartView.setIntrinsic({\n        gutterTop: 12,\n        gutterRight: 60,\n        gutterBottom: 32,\n        gutterLeft: 60,\n      });\n      chartView.domainTracking(true);\n      chartView.xScaleGestures(true);\n      chartView.graph.insertView();\n      return chartView;\n    },\n  })\n  readonly chart!: ViewRef<this, ChartView<DateTime, number>> & Observes<ChartView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: AxisView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(tickAxisView: AxisView<DateTime>): void {\n      const scrubTime = this.owner.calendar.getService().scrubTime.value;\n      this.owner.currentTick.updateScrubTime(scrubTime);\n    },\n    createView(): AxisView<DateTime> {\n      return new TopAxisView<DateTime>().setIntrinsic({\n        tickGenerator: null,\n        tickMarkWidth: 2,\n        tickMarkLength: 6,\n        tickMarkColor: Look.textColor,\n        gridLineWidth: 2,\n        gridLineColor: Look.textColor,\n        borderWidth: 0,\n      });\n    },\n  })\n  readonly tickAxis!: ViewRef<this, AxisView<DateTime>>;\n\n  @ViewRef({\n    viewType: TickView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.tickAxis.view;\n    },\n    updateScrubTime(scrubTime: DateTime | null): void {\n      if (scrubTime === null) {\n        this.deleteView();\n        return;\n      }\n      const currentTickView = new TopTickView<DateTime>(scrubTime).setIntrinsic({\n        gridLineWidth: 1,\n      });\n      currentTickView.setIntangible(true);\n      this.insertView(null, currentTickView);\n    },\n  })\n  readonly currentTick!: ViewRef<this, TickView<DateTime>> & {\n    updateScrubTime(scrubTime: DateTime | null): void,\n  };\n\n  @ViewRef({\n    viewType: AxisView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.chart.attachView();\n    },\n    formatTickLabel(tickLabel: string, tickView: TickView<DateTime>): string | undefined {\n      return this.owner.formatDateTickLabel(tickView);\n    },\n    createView(): AxisView<DateTime> {\n      return new BottomAxisView<DateTime>();\n    },\n  })\n  readonly timeAxis!: ViewRef<this, AxisView<DateTime>> & Observes<AxisView<DateTime>>;\n\n  @ViewRef({\n    viewType: AxisView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.chart.attachView();\n    },\n    formatTickLabel(tickLabel: string, tickView: TickView<number>): string | undefined {\n      return this.owner.formatValueTickLabel(tickView);\n    },\n    createView(): AxisView<number> {\n      return new LeftAxisView<number>();\n    },\n  })\n  readonly valueAxis!: ViewRef<this, AxisView<number>> & Observes<AxisView<number>>;\n\n  @ViewRef({\n    viewType: GraphView,\n    viewKey: true,\n    init(): void {\n      this.onPointerMove = this.onPointerMove.bind(this);\n      this.onPointerEnter = this.onPointerEnter.bind(this);\n      this.onPointerLeave = this.onPointerLeave.bind(this);\n    },\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(graphView: GraphView<DateTime, number>): void {\n      graphView.addEventListener(\"pointermove\", this.onPointerMove);\n      graphView.addEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.addEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    deinitView(graphView: GraphView<DateTime, number>): void {\n      graphView.removeEventListener(\"pointermove\", this.onPointerMove);\n      graphView.removeEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.removeEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    updatePointer(event: GraphicsPointerEvent): void {\n      const graphView = this.view;\n      const xScale = graphView !== null ? graphView.xScale.value : null;\n      if (xScale !== null) {\n        const clientBounds = graphView!.clientBounds;\n        const x = event.clientX - clientBounds.x;\n        const t = xScale.inverse(x);\n        this.owner.calendar.getService().scrubTime.setIntrinsic(t);\n      }\n    },\n    onPointerMove(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerEnter(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerLeave(event: GraphicsPointerEvent): void {\n      this.owner.calendar.getService().scrubTime.setIntrinsic(null);\n    },\n  })\n  readonly graph!: ViewRef<this, GraphView<DateTime, number>> & {\n    updatePointer(event: GraphicsPointerEvent): void,\n    onPointerMove(event: GraphicsPointerEvent): void,\n    onPointerEnter(event: GraphicsPointerEvent): void,\n    onPointerLeave(event: GraphicsPointerEvent): void,\n  };\n\n  @ViewSet({\n    viewType: SeriesPlotView,\n    get parentView(): View | null {\n      return this.owner.graph.attachView();\n    },\n  })\n  readonly plots!: ViewSet<this, SeriesPlotView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        style: {\n          marginBottom: 12,\n          overflowX: \"hidden\",\n          overflowY: \"auto\",\n        },\n        unitWidth: 1,\n        unitHeight: 1 / 2,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly tablePanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: TableView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.tablePanel.insertView();\n    },\n    initView(tableView: TableView): void {\n      this.updateLayout();\n    },\n    didAttachView(tableView: TableView): void {\n      this.owner.header.setView(tableView.header.view);\n      this.owner.rows.setViews(tableView.rows.views);\n    },\n    willDetachView(tableView: TableView): void {\n      this.owner.rows.deleteViews();\n      this.owner.header.setView(null);\n    },\n    viewWillAttachHeader(headerView: HeaderView): void {\n      this.owner.header.setView(headerView);\n    },\n    viewDidDetachHeader(headerView: HeaderView): void {\n      this.owner.header.setView(null);\n    },\n    viewWillAttachRow(rowView: RowView): void {\n      this.owner.rows.addView(rowView);\n    },\n    viewDidDetachRow(rowView: RowView): void {\n      this.owner.rows.deleteView(rowView);\n    },\n    updateLayout(): void {\n      const tableView = this.view;\n      if (tableView !== null) {\n        const layout = this.createLayout();\n        tableView.layout.setIntrinsic(layout);\n      }\n    },\n    createLayout(): TableLayout {\n      const cols = new Array<ColLayout>();\n      const nameColLayout = this.owner.nameCol.layout;\n      if (nameColLayout !== null) {\n        cols.push(nameColLayout);\n      }\n      const colViews = this.owner.cols.views;\n      for (const viewId in colViews) {\n        const colView = colViews[viewId]!;\n        if (colView.key !== \"name\") {\n          const colLayout = this.owner.cols.getLayout(colView);\n          if (colLayout !== null) {\n            cols.push(colLayout);\n          }\n        }\n      }\n      return new TableLayout(null, null, null, Length.px(12), cols);\n    },\n    createView(): TableView {\n      return (super.createView() as TableView).style.setIntrinsic({\n        paddingLeft: 12,\n        paddingRight: 12,\n      });\n    },\n  })\n  readonly table!: ViewRef<this, TableView> & Observes<TableView> & {\n    updateLayout(): void,\n    createLayout(): TableLayout,\n  };\n\n  @ViewRef({\n    viewType: HeaderView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.table.attachView();\n    },\n    insertChild(parent: View, child: HtmlView, target: View | null, key: string | undefined): void {\n      parent.prependChild(child, key);\n    },\n    didAttachView(headerView: HeaderView): void {\n      this.owner.cols.setViews(headerView.cols.views);\n    },\n    willDetachView(headerView: HeaderView): void {\n      this.owner.cols.deleteViews();\n    },\n    viewWillAttachCol(colView: ColView): void {\n      this.owner.cols.addView(colView);\n    },\n    viewDidDetachCol(colView: ColView): void {\n      this.owner.cols.removeView(colView);\n    },\n  })\n  readonly header!: ViewRef<this, HeaderView> & Observes<HeaderView>;\n\n  @ViewSet({\n    viewType: ColView,\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    didAttachView(colView: ColView): void {\n      this.owner.table.updateLayout();\n    },\n    willDetachView(colView: ColView): void {\n      this.owner.table.updateLayout();\n    },\n    getLayout(colView: ColView): ColLayout | null {\n      const colKey = colView.key;\n      if (colKey === void 0) {\n        return null;\n      }\n      return ColLayout.create(colKey, 1, 0, 0, false, false, Look.textColor);\n    },\n  })\n  readonly cols!: ViewSet<this, ColView> & {\n    getLayout(colView: ColView): ColLayout | null,\n  };\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"name\",\n    init(): void {\n      this.layout = ColLayout.create(this.viewKey!, 2, 0, 0, false, false, Look.labelColor);\n    },\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().setIntrinsic({\n        label: \"Name\",\n      });\n    },\n  })\n  readonly nameCol!: ViewRef<this, ColView> & {\n    layout: ColLayout | null,\n  };\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"latest\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().setIntrinsic({\n        label: \"Latest\",\n      });\n    },\n  })\n  readonly latestCol!: ViewRef<this, ColView>;\n\n  @ViewRef({\n    viewType: ColView,\n    viewKey: \"current\",\n    get parentView(): View | null {\n      return this.owner.header.attachView();\n    },\n    createView(): ColView {\n      return TextColView.create().setIntrinsic({\n        label: \"Current\"\n      });\n    },\n  })\n  readonly currentCol!: ViewRef<this, ColView>;\n\n  @ViewSet({\n    viewType: RowView,\n    get parentView(): View | null {\n      return this.owner.table.attachView();\n    },\n  })\n  readonly rows!: ViewSet<this, RowView>;\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n    binds: true,\n    observes: true,\n    didAttachController(timeSeriesController: TimeSeriesController, targetController: Controller | null): void {\n      const rowView = timeSeriesController.row.view;\n      if (rowView !== null) {\n        let targetView: View | null = null;\n        if (targetController instanceof TimeSeriesController) {\n          targetView = targetController.row.view;\n        }\n        this.owner.rows.insertView(null, rowView, targetView, timeSeriesController.key);\n      }\n      this.pinTop();\n    },\n    willDetachController(timeSeriesController: TimeSeriesController): void {\n      this.owner.pinned.detachController(timeSeriesController);\n      const rowView = timeSeriesController.row.view;\n      if (rowView !== null) {\n        this.owner.rows.deleteView(rowView);\n      }\n    },\n    didDetachController(timeSeriesController: TimeSeriesController): void {\n      timeSeriesController.remove();\n      this.pinTop();\n    },\n    controllerDidSetPinned(pinned: boolean, timeSeriesController: TimeSeriesController): void {\n      if (pinned) {\n        this.owner.pinned.attachController(timeSeriesController);\n        this.unpinTop();\n      } else {\n        this.owner.pinned.detachController(timeSeriesController);\n        this.pinTop();\n      }\n    },\n    controllerWillAttachRow(rowView: RowView, targetView: View | null, timeSeriesController: TimeSeriesController): void {\n      this.owner.rows.insertView(null, rowView, targetView, timeSeriesController.key);\n    },\n    controllerDidDetachRow(rowView: RowView, timeSeriesController: TimeSeriesController): void {\n      this.owner.rows.deleteView(rowView);\n    },\n    controllerDidSetFocused(focused: boolean, timeSeriesController: TimeSeriesController): void {\n      if (focused) {\n        this.owner.focused.attachController(timeSeriesController);\n      } else {\n        this.owner.focused.detachController(timeSeriesController);\n      }\n      const focusedControllerCount = this.owner.focused.controllerCount;\n      const seriesControllers = this.controllers;\n      for (const controllerId in seriesControllers) {\n        const seriesController = seriesControllers[controllerId]!;\n        if (focusedControllerCount !== 0 && !this.owner.focused.hasController(seriesController)) {\n          seriesController.defocused.setIntrinsic(true);\n        } else {\n          seriesController.defocused.setIntrinsic(false);\n        }\n      }\n    },\n    pinTop(): void {\n      if (this.owner.pinned.controllerCount > 1) {\n        return;\n      }\n      const topController = this.owner.getFirstChild(TimeSeriesController);\n      let pinnedController: TimeSeriesController | null = null;\n      const pinnedControllers = this.owner.pinned.controllers;\n      for (const controllerId in pinnedControllers) {\n        pinnedController = pinnedControllers[controllerId]!;\n        break;\n      }\n      if (topController !== null && topController !== pinnedController &&\n          (pinnedController === null || !pinnedController.pinned.value)) {\n        if (pinnedController !== null) {\n          this.owner.pinned.detachController(pinnedController);\n        }\n        this.owner.pinned.attachController(topController);\n      }\n    },\n    unpinTop(): void {\n      if (this.owner.pinned.controllerCount <= 1) {\n        return;\n      }\n      const pinnedControllers = this.owner.pinned.controllers;\n      for (const controllerId in pinnedControllers) {\n        const pinnedController = pinnedControllers[controllerId]!;\n        if (!pinnedController.pinned.value) {\n          this.owner.pinned.detachController(pinnedController);\n          break;\n        }\n      }\n    },\n  })\n  readonly series!: ControllerSet<this, TimeSeriesController> & Observes<TimeSeriesController> & {\n    pinTop(): void,\n    unpinTop(): void,\n  };\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n    observes: true,\n    didAttachController(timeSeriesController: TimeSeriesController, targetController: Controller | null): void {\n      if (this.owner.consuming) {\n        timeSeriesController.consume(this.owner);\n      }\n      const plotView = timeSeriesController.plot.view;\n      if (plotView !== null) {\n        let targetView: View | null = null;\n        if (targetController instanceof TimeSeriesController) {\n          targetView = targetController.plot.view;\n        }\n        this.owner.plots.insertView(null, plotView, targetView, timeSeriesController.key);\n      }\n    },\n    willDetachController(timeSeriesController: TimeSeriesController): void {\n      const plotView = timeSeriesController.plot.view;\n      if (plotView !== null) {\n        this.owner.plots.deleteView(plotView);\n      }\n      if (this.owner.consuming) {\n        timeSeriesController.unconsume(this.owner);\n      }\n    },\n    controllerWillAttachPlot(plotView: SeriesPlotView<DateTime, number>, targetView: View | null, timeSeriesController: TimeSeriesController): void {\n      this.owner.plots.insertView(null, plotView, targetView, timeSeriesController.key);\n    },\n    controllerDidDetachPlot(plotView: SeriesPlotView<DateTime, number>, timeSeriesController: TimeSeriesController): void {\n      this.owner.plots.deleteView(plotView);\n    },\n  })\n  readonly pinned!: ControllerSet<this, TimeSeriesController> & Observes<TimeSeriesController>;\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n  })\n  readonly focused!: ControllerSet<this, TimeSeriesController>;\n\n  @Provider({\n    serviceType: CalendarService,\n    observes: true,\n    serviceDidSetScrubTime(scrubTime: DateTime | null): void {\n      this.owner.currentTick.updateScrubTime(scrubTime);\n    },\n  })\n  readonly calendar!: Provider<this, CalendarService> & Observes<CalendarService>;\n\n  protected override onReinsertChild(child: Controller, target: Controller | null): void {\n    super.onReinsertChild(child, target);\n    this.series.pinTop();\n  }\n\n  protected override onStartConsuming(): void {\n    super.onStartConsuming();\n    this.pinned.consumeControllers(this);\n  }\n\n  protected override onStopConsuming(): void {\n    super.onStopConsuming();\n    this.pinned.unconsumeControllers(this);\n  }\n\n  static dateFormat: DateTimeFormat = DateTimeFormat.pattern(\"%b %d @ %H:%M\");\n}\n","// Copyright 2015-2022 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Format} from \"@swim/codec\";\nimport {Provider} from \"@swim/component\";\nimport {Length} from \"@swim/math\";\nimport type {DateTime} from \"@swim/time\";\nimport {DateTimeFormat} from \"@swim/time\";\nimport type {Trait} from \"@swim/model\";\nimport {Look} from \"@swim/theme\";\nimport type {View} from \"@swim/view\";\nimport {ViewRef} from \"@swim/view\";\nimport {ViewSet} from \"@swim/view\";\nimport type {GraphicsPointerEvent} from \"@swim/graphics\";\nimport {GraphicsView} from \"@swim/graphics\";\nimport {CanvasView} from \"@swim/graphics\";\nimport {TextRunView} from \"@swim/graphics\";\nimport type {Controller,} from \"@swim/controller\";\nimport {ControllerSet} from \"@swim/controller\";\nimport {TraitViewRef} from \"@swim/controller\";\nimport {PanelView} from \"@swim/panel\";\nimport type {PanelControllerObserver} from \"@swim/panel\";\nimport {PanelController} from \"@swim/panel\";\nimport {SliceView} from \"@swim/pie\";\nimport {PieView} from \"@swim/pie\";\nimport {SeriesPlotView} from \"@swim/chart\";\nimport {GraphView} from \"@swim/chart\";\nimport {TickView} from \"@swim/chart\";\nimport {TopTickView} from \"@swim/chart\";\nimport {AxisView} from \"@swim/chart\";\nimport {TopAxisView} from \"@swim/chart\";\nimport {ChartView} from \"@swim/chart\";\nimport {CalendarService} from \"@swim/domain\";\nimport {TimeSeriesController} from \"./TimeSeriesController\";\n\n/** @public */\nexport interface TimePieControllerObserver<C extends TimePieController = TimePieController> extends PanelControllerObserver<C> {\n}\n\n/** @public */\nexport class TimePieController extends PanelController {\n  declare readonly observerType?: Class<TimePieControllerObserver>;\n\n  protected formatDate(time: DateTime): string {\n    return (this.constructor as typeof TimePieController).dateFormat.format(time);\n  }\n\n  protected formatDateTickLabel(tickView: TickView<DateTime>): string | undefined {\n    return void 0;\n  }\n\n  protected formatValueTickLabel(tickView: TickView<number>): string | undefined {\n    return Format.prefix(tickView.value, 1);\n  }\n\n  @TraitViewRef({\n    extends: true,\n    viewDidMount(panelView: PanelView): void {\n      this.owner.consume(panelView);\n    },\n    viewWillUnmount(panelView: PanelView): void {\n      this.owner.unconsume(panelView);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        classList: [\"time-pie\"],\n        style: {\n          userSelect: \"none\",\n        },\n        panelStyle: \"card\",\n      });\n    },\n  })\n  override readonly panel!: TraitViewRef<this, Trait, PanelView> & PanelController[\"panel\"];\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    insertChild(parent: View, child: PanelView, target: View | null, key: string | undefined): void {\n      if (target === null) {\n        target = this.owner.chartPanel.view;\n      }\n      parent.insertChild(child, target, key);\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        style: {\n          marginTop: 24,\n        },\n        unitWidth: 1,\n        unitHeight: 4 / 5,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly piePanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: CanvasView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.piePanel.insertView();\n    },\n  })\n  readonly pieCanvas!: ViewRef<this, CanvasView>;\n\n  @ViewRef({\n    viewType: PieView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.pieCanvas.insertView();\n    },\n    didAttachView(pieView: PieView): void {\n      this.owner.pieTitle.setView(pieView.title.view);\n      this.owner.slices.setViews(pieView.slices.views);\n    },\n    willDetachView(pieView: PieView): void {\n      this.owner.slices.deleteViews();\n      this.owner.pieTitle.setView(null);\n    },\n    viewWillAttachTitle(titleView: GraphicsView): void {\n      this.owner.pieTitle.setView(titleView);\n    },\n    viewDidDetachTitle(titleView: GraphicsView): void {\n      this.owner.pieTitle.setView(null);\n    },\n    viewWillAttachSlice(sliceView: SliceView): void {\n      this.owner.slices.addView(sliceView);\n    },\n    viewDidDetachSlice(sliceView: SliceView): void {\n      this.owner.slices.deleteView(sliceView);\n    },\n    createView(): PieView {\n      return new PieView().setIntrinsic({\n        innerRadius: Length.pct(5),\n        outerRadius: Length.pct(35),\n        tickRadius: Length.pct(40),\n        tickLength: Length.pct(45),\n        font: Look.font,\n      });\n    },\n  })\n  readonly pie!: ViewRef<this, PieView> & Observes<PieView>;\n\n  @ViewRef({\n    viewType: GraphicsView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.pie.attachView();\n    },\n    initView(titleView: GraphicsView): void {\n      if (titleView instanceof TextRunView) {\n        titleView.font.setInherits(false);\n        titleView.font.setIntrinsic(Look.largeFont);\n        titleView.textColor.setIntrinsic(Look.textColor);\n      }\n    },\n    setText(title: string | undefined): GraphicsView {\n      return this.owner.pie.attachView().title.set(title);\n    },\n  })\n  readonly pieTitle!: ViewRef<this, GraphicsView> & {\n    setText(title: string | undefined): GraphicsView,\n  };\n\n  @ViewSet({\n    viewType: SliceView,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.pie.attachView();\n    },\n  })\n  readonly slices!: ViewSet<this, SliceView>;\n\n  @ViewRef({\n    viewType: PanelView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.panel.attachView();\n    },\n    createView(): PanelView {\n      return (super.createView() as PanelView).setIntrinsic({\n        unitWidth: 1,\n        unitHeight: 1 / 5,\n        minPanelHeight: 0,\n      });\n    },\n  })\n  readonly chartPanel!: ViewRef<this, PanelView>;\n\n  @ViewRef({\n    viewType: CanvasView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chartPanel.insertView();\n    },\n    createView(): CanvasView {\n      return (super.createView() as CanvasView).setIntrinsic({\n        style: {\n          touchAction: \"manipulation\",\n        },\n        wheelEvents: true,\n        pointerEvents: true,\n      });\n    },\n  })\n  readonly chartCanvas!: ViewRef<this, CanvasView>;\n\n  @ViewRef({\n    viewType: ChartView,\n    viewKey: true,\n    observes: true,\n    get parentView(): View | null {\n      return this.owner.chartCanvas.insertView();\n    },\n    didAttachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(chartView.graph.view);\n    },\n    willDetachView(chartView: ChartView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    viewWillAttachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(graphView);\n    },\n    viewDidDetachGraph(graphView: GraphView<DateTime, number>): void {\n      this.owner.graph.setView(null);\n    },\n    createView(): ChartView<DateTime, number> {\n      const chartView = (super.createView() as ChartView<DateTime, number>).setIntrinsic({\n        gutterTop: 12,\n        gutterRight: 60,\n        gutterBottom: 32,\n        gutterLeft: 60,\n      });\n      chartView.domainTracking(true);\n      chartView.xScaleGestures(true);\n      chartView.graph.insertView();\n      return chartView;\n    },\n  })\n  readonly chart!: ViewRef<this, ChartView<DateTime, number>> & Observes<ChartView<DateTime, number>>;\n\n  @ViewRef({\n    viewType: AxisView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(tickAxisView: AxisView<DateTime>): void {\n      const scrubTime = this.owner.calendar.getService().scrubTime.value;\n      this.owner.currentTick.updateScrubTime(scrubTime);\n    },\n    createView(): AxisView<DateTime> {\n      return new TopAxisView<DateTime>().setIntrinsic({\n        tickGenerator: null,\n        tickMarkWidth: 2,\n        tickMarkLength: 6,\n        tickMarkColor: Look.textColor,\n        gridLineWidth: 2,\n        gridLineColor: Look.textColor,\n        borderWidth: 0,\n      });\n    },\n  })\n  readonly tickAxis!: ViewRef<this, AxisView<DateTime>>;\n\n  @ViewRef({\n    viewType: TickView,\n    viewKey: true,\n    get parentView(): View | null {\n      return this.owner.tickAxis.view;\n    },\n    updateScrubTime(scrubTime: DateTime | null): void {\n      if (scrubTime === null) {\n        this.deleteView();\n        return;\n      }\n      const currentTickView = new TopTickView<DateTime>(scrubTime).setIntrinsic({\n        gridLineWidth: 1,\n      });\n      currentTickView.setIntangible(true);\n      this.insertView(null, currentTickView);\n    },\n  })\n  readonly currentTick!: ViewRef<this, TickView<DateTime>> & {\n    updateScrubTime(scrubTime: DateTime | null): void,\n  };\n\n  @ViewRef({\n    viewType: GraphView,\n    viewKey: true,\n    init(): void {\n      this.onPointerMove = this.onPointerMove.bind(this);\n      this.onPointerEnter = this.onPointerEnter.bind(this);\n      this.onPointerLeave = this.onPointerLeave.bind(this);\n    },\n    get parentView(): View | null {\n      return this.owner.chart.insertView();\n    },\n    initView(graphView: GraphView<DateTime, number>): void {\n      graphView.addEventListener(\"pointermove\", this.onPointerMove);\n      graphView.addEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.addEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    deinitView(graphView: GraphView<DateTime, number>): void {\n      graphView.removeEventListener(\"pointermove\", this.onPointerMove);\n      graphView.removeEventListener(\"pointerenter\", this.onPointerEnter);\n      graphView.removeEventListener(\"pointerleave\", this.onPointerLeave);\n    },\n    updatePointer(event: GraphicsPointerEvent): void {\n      const graphView = this.view;\n      const xScale = graphView !== null ? graphView.xScale.value : null;\n      if (xScale !== null) {\n        const clientBounds = graphView!.clientBounds;\n        const x = event.clientX - clientBounds.x;\n        const t = xScale.inverse(x);\n        this.owner.calendar.getService().scrubTime.setIntrinsic(t);\n      }\n    },\n    onPointerMove(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerEnter(event: GraphicsPointerEvent): void {\n      this.updatePointer(event);\n    },\n    onPointerLeave(event: GraphicsPointerEvent): void {\n      this.owner.calendar.getService().scrubTime.setIntrinsic(null);\n    },\n  })\n  readonly graph!: ViewRef<this, GraphView<DateTime, number>> & {\n    updatePointer(event: GraphicsPointerEvent): void,\n    onPointerMove(event: GraphicsPointerEvent): void,\n    onPointerEnter(event: GraphicsPointerEvent): void,\n    onPointerLeave(event: GraphicsPointerEvent): void,\n  };\n\n  @ViewSet({\n    viewType: SeriesPlotView,\n    get parentView(): View | null {\n      return this.owner.graph.attachView();\n    },\n  })\n  readonly plots!: ViewSet<this, SeriesPlotView<DateTime, number>>;\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n    binds: true,\n    observes: true,\n    didAttachController(timeSeriesController: TimeSeriesController, targetController: Controller | null): void {\n      const sliceView = timeSeriesController.slice.view;\n      if (sliceView !== null) {\n        let targetView: View | null = null;\n        if (targetController instanceof TimeSeriesController) {\n          targetView = targetController.slice.view;\n        }\n        this.owner.slices.insertView(null, sliceView, targetView, timeSeriesController.key);\n      }\n      this.pinTop();\n    },\n    willDetachController(timeSeriesController: TimeSeriesController): void {\n      this.owner.pinned.detachController(timeSeriesController);\n      const sliceView = timeSeriesController.slice.view;\n      if (sliceView !== null) {\n        this.owner.slices.deleteView(sliceView);\n      }\n    },\n    didDetachController(timeSeriesController: TimeSeriesController): void {\n      timeSeriesController.remove();\n      this.pinTop();\n    },\n    controllerDidSetPinned(pinned: boolean, timeSeriesController: TimeSeriesController): void {\n      if (pinned) {\n        this.owner.pinned.attachController(timeSeriesController);\n        this.unpinTop();\n      } else {\n        this.owner.pinned.detachController(timeSeriesController);\n        this.pinTop();\n      }\n    },\n    controllerWillAttachSlice(sliceView: SliceView, targetView: View | null, timeSeriesController: TimeSeriesController): void {\n      this.owner.slices.insertView(null, sliceView, targetView, timeSeriesController.key);\n    },\n    controllerDidDetachSlice(sliceView: SliceView, timeSeriesController: TimeSeriesController): void {\n      this.owner.slices.deleteView(sliceView);\n    },\n    controllerDidSetFocused(focused: boolean, timeSeriesController: TimeSeriesController): void {\n      if (focused) {\n        this.owner.focused.attachController(timeSeriesController);\n      } else {\n        this.owner.focused.detachController(timeSeriesController);\n      }\n      const focusedControllerCount = this.owner.focused.controllerCount;\n      const seriesControllers = this.controllers;\n      for (const controllerId in seriesControllers) {\n        const seriesController = seriesControllers[controllerId]!;\n        if (focusedControllerCount !== 0 && !this.owner.focused.hasController(seriesController)) {\n          seriesController.defocused.setIntrinsic(true);\n        } else {\n          seriesController.defocused.setIntrinsic(false);\n        }\n      }\n    },\n    pinTop(): void {\n      if (this.owner.pinned.controllerCount <= 1) {\n        const topController = this.owner.getFirstChild(TimeSeriesController);\n        let pinnedController: TimeSeriesController | null = null;\n        const pinnedControllers = this.owner.pinned.controllers;\n        for (const controllerId in pinnedControllers) {\n          pinnedController = pinnedControllers[controllerId]!;\n          break;\n        }\n        if (topController !== null && topController !== pinnedController &&\n            (pinnedController === null || !pinnedController.pinned.value)) {\n          if (pinnedController !== null) {\n            this.owner.pinned.detachController(pinnedController);\n          }\n          this.owner.pinned.attachController(topController);\n        }\n      }\n    },\n    unpinTop(): void {\n      if (this.owner.pinned.controllerCount > 1) {\n        const pinnedControllers = this.owner.pinned.controllers;\n        for (const controllerId in pinnedControllers) {\n          const pinnedController = pinnedControllers[controllerId]!;\n          if (!pinnedController.pinned.value) {\n            this.owner.pinned.detachController(pinnedController);\n            break;\n          }\n        }\n      }\n    },\n  })\n  readonly series!: ControllerSet<this, TimeSeriesController> & Observes<TimeSeriesController> & {\n    pinTop(): void,\n    unpinTop(): void,\n  };\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n    observes: true,\n    didAttachController(timeSeriesController: TimeSeriesController, targetController: Controller | null): void {\n      if (this.owner.consuming) {\n        timeSeriesController.consume(this.owner);\n      }\n      const plotView = timeSeriesController.plot.view;\n      if (plotView !== null) {\n        let targetView: View | null = null;\n        if (targetController instanceof TimeSeriesController) {\n          targetView = targetController.plot.view;\n        }\n        this.owner.plots.insertView(null, plotView, targetView, timeSeriesController.key);\n      }\n    },\n    willDetachController(timeSeriesController: TimeSeriesController): void {\n      const plotView = timeSeriesController.plot.view;\n      if (plotView !== null) {\n        this.owner.plots.deleteView(plotView);\n      }\n      if (this.owner.consuming) {\n        timeSeriesController.unconsume(this.owner);\n      }\n    },\n    controllerWillAttachPlot(plotView: SeriesPlotView<DateTime, number>, targetView: View | null, timeSeriesController: TimeSeriesController): void {\n      this.owner.plots.insertView(null, plotView, targetView, timeSeriesController.key);\n    },\n    controllerDidDetachPlot(plotView: SeriesPlotView<DateTime, number>, timeSeriesController: TimeSeriesController): void {\n      this.owner.plots.deleteView(plotView);\n    },\n  })\n  readonly pinned!: ControllerSet<this, TimeSeriesController> & Observes<TimeSeriesController>;\n\n  @ControllerSet({\n    controllerType: TimeSeriesController,\n  })\n  readonly focused!: ControllerSet<this, TimeSeriesController>;\n\n  @Provider({\n    serviceType: CalendarService,\n    observes: true,\n    serviceDidSetScrubTime(scrubTime: DateTime | null): void {\n      this.owner.currentTick.updateScrubTime(scrubTime);\n    },\n  })\n  readonly calendar!: Provider<this, CalendarService> & Observes<CalendarService>;\n\n  protected override onReinsertChild(child: Controller, target: Controller | null): void {\n    super.onReinsertChild(child, target);\n    this.series.pinTop();\n  }\n\n  protected override onStartConsuming(): void {\n    super.onStartConsuming();\n    this.pinned.consumeControllers(this);\n  }\n\n  protected override onStopConsuming(): void {\n    super.onStopConsuming();\n    this.pinned.unconsumeControllers(this);\n  }\n\n  static dateFormat: DateTimeFormat = DateTimeFormat.pattern(\"%b %d @ %H:%M\");\n}\n"],"names":["__esDecorate","ctor","descriptorIn","decorators","contextIn","initializers","extraInitializers","accept","f","TypeError","_","kind","key","target","prototype","descriptor","Object","getOwnPropertyDescriptor","name","done","i","length","context","p","access","addInitializer","push","result","get","set","init","unshift","defineProperty","__runInitializers","thisArg","value","useValue","arguments","call","SuppressedError","Status","constructor","unknown","warning","alert","this","withUnknown","isFinite","Error","Math","min","max","withWarning","withAlert","moodModifier","Feel","primary","inactive","interpolateTo","that","StatusInterpolator","equivalentTo","epsilon","Numbers","equivalent","canEqual","equals","hashCode","Murmur3","mash","mix","Constructors","hash","debug","output","write","toString","Format","normal","status","Normal","Unknown","Warning","Alert","normalRange","range","NormalRange","Constant","warningRange","warning0","warning1","WarningAscending","WarningDescending","alertRange","alert0","alert1","AlertAscending","AlertDescending","panicRange","PanicRange","worsening","lowerBound","warningThreshold","alertThreshold","panicThreshold","upperBound","normalMapping","Mapping","LinearDomain","warningMapping","alertMapping","panicMapping","Piecewise","improving","_super","s0","s1","interpolator","u","setPrototypeOf","create","Interpolator","AspectTrait","_a","Trait","id","_instanceExtraInitializers","_id_initializers","entity","_entity_initializers","title","_title_initializers","icon","_icon_initializers","_status_initializers","createTabController","onAttachModel","model","super","getTrait","SelectableTrait","appendTrait","_id_decorators","Property","valueType","String","_entity_decorators","TraitRef","traitType","EntityTrait","willAttachTrait","entityTrait","targetTrait","owner","callObservers","initTrait","bindInlet","deinitTrait","unbindInlet","didDetachTrait","_title_decorators","didSetValue","newTitle","oldTitle","equalValues","_icon_decorators","Graphics","newIcon","oldIcon","_status_decorators","static","private","has","obj","path","_path_initializers","aspect","_aspect_initializers","aspects","_aspects_initializers","relations","_relations_initializers","relatable","_relatable_initializers","searchable","_searchable_initializers","searching","_searching_initializers","nodeUri","getter","onStartSearching","onStopSearching","updateSearch","query","submitSearch","createNavController","_get_nodeUri_decorators","extends","inherits","_path_decorators","UriPath","parentType","RelationTrait","deriveValue","basePath","pathBuilder","UriPathBuilder","addPath","addSegment","build","newPath","oldPath","onMount","derived","setValue","slash","Affinity","Reflexive","_aspect_decorators","_aspects_decorators","TraitModelSet","traitKey","modelType","Model","binds","observes","ids","aspectTrait","attachTrait","trait","detachTrait","modelDidAttachParent","parent","detectModelTrait","targetModel","nextSibling","createTrait","setIntrinsic","createModel","_relations_decorators","observesTrait","relationTrait","traitWillAttachEntity","relatedEntityTrait","traitDidDetachEntity","traitDidSetHidden","hidden","traitDidSetDisclosed","disclosed","_relatable_decorators","Boolean","_searchable_decorators","_searching_decorators","_hidden_initializers","_disclosed_initializers","entities","_entities_initializers","_hidden_decorators","_disclosed_decorators","_entities_decorators","getOrInsert","addTrait","CalendarService","Service","timeZone","_timeZone_initializers","scrubTime","_scrubTime_initializers","_timeZone_decorators","TimeZone","local","_scrubTime_decorators","DateTime","LoginController","Controller","SessionController","AspectRowController","RowController","selectable","_selectable_initializers","leaf","_leaf_initializers","iconCell","_iconCell_initializers","titleCell","_titleCell_initializers","updateStatus","consumed","didAttachTrait","setTrait","leafView","row","attachView","insertView","graphics","content","willDetachTrait","traitDidInsertTrait","memberTrait","traitDidSetTitle","titleCellView","view","traitDidSetIcon","iconCellView","traitDidSetStatus","_selectable_decorators","selectableTrait","highlight","selected","traitDidSelect","options","focus","traitWillUnselect","unfocus","_leaf_decorators","TraitViewRef","initView","style","cursor","didAttachView","targetView","mounted","culled","consume","viewDidMount","viewWillUnmount","unconsume","viewDidCull","viewWillUncull","modifyMood","default","_iconCell_decorators","ViewRef","viewType","IconCellView","viewKey","parentView","willAttachView","didDetachView","createView","iconLayout","width","height","iconColor","Look","accentColor","_titleCell_decorators","TextCellView","AspectBinderController","BinderController","sheet","_sheet_initializers","binder","_binder_initializers","tabBar","_tabBar_initializers","tabs","_tabs_initializers","active","_active_initializers","history","_history_initializers","didPressTabHandle","input","event","tabController","tabTrait","aspectId","getService","pushHistory","parameters","environment","updateNavigationState","historyState","getChild","SheetController","setController","onResolve","_sheet_decorators","sheetTrait","sort","sorted","aspectTraits","traits","aspectControllers","traitId","createController","setTab","tabControllers","controllers","controllerId","deleteController","binderView","mountBinder","unmountBinder","traitWillAttachAspect","insertTrait","traitDidDetachAspect","deleteTrait","traitDidReinsertAspect","reinsertTrait","titleView","attachController","tool","TitleToolView","_binder_decorators","observesView","willDetachView","_tabBar_decorators","TraitViewControllerRef","initController","tabBarController","attachTabBarView","tabBarView","backgroundColor","backdropFilter","barHeight","transparent","translucent","_tabs_decorators","TraitViewControllerSet","controllerKey","handleView","handle","compare","a","b","aTrait","bTrait","compareTraits","_active_decorators","attachActiveTrait","activeTrait","activeController","detachActiveTrait","_history_decorators","Provider","serviceType","HistoryService","updateHistory","newHistoryState","oldHistoryState","requireUpdate","NeedsResolve","serviceDidPushHistory","serviceDidPopHistory","MountFlags","EntityRowController","moreCell","_moreCell_initializers","moreIcon","VectorIcon","enabled","traitDidSetRelatable","removeView","_moreCell_decorators","viewDidPress","legendColor","Lazy","_static_get_moreIcon_decorators","_staticExtraInitializers","EntityTableController","TableController","table","_table_initializers","rows","_rows_initializers","entityRow","_entityRow_initializers","compareRowControllers","x","y","tableView","mountTable","unmountTable","_table_decorators","userSelect","rowHeight","viewIdiom","ColLayout","titleLayout","moreLayout","tableLayout","TableLayout","layout","viewWillExpand","viewDidCollapse","viewWillResize","_rows_decorators","_entityRow_decorators","TraitControllerRef","controllerType","getTraitRef","entityRowController","willAttachController","didAttachController","getTargetView","didDetachController","controllerDidPressLeafView","controllerDidLongPressLeafView","RelationTableController","relation","_relation_initializers","header","_header_initializers","disclosureCol","_disclosureCol_initializers","titleCol","_titleCol_initializers","entityRows","_entityRows_initializers","_relation_decorators","insertTraits","label","expansion","deleteTraits","relationTitle","traitDidReinsertEntity","collapsed","setView","_header_decorators","attachHeaderView","headerView","headerController","initHeaderView","_disclosureCol_decorators","DisclosureColView","disclosureColView","disclosureButton","button","collapsedColor","expandedColor","_titleCol_decorators","TextColView","_entityRows_decorators","TraitControllerSet","controllerDidPressMoreCellView","EntityNavController","entityTable","_entityTable_initializers","relationTables","_relationTables_initializers","inputView","relationTraits","traitDidSetSearchable","traitWillAttachRelation","traitDidDetachRelation","traitDidSetRelationHidden","newSearching","oldSearching","_entityTable_decorators","entityTableController","controllerDidPressEntityRow","controllerDidLongPressEntityRow","controllerDidPressAspectRow","aspectRowController","controllerDidLongPressAspectRow","_relationTables_decorators","relationTableController","controllerDidPressEntityMore","EntityFolioController","FolioController","rootEntity","_rootEntity_initializers","drawer","_drawer_initializers","stack","_stack_initializers","sheets","_sheets_initializers","front","_front_initializers","frontNav","_frontNav_initializers","frontEntity","_frontEntity_initializers","frontStatus","_frontStatus_initializers","folio","_folio_initializers","navBar","_navBar_initializers","appBar","_appBar_initializers","cover","_cover_initializers","coverEntity","_coverEntity_initializers","selection","_selection_initializers","createEntityNav","navController","showEntityNav","timing","navView","dismiss","appendChild","addController","present","showEntityBinder","binderController","insertController","didPressBackButton","defaultPrevented","frontTrait","frontPath","coverTrait","coverPath","historyService","fragment","folioStyle","parentPath","isEmpty","appendedSlash","root","controller","targetController","targetPath","parse","empty","error","unmatchedPath","isAbsolute","tail","isSegment","subpath","relationId","head","entityId","forwardController","forward","forwardTrait","unmatchedController","backController","back","sheetView","foot","select","unselectAll","_rootEntity_decorators","_drawer_decorators","drawerView","updateFullBleed","fullBleed","_stack_decorators","updateFolioStyle","stackView","backAlign","updateFrontScroll","_sheets_decorators","sheetController","_front_decorators","frontController","frontEntityTrait","willDetachController","controllerWillAttachTitle","titleController","_frontNav_decorators","ControllerRef","entityPath","preventDefault","controllerDidPressRelatedEntityRow","controllerDidLongPressRelatedEntityRow","controllerDidPressRelatedEntityMore","_frontEntity_decorators","_frontStatus_decorators","_folio_decorators","folioView","expandedWidth","modifyTheme","raised","viewDidSetFolioStyle","_navBar_decorators","navBarController","NavBarController","closeButton","backButton","searchButton","searchInput","cancelSearch","attachNavBarView","navBarView","showBackTitle","frontViewDidScroll","frontView","scrollTop","node","getLook","_appBar_decorators","appBarController","AppBarController","menuButton","attachAppBarView","appBarView","coverViewDidScroll","coverView","bar","_cover_decorators","attachCoverTrait","coverController","detachCoverTrait","controllerWillPresentSheetView","controllerWillDismissSheetView","_coverEntity_decorators","BarController","getTraitViewRef","detachTabBarView","controllerWillAttachBarView","controllerDidDetachBarView","controllerDidPressTabHandle","controllerDidLongPressTabHandle","binderTrait","attachBinderTrait","attachBinderView","detachBinderView","detachBinderTrait","controllerWillAttachBinderTrait","controllerDidDetachBinderTrait","controllerWillAttachBinderView","controllerDidDetachBinderView","detachController","activeView","attachActiveView","detachActiveView","controllerWillAttachSheetTrait","controllerDidDetachSheetTrait","controllerWillAttachSheetView","controllerDidDetachSheetView","_selection_decorators","SelectionService","AtlasController","location","_location_initializers","locationTracking","_locationTracking_initializers","map","_map_initializers","mapPanel","_mapPanel_initializers","panel","_panel_initializers","panelHeader","_panelHeader_initializers","panelTitle","_panelTitle_initializers","panelSubtitle","_panelSubtitle_initializers","createMapView","containerView","mapboxgl","Map","container","boxZoom","center","lng","lat","zoom","MapboxView","hostUri","geoTrait","GeoTrait","_location_decorators","GeoController","geoController","geo","located","attachGeoTrait","geoView","attachGeoView","layers","mapController","detachGeoView","detachGeoTrait","controllerWillAttachGeoTrait","controllerDidDetachGeoTrait","geoPerspective","mapView","moveTo","controllerWillAttachGeoView","controllerDidDetachGeoView","controllerDidSetGeoPerspective","createGeoController","_map_decorators","MapController","attachContainerView","deinitController","detachContainerView","controllerWillAttachMapView","canvas","pointerEvents","deinitView","_mapPanel_decorators","PanelView","mapPanelView","classList","unitWidth","unitHeight","minPanelHeight","_panel_decorators","panelView","headerTitle","headerSubtitle","viewWillAttachHeader","viewDidDetachHeader","viewWillAttachHeaderTitle","viewDidDetachHeaderTitle","viewWillAttachHeaderSubtitle","subtitleView","viewDidDetachHeaderSubtitle","_panelHeader_decorators","HtmlView","_panelTitle_decorators","setText","_panelSubtitle_decorators","subtitle","_locationTracking_decorators","AtlasAspectTrait","sharedController","hasOwnProperty","SharedController","createSharedController","enumerable","configurable","_static_get_icon_decorators","AtlasEntityTrait","GeoLayerTrait","geoShape","_geoShape_initializers","geoCenter","_geoCenter_initializers","geoIcon","_geoIcon_initializers","hyperlink","AtlasEntityController","_geoShape_decorators","GeoShape","bounds","_geoCenter_decorators","GeoPoint","_geoIcon_decorators","Hyperlink","_get_hyperlink_decorators","GeoLayerController","_geo_initializers","shape","_shape_initializers","fill","fillOpacity","stroke","strokeOpacity","strokeWidth","updateSelected","_geo_decorators","GeoView","_shape_decorators","GeoShapeView","insertChild","child","shapeView","viewDidEnter","viewDidLeave","viewDidLongPress","deleteView","_get_fill_decorators","ColorLook","transition","_get_fillOpacity_decorators","NumberLook","_get_stroke_decorators","_get_strokeOpacity_decorators","_get_strokeWidth_decorators","Length","GeoIconView","iconView","_get_iconLayout_decorators","IconLayout","of","_get_iconColor_decorators","TimeGaugeController","PanelController","gaugePanel","_gaugePanel_initializers","gaugeCanvas","_gaugeCanvas_initializers","gauge","_gauge_initializers","gaugeTitle","_gaugeTitle_initializers","dial","_dial_initializers","dialLabel","_dialLabel_initializers","dialLegend","_dialLegend_initializers","chartPanel","_chartPanel_initializers","chartCanvas","_chartCanvas_initializers","chart","_chart_initializers","tickAxis","_tickAxis_initializers","currentTick","_currentTick_initializers","graph","_graph_initializers","plot","_plot_initializers","dataPoints","_dataPoints_initializers","latest","_latest_initializers","current","_current_initializers","calendar","_calendar_initializers","formatPanelTitle","dataPointView","formatPanelSubtitle","time","getValue","formatDate","formatDialLabel","limit","formatDialLegend","formatGaugeTitle","prefix","dateFormat","format","panelStyle","setCurrent","updateScrubTime","color","textColor","labelColor","_gaugePanel_decorators","marginTop","_gaugeCanvas_decorators","CanvasView","_gauge_decorators","GaugeView","gaugeView","viewWillAttachTitle","viewDidDetachTitle","innerRadius","pct","outerRadius","startAngle","Angle","rad","PI","sweepAngle","cornerRadius","zero","tickAlign","tickRadius","tickLength","font","_gaugeTitle_decorators","GraphicsView","TextRunView","setInherits","largeFont","_dial_decorators","DialView","dialView","updateValue","legend","viewWillAttachLabel","labelView","viewDidDetachLabel","viewWillAttachLegend","legendView","viewDidDetachLegend","viewDidSetValue","viewDidSetLimit","tweening","getLookOr","dialValue","look","meterColor","theme","mood","applyTheme","_dialLabel_decorators","smallFont","_dialLegend_decorators","_chartPanel_decorators","_chartCanvas_decorators","_chart_decorators","ChartView","chartView","viewWillAttachGraph","graphView","viewDidDetachGraph","viewDidSetYScale","yScale","domain","domainTracking","gutterTop","gutterRight","gutterBottom","gutterLeft","_tickAxis_decorators","AxisView","tickAxisView","TopAxisView","tickGenerator","tickMarkWidth","tickMarkLength","tickMarkColor","gridLineWidth","gridLineColor","borderWidth","_currentTick_decorators","TickView","currentTickView","TopTickView","setIntangible","_graph_decorators","GraphView","onPointerMove","bind","onPointerEnter","onPointerLeave","addEventListener","removeEventListener","updatePointer","xScale","clientBounds","clientX","t","inverse","_plot_decorators","SeriesPlotView","plotView","setViews","views","deleteViews","viewWillAttachDataPoint","addView","viewDidDetachDataPoint","LinePlotView","hitMode","_dataPoints_decorators","ViewSet","DataPointView","_latest_decorators","remove","_current_decorators","_calendar_decorators","serviceDidSetScrubTime","dataPointViews","previousValue","DateTimeFormat","pattern","TimeSeriesController","focused","_focused_initializers","defocused","_defocused_initializers","pinned","_pinned_initializers","slice","_slice_initializers","sliceLabel","_sliceLabel_initializers","sliceLegend","_sliceLegend_initializers","_row_initializers","cells","_cells_initializers","nameCell","_nameCell_initializers","latestCell","_latestCell_initializers","currentCell","_currentCell_initializers","formatLatestCell","formatCell","formatCurrentCell","formatSliceLabel","total","formatSliceLegend","applySliceStatus","sliceView","sliceColor","_focused_decorators","_defocused_decorators","opacity","_pinned_decorators","update","hovering","hover","state","highlighted","setLatest","_slice_decorators","SliceView","viewDidSetTotal","sliceValue","_sliceLabel_decorators","_sliceLegend_decorators","_row_decorators","RowView","rowView","viewWillAttachLeaf","viewDidDetachLeaf","LeafView","viewWillAttachCell","cellView","viewDidDetachCell","hovers","viewWillHighlight","viewWillUnhighlight","toggle","_cells_decorators","CellView","_nameCell_decorators","_latestCell_decorators","_currentCell_decorators","setReferenceDataPoint","TimeTableController","timeAxis","_timeAxis_initializers","valueAxis","_valueAxis_initializers","plots","_plots_initializers","tablePanel","_tablePanel_initializers","cols","_cols_initializers","nameCol","_nameCol_initializers","latestCol","_latestCol_initializers","currentCol","_currentCol_initializers","series","_series_initializers","formatDateTickLabel","tickView","formatValueTickLabel","onReinsertChild","pinTop","onStartConsuming","consumeControllers","onStopConsuming","unconsumeControllers","touchAction","wheelEvents","xScaleGestures","_timeAxis_decorators","formatTickLabel","tickLabel","BottomAxisView","_valueAxis_decorators","LeftAxisView","_plots_decorators","_tablePanel_decorators","marginBottom","overflowX","overflowY","TableView","updateLayout","viewWillAttachRow","viewDidDetachRow","createLayout","Array","nameColLayout","colViews","viewId","colView","colLayout","getLayout","px","paddingLeft","paddingRight","HeaderView","prependChild","viewWillAttachCol","viewDidDetachCol","_cols_decorators","ColView","colKey","_nameCol_decorators","_latestCol_decorators","_currentCol_decorators","_series_decorators","ControllerSet","timeSeriesController","controllerDidSetPinned","unpinTop","controllerWillAttachRow","controllerDidDetachRow","controllerDidSetFocused","focusedControllerCount","controllerCount","seriesControllers","seriesController","hasController","topController","getFirstChild","pinnedController","pinnedControllers","consuming","controllerWillAttachPlot","controllerDidDetachPlot","TimePieController","piePanel","_piePanel_initializers","pieCanvas","_pieCanvas_initializers","pie","_pie_initializers","pieTitle","_pieTitle_initializers","slices","_slices_initializers","_piePanel_decorators","_pieCanvas_decorators","_pie_decorators","PieView","pieView","viewWillAttachSlice","viewDidDetachSlice","_pieTitle_decorators","_slices_decorators","controllerWillAttachSlice","controllerDidDetachSlice"],"mappings":";8oCAiEO,SAASA,EAAaC,EAAMC,EAAcC,EAAYC,EAAWC,EAAcC,GACpF,SAASC,EAAOC,GAAK,QAAU,IAANA,GAA6B,mBAANA,EAAkB,MAAM,IAAIC,UAAU,qBAAsB,OAAOD,CAAI,CAKvH,IAJA,IAGIE,EAHAC,EAAOP,EAAUO,KAAMC,EAAe,WAATD,EAAoB,MAAiB,WAATA,EAAoB,MAAQ,QACrFE,GAAUX,GAAgBD,EAAOG,EAAkB,OAAIH,EAAOA,EAAKa,UAAY,KAC/EC,EAAab,IAAiBW,EAASG,OAAOC,yBAAyBJ,EAAQT,EAAUc,MAAQ,CAAA,GAC9FC,GAAO,EACLC,EAAIjB,EAAWkB,OAAS,EAAGD,GAAK,EAAGA,IAAK,CAC7C,IAAIE,EAAU,CAAA,EACd,IAAK,IAAIC,KAAKnB,EAAWkB,EAAQC,GAAW,WAANA,EAAiB,CAAA,EAAKnB,EAAUmB,GACtE,IAAK,IAAIA,KAAKnB,EAAUoB,OAAQF,EAAQE,OAAOD,GAAKnB,EAAUoB,OAAOD,GACrED,EAAQG,eAAiB,SAAUjB,GAAK,GAAIW,EAAM,MAAM,IAAIV,UAAU,0DAA2DH,EAAkBoB,KAAKnB,EAAOC,GAAK,QACpK,IAAImB,GAAS,EAAIxB,EAAWiB,IAAa,aAATT,EAAsB,CAAEiB,IAAKb,EAAWa,IAAKC,IAAKd,EAAWc,KAAQd,EAAWH,GAAMU,GACtH,GAAa,aAATX,EAAqB,CACrB,QAAe,IAAXgB,EAAmB,SACvB,GAAe,OAAXA,GAAqC,iBAAXA,EAAqB,MAAM,IAAIlB,UAAU,oBACnEC,EAAIH,EAAOoB,EAAOC,QAAMb,EAAWa,IAAMlB,IACzCA,EAAIH,EAAOoB,EAAOE,QAAMd,EAAWc,IAAMnB,IACzCA,EAAIH,EAAOoB,EAAOG,QAAOzB,EAAa0B,QAAQrB,EACrD,MACQA,EAAIH,EAAOoB,MACH,UAAThB,EAAkBN,EAAa0B,QAAQrB,GACtCK,EAAWH,GAAOF,EAE9B,CACGG,GAAQG,OAAOgB,eAAenB,EAAQT,EAAUc,KAAMH,GAC1DI,GAAO,CACT,CAEO,SAASc,EAAkBC,EAAS7B,EAAc8B,GAEvD,IADA,IAAIC,EAAWC,UAAUhB,OAAS,EACzBD,EAAI,EAAGA,EAAIf,EAAagB,OAAQD,IACrCe,EAAQC,EAAW/B,EAAae,GAAGkB,KAAKJ,EAASC,GAAS9B,EAAae,GAAGkB,KAAKJ,GAEnF,OAAOE,EAAWD,OAAQ,CAC5B,CAwNkD,mBAApBI,iBAAiCA,gBC1RlDC,MAAAA,EAEX,WAAAC,CAAYC,EAAiBC,EAAiBC,GAC5CC,KAAKH,QAAUA,EACfG,KAAKF,QAAUA,EACfE,KAAKD,MAAQA,CACd,CAID,WAAAE,CAAYJ,GACV,YAAIA,EACFA,EAAU,MACL,KAAIK,SAASL,GAGlB,MAAM,IAAIM,MAAM,0BAA4BN,GAF5CA,EAAUO,KAAKC,IAAID,KAAKE,IAAI,EAAGT,GAAU,EAG1C,CACD,OAAO,IAAIF,EAAOE,EAASG,KAAKF,QAASE,KAAKD,MAC/C,CAID,WAAAQ,CAAYT,GACV,YAAIA,EACFA,EAAU,MACL,KAAII,SAASJ,GAGlB,MAAM,IAAIK,MAAM,0BAA4BL,GAF5CA,EAAUM,KAAKC,IAAID,KAAKE,IAAI,EAAGR,GAAU,EAG1C,CACD,OAAO,IAAIH,EAAOK,KAAKH,QAASC,EAASE,KAAKD,MAC/C,CAID,SAAAS,CAAUT,GACR,YAAIA,EACFA,EAAQ,MACH,KAAIG,SAASH,GAGlB,MAAM,IAAII,MAAM,wBAA0BJ,GAF1CA,EAAQK,KAAKC,IAAID,KAAKE,IAAI,EAAGP,GAAQ,EAGtC,CACD,OAAO,IAAIJ,EAAOK,KAAKH,QAASG,KAAKF,QAASC,EAC/C,CAED,gBAAIU,GACF,MAAO,CAAC,CAACC,EAAAA,KAAKC,QAAS,GACf,CAACD,EAAAA,KAAKE,SAA2B,IAAjBZ,KAAKH,QAAgBG,KAAKH,gBAC1C,CAACa,OAAKZ,QAA0B,IAAjBE,KAAKF,QAAgBE,KAAKF,aAAe,GACxD,CAACY,EAAAA,KAAKX,MAAsB,IAAfC,KAAKD,MAAcC,KAAKD,WAAa,GAC3D,CAID,aAAAc,CAAcC,GACZ,OAAIA,aAAgBnB,EACXoB,EAAmBf,KAAMc,GAEzB,IAEV,CAED,YAAAE,CAAaF,EAAeG,GAC1B,OAAIjB,OAASc,GAEFA,aAAgBnB,IAClBuB,UAAQC,WAAWnB,KAAKH,QAASiB,EAAKjB,QAASoB,IAC/CC,UAAQC,WAAWnB,KAAKF,QAASgB,EAAKhB,QAASmB,IAC/CC,UAAQC,WAAWnB,KAAKD,MAAOe,EAAKf,MAAOkB,GAGrD,CAED,QAAAG,CAASN,GACP,OAAOA,aAAgBnB,CACxB,CAED,MAAA0B,CAAOP,GACL,OAAId,OAASc,GAEFA,aAAgBnB,IAClBmB,EAAKM,SAASpB,OACdA,KAAKH,UAAYiB,EAAKjB,SACtBG,KAAKF,UAAYgB,EAAKhB,SACtBE,KAAKD,QAAUe,EAAKf,MAG9B,CAED,QAAAuB,GACE,OAAOC,EAAAA,QAAQC,KAAKD,UAAQE,IAAIF,EAAAA,QAAQE,IAAIF,EAAAA,QAAQE,IAAIC,EAAaC,aAAAA,KAAKhC,GACtEuB,EAAAA,QAAQS,KAAK3B,KAAKH,UAAWqB,UAAQS,KAAK3B,KAAKF,UAAWoB,EAAQS,QAAAA,KAAK3B,KAAKD,QACjF,CAED,KAAA6B,CAASC,GACP,MAAMhC,EAAUG,KAAKH,QACfC,EAAUE,KAAKF,QACfC,EAAQC,KAAKD,MA4CnB,OA3CA8B,EAASA,EAAOC,MAAM,UAAUA,MAAM,IACtB,IAAZjC,GACFgC,EAASA,EAAOC,MAAM,WAAWA,MAAM,IACvB,IAAZjC,IACFgC,EAASA,EAAOD,MAAM/B,IAExBgC,EAASA,EAAOC,MAAM,IACN,IAAZhC,IACF+B,EAASA,EAAOC,MAAM,IAAWA,MAAM,eAAeA,MAAM,IAC5C,IAAZhC,IACF+B,EAASA,EAAOD,MAAM9B,IAExB+B,EAASA,EAAOC,MAAM,KAEV,IAAV/B,IACF8B,EAASA,EAAOC,MAAM,IAAWA,MAAM,aAAaA,MAAM,IAC5C,IAAV/B,IACF8B,EAASA,EAAOD,MAAM7B,IAExB8B,EAASA,EAAOC,MAAM,MAEH,IAAZhC,GACT+B,EAASA,EAAOC,MAAM,WAAWA,MAAM,IACvB,IAAZhC,IACF+B,EAASA,EAAOD,MAAM9B,IAExB+B,EAASA,EAAOC,MAAM,IACR,IAAV/B,IACF8B,EAASA,EAAOC,MAAM,IAAWA,MAAM,aAAaA,MAAM,IAC5C,IAAV/B,IACF8B,EAASA,EAAOD,MAAM7B,IAExB8B,EAASA,EAAOC,MAAM,MAEL,IAAV/B,GACT8B,EAASA,EAAOC,MAAM,SAASA,MAAM,IACvB,IAAV/B,IACF8B,EAASA,EAAOD,MAAM7B,IAExB8B,EAASA,EAAOC,MAAM,KAEtBD,EAASA,EAAOC,MAAM,UAAUA,MAAM,IAAWA,MAAM,IAElDD,CACR,CAED,QAAAE,GACE,OAAOC,SAAOJ,MAAM5B,KACrB,CAID,aAAOiC,GACL,IAAIC,EAASvC,EAAOwC,OAKpB,OAJe,OAAXD,IACFA,EAAS,IAAIvC,EAAO,EAAG,EAAG,GAC1BA,EAAOwC,OAASD,GAEXA,CACR,CAID,cAAArC,CAAeA,GACb,IAAIqC,EACJ,QAAIrC,IAAAA,GAAkC,IAAZA,EACxBqC,EAASvC,EAAOyC,QACD,OAAXF,IACFA,EAAS,IAAIvC,EAAO,EAAG,EAAG,GAC1BA,EAAOyC,QAAUF,OAEd,KAAIhC,SAASL,GAIlB,MAAM,IAAIM,MAAM,0BAA4BN,GAH5CA,EAAUO,KAAKC,IAAID,KAAKE,IAAI,EAAGT,GAAU,GACzCqC,EAAS,IAAIvC,EAAOE,EAAS,EAAG,EAGjC,CACD,OAAOqC,CACR,CAID,cAAApC,CAAeA,GACb,IAAIoC,EACJ,QAAIpC,IAAAA,GAAkC,IAAZA,EACxBoC,EAASvC,EAAO0C,QACD,OAAXH,IACFA,EAAS,IAAIvC,EAAO,EAAG,EAAG,GAC1BA,EAAO0C,QAAUH,OAEd,KAAIhC,SAASJ,GAIlB,MAAM,IAAIK,MAAM,0BAA4BL,GAH5CA,EAAUM,KAAKC,IAAID,KAAKE,IAAI,EAAGR,GAAU,GACzCoC,EAAS,IAAIvC,EAAO,EAAGG,EAAS,EAGjC,CACD,OAAOoC,CACR,CAID,YAAAnC,CAAaA,GACX,IAAImC,EACJ,QAAInC,IAAAA,GAA8B,IAAVA,EACtBmC,EAASvC,EAAO2C,MACD,OAAXJ,IACFA,EAAS,IAAIvC,EAAO,EAAG,EAAG,GAC1BA,EAAO2C,MAAQJ,OAEZ,KAAIhC,SAASH,GAIlB,MAAM,IAAII,MAAM,wBAA0BJ,GAH1CA,EAAQK,KAAKC,IAAID,KAAKE,IAAI,EAAGP,GAAQ,GACrCmC,EAAS,IAAIvC,EAAO,EAAG,EAAGI,EAG3B,CACD,OAAOmC,CACR,CAID,kBAAOK,GACL,IAAIC,EAAQ7C,EAAO8C,YAKnB,OAJc,OAAVD,IACFA,EAAQE,WAAS/C,EAAOsC,UACxBtC,EAAO8C,YAAcD,GAEhBA,CACR,CAMD,mBAAAG,CAAoBC,EAAmBC,GACrC,YAAID,EACFA,EAAW,MACN,KAAI1C,SAAS0C,GAGlB,MAAM,IAAIzC,MAAM,0BAA4ByC,GAF5CA,EAAWxC,KAAKC,IAAID,KAAKE,IAAI,EAAGsC,GAAW,EAG5C,CACD,YAAIC,EACFA,EAAW,MACN,KAAI3C,SAAS2C,GAGlB,MAAM,IAAI1C,MAAM,0BAA4B0C,GAF5CA,EAAWzC,KAAKC,IAAID,KAAKE,IAAI,EAAGuC,GAAW,EAG5C,CACD,IAAIL,EAgBJ,OAfiB,IAAbI,GAA+B,IAAbC,GACpBL,EAAQ7C,EAAOmD,iBACD,OAAVN,IACFA,EAAQ7C,EAAOsC,SAASpB,cAAclB,EAAOG,WAC7CH,EAAOmD,iBAAmBN,IAEN,IAAbI,GAA+B,IAAbC,GAC3BL,EAAQ7C,EAAOoD,kBACD,OAAVP,IACFA,EAAQ7C,EAAOG,UAAUe,cAAclB,EAAOsC,UAC9CtC,EAAOoD,kBAAoBP,IAG7BA,EAAQ,IAAI7C,EAAO,EAAGiD,EAAU,GAAG/B,cAAc,IAAIlB,EAAO,EAAGkD,EAAU,IAEpEL,CACR,CAKD,iBAAAQ,CAAkBC,EAAiBC,GACjC,YAAID,EACFA,EAAS,MACJ,KAAI/C,SAAS+C,GAGlB,MAAM,IAAI9C,MAAM,wBAA0B8C,GAF1CA,EAAS7C,KAAKC,IAAID,KAAKE,IAAI,EAAG2C,GAAS,EAGxC,CACD,YAAIC,EACFA,EAAS,MACJ,KAAIhD,SAASgD,GAGlB,MAAM,IAAI/C,MAAM,wBAA0B+C,GAF1CA,EAAS9C,KAAKC,IAAID,KAAKE,IAAI,EAAG4C,GAAS,EAGxC,CACD,IAAIV,EAgBJ,OAfe,IAAXS,GAA2B,IAAXC,GAClBV,EAAQ7C,EAAOwD,eACD,OAAVX,IACFA,EAAQ7C,EAAOG,UAAUe,cAAclB,EAAOI,SAC9CJ,EAAOwD,eAAiBX,IAEN,IAAXS,GAA2B,IAAXC,GACzBV,EAAQ7C,EAAOyD,gBACD,OAAVZ,IACFA,EAAQ7C,EAAOI,QAAQc,cAAclB,EAAOG,WAC5CH,EAAOyD,gBAAkBZ,IAG3BA,EAAQ,IAAI7C,EAAO,EAAG,EAAGsD,GAAQpC,cAAc,IAAIlB,EAAO,EAAG,EAAGuD,IAE3DV,CACR,CAID,iBAAOa,GACL,IAAIb,EAAQ7C,EAAO2D,WAKnB,OAJc,OAAVd,IACFA,EAAQE,WAAS/C,EAAOI,SACxBJ,EAAO2D,WAAad,GAEfA,CACR,CAED,gBAAAe,CAAiBC,EAAoBC,EAA0BC,EAAwBC,EAAwBC,GAC7G,MAAMC,EAAgBC,EAAAA,QAAQC,eAAaP,EAAYC,GAAmBzD,KAAKuC,eACzEyB,EAAiBF,EAAAA,QAAQC,EAAAA,aAAaN,EAAkBC,GAAiB1D,KAAK2C,aAAa,EAAG,IAC9FsB,EAAeH,EAAAA,QAAQC,EAAAA,aAAaL,EAAgBC,GAAiB3D,KAAKgD,WAAW,EAAG,IACxFkB,EAAeJ,EAAAA,QAAQC,eAAaJ,EAAgBC,GAAa5D,KAAKqD,cAC5E,OAAOc,EAAAA,UAAUN,EAAeG,EAAgBC,EAAcC,EAC/D,CAED,gBAAAE,CAAiBZ,EAAoBG,EAAwBD,EAAwBD,EAA0BG,GAC7G,MAAMM,EAAeJ,EAAAA,QAAQC,eAAaP,EAAYG,GAAiB3D,KAAKqD,cACtEY,EAAeH,EAAAA,QAAQC,EAAAA,aAAaJ,EAAgBD,GAAiB1D,KAAKgD,WAAW,EAAG,IACxFgB,EAAiBF,EAAAA,QAAQC,EAAAA,aAAaL,EAAgBD,GAAmBzD,KAAK2C,aAAa,EAAG,IAC9FkB,EAAgBC,EAAAA,QAAQC,eAAaN,EAAkBG,GAAa5D,KAAKuC,eAC/E,OAAO4B,EAAAA,UAAUD,EAAcD,EAAcD,EAAgBH,EAC9D,EAlLMlE,EAAMwC,OAAkB,KAWxBxC,EAAOyC,QAAkB,KAmBzBzC,EAAO0C,QAAkB,KAmBzB1C,EAAK2C,MAAkB,KAmBvB3C,EAAW8C,YAA4B,KAWvC9C,EAAgBmD,iBAAgC,KAEhDnD,EAAiBoD,kBAAgC,KAoCjDpD,EAAcwD,eAAgC,KAC9CxD,EAAeyD,gBAAgC,KAoC/CzD,EAAU2D,WAA4B,KA4BlC,MAAAvC,EAAqB,SAAWsD,GAC3C,MAAMtD,EAAqB,SAAUuD,EAAYC,GAC/C,MAAMC,EAAe,SAAUC,GAC7B,MAAMH,EAAKE,EAAa,GAClBD,EAAKC,EAAa,GAClB3E,EAAUyE,EAAGzE,QAAU4E,GAAKF,EAAG1E,QAAUyE,EAAGzE,SAC5CC,EAAUwE,EAAGxE,QAAU2E,GAAKF,EAAGzE,QAAUwE,EAAGxE,SAC5CC,EAAQuE,EAAGvE,MAAQ0E,GAAKF,EAAGxE,MAAQuE,EAAGvE,OAC5C,OAAO,IAAIJ,EAAOE,EAASC,EAASC,EACtC,EAIA,OAHA5B,OAAOuG,eAAeF,EAAczD,EAAmB9C,WACtDuG,EAA8C,GAAKF,EACnDE,EAA8C,GAAKD,EAC7CC,CACT,EAUA,OAHAzD,EAAmB9C,UAAYE,OAAOwG,OAAON,EAAOpG,WACpD8C,EAAmB9C,UAAU2B,YAAcmB,EAEpCA,CACR,CAzBiC,CAyB/B6D,gBC9VUC,IAAAA,EAAW,wDAAX,OAAAC,EAAA,cAAoBC,0CAItB/E,KAAAgF,IAAwC5F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAkF,OAAA,IAmBxClF,KAAAmF,OAA6D/F,EAAAY,KAAAoF,OAAA,GAY7DpF,KAAAqF,MAA+BjG,EAAAY,KAAAsF,OAAA,GAY/BtF,KAAAuF,KAAuCnG,EAAAY,KAAAwF,OAAA,GASvCxF,KAAAkC,OAAgC9C,EAAAY,KAAAyF,OAAA,EAY1C,CAVC,mBAAAC,GACE,OAAO,IACR,CAEkB,aAAAC,CAAcC,GAC/BC,MAAMF,cAAcC,GACoB,OAApCA,EAAME,SAASC,EAAAA,kBACjBH,EAAMI,YAAYD,kBAAiB,aAEtC,GAhEAE,EAAA,CAAAC,EAAAA,SAAS,CAACC,UAAWC,UAGrBC,EAAA,CAAAC,EAAAA,SAAS,CACR,aAAIC,GACF,OAAOC,CACR,EACD,eAAAC,CAAgBC,EAA0BC,GACxC3G,KAAK4G,MAAMC,cAAc,wBAAyBH,EAAaC,EAAa3G,KAAK4G,MAClF,EACD,SAAAE,CAAUJ,GACR1G,KAAK4G,MAAM1E,OAAO6E,UAAUL,EAAYxE,OACzC,EACD,WAAA8E,CAAYN,GACV1G,KAAK4G,MAAM1E,OAAO+E,YAAYP,EAAYxE,OAC3C,EACD,cAAAgF,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,uBAAwBH,EAAa1G,KAAK4G,MACpE,KAIFO,EAAA,CAAAjB,EAAAA,SAAS,CACRC,UAAWC,OACX9G,MAAO,GACP,WAAA8H,CAAYC,EAAkBC,GAC5BtH,KAAK4G,MAAMC,cAAc,mBAAoBQ,EAAUrH,KAAK4G,MAC7D,EACDW,YAAAA,CAAYF,EAAkBC,IACrBD,IAAaC,KAKvBE,EAAA,CAAAtB,EAAAA,SAAS,CACRC,UAAWsB,EAAAA,SACXnI,MAAO,KACP,WAAA8H,CAAY7B,GACVvF,KAAK4G,MAAMC,cAAc,kBAAmBtB,EAAMvF,KAAK4G,MACxD,EACDW,YAAAA,CAAYG,EAA0BC,IAC7BD,IAAYC,KAKtBC,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOsC,SACd,WAAAmF,CAAYlF,GACVlC,KAAK4G,MAAMC,cAAc,oBAAqB3E,EAAQlC,KAAK4G,MAC5D,KAlDHzJ,EAAS,KAAA,KAAA8I,EAAA,CAAAnI,KAAA,QAAAO,KAAA,KAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,OAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAhD,GAAAhG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAhD,GAAwC1F,CAAAA,IAAA4F,EAAAD,GAmBjD9H,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAA6D7F,CAAAA,IAAA8F,EAAAH,GAYtE9H,EAAS,KAAA,KAAAgK,EAAA,CAAArJ,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA3C,MAAArG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA3C,MAA+B/F,CAAAA,IAAAgG,EAAAL,GAYxC9H,EAAS,KAAA,KAAAqK,EAAA,CAAA1J,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAzC,KAAAvG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAzC,KAAuCjG,CAAAA,IAAAkG,EAAAP,GAShD9H,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,IAxDnB,EAAA,GCgCXuB,EAAW,oGAAX,OAAA1B,EAAA,cAAoBC,0CAYtB/E,KAAAgF,IAAwC5F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAkF,OAAA,IA+BxClF,KAAAiI,KAAsC7I,EAAAY,KAAAkI,OAAA,GAYtClI,KAAAqF,MAA+BjG,EAAAY,KAAAsF,OAAA,GAY/BtF,KAAAuF,KAAuCnG,EAAAY,KAAAwF,OAAA,GASvCxF,KAAAkC,OAAgC9C,EAAAY,KAAAyF,OAAA,GAKhCzF,KAAAmI,OAAqC/I,EAAAY,KAAAoI,OAAA,GAuDrCpI,KAAAqI,QAMPjJ,EAAAY,KAAAsI,OAAA,GA8DOtI,KAAAuI,UAMPnJ,EAAAY,KAAAwI,OAAA,GASOxI,KAAAyI,UAAoCrJ,EAAAY,KAAA0I,OAAA,GASpC1I,KAAA2I,WAAqCvJ,EAAAY,KAAA4I,OAAA,GAcrC5I,KAAA6I,UAAoCzJ,EAAAY,KAAA8I,OAAA,EA4B9C,CAvQC,WAAaC,GACX,OAAO7C,EAAAA,SAAS8C,QACjB,CA2OS,gBAAAC,GAET,CAES,eAAAC,GAET,CAED,YAAAC,CAAaC,GAEZ,CAED,YAAAC,CAAaD,GAEZ,CAED,mBAAAE,GACE,OAAO,IACR,CAEkB,aAAA3D,CAAcC,GAC/BC,MAAMF,cAAcC,GACoB,OAApCA,EAAME,SAASC,EAAAA,kBACjBH,EAAMI,YAAYD,kBAAiB,aAEtC,GA1QAwD,EAAA,CAAArD,EAAAA,SAAS,CACRsD,SAAS,EACTC,UAAU,KAMXxD,EAAA,CAAAC,EAAAA,SAAS,CAACC,UAAWC,UAGrBsD,EAAA,CAAAxD,EAAAA,SAAS,CACRC,UAAWwD,EAAAA,QACXrK,MAAO,KACPmK,UAAU,EACV,cAAIG,GACF,OAAOC,CACR,EACD,WAAAC,CAAYC,GACV,MAAM/E,EAAKhF,KAAK4G,MAAM5B,GAAG1F,MACzB,YAAI0F,EACF,OAAO,KAET,MAAMgF,EAAc,IAAIC,iBAKxB,OAJiB,OAAbF,GACFC,EAAYE,QAAQH,GAEtBC,EAAYG,WAAWnF,GAChBgF,EAAYI,OACpB,EACD,WAAAhD,CAAYiD,EAAyBC,GACnCtK,KAAK4G,MAAMC,cAAc,kBAAmBwD,EAASrK,KAAK4G,MAC3D,EACD,OAAA2D,GACE1E,MAAM0E,UACFvK,KAAKyJ,WAAazJ,KAAKwK,SACzBxK,KAAKyK,SAASd,EAAQe,QAAAA,QAASC,EAAAA,SAASC,UAE3C,KAIFzD,EAAA,CAAAjB,EAAAA,SAAS,CACRC,UAAWC,OACX9G,MAAO,GACP,WAAA8H,CAAYC,EAAkBC,GAC5BtH,KAAK4G,MAAMC,cAAc,mBAAoBQ,EAAUrH,KAAK4G,MAC7D,EACDW,YAAAA,CAAYF,EAAkBC,IACrBD,IAAaC,KAKvBE,EAAA,CAAAtB,EAAAA,SAAS,CACRC,UAAWsB,EAAAA,SACXnI,MAAO,KACP,WAAA8H,CAAY7B,GACVvF,KAAK4G,MAAMC,cAAc,kBAAmBtB,EAAMvF,KAAK4G,MACxD,EACDW,YAAAA,CAAYG,EAA0BC,IAC7BD,IAAYC,KAKtBC,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOsC,SACd,WAAAmF,CAAYlF,GACVlC,KAAK4G,MAAMC,cAAc,oBAAqB3E,EAAQlC,KAAK4G,MAC5D,KAIFiE,EAAA,CAAAvE,EAAAA,SAAS,CACRC,UAAW1B,KAIZiG,EAAA,CAAAC,EAAAA,cAAc,CACbxE,UAAW1B,EACXmG,SAAU,SACVC,UAAWC,EAAAA,MACXC,OAAO,EACPC,UAAU,EACV,IAAAnM,GACEe,KAAKqL,IAAM,EACZ,EACD,eAAA5E,CAAgB6E,QACKhM,IAAfgM,EAAYtG,GAAG1F,QACjBU,KAAKqL,IAAIC,EAAYtG,GAAG1F,OAASgM,GAEnCA,EAAYnG,OAAOoG,YAAYvL,KAAK4G,OACpC5G,KAAK4G,MAAMC,cAAc,wBAAyByE,EAAatL,KAAK4G,OACpC,OAA5B5G,KAAK4G,MAAMuB,OAAOqD,OACpBxL,KAAK4G,MAAMuB,OAAOoD,YAAYD,EAEjC,EACD,cAAApE,CAAeoE,GACTtL,KAAK4G,MAAMuB,OAAOqD,QAAUF,GAC9BtL,KAAK4G,MAAMuB,OAAOsD,cAEpBzL,KAAK4G,MAAMC,cAAc,uBAAwByE,EAAatL,KAAK4G,OACnE0E,EAAYnG,OAAOsG,mBACAnM,IAAfgM,EAAYtG,GAAG1F,cACVU,KAAKqL,IAAIC,EAAYtG,GAAG1F,MAElC,EACD,oBAAAoM,CAAqBC,EAAe/F,GAClC,MAAM0F,EAActL,KAAK4L,iBAAiBhG,GACpCiG,EAAcjG,EAAMkG,YACpBnF,EAA8B,OAAhBkF,EAAuB7L,KAAK4L,iBAAiBC,GAAe,KAC5D,OAAhBP,GACFtL,KAAK4G,MAAMC,cAAc,yBAA0ByE,EAAa3E,EAAa3G,KAAK4G,MAErF,EACD,WAAAmF,CAAY/G,GACV,MAAMwG,EAAQ3F,MAAMkG,cAKpB,gBAJI/G,GACFwG,EAAMxG,GAAGgH,aAAahH,GAExBhF,KAAKiM,YAAYT,GACVA,CACR,EACD,GAAAzM,CAAIiG,GACF,GAAyB,IAArBxF,UAAUhB,OACZ,OAAO,KAET,MAAMgN,EAAQxL,KAAKqL,IAAIrG,GACvB,YAAOwG,IAAAA,EAAmBA,EAAQ,IACnC,KAUFU,EAAA,CAAAnB,EAAAA,cAAc,CACb,aAAIxE,GACF,OAAOsD,CACR,EACDmB,SAAU,SACVC,UAAWC,EAAAA,MACXC,OAAO,EACPC,UAAU,EACVe,eAAe,EACf,IAAAlN,GACEe,KAAKqL,IAAM,EACZ,EACD,eAAA5E,CAAgB2F,QACO9M,IAAjB8M,EAAcpH,GAAG1F,QACnBU,KAAKqL,IAAIe,EAAcpH,GAAG1F,OAAS8M,GAErCpM,KAAK4G,MAAMC,cAAc,0BAA2BuF,EAAepM,KAAK4G,MACzE,EACD,cAAAM,CAAekF,GACbpM,KAAK4G,MAAMC,cAAc,yBAA0BuF,EAAepM,KAAK4G,YAClDtH,IAAjB8M,EAAcpH,GAAG1F,cACZU,KAAKqL,IAAIe,EAAcpH,GAAG1F,MAEpC,EACD,qBAAA+M,CAAsBC,EAAiCF,GACrDpM,KAAK4G,MAAMC,cAAc,+BAAgCyF,EAAoBF,EAAepM,KAAK4G,MAClG,EACD,oBAAA2F,CAAqBD,EAAiCF,GACpDpM,KAAK4G,MAAMC,cAAc,8BAA+ByF,EAAoBF,EAAepM,KAAK4G,MACjG,EACD,iBAAA4F,CAAkBC,EAAiBL,GACjCpM,KAAK4G,MAAMC,cAAc,4BAA6B4F,EAAQL,EAAepM,KAAK4G,MACnF,EACD,oBAAA8F,CAAqBC,EAAoBP,GACvCpM,KAAK4G,MAAMC,cAAc,+BAAgC8F,EAAWP,EAAepM,KAAK4G,MACzF,EACD,oBAAA8E,CAAqBC,EAAe/F,GAClC,MAAMwG,EAAgBpM,KAAK4L,iBAAiBhG,GACtCiG,EAAcjG,EAAMkG,YACpBnF,EAA8B,OAAhBkF,EAAuB7L,KAAK4L,iBAAiBC,GAAe,KAC1D,OAAlBO,GACFpM,KAAK4G,MAAMC,cAAc,2BAA4BuF,EAAezF,EAAa3G,KAAK4G,MAEzF,EACD,WAAAmF,CAAY/G,GACV,MAAMwG,EAAQ3F,MAAMkG,cAKpB,gBAJI/G,GACFwG,EAAMxG,GAAGgH,aAAahH,GAExBhF,KAAKiM,YAAYT,GACVA,CACR,EACD,GAAAzM,CAAIiG,GACF,GAAyB,IAArBxF,UAAUhB,OACZ,OAAO,KAET,MAAMgN,EAAQxL,KAAKqL,IAAIrG,GACvB,YAAOwG,IAAAA,EAAmBA,EAAQ,IACnC,KAUFoB,EAAA,CAAA1G,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYqB,GACVzI,KAAK4G,MAAMC,cAAc,uBAAwB4B,EAAWzI,KAAK4G,MAClE,KAIFkG,EAAA,CAAA5G,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYuB,GACV3I,KAAK4G,MAAMC,cAAc,wBAAyB8B,EAAY3I,KAAK4G,MACpE,KAIFmG,EAAA,CAAA7G,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYyB,GACNA,EACF7I,KAAK4G,MAAMqC,mBAEXjJ,KAAK4G,MAAMsC,kBAEblJ,KAAK4G,MAAMC,cAAc,uBAAwBgC,EAAW7I,KAAK4G,MAClE,KAzOHzJ,EAAA2H,EAAA,KAAAyE,EAAA,CAAAzL,KAAA,SAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAae,UAEZ,KAAA9D,GAGD9H,EAAS,KAAA,KAAA8I,EAAA,CAAAnI,KAAA,QAAAO,KAAA,KAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,OAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAhD,GAAAhG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAhD,GAAwC1F,CAAAA,IAAA4F,EAAAD,GA+BjD9H,EAAS,KAAA,KAAAuM,EAAA,CAAA5L,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAC,KAAAjJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAC,KAAsC3I,CAAAA,IAAA4I,EAAAjD,GAY/C9H,EAAS,KAAA,KAAAgK,EAAA,CAAArJ,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA3C,MAAArG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA3C,MAA+B/F,CAAAA,IAAAgG,EAAAL,GAYxC9H,EAAS,KAAA,KAAAqK,EAAA,CAAA1J,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAzC,KAAAvG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAzC,KAAuCjG,CAAAA,IAAAkG,EAAAP,GAShD9H,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,GAKzC9H,EAAS,KAAA,KAAA0N,EAAA,CAAA/M,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAG,OAAAnJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAG,OAAqC7I,CAAAA,IAAA8I,EAAAnD,GAuD9C9H,EAAS,KAAA,KAAA2N,EAAA,CAAAhN,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAK,QAAArJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAK,QAMP/I,CAAAA,IAAAgJ,EAAArD,GA8DF9H,EAAS,KAAA,KAAA+O,EAAA,CAAApO,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAO,UAAAvJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAO,UAMPjJ,CAAAA,IAAAkJ,EAAAvD,GASF9H,EAAS,KAAA,KAAAyP,EAAA,CAAA9O,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAS,UAAAzJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAS,UAAoCnJ,CAAAA,IAAAoJ,EAAAzD,GAS7C9H,EAAS,KAAA,KAAA2P,EAAA,CAAAhP,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAW,WAAA3J,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAW,WAAqCrJ,CAAAA,IAAAsJ,EAAA3D,GAc9C9H,EAAS,KAAA,KAAA4P,EAAA,CAAAjP,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAa,UAAA7J,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAa,UAAoCvJ,CAAAA,IAAAwJ,EAAA7D,IAlPvB,EAAA,GC3BX4E,EAAa,sEAAb,OAAA/E,EAAA,cAA2DC,0CAI7D/E,KAAAgF,IAAwC5F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAkF,OAAA,IAuBxClF,KAAAiI,KAAsC7I,EAAAY,KAAAkI,OAAA,GAYtClI,KAAAqF,MAA+BjG,EAAAY,KAAAsF,OAAA,GAS/BtF,KAAAkC,OAAgC9C,EAAAY,KAAAyF,OAAA,GAShCzF,KAAAyM,OAAiCrN,EAAAY,KAAAgN,OAAA,GASjChN,KAAA2M,UAAoCvN,EAAAY,KAAAiN,OAAA,GAuDpCjN,KAAAkN,SAOP9N,EAAAY,KAAAmN,OAAA,EACH,GA9HElH,EAAA,CAAAC,EAAAA,SAAS,CAACC,UAAWC,UAGrBsD,EAAA,CAAAxD,EAAAA,SAAS,CACRC,UAAWwD,EAAAA,QACXrK,MAAO,KACPmK,UAAU,EACVG,WAAYpD,EACZ,WAAAsD,CAAYC,GACV,MAAM/E,EAAKhF,KAAK4G,MAAM5B,GAAG1F,MACzB,YAAI0F,EACF,OAAO,KAET,MAAMgF,EAAc,IAAIC,iBAKxB,OAJiB,OAAbF,GACFC,EAAYE,QAAQH,GAEtBC,EAAYG,WAAWnF,GAChBgF,EAAYI,OACpB,EACD,WAAAhD,CAAYiD,EAAyBC,GACnCtK,KAAK4G,MAAMC,cAAc,kBAAmBwD,EAASrK,KAAK4G,MAC3D,KAIFO,EAAA,CAAAjB,EAAAA,SAAS,CACRC,UAAWC,OACX9G,MAAO,GACP,WAAA8H,CAAYC,EAAkBC,GAC5BtH,KAAK4G,MAAMC,cAAc,mBAAoBQ,EAAUrH,KAAK4G,MAC7D,EACDW,YAAAA,CAAYF,EAAkBC,IACrBD,IAAaC,KAKvBM,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOsC,SACd,WAAAmF,CAAYlF,GACVlC,KAAK4G,MAAMC,cAAc,oBAAqB3E,EAAQlC,KAAK4G,MAC5D,KAIFwG,EAAA,CAAAlH,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYqF,GACVzM,KAAK4G,MAAMC,cAAc,oBAAqB4F,EAAQzM,KAAK4G,MAC5D,KAIFyG,EAAA,CAAAnH,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYuF,GACV3M,KAAK4G,MAAMC,cAAc,uBAAwB8F,EAAW3M,KAAK4G,MAClE,KAIF0G,EAAA,CAAAvC,EAAAA,cAAc,CACbxE,UAAWC,EACXwE,SAAU,SACVC,UAAWC,EAAAA,MACXC,OAAO,EACPC,UAAU,EACV,IAAAnM,GACEe,KAAKqL,IAAM,EACZ,EACD,eAAA5E,CAAgBC,QACKpH,IAAfoH,EAAY1B,GAAG1F,QACjBU,KAAKqL,IAAI3E,EAAY1B,GAAG1F,OAASoH,GAEnC1G,KAAK4G,MAAMC,cAAc,wBAAyBH,EAAa1G,KAAK4G,MACrE,EACD,cAAAM,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,uBAAwBH,EAAa1G,KAAK4G,YAChDtH,IAAfoH,EAAY1B,GAAG1F,cACVU,KAAKqL,IAAI3E,EAAY1B,GAAG1F,MAElC,EACD,oBAAAoM,CAAqBC,EAAe/F,GAClC,MAAMc,EAAc1G,KAAK4L,iBAAiBhG,GACpCiG,EAAcjG,EAAMkG,YACpBnF,EAA8B,OAAhBkF,EAAuB7L,KAAK4L,iBAAiBC,GAAe,KAC5D,OAAhBnF,GACF1G,KAAK4G,MAAMC,cAAc,yBAA0BH,EAAaC,EAAa3G,KAAK4G,MAErF,EACD,WAAAmF,CAAY/G,GACV,MAAMwG,EAAQ3F,MAAMkG,cAKpB,gBAJI/G,GACFwG,EAAMxG,GAAGgH,aAAahH,GAExBhF,KAAKiM,YAAYT,GACVA,CACR,EACD,GAAAzM,CAAIiG,GACF,GAAyB,IAArBxF,UAAUhB,OACZ,OAAO,KAET,MAAMgN,EAAQxL,KAAKqL,IAAIrG,GACvB,YAAOwG,IAAAA,EAAmBA,EAAQ,IACnC,EACD,WAAA+B,CAAYvI,GACV,IAAIwG,EAAQxL,KAAKjB,IAAIiG,GAKrB,OAJc,OAAVwG,IACFA,EAAQxL,KAAK+L,YAAY/G,GACzBhF,KAAKwN,SAAShC,IAETA,CACR,KAnHHrO,EAAS,KAAA,KAAA8I,EAAA,CAAAnI,KAAA,QAAAO,KAAA,KAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,OAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAhD,GAAAhG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAhD,GAAwC1F,CAAAA,IAAA4F,EAAAD,GAuBjD9H,EAAS,KAAA,KAAAuM,EAAA,CAAA5L,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAC,KAAAjJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAC,KAAsC3I,CAAAA,IAAA4I,EAAAjD,GAY/C9H,EAAS,KAAA,KAAAgK,EAAA,CAAArJ,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA3C,MAAArG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA3C,MAA+B/F,CAAAA,IAAAgG,EAAAL,GASxC9H,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,GASzC9H,EAAS,KAAA,KAAAiQ,EAAA,CAAAtP,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyE,OAAAzN,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyE,OAAiCnN,CAAAA,IAAA0N,EAAA/H,GAS1C9H,EAAS,KAAA,KAAAkQ,EAAA,CAAAvP,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2E,UAAA3N,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2E,UAAoCrN,CAAAA,IAAA2N,EAAAhI,GAuD7C9H,EAAS,KAAA,KAAAmQ,EAAA,CAAAxP,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAkF,SAAAlO,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAkF,SAOP5N,CAAAA,IAAA6N,EAAAlI,IAhIsB,EAAA,GCjBbwI,EAAe,mCAAf,OAAA3I,EAAA,cAAwB4I,4CAU1B1N,KAAA2N,UAAoCvO,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAA4N,OAAA,IASpC5N,KAAA6N,UAA4CzO,EAAAY,KAAA8N,OAAA,EACtD,GAjBEC,EAAA,CAAA7H,EAAAA,SAAS,CACRC,UAAW6H,EAAAA,SACX1O,MAAO0O,EAASC,SAAAA,QAChB,WAAA7G,CAAYuG,GACV3N,KAAK4G,MAAMC,cAAc,wBAAyB8G,EAAU3N,KAAK4G,MAClE,KAIFsH,EAAA,CAAAhI,EAAAA,SAAS,CACRC,UAAWgI,EAAAA,SACX7O,MAAO,KACP,WAAA8H,CAAYyG,GACV7N,KAAK4G,MAAMC,cAAc,yBAA0BgH,EAAW7N,KAAK4G,MACpE,KAPHzJ,EAAS,KAAA,KAAA4Q,EAAA,CAAAjQ,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2F,SAAA3O,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2F,SAAoCrO,CAAAA,IAAAsO,EAAA3I,GAS7C9H,EAAS,KAAA,KAAA+Q,EAAA,CAAApQ,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6F,UAAA7O,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6F,UAA4CvO,CAAAA,IAAAwO,EAAA7I,IAnB3B,EAAA,GCNtB,MAAOmJ,UAAwBC,EAAAA,YCA/B,MAAOC,UAA0BD,EAAAA,YC6B1BE,IAAAA,EAAmB,+DAAnB,OAAAzJ,EAAA,cAA4B0J,kDAU9BxO,KAAAkC,QAAgC9C,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAyF,OAAA,IAqDhCzF,KAAAmI,OAA6D/I,EAAAY,KAAAoI,OAAA,GAwB7DpI,KAAAyO,WAAyErP,EAAAY,KAAA0O,OAAA,GA4ChE1O,KAAA2O,KAEhBvP,EAAAY,KAAA4O,OAAA,GAqBO5O,KAAA6O,SAAuCzP,EAAAY,KAAA8O,OAAA,GAevC9O,KAAA+O,UAAwC3P,EAAAY,KAAAgP,OAAA,EAClD,GAvKEpH,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOE,UACd,WAAAuH,CAAYlF,GACVlC,KAAK4G,MAAM+H,KAAKM,aAAa/M,EAC9B,KAIF2I,EAAA,CAAAvE,EAAAA,SAAS,CACRC,UAAW1B,EACXqK,UAAU,EACV9D,UAAU,EACV,SAAAtE,CAAUwE,GACRtL,KAAK4G,MAAM1E,OAAO8J,aAAaV,EAAYpJ,OAAO5C,MACnD,EACD,eAAAmH,CAAgB6E,GACdtL,KAAK4G,MAAMC,cAAc,kCAAmCyE,EAAatL,KAAK4G,MAC/E,EACD,cAAAuI,CAAe7D,GACbtL,KAAK4G,MAAM6H,WAAWW,SAAS9D,EAAYxF,SAASC,EAAAA,kBACpD,MACMsJ,EADUrP,KAAK4G,MAAM0I,IAAIC,aACNZ,KAAKa,aAC9BxP,KAAK4G,MAAMiI,SAASW,WAAWH,GAAUrD,aAAa,CACpDyD,SAAUnE,EAAY/F,KAAKjG,QAE7BU,KAAK4G,MAAMmI,UAAUS,WAAWH,GAAUrD,aAAa,CACrD0D,QAASpE,EAAYjG,MAAM/F,OAE9B,EACD,WAAA0H,CAAYsE,GACVtL,KAAK4G,MAAM1E,OAAO8J,aAAarM,EAAOE,UACvC,EACD,eAAA8P,CAAgBrE,GACdtL,KAAK4G,MAAM6H,WAAWW,SAAS,KAChC,EACD,cAAAlI,CAAeoE,GACbtL,KAAK4G,MAAMC,cAAc,iCAAkCyE,EAAatL,KAAK4G,MAC9E,EACD,mBAAAgJ,CAAoBC,EAAoBlJ,GAClCkJ,aAAuB9J,EAAAA,iBACzB/F,KAAK4G,MAAM6H,WAAWW,SAASS,EAElC,EACD,gBAAAC,CAAiBzK,GACf,MAAM0K,EAAgB/P,KAAK4G,MAAMmI,UAAUiB,KACrB,OAAlBD,GACFA,EAAcL,QAAQ1D,aAAa3G,EAEtC,EACD,eAAA4K,CAAgB1K,GACd,MAAM2K,EAAelQ,KAAK4G,MAAMiI,SAASmB,KACpB,OAAjBE,GACFA,EAAaT,SAASzD,aAAazG,EAEtC,EACD,iBAAA4K,CAAkBjO,GAChBlC,KAAK4G,MAAM1E,OAAO8J,aAAa9J,EAChC,KAIFkO,EAAA,CAAA9J,EAAAA,SAAS,CACRC,UAAWR,EAAAA,gBACXqF,UAAU,EACV,SAAAtE,CAAUuJ,GACR,MAAMhB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUtE,aAAaqE,EAAgBE,SAEnD,EACD,cAAAC,CAAeC,GACb,MAAMpB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUI,OAEtB,EACD,iBAAAC,GACE,MAAMtB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUM,SAEtB,KAIFC,EAAA,CAAAC,EAAAA,aAAa,CACZtH,SAAS,EACT,QAAAuH,CAAS1B,GACPxJ,MAAMkL,SAAS1B,GACfrP,KAAKiP,aAAajP,KAAK4G,MAAM1E,OAAO5C,OAEpC+P,EAAS2B,MAAMC,OAAOjF,aAAa,WACnChM,KAAK4G,MAAMiI,SAASW,WAAWH,GAC/BrP,KAAK4G,MAAMmI,UAAUS,WAAWH,GAEhC,MAAMgB,EAAkBrQ,KAAK4G,MAAM6H,WAAWjD,MACtB,OAApB6E,GACFhB,EAASiB,UAAUtE,aAAaqE,EAAgBE,SAEnD,EACD,aAAAW,CAAc7B,EAAoB8B,GAChCtL,MAAMqL,cAAc7B,EAAU8B,GAC1B9B,EAAS+B,UAAY/B,EAASgC,QAChCrR,KAAK4G,MAAM0K,QAAQjC,EAEtB,EACD,YAAAkC,CAAalC,GACNA,EAASgC,QACZrR,KAAK4G,MAAM0K,QAAQjC,EAEtB,EACD,eAAAmC,CAAgBnC,GACdrP,KAAK4G,MAAM6K,UAAUpC,EACtB,EACD,WAAAqC,CAAYrC,GACVrP,KAAK4G,MAAM6K,UAAUpC,EACtB,EACD,cAAAsC,CAAetC,GACbrP,KAAK4G,MAAM0K,QAAQjC,EACpB,EACD,YAAAJ,CAAa/M,GACX,MAAMmN,EAAWrP,KAAKgQ,KACL,OAAbX,GACFA,EAASuC,WAAWlR,EAAKmR,KAAAA,QAAS3P,EAAOzB,aAE5C,KAMFqR,EAAA,CAAAC,EAAAA,QAAQ,CACPC,SAAUC,EAAAA,aACVC,QAAS,OACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKY,YACxB,EACD,cAAA6C,CAAelC,GACblQ,KAAK4G,MAAMC,cAAc,mCAAoCqJ,EAAclQ,KAAK4G,MACjF,EACD,aAAAyL,CAAcnC,GACZlQ,KAAK4G,MAAMC,cAAc,kCAAmCqJ,EAAclQ,KAAK4G,MAChF,EACD,UAAA0L,GACE,OAAQzM,MAAMyM,aAA8BtG,aAAa,CACvDuG,WAAY,CAACC,MAAO,GAAIC,OAAQ,IAChCC,UAAWC,EAAKC,KAAAA,aAEnB,KAIFC,EAAA,CAAAd,EAAAA,QAAQ,CACPC,SAAUc,EAAAA,aACVZ,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKY,YACxB,EACD,cAAA6C,CAAerC,GACb/P,KAAK4G,MAAMC,cAAc,oCAAqCkJ,EAAe/P,KAAK4G,MACnF,EACD,aAAAyL,CAActC,GACZ/P,KAAK4G,MAAMC,cAAc,mCAAoCkJ,EAAe/P,KAAK4G,MAClF,KA7JHzJ,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,GAqDzC9H,EAAS,KAAA,KAAA0N,EAAA,CAAA/M,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAG,OAAAnJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAG,OAA6D7I,CAAAA,IAAA8I,EAAAnD,GAwBtE9H,EAAS,KAAA,KAAAiT,EAAA,CAAAtS,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyG,WAAAzP,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyG,WAAyEnP,CAAAA,IAAAoP,EAAAzJ,GA4ClF9H,EAAkB,KAAA,KAAA0T,EAAA,CAAA/S,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2G,KAAA3P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2G,KAEhBrP,CAAAA,IAAAsP,EAAA3J,GAqBF9H,EAAS,KAAA,KAAA2U,EAAA,CAAAhU,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6G,SAAA7P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6G,SAAuCvP,CAAAA,IAAAwP,EAAA7J,GAehD9H,EAAS,KAAA,KAAA0V,EAAA,CAAA/U,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+G,UAAA/P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+G,UAAwCzP,CAAAA,IAAA0P,EAAA/J,IAzKnB,EAAA,GCFnB8N,EAAsB,6EAAtB,OAAAjO,EAAA,cAA+BkO,qDAgBxBhT,KAAAiT,OAAyE7T,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAkT,OAAA,IAoElFlT,KAAAmF,OAGP/F,EAAAY,KAAAoF,OAAA,GAmBOpF,KAAAmI,OAA6D/I,EAAAY,KAAAoI,OAAA,GAmCpDpI,KAAAmT,OAA4E/T,EAAAY,KAAAoT,OAAA,GAoC5EpT,KAAAqT,OAAkGjU,EAAAY,KAAAsT,OAAA,GAyClGtT,KAAAuT,KAAkGnU,EAAAY,KAAAwT,OAAA,GAelGxT,KAAAyT,OAAsGrU,EAAAY,KAAA0T,OAAA,GAoC/G1T,KAAA2T,QAEPvU,EAAAY,KAAA4T,OAAA,EAQH,CAxIoB,iBAAAC,CAAkBC,EAA6BC,EAAqBC,GACrFnO,MAAMgO,kBAAkBC,EAAOC,EAAOC,GACtC,MAAMC,EAAWD,EAAcf,MAAMzH,MACrC,IAAI0I,EACED,aAAoBpP,aAAiBqP,EAAWD,EAASjP,GAAG1F,QAGlEU,KAAK2T,QAAQQ,aAAaC,YAAY,CACpCC,WAAY,CACVlM,OAAQ+L,GAEVI,YAAa,CACXnM,OAAQ+L,IAGb,CA6ES,qBAAAK,GACR,MAAMC,EAAexU,KAAK2T,QAAQQ,aAAaK,aAC/C,IAAIN,EAAWM,EAAaH,WAAWlM,OAIvC,QAHsB,IAAlB+L,GAA2C,IAApBA,EAAS1V,SAClC0V,EAAWM,EAAaF,YAAYnM,aAEhB,IAAlB+L,GAA2C,IAApBA,EAAS1V,OAAc,CAChD,MAAMkI,EAAc1G,KAAKmF,OAAOqG,MAC1BF,EAA8B,OAAhB5E,EAAuBA,EAAYyB,OAAOqD,MAAQ,KACtE0I,EAA2B,OAAhB5I,EAAuBA,EAAYtG,GAAG1F,WAAa,CAC/D,CACD,QAAsB,IAAlB4U,GAA2C,IAApBA,EAAS1V,OAClC,OAEF,MAAMwV,EAAgBhU,KAAKyU,SAASP,EAAUQ,EAAAA,iBACxB,OAAlBV,GAGJhU,KAAKyT,OAAOkB,cAAcX,EAC3B,CAmBkB,SAAAY,GACjB/O,MAAM+O,YACN5U,KAAKuU,uBACN,GAjRAM,EAAA,CAAA/D,EAAAA,aAAa,CACZtH,SAAS,EACT,cAAA2F,CAAe2F,GACTA,aAAsBtO,GACxBxG,KAAK4G,MAAMzB,OAAOiK,SAAS0F,EAE9B,EACD,eAAAnF,CAAgBmF,GACV9U,KAAK4G,MAAMzB,OAAOqG,QAAUsJ,GAC9B9U,KAAK4G,MAAMzB,OAAOiK,SAAS,KAE9B,KAIF/I,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACX,eAAAC,CAAgBC,GACd1G,KAAK4G,MAAMC,cAAc,kCAAmCH,EAAa1G,KAAK4G,MAC/E,EACD,cAAAuI,CAAezI,GACb1G,KAAK4G,MAAM2M,KAAKwB,KAAKrO,EAAY2B,QAAQ2M,QAGzC,MAAMC,EAAevO,EAAY2B,QAAQ6M,OACnCC,EAAoB,CAAA,EAC1B,IAAK,MAAMC,KAAWH,EAAc,CAClC,MAAM3J,EAAc2J,EAAaG,GAC3BlB,EAAW5I,EAAYtG,GAAG1F,MAChC,YAAI4U,EACF,SAEF,MAAMF,EAAgBhU,KAAK4G,MAAM2M,KAAK8B,iBAAiB/J,GACvD0I,EAAcf,MAAM7D,SAAS9D,GACzB0I,IAAkBhU,KAAK4G,MAAM6N,SAASP,IACxClU,KAAK4G,MAAM0O,OAAOpB,EAAUF,GAE9BmB,EAAkBjB,GAAYF,CAC/B,CAGD,MAAMuB,EAAiBvV,KAAK4G,MAAM2M,KAAKiC,YACvC,IAAK,MAAMC,KAAgBF,EAAgB,CACzC,MAAMvB,EAAgBuB,EAAeE,GAC/BxB,EAAWD,EAAcf,MAAMzH,MACrC,IAAI0I,EACAD,aAAoBpP,QAAuD,KAAvCqP,EAAWD,EAASjP,GAAG1F,UAAuB4U,KAAYiB,IAChGnV,KAAK4G,MAAM2M,KAAKmC,iBAAiB1B,EAEpC,CAED,MAAM2B,EAAa3V,KAAK4G,MAAMuM,OAAOnD,KAClB,OAAf2F,GAAuBA,EAAWvE,SACpCpR,KAAK4V,YAAYD,EAAYjP,EAEhC,EACD,eAAAiJ,CAAgBjJ,GACd,MAAMiP,EAAa3V,KAAK4G,MAAMuM,OAAOnD,KAClB,OAAf2F,GAAuBA,EAAWvE,SACpCpR,KAAK6V,cAAcF,EAAYjP,EAElC,EACD,cAAAQ,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,iCAAkCH,EAAa1G,KAAK4G,MAC9E,EACD,qBAAAkP,CAAsBxK,GACpBtL,KAAK4G,MAAM2M,KAAKwC,iBAAAA,EAAoBzK,EACrC,EACD,oBAAA0K,CAAqB1K,GACnBtL,KAAK4G,MAAM2M,KAAK0C,YAAY3K,EAC7B,EACD,sBAAA4K,CAAuB5K,EAA0B3E,GAC/C3G,KAAK4G,MAAM2M,KAAK4C,cAAc7K,EAAa3E,EAC5C,EACD,WAAAiP,CAAYD,EAAwBjP,GAClCA,EAAY4K,QAAQtR,KAAK4G,MAC1B,EACD,aAAAiP,CAAcF,EAAwBjP,GACpCA,EAAY+K,UAAUzR,KAAK4G,MAC5B,KAOFiE,EAAA,CAAAvE,EAAAA,SAAS,CACRC,UAAW1B,EACXuG,UAAU,EACV,SAAAtE,CAAUwE,GACRtL,KAAK4G,MAAMvB,MAAMrG,IAAIsM,EAAYjG,MAAM/F,MACxC,EACD,WAAA0H,CAAYsE,GACVtL,KAAK4G,MAAMvB,MAAMrG,SAAS,EAC3B,EACD,gBAAA8Q,CAAiBzK,GACf,MACM+Q,EADkBpW,KAAK4G,MAAMvB,MAAMgR,mBACPC,KAAK/G,aACnC6G,aAAqBG,EAAAA,eACvBH,EAAU1G,QAAQ1Q,IAAIqG,EAEzB,KAIFmR,EAAA,CAAA1F,EAAAA,aAAa,CACZtH,SAAS,EACTiN,cAAc,EACd,QAAA1F,CAAS4E,GACP9P,MAAMkL,SAAS4E,EAChB,EACD,aAAAzE,CAAcyE,EAAwBxE,GACpC,MAAMzK,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClCmK,EAAWvE,SAA2B,OAAhB1K,GACxB1G,KAAK4G,MAAMzB,OAAOyQ,YAAYD,EAAYjP,GAE5Cb,MAAMqL,cAAcyE,EAAYxE,EACjC,EACD,cAAAuF,CAAef,GACb9P,MAAM6Q,eAAef,GACrB,MAAMjP,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClCmK,EAAWvE,SAA2B,OAAhB1K,GACxB1G,KAAK4G,MAAMzB,OAAO0Q,cAAcF,EAAYjP,EAE/C,EACD,YAAA6K,CAAaoE,GACX,MAAMjP,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAOyQ,YAAYD,EAAYjP,EAE7C,EACD,eAAA8K,CAAgBmE,GACd,MAAMjP,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAO0Q,cAAcF,EAAYjP,EAE/C,KAqBFiQ,EAAA,CAAAC,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,cAAAqN,CAAeC,GACbjR,MAAMgR,eAAeC,EACtB,EACD,gBAAAC,CAAiBC,EAAqBF,GACpCjR,MAAMkR,iBAAiBC,EAAYF,GACnCE,EAAWhL,aAAa,CACtBgF,MAAO,CACLiG,gBAAiBtE,EAAKsE,KAAAA,gBACtBC,eAAgB,aAElBC,UAAW,KAEbH,EAAWpF,WAAWlR,EAAAA,KAAKmR,QAAS,CAAC,CAACnR,EAAAA,KAAK0W,YAAa,GAAI,CAAC1W,EAAAA,KAAK2W,YAAa,IAChF,KAIFC,EAAA,CAAAC,EAAAA,uBAAuB,CACtB/N,SAAS,EACT,aAAAgO,CAAcxD,GACZ,MAAMC,EAAWD,EAAcf,MAAMzH,MACrC,GAAIyI,aAAoBpP,EACtB,OAAOoP,EAASjP,GAAG1F,KAGtB,EACD,cAAAuX,CAAe7C,GACbnO,MAAMgR,eAAe7C,GACrB,MACMyD,EADmBzD,EAAc0D,OAAOrB,mBACVC,KAAK/G,aACzC,GAAkC,OAA9BkI,EAAWhI,SAASnQ,MAAgB,CACtC,MAAM2U,EAAWD,EAAcf,MAAMzH,MACjCyI,aAAoBpP,GACtB4S,EAAWhI,SAASzD,aAAaiI,EAAS1O,KAAKjG,MAElD,CACF,EACD,gBAAA+V,CAAiB7J,GACf,GAAIA,aAAiB3G,EAAa,CAChC,MAAMmP,EAAgBxI,EAAM9F,sBAC5B,GAAsB,OAAlBsO,EACF,OAAOA,CAEV,CACD,OAAOnO,MAAMwP,iBAAiB7J,EAC/B,EACD,OAAAmM,CAAQC,EAAoBC,GAC1B,MAAMnR,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAChCsM,EAASF,EAAE3E,MAAMzH,MACjBuM,EAASF,EAAE5E,MAAMzH,MACvB,OAAoB,OAAhB9E,GAAwBoR,aAAkBjT,GAAekT,aAAkBlT,EACtE6B,EAAY2B,QAAQ2P,cAAcF,EAAQC,GAE5C,CACR,KAIFE,EAAA,CAAArB,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,iBAAA0O,CAAkBC,EAAoBC,GACpCvS,MAAMqS,kBAAkBC,EAAaC,GACjCD,aAAuBtT,GACzB7E,KAAK4G,MAAMuB,OAAOiH,SAAS+I,EAE9B,EACD,iBAAAE,CAAkBF,EAAoBC,GACpCpY,KAAK4G,MAAMuB,OAAOiH,SAAS,MAC3BvJ,MAAMwS,kBAAkBF,EAAaC,EACtC,KAyBFE,EAAA,CAAAC,EAAAA,SAAS,CACRC,YAAaC,EAAAA,eACbrN,UAAU,EACV,aAAAsN,CAAcC,EAA+BC,GAC3C5Y,KAAK4G,MAAMiS,cAAcxK,EAAWyK,WAAAA,aACrC,EACD,qBAAAC,CAAsBJ,EAA+BC,GACnD5Y,KAAK0Y,cAAcC,EAAiBC,EACrC,EACD,oBAAAI,CAAqBL,EAA+BC,GAClD5Y,KAAK0Y,cAAcC,EAAiBC,EACrC,KA3PHzb,EAAkB,KAAA,KAAA0X,EAAA,CAAA/W,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiL,MAAAjU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiL,MAAyE3T,CAAAA,IAAA4T,EAAAjO,GAoE3F9H,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAGP7F,CAAAA,IAAA8F,EAAAH,GAmBF9H,EAAS,KAAA,KAAA0N,EAAA,CAAA/M,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAG,OAAAnJ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAG,OAA6D7I,CAAAA,IAAA8I,EAAAnD,GAmCtE9H,EAAkB,KAAA,KAAAqZ,EAAA,CAAA1Y,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmL,OAAAnU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmL,OAA4E7T,CAAAA,IAAA8T,EAAAnO,GAoC9F9H,EAAkB,KAAA,KAAAwZ,EAAA,CAAA7Y,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqL,OAAArU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqL,OAAkG/T,CAAAA,IAAAgU,EAAArO,GAyCpH9H,EAAkB,KAAA,KAAAma,EAAA,CAAAxZ,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAuL,KAAAvU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAuL,KAAkGjU,CAAAA,IAAAkU,EAAAvO,GAepH9H,EAAkB,KAAA,KAAA8a,EAAA,CAAAna,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyL,OAAAzU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyL,OAAsGnU,CAAAA,IAAAoU,EAAAzO,GAoCxH9H,EAAS,KAAA,KAAAmb,EAAA,CAAAxa,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2L,QAAA3U,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2L,QAEPrU,CAAAA,IAAAsU,EAAA3O,GAOcH,EAAAmU,WAA8BjG,EAAAA,iBAAiBiG,WAAa5K,EAAWyK,WAAAA,aAAAA,CAtRtD,EAAA,GCWtBI,EAAmB,6EAAnB,OAAApU,EAAA,cAA4B0J,kDAU9BxO,KAAAkC,QAAgC9C,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAyF,OAAA,IAiEhCzF,KAAAmF,OAA6D/F,EAAAY,KAAAoF,OAAA,GAwB7DpF,KAAAyO,WAAyErP,EAAAY,KAAA0O,OAAA,GAgDhE1O,KAAA2O,KAEhBvP,EAAAY,KAAA4O,OAAA,GAqBO5O,KAAA6O,SAAuCzP,EAAAY,KAAA8O,OAAA,GAevC9O,KAAA+O,UAAwC3P,EAAAY,KAAAgP,OAAA,GA6BxChP,KAAAmZ,SAGP/Z,EAAAY,KAAAoZ,OAAA,EAOH,CAHC,mBAAWC,GACT,OAAOC,EAAAA,WAAW3U,OAAO,GAAI,GAAI,+QAClC,GA5NAiD,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOE,UACd,WAAAuH,CAAYlF,GACVlC,KAAK4G,MAAM+H,KAAKM,aAAa/M,EAC9B,KAIFmE,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACX0I,UAAU,EACV9D,UAAU,EACV,SAAAtE,CAAUJ,GACR1G,KAAK4G,MAAM1E,OAAO8J,aAAatF,EAAYxE,OAAO5C,MACnD,EACD,eAAAmH,CAAgBC,GACd1G,KAAK4G,MAAMC,cAAc,kCAAmCH,EAAa1G,KAAK4G,MAC/E,EACD,cAAAuI,CAAezI,GACb1G,KAAK4G,MAAM6H,WAAWW,SAAS1I,EAAYZ,SAASC,EAAAA,kBACpD,MACMsJ,EADUrP,KAAK4G,MAAM0I,IAAIC,aACNZ,KAAKa,aAC9BxP,KAAK4G,MAAMiI,SAASW,WAAWH,GAAUrD,aAAa,CACpDyD,SAAU/I,EAAYnB,KAAKjG,QAE7BU,KAAK4G,MAAMmI,UAAUS,WAAWH,GAAUrD,aAAa,CACrD0D,QAAShJ,EAAYrB,MAAM/F,QAEzBoH,EAAY+B,UAAUnJ,OAASU,KAAK4G,MAAMuS,SAASI,SACrDvZ,KAAK4G,MAAMuS,SAAS3J,WAAWH,EAElC,EACD,WAAArI,CAAYN,GACV1G,KAAK4G,MAAM1E,OAAO8J,aAAarM,EAAOE,UACvC,EACD,eAAA8P,CAAgBjJ,GACd1G,KAAK4G,MAAM6H,WAAWW,SAAS,KAChC,EACD,cAAAlI,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,iCAAkCH,EAAa1G,KAAK4G,MAC9E,EACD,mBAAAgJ,CAAoBC,EAAoBlJ,GAClCkJ,aAAuB9J,EAAAA,iBACzB/F,KAAK4G,MAAM6H,WAAWW,SAASS,EAElC,EACD,gBAAAC,CAAiBzK,GACf,MAAM0K,EAAgB/P,KAAK4G,MAAMmI,UAAUiB,KACrB,OAAlBD,GACFA,EAAcL,QAAQ1D,aAAa3G,EAEtC,EACD,eAAA4K,CAAgB1K,GACd,MAAM2K,EAAelQ,KAAK4G,MAAMiI,SAASmB,KACpB,OAAjBE,GACFA,EAAaT,SAASzD,aAAazG,EAEtC,EACD,iBAAA4K,CAAkBjO,GAChBlC,KAAK4G,MAAM1E,OAAO8J,aAAa9J,EAChC,EACD,oBAAAsX,CAAqB/Q,GACdzI,KAAK4G,MAAMuS,SAASI,UAEd9Q,EACTzI,KAAK4G,MAAMuS,SAAS3J,aAEpBxP,KAAK4G,MAAMuS,SAASM,aAEvB,KAIFrJ,EAAA,CAAA9J,EAAAA,SAAS,CACRC,UAAWR,EAAAA,gBACXqF,UAAU,EACV,SAAAtE,CAAUuJ,GACR,MAAMhB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUtE,aAAaqE,EAAgBE,SAEnD,EACD,cAAAC,CAAeC,GACb,MAAMpB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUI,OAEtB,EACD,iBAAAC,GACE,MAAMtB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAChB,OAAbX,GACFA,EAASiB,UAAUM,SAEtB,KAIFC,EAAA,CAAAC,EAAAA,aAAa,CACZtH,SAAS,EACT,QAAAuH,CAAS1B,GACPxJ,MAAMkL,SAAS1B,GACfrP,KAAKiP,aAAajP,KAAK4G,MAAM1E,OAAO5C,OAEpC+P,EAAS2B,MAAMC,OAAOjF,aAAa,WACnChM,KAAK4G,MAAMiI,SAASW,WAAWH,GAC/BrP,KAAK4G,MAAMmI,UAAUS,WAAWH,GAChC,MAAM3I,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GAAwBA,EAAY+B,UAAUnJ,OAASU,KAAK4G,MAAMuS,SAASI,SAC7EvZ,KAAK4G,MAAMuS,SAAS3J,WAAWH,GAGjC,MAAMgB,EAAkBrQ,KAAK4G,MAAM6H,WAAWjD,MACtB,OAApB6E,GACFhB,EAASiB,UAAUtE,aAAaqE,EAAgBE,SAEnD,EACD,aAAAW,CAAc7B,EAAoB8B,GAChCtL,MAAMqL,cAAc7B,EAAU8B,GAC1B9B,EAAS+B,UAAY/B,EAASgC,QAChCrR,KAAK4G,MAAM0K,QAAQjC,EAEtB,EACD,YAAAkC,CAAalC,GACNA,EAASgC,QACZrR,KAAK4G,MAAM0K,QAAQjC,EAEtB,EACD,eAAAmC,CAAgBnC,GACdrP,KAAK4G,MAAM6K,UAAUpC,EACtB,EACD,WAAAqC,CAAYrC,GACVrP,KAAK4G,MAAM6K,UAAUpC,EACtB,EACD,cAAAsC,CAAetC,GACbrP,KAAK4G,MAAM0K,QAAQjC,EACpB,EACD,YAAAJ,CAAa/M,GACX,MAAMmN,EAAWrP,KAAKgQ,KACL,OAAbX,GACFA,EAASuC,WAAWlR,EAAKmR,KAAAA,QAAS3P,EAAOzB,aAE5C,KAMFqR,EAAA,CAAAC,EAAAA,QAAQ,CACPC,SAAUC,EAAAA,aACVC,QAAS,OACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKY,YACxB,EACD,cAAA6C,CAAelC,GACblQ,KAAK4G,MAAMC,cAAc,mCAAoCqJ,EAAclQ,KAAK4G,MACjF,EACD,aAAAyL,CAAcnC,GACZlQ,KAAK4G,MAAMC,cAAc,kCAAmCqJ,EAAclQ,KAAK4G,MAChF,EACD,UAAA0L,GACE,OAAQzM,MAAMyM,aAA8BtG,aAAa,CACvDuG,WAAY,CAACC,MAAO,GAAIC,OAAQ,IAChCC,UAAWC,EAAKC,KAAAA,aAEnB,KAIFC,EAAA,CAAAd,EAAAA,QAAQ,CACPC,SAAUc,EAAAA,aACVZ,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKY,YACxB,EACD,cAAA6C,CAAerC,GACb/P,KAAK4G,MAAMC,cAAc,oCAAqCkJ,EAAe/P,KAAK4G,MACnF,EACD,aAAAyL,CAActC,GACZ/P,KAAK4G,MAAMC,cAAc,mCAAoCkJ,EAAe/P,KAAK4G,MAClF,KAIF8S,EAAA,CAAA3H,EAAAA,QAAQ,CACPC,SAAUC,EAAAA,aACVC,QAAS,OACT9G,UAAU,EACV,IAAAnM,GACEe,KAAKuZ,SAAU,CAChB,EACD,cAAIpH,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKY,YACxB,EACD,cAAA6C,CAAelC,GACblQ,KAAK4G,MAAMC,cAAc,mCAAoCqJ,EAAclQ,KAAK4G,MACjF,EACD,aAAAyL,CAAcnC,GACZlQ,KAAK4G,MAAMC,cAAc,kCAAmCqJ,EAAclQ,KAAK4G,MAChF,EACD,YAAA+S,CAAa7F,EAA6BC,GACxC/T,KAAK4G,MAAMC,cAAc,iCAAkCiN,EAAOC,EAAO/T,KAAK4G,MAC/E,EACD,UAAA0L,GACE,OAAQzM,MAAMyM,aAA8BtG,aAAa,CACvDuG,WAAY,CAACC,MAAO,GAAIC,OAAQ,IAChCC,UAAWC,EAAKiH,KAAAA,YAChBnK,SAAUyJ,EAAoBG,UAEjC,KAQFQ,EAAAA,CAAAA,EAAAA,MACD1c,EAAA2H,EAAA,KAAAgV,EAAA,CAAAhc,KAAA,SAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAWqR,WAEV,KAAAU,GArND5c,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,GAiEzC9H,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAA6D7F,CAAAA,IAAA8F,EAAAH,GAwBtE9H,EAAS,KAAA,KAAAiT,EAAA,CAAAtS,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyG,WAAAzP,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyG,WAAyEnP,CAAAA,IAAAoP,EAAAzJ,GAgDlF9H,EAAkB,KAAA,KAAA0T,EAAA,CAAA/S,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2G,KAAA3P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2G,KAEhBrP,CAAAA,IAAAsP,EAAA3J,GAqBF9H,EAAS,KAAA,KAAA2U,EAAA,CAAAhU,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6G,SAAA7P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6G,SAAuCvP,CAAAA,IAAAwP,EAAA7J,GAehD9H,EAAS,KAAA,KAAA0V,EAAA,CAAA/U,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+G,UAAA/P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+G,UAAwCzP,CAAAA,IAAA0P,EAAA/J,GA6BjD9H,EAAS,KAAA,KAAAuc,EAAA,CAAA5b,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmR,SAAAna,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmR,SAGP7Z,CAAAA,IAAA8Z,EAAAnU,GAzNS7F,EAAmB0F,EAAAiV,IAAA,EAAA,GCDnBC,EAAqB,iDAArB,OAAAlV,EAAA,cAA8BmV,oDAmChCja,KAAAmF,QAGP/F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAoF,OAAA,IA4DgBpF,KAAAka,MAA6E9a,EAAAY,KAAAma,OAAA,GAQ7Ena,KAAAoa,KAAgGhb,EAAAY,KAAAqa,OAAA,GA+BzGra,KAAAsa,UAAuGlb,EAAAY,KAAAua,OAAA,EAajH,CAXW,qBAAAC,CAAsB5C,EAAkBC,GAChD,MAAMnR,EAAc1G,KAAKmF,OAAOqG,MAChC,GAAoB,OAAhB9E,GAAwBkR,aAAarJ,GAAuBsJ,aAAatJ,EAAqB,CAChG,MAAMkM,EAAI7C,EAAEzP,OAAOqD,MACbkP,EAAI7C,EAAE1P,OAAOqD,MACnB,GAAU,OAANiP,GAAoB,OAANC,EAChB,OAAOhU,EAAY2B,QAAQ2P,cAAcyC,EAAGC,EAE/C,CACD,OAAO,CACR,GAlJArU,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACX4E,UAAU,EACV,eAAA3E,CAAgBC,GACd1G,KAAK4G,MAAMC,cAAc,kCAAmCH,EAAa1G,KAAK4G,MAC/E,EACD,cAAAuI,CAAezI,GACb1G,KAAK4G,MAAM0T,UAAUvE,iBAAAA,EAAoBrP,GAEzC,MAAMiU,EAAY3a,KAAK4G,MAAMsT,MAAMlK,KACjB,OAAd2K,GAAsBA,EAAUvJ,SAClCpR,KAAK4a,WAAWD,EAAWjU,EAE9B,EACD,eAAAiJ,CAAgBjJ,GACd,MAAMiU,EAAY3a,KAAK4G,MAAMsT,MAAMlK,KACjB,OAAd2K,GAAsBA,EAAUvJ,SAClCpR,KAAK6a,aAAaF,EAAWjU,GAG/B1G,KAAK4G,MAAM0T,UAAUrE,YAAYvP,EAClC,EACD,cAAAQ,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,iCAAkCH,EAAa1G,KAAK4G,MAC9E,EACD,UAAAgU,CAAWD,EAAsBjU,GAC/BA,EAAY4K,QAAQtR,KAAK4G,MAC1B,EACD,YAAAiU,CAAaF,EAAsBjU,GACjCA,EAAY+K,UAAUzR,KAAK4G,MAC5B,KAOFkU,EAAA,CAAAhK,EAAAA,aAAa,CACZtH,SAAS,EACTiN,cAAc,EACd,QAAA1F,CAAS4J,GACP9U,MAAMkL,SAAS4J,GAEfA,EAAU3J,MAAMiG,gBAAgBjY,IAAI,MACpC2b,EAAU3J,MAAM+J,WAAW/O,aAAa,QACxC2O,EAAUK,UAAUhP,aAAqC,WAAxB2O,EAAUM,UAAyB,GAAK,IAEzE,MAAM1I,EAAa2I,EAAAA,UAAUvW,OAAO,OAAQ,EAAG,EAAG,IAC5CwW,EAAcD,EAAAA,UAAUvW,OAAO,QAAS,EAAG,GAC3CyW,EAAaF,EAAAA,UAAUvW,OAAO,OAAQ,EAAG,EAAG,IAC5C0W,EAAcC,EAAAA,YAAY3W,OAAO,CAAC4N,EAAY4I,EAAaC,IACjET,EAAUY,OAAOvP,aAAaqP,EAC/B,EACD,aAAAnK,CAAcyJ,EAAsBxJ,GAClC,MAAMzK,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClCmP,EAAUvJ,SAA2B,OAAhB1K,GACvB1G,KAAK4G,MAAMzB,OAAOyV,WAAWD,EAAWjU,GAE1Cb,MAAMqL,cAAcyJ,EAAWxJ,EAChC,EACD,cAAAuF,CAAeiE,GACb9U,MAAM6Q,eAAeiE,GACrB,MAAMjU,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClCmP,EAAUvJ,SAA2B,OAAhB1K,GACvB1G,KAAK4G,MAAMzB,OAAO0V,aAAaF,EAAWjU,EAE7C,EACD,cAAA8U,CAAeb,GACb,MAAMjU,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAOyV,WAAWD,EAAWjU,EAE3C,EACD,eAAA+U,CAAgBd,GACd,MAAMjU,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAO0V,aAAaF,EAAWjU,EAE7C,EACD,cAAAgV,CAAef,GACbA,EAAUK,UAAUhP,aAAqC,WAAxB2O,EAAUM,UAAyB,GAAK,GAC1E,EACD,YAAA1J,CAAaoJ,GACX,MAAMjU,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAOyV,WAAWD,EAAWjU,EAE3C,EACD,eAAA8K,CAAgBmJ,GACd,MAAMjU,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACF1G,KAAK4G,MAAMzB,OAAO0V,aAAaF,EAAWjU,EAE7C,KAIFiV,EAAA,CAAApE,EAAAA,uBAAuB,CACtB/N,SAAS,EACT,OAAAmO,CAAQC,EAAkBC,GACxB,OAAO7X,KAAK4G,MAAM4T,sBAAsB5C,EAAGC,EAC5C,KAIF+D,EAAA,CAAAC,EAAAA,mBAAmB,CAClBC,eAAgB5C,EAChB/N,OAAO,EACPC,UAAU,EACV2Q,YAAYC,GACHA,EAAoB7W,OAE7B,oBAAA8W,CAAqBD,GACnBhc,KAAK4G,MAAMC,cAAc,gCAAiCmV,EAAqBhc,KAAK4G,MACrF,EACD,mBAAAsV,CAAoBF,GAClB,MAAM7K,EAAanR,KAAK4G,MAAMwT,KAAK+B,cAAcH,GACjDA,EAAoB1M,IAAIE,WAAWxP,KAAK4G,MAAMsT,MAAMlK,YAAcmB,EACnE,EACD,mBAAAiL,CAAoBJ,GAClBhc,KAAK4G,MAAMC,cAAc,+BAAgCmV,EAAqBhc,KAAK4G,MACpF,EACD,0BAAAyV,CAA2BvI,EAA6BC,EAAqB1E,EAAoB2M,GAC/Fhc,KAAK4G,MAAMC,cAAc,8BAA+BiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MACjG,EACD,8BAAA0V,CAA+BxI,EAA6BzE,EAAoB2M,GAC9Ehc,KAAK4G,MAAMC,cAAc,kCAAmCiN,EAAOkI,EAAqBhc,KAAK4G,MAC9F,EACD,gBAAAyO,CAAiB7J,GACf,MAAMwQ,EAAsBnW,MAAMwP,iBAAiB7J,GAEnD,OADAwQ,EAAoB7C,SAASI,SAAU,EAChCyC,CACR,KApGH7e,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAGP7F,CAAAA,IAAA8F,EAAAH,GA4DF9H,EAAkB,KAAA,KAAA2d,EAAA,CAAAhd,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAkS,MAAAlb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAkS,MAA6E5a,CAAAA,IAAA6a,EAAAlV,GAQ/F9H,EAAkB,KAAA,KAAAwe,EAAA,CAAA7d,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAoS,KAAApb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAoS,KAAgG9a,CAAAA,IAAA+a,EAAApV,GA+BlH9H,EAAS,KAAA,KAAAye,EAAA,CAAA9d,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsS,UAAAtb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsS,UAAuGhb,CAAAA,IAAAib,EAAAtV,IAzIhF,EAAA,GCUrBsX,EAAuB,sEAAvB,OAAAzX,EAAA,cAAgCmV,oDAiElCja,KAAAwc,UAGPpd,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAyc,OAAA,IAsEgBzc,KAAAka,MAA6E9a,EAAAY,KAAAma,OAAA,GAa7Ena,KAAA0c,OAEhBtd,EAAAY,KAAA2c,OAAA,GAwBO3c,KAAA4c,cAAiDxd,EAAAY,KAAA6c,OAAA,GAejD7c,KAAA8c,SAAsC1d,EAAAY,KAAA+c,OAAA,GAQ7B/c,KAAAoa,KAAgGhb,EAAAY,KAAAqa,OAAA,GAgCzGra,KAAAgd,WAAwG5d,EAAAY,KAAAid,OAAA,EAalH,CAXW,qBAAAzC,CAAsB5C,EAAkBC,GAChD,MAAMzL,EAAgBpM,KAAKwc,SAAShR,MACpC,GAAsB,OAAlBY,GAA0BwL,aAAasB,GAAuBrB,aAAaqB,EAAqB,CAClG,MAAMuB,EAAI7C,EAAEzS,OAAOqG,MACbkP,EAAI7C,EAAE1S,OAAOqG,MACnB,GAAU,OAANiP,GAAoB,OAANC,EAChB,OAAOtO,EAAcc,SAAS8K,cAAcyC,EAAGC,EAElD,CACD,OAAO,CACR,GAjPAwC,EAAA,CAAA5W,EAAAA,SAAS,CACRC,UAAWsD,EACXuB,UAAU,EACV,eAAA3E,CAAgB2F,GACdpM,KAAK4G,MAAMC,cAAc,oCAAqCuF,EAAepM,KAAK4G,MACnF,EACD,cAAAuI,CAAe/C,GACbpM,KAAK4G,MAAMwT,KAAKrF,KAAK3I,EAAcc,SAAS8H,QAC5ChV,KAAK4G,MAAMoW,WAAWjI,KAAK3I,EAAcc,SAAS8H,QAClDhV,KAAK4G,MAAMoW,WAAWG,kBAAkB,EAAG/Q,EAAcc,SAASgI,QAElElV,KAAK4G,MAAMkW,SAASvN,aAAavD,aAAa,CAC5CoR,MAAOhR,EAAc/G,MAAM/F,QAG7B,MAAMqb,EAAY3a,KAAK4G,MAAMsT,MAAMlK,KACjB,OAAd2K,IACFA,EAAU0C,UAAUre,IAAIoN,EAAcO,UAAUrN,OAC5Cqb,EAAUvJ,SACZpR,KAAK4a,WAAWD,EAAWvO,GAGhC,EACD,eAAAuD,CAAgBvD,GACd,MAAMuO,EAAY3a,KAAK4G,MAAMsT,MAAMlK,KACjB,OAAd2K,GAAsBA,EAAUvJ,SAClCpR,KAAK6a,aAAaF,EAAWvO,GAE/BpM,KAAK4G,MAAMoW,WAAWM,aAAalR,EAAcc,SAASgI,OAC3D,EACD,cAAAhO,CAAekF,GACbpM,KAAK4G,MAAMC,cAAc,mCAAoCuF,EAAepM,KAAK4G,MAClF,EACD,gBAAAkJ,CAAiByN,GACfvd,KAAK4G,MAAMkW,SAASvN,aAAavD,aAAa,CAC5CoR,MAAOG,GAEV,EACD,oBAAA7Q,CAAqBC,GACnB,MAAMgO,EAAY3a,KAAK4G,MAAMsT,MAAMlK,KACjB,OAAd2K,GACFA,EAAU0C,UAAUre,IAAI2N,EAE3B,EACD,qBAAAN,CAAsB3F,GACpB1G,KAAK4G,MAAMoW,WAAWjH,iBAAAA,EAAoBrP,EAC3C,EACD,oBAAA6F,CAAqB7F,GACnB1G,KAAK4G,MAAMoW,WAAW/G,YAAYvP,EACnC,EACD,sBAAA8W,CAAuB9W,EAA0BC,GAC/C3G,KAAK4G,MAAMoW,WAAW7G,cAAczP,EAAaC,EAClD,EACD,UAAAiU,CAAWD,EAAsBvO,GAC1BuO,EAAU0C,UAAUI,WACvBrR,EAAckF,QAAQtR,KAAK4G,MAE9B,EACD,YAAAiU,CAAaF,EAAsBvO,GACjCA,EAAcqF,UAAUzR,KAAK4G,MAC9B,KAOFkU,EAAA,CAAAhK,EAAAA,aAAa,CACZtH,SAAS,EACTiN,cAAc,EACd,QAAA1F,CAAS4J,GACP9U,MAAMkL,SAAS4J,GAEfA,EAAU+B,OAAOgB,QAAQ1d,KAAK4G,MAAM8V,OAAOnN,cAC3CoL,EAAU3b,IAAI,CACZgS,MAAO,CACLiG,gBAAiB,KACjB8D,WAAY,QAEdC,UAAmC,WAAxBL,EAAUM,UAAyB,GAAK,KAGrD,MAAM1I,EAAa2I,EAAAA,UAAUvW,OAAO,OAAQ,EAAG,EAAG,IAC5CwW,EAAcD,EAAAA,UAAUvW,OAAO,QAAS,EAAG,GAC3CyW,EAAaF,EAAAA,UAAUvW,OAAO,OAAQ,EAAG,EAAG,IAC5C0W,EAAcC,EAAAA,YAAY3W,OAAO,CAAC4N,EAAY4I,EAAaC,IACjET,EAAUY,OAAOvP,aAAaqP,GAE9B,MAAMjP,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACpB,OAAlBY,GACFuO,EAAU0C,UAAUre,IAAIoN,EAAcO,UAAUrN,MAEnD,EACD,aAAA4R,CAAcyJ,EAAsBxJ,GAClC,MAAM/E,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACtCmP,EAAUvJ,SAA6B,OAAlBhF,GACvBpM,KAAK4G,MAAM4V,SAAS5B,WAAWD,EAAWvO,GAE5CvG,MAAMqL,cAAcyJ,EAAWxJ,EAChC,EACD,cAAAuF,CAAeiE,GACb9U,MAAM6Q,eAAeiE,GACrB,MAAMvO,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACtCmP,EAAUvJ,SAA6B,OAAlBhF,GACvBpM,KAAK4G,MAAM4V,SAAS3B,aAAaF,EAAWvO,EAE/C,EACD,cAAAoP,CAAeb,GACb,MAAMvO,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACpB,OAAlBY,GACFpM,KAAK4G,MAAM4V,SAAS5B,WAAWD,EAAWvO,EAE7C,EACD,eAAAqP,CAAgBd,GACd,MAAMvO,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACpB,OAAlBY,GACFpM,KAAK4G,MAAM4V,SAAS3B,aAAaF,EAAWvO,EAE/C,EACD,cAAAsP,CAAef,GACbA,EAAUK,UAAUhP,aAAqC,WAAxB2O,EAAUM,UAAyB,GAAK,GAC1E,EACD,YAAA1J,CAAaoJ,GACX,MAAMvO,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACpB,OAAlBY,GACFpM,KAAK4G,MAAM4V,SAAS5B,WAAWD,EAAWvO,EAE7C,EACD,eAAAoF,CAAgBmJ,GACd,MAAMvO,EAAgBpM,KAAK4G,MAAM4V,SAAShR,MACpB,OAAlBY,GACFpM,KAAK4G,MAAM4V,SAAS3B,aAAaF,EAAWvO,EAE/C,KAIFuR,EAAA,CAAA/G,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,gBAAAoU,CAAiBC,EAAwBC,GACvCjY,MAAM+X,iBAAiBC,EAAYC,GACnC9d,KAAK+d,eAAeF,EAAYC,EACjC,EACD,cAAAC,CAAeF,EAAwBC,GACrC9d,KAAK4G,MAAMgW,cAAcpN,WAAWqO,GACpC7d,KAAK4G,MAAMkW,SAAStN,WAAWqO,EAChC,KAMFG,EAAA,CAAAjM,EAAAA,QAAQ,CACPC,SAAUiM,EAAAA,kBACV/L,QAAS,OACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD,QAAAwB,CAASmN,GACP,MAAMC,EAAmBD,EAAkBE,OAAOpO,KACzB,OAArBmO,GACFA,EAAiBnf,IAAI,CACnBqf,eAAgB1L,EAAKiH,KAAAA,YACrB0E,cAAe3L,EAAKiH,KAAAA,aAGzB,EACD,cAAAxH,CAAe8L,GACble,KAAK4G,MAAMC,cAAc,wCAAyCqX,EAAmBle,KAAK4G,MAC3F,EACD,aAAAyL,CAAc6L,GACZle,KAAK4G,MAAMC,cAAc,uCAAwCqX,EAAmBle,KAAK4G,MAC1F,KAIF2X,EAAA,CAAAxM,EAAAA,QAAQ,CACPC,SAAUwM,EAAAA,YACVtM,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD,cAAA6C,CAAerC,GACb/P,KAAK4G,MAAMC,cAAc,mCAAoCkJ,EAAe/P,KAAK4G,MAClF,EACD,aAAAyL,CAActC,GACZ/P,KAAK4G,MAAMC,cAAc,kCAAmCkJ,EAAe/P,KAAK4G,MACjF,KAIF+U,EAAA,CAAApE,EAAAA,uBAAuB,CACtB/N,SAAS,EACT,OAAAmO,CAAQC,EAAkBC,GACxB,OAAO7X,KAAK4G,MAAM4T,sBAAsB5C,EAAGC,EAC5C,KAIF4G,EAAA,CAAAC,EAAAA,mBAAmB,CAClB5C,eAAgB5C,EAChB/N,OAAO,EACPC,UAAU,EACV2Q,YAAYC,GACHA,EAAoB7W,OAE7B,oBAAA8W,CAAqBD,GACnBhc,KAAK4G,MAAMC,cAAc,gCAAiCmV,EAAqBhc,KAAK4G,MACrF,EACD,mBAAAsV,CAAoBF,GAClB,MAAM7K,EAAanR,KAAK4G,MAAMwT,KAAK+B,cAAcH,GACjDA,EAAoB1M,IAAIE,WAAWxP,KAAK4G,MAAMsT,MAAMlK,YAAcmB,EACnE,EACD,mBAAAiL,CAAoBJ,GAClBhc,KAAK4G,MAAMC,cAAc,+BAAgCmV,EAAqBhc,KAAK4G,MACpF,EACD,0BAAAyV,CAA2BvI,EAA6BC,EAAqB1E,EAAoB2M,GAC/Fhc,KAAK4G,MAAMC,cAAc,8BAA+BiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MACjG,EACD,8BAAA0V,CAA+BxI,EAA6BzE,EAAoB2M,GAC9Ehc,KAAK4G,MAAMC,cAAc,kCAAmCiN,EAAOkI,EAAqBhc,KAAK4G,MAC9F,EACD,8BAAA+X,CAA+B7K,EAA6BC,EAAqBiI,GAC/Ehc,KAAK4G,MAAMC,cAAc,+BAAgCiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MAClG,EACD,OAAA+Q,CAAQC,EAAwBC,GAC9B,OAAO7X,KAAK4G,MAAM4T,sBAAsB5C,EAAGC,EAC5C,KArKH1a,EAAS,KAAA,KAAA+f,EAAA,CAAApf,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAwU,SAAAxd,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAwU,SAGPld,CAAAA,IAAAmd,EAAAxX,GAsEF9H,EAAkB,KAAA,KAAA2d,EAAA,CAAAhd,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAkS,MAAAlb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAkS,MAA6E5a,CAAAA,IAAA6a,EAAAlV,GAa/F9H,EAAkB,KAAA,KAAAwgB,EAAA,CAAA7f,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA0U,OAAA1d,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA0U,OAEhBpd,CAAAA,IAAAqd,EAAA1X,GAwBF9H,EAAS,KAAA,KAAA6gB,EAAA,CAAAlgB,KAAA,QAAAO,KAAA,gBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,kBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA4U,cAAA5d,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA4U,cAAiDtd,CAAAA,IAAAud,EAAA5X,GAe1D9H,EAAS,KAAA,KAAAohB,EAAA,CAAAzgB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA8U,SAAA9d,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA8U,SAAsCxd,CAAAA,IAAAyd,EAAA9X,GAQ/C9H,EAAkB,KAAA,KAAAwe,EAAA,CAAA7d,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAoS,KAAApb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAoS,KAAgG9a,CAAAA,IAAA+a,EAAApV,GAgClH9H,EAAS,KAAA,KAAAshB,EAAA,CAAA3gB,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAgV,WAAAhe,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAgV,WAAwG1d,CAAAA,IAAA2d,EAAAhY,IAxO/E,EAAA,GCLvB2Z,EAAmB,wDAAnB,OAAA9Z,EAAA,cAA4B4P,oDAuD9B1U,KAAAmF,QAA6D/F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAoF,OAAA,IAQpDpF,KAAAiT,MAAwE7T,EAAAY,KAAAkT,OAAA,GAYxElT,KAAA6I,UAAoCzJ,EAAAY,KAAA8I,OAAA,GA6C7C9I,KAAA6e,YAA6Gzf,EAAAY,KAAA8e,OAAA,GA4B7G9e,KAAA+e,eAAsH3f,EAAAY,KAAAgf,OAAA,EAChI,CAxEU,YAAA7V,CAAaC,EAAe6V,GACnC,MAAMvY,EAAc1G,KAAKmF,OAAOqG,MACZ,OAAhB9E,GACFA,EAAYyC,aAAaC,EAE5B,CAEQ,YAAAC,CAAaD,EAAe6V,GACnC,MAAMvY,EAAc1G,KAAKmF,OAAOqG,MACZ,OAAhB9E,GACFA,EAAY2C,aAAaD,EAE5B,GAtFA/C,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACX4E,UAAU,EACV,eAAA3E,CAAgBC,GACd1G,KAAK4G,MAAMC,cAAc,kCAAmCH,EAAa1G,KAAK4G,MAC/E,EACD,cAAAuI,CAAezI,GACb1G,KAAK4G,MAAMqM,MAAM1D,aACjBvP,KAAK4G,MAAMvB,MAAMrG,IAAI0H,EAAYrB,MAAM/F,OACvCU,KAAK4G,MAAM+B,WAAW3J,IAAI0H,EAAYiC,WAAWrJ,OACjDU,KAAK4G,MAAMiY,YAAYtT,YAAY7E,GACnC,MAAMwY,EAAiBxY,EAAY6B,UAAU2M,OAC7C,IAAK,MAAME,KAAW8J,EAAgB,CACpC,MAAM9S,EAAgB8S,EAAe9J,GAChChJ,EAAcK,OAAOnN,OACxBU,KAAK4G,MAAMmY,eAAevR,SAASpB,EAEtC,CACF,EACD,eAAAuD,CAAgBjJ,GACd1G,KAAK4G,MAAMmY,eAAezB,aAAa5W,EAAY6B,UAAU2M,QAC7DlV,KAAK4G,MAAMiY,YAAY5I,YAAYvP,EACpC,EACD,cAAAQ,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,iCAAkCH,EAAa1G,KAAK4G,MAC9E,EACD,gBAAAkJ,CAAiBzK,GACf,MACM+Q,EADkBpW,KAAK4G,MAAMvB,MAAMgR,mBACPC,KAAK/G,aACnC6G,aAAqBG,EAAAA,eACvBH,EAAU1G,QAAQ1Q,IAAIqG,EAEzB,EACD,qBAAA8Z,CAAsBxW,GACpB3I,KAAK4G,MAAM+B,WAAWqD,aAAarD,EACpC,EACD,uBAAAyW,CAAwBhT,EAA8BzF,GAC/CyF,EAAcK,OAAOnN,OACxBU,KAAK4G,MAAMmY,eAAevR,SAASpB,EAAezF,EAErD,EACD,sBAAA0Y,CAAuBjT,GACrBpM,KAAK4G,MAAMmY,eAAe9I,YAAY7J,EACvC,EACD,yBAAAkT,CAA0B7S,EAAiBL,GACrCK,EACFzM,KAAK4G,MAAMmY,eAAe9I,YAAY7J,GAEtCpM,KAAK4G,MAAMmY,eAAevR,SAASpB,EAEtC,KAIFyI,EAAA,CAAA/D,EAAAA,aAAa,CACZtH,SAAS,KAOVuD,EAAA,CAAA7G,EAAAA,SAAS,CACRsD,SAAS,EACT,WAAApC,CAAYmY,EAAuBC,GACjC3Z,MAAMuB,YAAYmY,EAAcC,GAChC,MAAM9Y,EAAc1G,KAAK4G,MAAMzB,OAAOqG,MAClB,OAAhB9E,GACFA,EAAYmC,UAAUmD,aAAauT,EAEtC,KAkBFE,EAAA,CAAA5D,EAAAA,mBAAmB,CAClBC,eAAgB9B,EAChB7O,OAAO,EACPC,UAAU,EACV2Q,YAAY2D,GACHA,EAAsBva,OAE/B,oBAAA8W,CAAqByD,GACnB1f,KAAK4G,MAAMC,cAAc,kCAAmC6Y,EAAuB1f,KAAK4G,MACzF,EACD,mBAAAsV,CAAoBwD,GAClBA,EAAsBxF,MAAM1K,WAAWxP,KAAK4G,MAAMqM,MAAMjD,KACzD,EACD,mBAAAoM,CAAoBsD,GAClB1f,KAAK4G,MAAMC,cAAc,iCAAkC6Y,EAAuB1f,KAAK4G,MACxF,EACD,2BAAA+Y,CAA4B7L,EAA6BC,EAAqBiI,GAC5Ehc,KAAK4G,MAAMC,cAAc,8BAA+BiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MACjG,EACD,+BAAAgZ,CAAgC9L,EAA6BkI,GAC3Dhc,KAAK4G,MAAMC,cAAc,kCAAmCiN,EAAOkI,EAAqBhc,KAAK4G,MAC9F,EACD,2BAAAiZ,CAA4B/L,EAA6BC,EAAqB+L,GAC5E9f,KAAK4G,MAAMC,cAAc,8BAA+BiN,EAAOC,EAAO+L,EAAqB9f,KAAK4G,MACjG,EACD,+BAAAmZ,CAAgCjM,EAA6BgM,GAC3D9f,KAAK4G,MAAMC,cAAc,kCAAmCiN,EAAOgM,EAAqB9f,KAAK4G,MAC9F,KAIFoZ,EAAA,CAAAtB,EAAAA,mBAAmB,CAClB5C,eAAgBS,EAChBpR,OAAO,EACPC,UAAU,EACV2Q,YAAYkE,GACHA,EAAwBzD,SAEjC,oBAAAP,CAAqBgE,GACnBjgB,KAAK4G,MAAMC,cAAc,oCAAqCoZ,EAAyBjgB,KAAK4G,MAC7F,EACD,mBAAAsV,CAAoB+D,GAClBA,EAAwB/F,MAAM1K,WAAWxP,KAAK4G,MAAMqM,MAAMjD,KAC3D,EACD,mBAAAoM,CAAoB6D,GAClBjgB,KAAK4G,MAAMC,cAAc,mCAAoCoZ,EAAyBjgB,KAAK4G,MAC5F,EACD,2BAAA+Y,CAA4B7L,EAA6BC,EAAqBiI,GAC5Ehc,KAAK4G,MAAMC,cAAc,qCAAsCiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MACxG,EACD,+BAAAgZ,CAAgC9L,EAA6BkI,GAC3Dhc,KAAK4G,MAAMC,cAAc,yCAA0CiN,EAAOkI,EAAqBhc,KAAK4G,MACrG,EACD,4BAAAsZ,CAA6BpM,EAA6BC,EAAqBiI,GAC7Ehc,KAAK4G,MAAMC,cAAc,sCAAuCiN,EAAOC,EAAOiI,EAAqBhc,KAAK4G,MACzG,KA3FHzJ,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAA6D7F,CAAAA,IAAA8F,EAAAH,GAQtE9H,EAAkB,KAAA,KAAA0X,EAAA,CAAA/W,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiL,MAAAjU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiL,MAAwE3T,CAAAA,IAAA4T,EAAAjO,GAY1F9H,EAAkB,KAAA,KAAA4P,EAAA,CAAAjP,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAa,UAAA7J,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAa,UAAoCvJ,CAAAA,IAAAwJ,EAAA7D,GA6CtD9H,EAAS,KAAA,KAAAsiB,EAAA,CAAA3hB,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6W,YAAA7f,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6W,YAA6Gvf,CAAAA,IAAAwf,EAAA7Z,GA4BtH9H,EAAS,KAAA,KAAA6iB,EAAA,CAAAliB,KAAA,QAAAO,KAAA,iBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,mBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+W,eAAA/f,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+W,eAAsHzf,CAAAA,IAAA0f,EAAA/Z,IApJjG,EAAA,GCFnBkb,EAAqB,mJAArB,OAAArb,EAAA,cAA8Bsb,oDAWhCpgB,KAAAqgB,YAAyCjhB,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAsgB,OAAA,IAchCtgB,KAAAugB,OAA+DnhB,EAAAY,KAAAwgB,OAAA,GAe/DxgB,KAAAygB,MAAwErhB,EAAAY,KAAA0gB,OAAA,GAexE1gB,KAAA2gB,OAAqGvhB,EAAAY,KAAA4gB,OAAA,GA2BrG5gB,KAAA6gB,MAAmGzhB,EAAAY,KAAA8gB,OAAA,GA+G5G9gB,KAAA+gB,SAAoF3hB,EAAAY,KAAAghB,OAAA,GAYpFhhB,KAAAihB,YAAkE7hB,EAAAY,KAAAkhB,OAAA,GASlElhB,KAAAmhB,YAAqC/hB,EAAAY,KAAAohB,OAAA,GAe5BphB,KAAAqhB,MAAwEjiB,EAAAY,KAAAshB,OAAA,GAwDxEthB,KAAAuhB,OAGhBniB,EAAAY,KAAAwhB,OAAA,GA8BgBxhB,KAAAyhB,OAAiGriB,EAAAY,KAAA0hB,OAAA,GA6BjG1hB,KAAA2hB,MAAmGviB,EAAAY,KAAA4hB,OAAA,GAK5G5hB,KAAA6hB,YAA0CziB,EAAAY,KAAA8hB,OAAA,GAuC1C9hB,KAAAqT,OAGPjU,EAAAY,KAAAsT,OAAA,GA6DOtT,KAAAmT,OAKP/T,EAAAY,KAAAoT,OAAA,GAmDOpT,KAAAyT,OAKPrU,EAAAY,KAAA0T,OAAA,GAGO1T,KAAA+hB,UAA6C3iB,EAAAY,KAAAgiB,OAAA,GA0O7ChiB,KAAA2T,QAEPvU,EAAAY,KAAA4T,OAAA,EAQH,CAlPW,eAAAqO,CAAgBvb,GACxB,IAAIwb,EAAgBxb,EAAY4C,sBAKhC,OAJsB,OAAlB4Y,IACFA,EAAgB,IAAItD,EACnBsD,EAAsC/c,OAAOiK,SAAS1I,IAElDwb,CACR,CAED,aAAAC,CAAczb,EAA0B0b,GACtC,MAAMF,EAAgBliB,KAAKiiB,gBAAgBvb,GAC3Cwb,EAAcjP,MAAM7D,SAAS1I,GAC7B,MAAM2b,EAAUH,EAAcjP,MAAM1D,aACpC8S,EAAQC,UACRtiB,KAAKuiB,YAAYL,GACjBliB,KAAK2gB,OAAO6B,cAAcN,GAC1BG,EAAQI,QAAQL,EACjB,CAED,gBAAAM,CAAiBhc,EAA0B0b,GACzC,MAAMO,EAAmB3iB,KAAKmT,OAAOyP,mBACrCD,EAAiB1P,MAAM7D,SAAS1I,GAChCic,EAAiB1P,MAAM1D,aAAa+S,UACpCtiB,KAAK2hB,MAAMhN,cAAcgO,GACzB3iB,KAAK2hB,MAAMc,QAAQL,EACpB,CAEkB,kBAAAS,CAAmB/O,EAA6BC,GAEjE,GADA/T,KAAK6G,cAAc,+BAAgCiN,EAAOC,EAAO/T,MAC7D8T,EAAMgP,iBACR,OAGF,MAAMC,EAAa/iB,KAAKihB,YAAYzV,MACpC,IAAIwX,EACJ,GAAmB,OAAfD,GAA+D,QAAvCC,EAAYD,EAAW9a,KAAK3I,OAEtD,OAEF,MAAM2jB,EAAajjB,KAAK6hB,YAAYrW,MAC9B0X,EAA2B,OAAfD,EAAsBA,EAAWhb,KAAK3I,MAAQ,KAE1D6jB,EAAiBnjB,KAAK2T,QAAQQ,aAC9BK,EAAe2O,EAAe3O,aAEpC,IAAI4O,EACJ,MAAM/O,EAA6C,CAAA,EAC7CC,EAA8C,CAAA,EACpD,GAA8B,cAA1BtU,KAAKqjB,WAAW/jB,MAElB8jB,EAAWJ,EAAUjhB,gBAChB,GAAkB,OAAdmhB,GAAsBF,EAAU3hB,OAAOsI,UAAQe,SAAU,CAElE,IAAI4Y,EAAaN,EAAUrX,SAASA,SAChC2X,EAAWC,YACbD,EAAa3Z,EAAAA,QAAQe,SAEvB0Y,EAAWE,EAAWvhB,WACtBsS,EAAWlM,YAAc,CAC1B,MACCib,EAAWJ,EAAUQ,gBAAgBzhB,WACrCsS,EAAWlM,YAAc,OAECA,IAAxBqM,EAAaH,WAAWlM,SAC1BmM,EAAYnM,OAASqM,EAAaH,WAAWlM,QAG/Cgb,EAAe/O,YAAY,CACzBgP,SAAAA,EACA/O,WAAAA,EACAC,YAAAA,GAEH,CAES,qBAAAC,GACR,IAAI5N,EAAc3G,KAAKqgB,WAAW7U,MAClC,GAAoB,OAAhB7E,EACF,OACkC,OAAzB3G,KAAKyjB,KAAKC,YAEnB1jB,KAAKmiB,cAAcxb,GAGrB,IAAIgd,EAAmB3jB,KAAKyjB,KAAKC,WACjC,KAAMC,aAA4B/E,GAChC,OAGF,MAAMpK,EAAexU,KAAK2T,QAAQQ,aAAaK,aAC/C,IAAIoP,EACJ,IACEA,OAA4C,IAA/BpP,EAAa4O,SACbzZ,UAAQka,MAAMrP,EAAa4O,UAC3BzZ,EAAQma,QAAAA,OACtB,CAAC,MAAOC,GACP,MACD,CAGD,IAAIC,EAAgBJ,EAMpB,IALII,EAAcC,eAChBD,EAAgBA,EAAcE,QAIzBF,EAAcG,aAAa,CAChC,IAAIC,EAAUJ,EAGd,MAAMK,EAAaD,EAAQE,OACrBlY,EAAsCzF,EAAY4B,UAAUxJ,IAAIslB,GACtE,GAAsB,OAAlBjY,EAEF,MAEFgY,EAAUA,EAAQF,OACdE,EAAQH,eACVG,EAAUA,EAAQF,QAIpB,MAAMK,EAAWH,EAAQE,OACnB5d,EAAkC0F,EAAcc,SAASnO,IAAIwlB,GACnE,GAAoB,OAAhB7d,EAEF,MAEF0d,EAAUA,EAAQF,OAGlB,MAAMM,EAA4Cb,EAAiBc,QAAQf,WAC3E,KAAMc,aAA6B5F,GAEjC,MAEF,MAAM8F,EAAeF,EAAkBrf,OAAOqG,MAC9C,GAAqB,OAAjBkZ,EAEF,OAIF,GAAIhe,IAAgBge,EAElB,MAGF,IAAKN,EAAQH,aACX,MAEFG,EAAUA,EAAQF,OAClBvd,EAAc+d,EACdf,EAAmBa,EACnBR,EAAgBI,CACjB,CAGD,IAAIO,EAAsBhB,EAAiBc,QAAQf,WACnD,GAA4B,OAAxBiB,EAA8B,CAEhC,EAAG,CACD,GAA+C,OAA3CA,EAAoBF,QAAQf,WAC9B,MAEFiB,EAAsBA,EAAoBF,QAAQf,iBACnB,OAAxBiB,GAET,KAA+B,OAAxBA,GAAgCA,IAAwBhB,GAAkB,CAC/E,MAAMiB,EAAyCD,EAAoBE,KAAKnB,WAClEoB,EAAYH,EAAoB1R,MAAMjD,KAC1B,OAAd8U,GACFA,EAAUxC,UAEZqC,EAAsBC,CACvB,CACF,CAGD,KAAOZ,EAAcG,aAAa,CAChC,MAAME,EAAaL,EAAcM,OAC3BlY,EAAsCzF,EAAY4B,UAAUxJ,IAAIslB,GACtE,GAAsB,OAAlBjY,EACF,OAGF,GADA4X,EAAgBA,EAAcE,QACzBF,EAAcC,aACjB,OAEFD,EAAgBA,EAAcE,OAE9B,MAAMK,EAAWP,EAAcM,OACzB5d,EAAkC0F,EAAcc,SAASK,YAAYgX,GAC3E,GAAoB,OAAhB7d,EACF,OAEFsd,EAAgBA,EAAcE,OAE1BF,EAAcC,eAChBjkB,KAAKmiB,cAAczb,GACnBsd,EAAgBA,EAAcE,QAGhCvd,EAAcD,CACf,CAE6B,cAA1B1G,KAAKqjB,WAAW/jB,YAC2B,IAAxCkV,EAAaH,WAAWlM,QACxByb,EAAWL,YAAcK,EAAWmB,OAAOd,cAChDjkB,KAAK0iB,iBAAiB/b,GACtB3G,KAAK+hB,UAAU5N,aAAa6Q,OAAOre,EAAYf,QAE/C5F,KAAK+hB,UAAU5N,aAAa8Q,aAE/B,CAuBkB,SAAArQ,GACjB/O,MAAM+O,YACN5U,KAAKuU,uBACN,GArvBA2Q,EAAA,CAAA5e,EAAAA,SAAS,CACRC,UAAWC,EACX,cAAA2I,CAAezI,GACT1G,KAAK4G,MAAMwK,SACbpR,KAAK4G,MAAMiS,cAAcxK,EAAWyK,WAAAA,aAEvC,KAIFqM,EAAA,CAAApT,EAAAA,QAAQ,CACPvI,SAAS,EACT,QAAAuH,CAASqU,GACPvf,MAAMkL,SAASqU,GACfA,EAAWpU,MAAMiG,gBAAgBjL,aAAa2G,EAAKsE,KAAAA,gBACpD,EACD,eAAAoO,CAAgBC,EAAoBF,GAClCvf,MAAMwf,gBAAgBC,EAAWF,GACjCA,EAAWpU,MAAMkG,eAAelL,aAAasZ,EAAY,YAAc,QACvEF,EAAWxT,WAAWlR,EAAAA,KAAKmR,QAAS,CAAC,CAACnR,EAAK2W,KAAAA,YAAaiO,EAAY,EAAI,KAAK,EAC9E,KAIFC,EAAA,CAAAzU,EAAAA,aAAa,CACZtH,SAAS,EACT,gBAAAgc,CAAiBnC,EAAoCoC,GACnD,MAAMH,EAAYtlB,KAAK4G,MAAM0e,UAAUhmB,MACvCU,KAAK4G,MAAM8e,UAAU1Z,aAAasZ,GAA4B,cAAfjC,GAA8B,GAAM,EAAI,EACxF,EACD,eAAAgC,CAAgBC,EAAoBG,GAClC5f,MAAMwf,gBAAgBC,EAAWG,GACjC,MAAMpC,EAAarjB,KAAK4G,MAAMyc,WAAW/jB,MACzCU,KAAK4G,MAAM8e,UAAU1Z,aAAasZ,GAA4B,cAAfjC,GAA8B,GAAM,EAAI,GACvFrjB,KAAK4G,MAAM2a,OAAOoE,kBAAkB3lB,KAAK4G,MAAMia,MAAM7Q,KACtD,KAIF4V,EAAA,CAAArO,EAAAA,uBAAuB,CACtB/N,SAAS,EACT,gBAAAgc,CAAiBnC,EAAoCyB,EAAsBe,GACzEhgB,MAAM2f,iBAAiBnC,EAAYyB,EAAWe,GAC9C,MAAMP,EAAYtlB,KAAK4G,MAAM0e,UAAUhmB,MACvCwlB,EAAUlT,WAAWlR,EAAKmR,KAAAA,QAAS,CAAC,CAACnR,EAAK0W,KAAAA,YAAakO,GAA4B,cAAfjC,EAA6B,EAAI,KAAK,EAC3G,EACD,eAAAgC,CAAgBC,EAAoBR,EAAsBe,GACxDhgB,MAAMwf,gBAAgBC,EAAWR,EAAWe,GAC5C,MAAMxC,EAAarjB,KAAK4G,MAAMyc,WAAW/jB,MACzCwlB,EAAUlT,WAAWlR,EAAKmR,KAAAA,QAAS,CAAC,CAACnR,EAAK0W,KAAAA,YAAakO,GAA4B,cAAfjC,EAA6B,EAAI,KAAK,EAC3G,KAIFyC,EAAA,CAAAlP,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,mBAAA0S,CAAoB6J,EAAkCpC,GAEpD,GADA9d,MAAMqW,oBAAoB6J,EAAiBpC,KACrCoC,aAA2BnH,GAC/B,OAEF,MAAMoH,EAAmBD,EAAgB5gB,OAAOqG,MAChDxL,KAAK4G,MAAMqa,YAAY7R,SAAS4W,GAChChmB,KAAK4G,MAAMma,SAASpM,cAAcoR,EACnC,EACD,oBAAAE,CAAqBF,GACnBlgB,MAAMogB,qBAAqBF,GACvBA,aAA2BnH,GAC7B5e,KAAK4G,MAAMma,SAASpM,cAAc,KAGrC,EACD,yBAAAuR,CAA0BC,EAAiCJ,GACzD,MAAM3P,EAAY+P,EAAgB7P,KAAKtG,KACrB,OAAdoG,GACFA,EAAUpF,MAAMC,OAAOjF,aAAa,UAEvC,KAIFoa,EAAA,CAAAC,EAAAA,cAAc,CACbvK,eAAgB8C,EAChBxT,UAAU,EACV,2BAAAuU,CAA4B7L,EAA6BC,EAAqBiI,GAC5E,GAAIlI,EAAMgP,iBACR,OAEF,MAAMpc,EAAcsV,EAAoB7W,OAAOqG,MAC/C,IAAI8a,EACJ,GAAoB,OAAhB5f,GAAkE,QAAzC4f,EAAa5f,EAAYuB,KAAK3I,OACzD,OAEF,MAAM6jB,EAAiBnjB,KAAK4G,MAAM+M,QAAQQ,aACpCK,EAAe2O,EAAe3O,aAEpC,IAAI4O,EACAkD,EAAWrC,eAAiBqC,EAAWpC,OAAOX,YAChDH,EAAWkD,EAAW9C,gBAAgBzhB,YAGxC,MAAMsS,EAA6C,CAAA,EACnD,GAAoC,YAAhCrU,KAAK4G,MAAMyc,WAAW/jB,MAAqB,CAC7C,IAAI4U,EAAWM,EAAaH,WAAWlM,OAIvC,QAHsB,IAAlB+L,GAA2C,IAApBA,EAAS1V,SAClC0V,EAAWM,EAAaF,YAAYnM,aAEhB,IAAlB+L,GAA2C,IAApBA,EAAS1V,OAAc,CAChD,MAAM8M,EAAc5E,EAAYyB,OAAOqD,MACvC0I,EAA2B,OAAhB5I,EAAuBA,EAAYtG,GAAG1F,WAAa,CAC/D,CACD+U,EAAWlM,OAAS+L,CACrB,CAEGkP,IAAa5O,EAAa4O,UAAY/O,EAAWlM,SAAWqM,EAAaH,WAAWlM,QACtFgb,EAAe/O,YAAY,CACzBgP,SAAAA,EACA/O,WAAAA,GAGL,EACD,+BAAAuL,CAAgC9L,EAA6BkI,GACvDlI,EAAMgP,kBAGVhP,EAAMyS,gBACP,EACD,kCAAAC,CAAmC1S,EAA6BC,EAAqBiI,GACnF,GAAIlI,EAAMgP,iBACR,OAEF,MAAMpc,EAAcsV,EAAoB7W,OAAOqG,MAC/C,IAAI8a,EACJ,GAAoB,OAAhB5f,GAAkE,QAAzC4f,EAAa5f,EAAYuB,KAAK3I,OACzD,OAEF,MAAM6jB,EAAiBnjB,KAAK4G,MAAM+M,QAAQQ,aACpCK,EAAe2O,EAAe3O,aAE9B4O,EAAWkD,EAAWvkB,WAEtBsS,EAA6C,CAAA,EACnD,GAAoC,YAAhCrU,KAAK4G,MAAMyc,WAAW/jB,MAAqB,CAC7C,IAAI4U,EAAWM,EAAaH,WAAWlM,OAIvC,QAHsB,IAAlB+L,GAA2C,IAApBA,EAAS1V,SAClC0V,EAAWM,EAAaF,YAAYnM,aAEhB,IAAlB+L,GAA2C,IAApBA,EAAS1V,OAAc,CAChD,MAAM8M,EAAc5E,EAAYyB,OAAOqD,MACvC0I,EAA2B,OAAhB5I,EAAuBA,EAAYtG,GAAG1F,WAAa,CAC/D,CACD+U,EAAWlM,OAAS+L,CACrB,CAEGkP,IAAa5O,EAAa4O,UAAY/O,EAAWlM,SAAWqM,EAAaH,WAAWlM,QACtFgb,EAAe/O,YAAY,CACzBgP,SAAAA,EACA/O,WAAAA,GAGL,EACD,sCAAAoS,CAAuC3S,EAA6BkI,GAC9DlI,EAAMgP,kBAGVhP,EAAMyS,gBACP,EACD,mCAAAG,CAAoC5S,EAA6BC,EAAqBiI,GACpF,GAAIlI,EAAMgP,iBACR,OAEFhP,EAAMyS,iBACN,MAAM7f,EAAcsV,EAAoB7W,OAAOqG,MAC/C,IAAI8a,EACJ,GAAoB,OAAhB5f,GAAkE,QAAzC4f,EAAa5f,EAAYuB,KAAK3I,OACzD,OAEF,MAAM6jB,EAAiBnjB,KAAK4G,MAAM+M,QAAQQ,aACpCK,EAAe2O,EAAe3O,aAEpC,IAAI4O,EACAkD,EAAWrC,eAAiBqC,EAAWpC,OAAOX,YAChDH,EAAWkD,EAAW9C,gBAAgBzhB,YAGpCqhB,IAAa5O,EAAa4O,UAC5BD,EAAe/O,YAAY,CAACgP,SAAAA,GAE/B,KAIFuD,EAAA,CAAArgB,EAAAA,SAAS,CACRC,UAAWC,EACX4E,UAAU,EACV,SAAAtE,CAAUJ,GACR1G,KAAK4G,MAAMua,YAAYnV,aAAatF,EAAYxE,OAAO5C,MACxD,EACD,iBAAA6Q,CAAkBjO,GAChBlC,KAAK4G,MAAMua,YAAYnV,aAAa9J,EACrC,KAIF0kB,EAAA,CAAA1gB,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOE,UACd,WAAAuH,CAAYlF,GACVlC,KAAK4G,MAAM2a,OAAOtS,aAAa/M,EAChC,KAIF2kB,EAAA,CAAA/V,EAAAA,aAAa,CACZtH,SAAS,EACT,QAAAuH,CAAS+V,GACPjhB,MAAMkL,SAAS+V,GACf,MAAM1B,EAAa0B,EAAUvG,OAAOhR,aACpC6V,EAAW2B,cAAc/nB,IAAI,KAC7BomB,EAAW4B,YAAYtmB,EAAKmR,KAAAA,QAAS,CAAC,CAACnR,EAAAA,KAAKumB,OAAQ,IACrD,EACD,oBAAAC,CAAqB7D,EAAoCyD,GACvDjhB,MAAMqhB,qBAAqB7D,EAAYyD,GACvC9mB,KAAK4G,MAAMiS,cAAcxK,EAAWyK,WAAAA,aACrC,KAIFqO,EAAA,CAAAvQ,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,cAAAqN,CAAeuQ,GACbvhB,MAAMgR,eAAeuQ,GACfA,aAA4BC,EAAAA,mBAGJD,EAAiBE,YAAY1E,mBACrCtM,KAAKoH,QAAQ,MACnC0J,EAAiBG,WAAW3E,mBAC5BwE,EAAiBI,aAAa5E,mBAC9BwE,EAAiBK,YAAY7E,mBAC7BwE,EAAiBM,aAAa9E,mBAC/B,EACD,gBAAA+E,CAAiBC,EAAqBR,GACpCvhB,MAAM8hB,iBAAiBC,EAAYR,GACnCQ,EAAWhW,WAAWlR,EAAAA,KAAKmR,QAAS,CAAC,CAACnR,EAAAA,KAAK2W,YAAa,GAAI,CAAC3W,EAAAA,KAAK0W,YAAa,KAC/EwQ,EAAW5W,MAAMiG,gBAAgBjL,aAAa2G,EAAKsE,KAAAA,iBACnD2Q,EAAWzQ,UAAUnL,aAAa,IAClChM,KAAK2lB,kBAAkB3lB,KAAK4G,MAAMia,MAAM7Q,KACzC,EACD,gBAAAwV,CAAiBnC,EAAoC+D,GACnDvhB,MAAM2f,iBAAiBnC,EAAY+D,GAC7BA,aAA4BC,EAAAA,kBAGlCD,EAAiBS,cAAc7b,aAA4B,YAAfqX,EAC7C,EACD,kBAAAyE,CAAmBC,EAAsBX,GACvCvhB,MAAMiiB,mBAAmBC,EAAWX,GACpCpnB,KAAK2lB,kBAAkBoC,EACxB,EACD,iBAAApC,CAAkBoC,GAChB,MAAMH,EAAa5nB,KAAKgQ,KACxB,GAAmB,OAAf4X,EACF,OAEF,MAAMI,EAA0B,OAAdD,EAAqBA,EAAUE,KAAKD,UAAY,EAC5D3E,EAAarjB,KAAK4G,MAAMyc,WAAW/jB,MACnCgmB,EAAYtlB,KAAK4G,MAAM0e,UAAUhmB,MACjC8X,EAA4B,IAAd4Q,KAAqB1C,GAA4B,YAAfjC,GAChDjB,EAASwF,EAAWM,QAAQvV,EAAKyP,KAAAA,QACvCwF,EAAW5W,MAAMiG,gBAAgBjL,aAAa2G,EAAAA,KAAKsE,gBAAiBmL,GACpEwF,EAAW5W,MAAMkG,eAAelL,aAAaoL,EAAc,OAAS,aACpEwQ,EAAWhW,WAAWlR,OAAKmR,QAAS,CAAC,CAACnR,EAAAA,KAAK2W,YAAa,GACnB,CAAC3W,EAAAA,KAAK0W,YAAaA,EAAc,EAAI,IAAKgL,EAChF,EACD,YAAAnT,CAAa/M,GACX,MAAM0lB,EAAa5nB,KAAKgQ,KACL,OAAf4X,GACFA,EAAWhW,WAAWlR,EAAKmR,KAAAA,QAAS3P,EAAOzB,aAE9C,KAOF0nB,EAAA,CAAAvR,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,cAAAqN,CAAeuR,GACbviB,MAAMgR,eAAeuR,GACjBA,aAA4BC,EAAAA,kBAC9BD,EAAiBE,WAAW1F,kBAE/B,EACD,gBAAA2F,CAAiBC,EAAqBJ,GACpCviB,MAAM0iB,iBAAiBC,EAAYJ,GACnCI,EAAW5W,WAAWlR,EAAAA,KAAKmR,QAAS,CAAC,CAACnR,EAAAA,KAAK2W,YAAa,GAAI,CAAC3W,EAAAA,KAAK0W,YAAa,KAC/EoR,EAAWxX,MAAMiG,gBAAgBjL,aAAa2G,EAAKsE,KAAAA,iBACnDuR,EAAWrR,UAAUnL,aAAa,GACnC,EACD,kBAAAyc,CAAmBC,EAAsBN,GACvCviB,MAAM4iB,mBAAmBC,EAAWN,GACpC,MAAMI,EAAaJ,EAAiBO,IAAI3Y,KACrB,OAAfwY,IAEoC,IAA7BE,EAAUT,KAAKD,WACxBQ,EAAWxX,MAAMkG,eAAelL,aAAa,QAC7Cwc,EAAW5W,WAAWlR,EAAKmR,KAAAA,QAAS,CAAC,CAACnR,EAAAA,KAAK0W,YAAa,OAExDoR,EAAWxX,MAAMkG,eAAelL,aAAa,aAC7Cwc,EAAW5W,WAAWlR,EAAKmR,KAAAA,QAAS,CAAC,CAACnR,EAAAA,KAAK0W,YAAa,MAE3D,KAIFwR,EAAA,CAAAhS,EAAAA,uBAAuB,CACtBpN,SAAS,EACT,gBAAAqf,CAAiB5F,EAAmB6F,GAClCjjB,MAAMgjB,iBAAiB5F,EAAY6F,GAC/B7F,aAAsBzc,GACxBxG,KAAK4G,MAAMib,YAAYzS,SAAS6T,EAEnC,EACD,gBAAA8F,CAAiB9F,EAAmB6F,GAC9B7F,aAAsBzc,GACxBxG,KAAK4G,MAAMib,YAAYzS,SAAS,MAElCvJ,MAAMkjB,iBAAiB9F,EAAY6F,EACpC,EACD,8BAAAE,CAA+BlE,EAAsBgE,GACnD,MAAM7F,EAAa6F,EAAgB7V,MAAMzH,MACrCyX,aAAsBzc,GACxBxG,KAAK4G,MAAMib,YAAYzS,SAAS6T,EAEnC,EACD,8BAAAgG,CAA+BnE,EAAsBgE,GAChCA,EAAgB7V,MAAMzH,iBACfhF,GACxBxG,KAAK4G,MAAMib,YAAYzS,SAAS,KAEnC,KAIF8Z,EAAA,CAAA5iB,EAAAA,SAAS,CACRC,UAAWC,KAIZmQ,EAAA,CAAAC,EAAAA,uBAAuB,CACtBkF,eAAgBqN,EAAAA,cAChB/d,UAAU,EACVge,gBAAgBtS,GACPA,EAAiB6R,IAE1B,mBAAAzM,CAAoBpF,GAClB,MAAME,EAAaF,EAAiB6R,IAAI3Y,KACrB,OAAfgH,GACFhX,KAAK+W,iBAAiBC,EAAYF,EAErC,EACD,oBAAAmP,CAAqBnP,GACnB,MAAME,EAAaF,EAAiB6R,IAAI3Y,KACrB,OAAfgH,GACFhX,KAAKqpB,iBAAiBrS,EAAYF,EAErC,EACD,2BAAAwS,CAA4BtS,EAAqBF,GAC/C9W,KAAK+W,iBAAiBC,EAAYF,EACnC,EACD,0BAAAyS,CAA2BvS,EAAqBF,GAC9C9W,KAAKqpB,iBAAiBrS,EAAYF,EACnC,EACD,gBAAAC,CAAiBC,EAAqBF,GAErC,EACD,gBAAAuS,CAAiBrS,EAAqBF,GAErC,EACD,2BAAA0S,CAA4B1V,EAA6BC,EAAqBC,GAE7E,EACD,+BAAAyV,CAAgC3V,EAA6BE,GAE5D,KAOFwC,EAAA,CAAAI,EAAAA,uBAAuB,CACtBkF,eAAgB/I,EAChB3H,UAAU,EACVge,gBAAgBzG,GACPA,EAAiBxP,OAE1B,cAAA0D,CAAe8L,GACbA,EAAiBxP,OAAO5D,aACxBoT,EAAiBtP,OAAOuP,kBACzB,EACD,mBAAA1G,CAAoByG,GAClB,MAAM+G,EAAc/G,EAAiBxP,OAAO3H,MACxB,OAAhBke,GACF1pB,KAAK2pB,kBAAkBD,EAAa/G,GAEtC,MAAMhN,EAAagN,EAAiBxP,OAAOnD,KACxB,OAAf2F,GACF3V,KAAK4pB,iBAAiBjU,EAAYgN,GAEpC3iB,KAAK4G,MAAMyM,OAAOtM,UAAU4b,EAAiBtP,QAC7CrT,KAAK4G,MAAM6M,OAAO1M,UAAU4b,EAAiBlP,OAC9C,EACD,oBAAAwS,CAAqBtD,GACnB3iB,KAAK4G,MAAM6M,OAAOxM,YAAY0b,EAAiBlP,QAC/CzT,KAAK4G,MAAMyM,OAAOpM,YAAY0b,EAAiBtP,QAC/C,MAAMsC,EAAagN,EAAiBxP,OAAOnD,KACxB,OAAf2F,GACF3V,KAAK6pB,iBAAiBlU,EAAYgN,GAEpC,MAAM+G,EAAc/G,EAAiBxP,OAAO3H,MACxB,OAAhBke,GACF1pB,KAAK8pB,kBAAkBJ,EAAa/G,EAEvC,EACD,+BAAAoH,CAAgCL,EAAoB/G,GAClD3iB,KAAK2pB,kBAAkBD,EAAa/G,EACrC,EACD,8BAAAqH,CAA+BN,EAAoB/G,GACjD3iB,KAAK8pB,kBAAkBJ,EAAa/G,EACrC,EACD,iBAAAgH,CAAkBD,EAAoB/G,GAErC,EACD,iBAAAmH,CAAkBJ,EAAoB/G,GAErC,EACD,8BAAAsH,CAA+BtU,EAAwBgN,GACrD3iB,KAAK4pB,iBAAiBjU,EAAYgN,EACnC,EACD,6BAAAuH,CAA8BvU,EAAwBgN,GACpD3iB,KAAK6pB,iBAAiBlU,EAAYgN,EACnC,EACD,gBAAAiH,CAAiBjU,EAAwBgN,GAExC,EACD,gBAAAkH,CAAiBlU,EAAwBgN,GACvC3iB,KAAKmqB,kBACN,KASFlS,EAAA,CAAArB,EAAAA,uBAAuB,CACtBkF,eAAgBpH,EAAAA,gBAChBtJ,UAAU,EACVge,gBAAgBhR,GACPA,EAAiBnF,MAE1B,mBAAAiJ,CAAoB9D,GAClB,MAAMD,EAAcC,EAAiBnF,MAAMzH,MACvB,OAAhB2M,GACFnY,KAAKkY,kBAAkBC,EAAaC,GAEtC,MAAMgS,EAAahS,EAAiBnF,MAAM1D,aAC1CvP,KAAKqqB,iBAAiBD,EAAYhS,EACnC,EACD,oBAAA6N,CAAqB7N,GACnB,MAAMgS,EAAahS,EAAiBnF,MAAMjD,KACvB,OAAfoa,GACFpqB,KAAKsqB,iBAAiBF,EAAYhS,GAEpC,MAAMD,EAAcC,EAAiBnF,MAAMzH,MACvB,OAAhB2M,GACFnY,KAAKqY,kBAAkBF,EAAaC,EAEvC,EACD,8BAAAmS,CAA+BpS,EAAoBC,GACjDpY,KAAKkY,kBAAkBC,EAAaC,EACrC,EACD,6BAAAoS,CAA8BrS,EAAoBC,GAChDpY,KAAKqY,kBAAkBF,EAAaC,EACrC,EACD,iBAAAF,CAAkBC,EAAoBC,GAErC,EACD,iBAAAC,CAAkBF,EAAoBC,GAErC,EACD,6BAAAqS,CAA8BL,EAAuBhS,GACnDpY,KAAKqqB,iBAAiBD,EAAYhS,EACnC,EACD,4BAAAsS,CAA6BN,EAAuBhS,GAClDpY,KAAKsqB,iBAAiBF,EAAYhS,EACnC,EACD,gBAAAiS,CAAiBD,EAAuBhS,GAEvC,EACD,gBAAAkS,CAAiBF,EAAuBhS,GAEvC,KASFuS,EAAA,CAAApS,EAAAA,SAAS,CAACC,YAAaoS,EAAAA,oBA0NvBtS,EAAA,CAAAC,EAAAA,SAAS,CACRC,YAAaC,EAAAA,eACbrN,UAAU,EACV,aAAAsN,CAAcC,EAA+BC,GACnB,OAApBA,GACGD,EAAgByK,WAAaxK,EAAgBwK,UAC7CzK,EAAgBtE,WAAWlM,SAAWyQ,EAAgBvE,WAAWlM,QACtEnI,KAAK4G,MAAMiS,cAAcxK,EAAWyK,WAAAA,aAEvC,EACD,qBAAAC,CAAsBJ,EAA+BC,GACnD5Y,KAAK0Y,cAAcC,EAAiBC,EACrC,EACD,oBAAAI,CAAqBL,EAA+BC,GAClD5Y,KAAK0Y,cAAcC,EAAiBC,EACrC,KApuBHzb,EAAS,KAAA,KAAA+nB,EAAA,CAAApnB,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqY,WAAArhB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqY,WAAyC/gB,CAAAA,IAAAghB,EAAArb,GAclD9H,EAAkB,KAAA,KAAAgoB,EAAA,CAAArnB,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAuY,OAAAvhB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAuY,OAA+DjhB,CAAAA,IAAAkhB,EAAAvb,GAejF9H,EAAkB,KAAA,KAAAooB,EAAA,CAAAznB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyY,MAAAzhB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyY,MAAwEnhB,CAAAA,IAAAohB,EAAAzb,GAe1F9H,EAAkB,KAAA,KAAAyoB,EAAA,CAAA9nB,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2Y,OAAA3hB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2Y,OAAqGrhB,CAAAA,IAAAshB,EAAA3b,GA2BvH9H,EAAkB,KAAA,KAAA2oB,EAAA,CAAAhoB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6Y,MAAA7hB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6Y,MAAmGvhB,CAAAA,IAAAwhB,EAAA7b,GA+GrH9H,EAAS,KAAA,KAAAipB,EAAA,CAAAtoB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+Y,SAAA/hB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+Y,SAAoFzhB,CAAAA,IAAA0hB,EAAA/b,GAY7F9H,EAAS,KAAA,KAAAwpB,EAAA,CAAA7oB,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiZ,YAAAjiB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiZ,YAAkE3hB,CAAAA,IAAA4hB,EAAAjc,GAS3E9H,EAAS,KAAA,KAAAypB,EAAA,CAAA9oB,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmZ,YAAAniB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmZ,YAAqC7hB,CAAAA,IAAA8hB,EAAAnc,GAe9C9H,EAAkB,KAAA,KAAA0pB,EAAA,CAAA/oB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqZ,MAAAriB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqZ,MAAwE/hB,CAAAA,IAAAgiB,EAAArc,GAwD1F9H,EAAkB,KAAA,KAAAgqB,EAAA,CAAArpB,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAuZ,OAAAviB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAuZ,OAGhBjiB,CAAAA,IAAAkiB,EAAAvc,GA8BF9H,EAAkB,KAAA,KAAAgrB,EAAA,CAAArqB,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyZ,OAAAziB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyZ,OAAiGniB,CAAAA,IAAAoiB,EAAAzc,GA6BnH9H,EAAkB,KAAA,KAAAyrB,EAAA,CAAA9qB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2Z,MAAA3iB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2Z,MAAmGriB,CAAAA,IAAAsiB,EAAA3c,GAKrH9H,EAAS,KAAA,KAAA+rB,EAAA,CAAAprB,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6Z,YAAA7iB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6Z,YAA0CviB,CAAAA,IAAAwiB,EAAA7c,GAuCnD9H,EAAS,KAAA,KAAAwZ,EAAA,CAAA7Y,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqL,OAAArU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqL,OAGP/T,CAAAA,IAAAgU,EAAArO,GA6DF9H,EAAS,KAAA,KAAAqZ,EAAA,CAAA1Y,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmL,OAAAnU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmL,OAKP7T,CAAAA,IAAA8T,EAAAnO,GAmDF9H,EAAS,KAAA,KAAA8a,EAAA,CAAAna,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyL,OAAAzU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyL,OAKPnU,CAAAA,IAAAoU,EAAAzO,GAGF9H,EAAS,KAAA,KAAAwtB,EAAA,CAAA7sB,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+Z,UAAA/iB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+Z,UAA6CziB,CAAAA,IAAA0iB,EAAA/c,GA0OtD9H,EAAS,KAAA,KAAAmb,EAAA,CAAAxa,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2L,QAAA3U,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2L,QAEPrU,CAAAA,IAAAsU,EAAA3O,GAOcH,EAAAmU,WAA8BmH,EAAAA,gBAAgBnH,WAAa5K,EAAWyK,WAAAA,aAAAA,CA1vBtD,EAAA,GCjBrB+R,EAAe,2FAAf,OAAA/lB,EAAA,cAAwB4P,oDAgC1B1U,KAAAmF,QAA6D/F,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAoF,OAAA,IAoF7DpF,KAAA8qB,SAOP1rB,EAAAY,KAAA+qB,OAAA,GAGO/qB,KAAAgrB,iBAA2C5rB,EAAAY,KAAAirB,OAAA,GAkD3CjrB,KAAAkrB,IAGP9rB,EAAAY,KAAAmrB,OAAA,GA4BgBnrB,KAAAiT,MAAwE7T,EAAAY,KAAAkT,OAAA,GA6BjFlT,KAAAorB,SAAoChsB,EAAAY,KAAAqrB,OAAA,GA2CpCrrB,KAAAsrB,MAAuDlsB,EAAAY,KAAAurB,OAAA,GAgBvDvrB,KAAAwrB,YAAsCpsB,EAAAY,KAAAyrB,OAAA,GAkBtCzrB,KAAA0rB,WAEPtsB,EAAAY,KAAA2rB,OAAA,GAkBO3rB,KAAA4rB,cAEPxsB,EAAAY,KAAA6rB,OAAA,EACH,CA3JW,aAAAC,CAAcC,GACtB,MAAMb,EAAM,IAAIc,SAASC,IAAI,CAC3BC,UAAWH,EAAc9D,KACzBkE,SAAS,EACTC,OAAQ,CAACC,IAAK,EAAGC,IAAK,GACtBC,KAAM,IAER,OAAO,IAAIC,EAAAA,WAAWtB,EACvB,GA1LA7kB,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACXiD,UAAU,EACV2B,UAAU,EACV,eAAA3E,CAAgBC,GACdA,EAAY4K,QAAQtR,KACrB,EACD,cAAAmP,CAAezI,GACb1G,KAAK4G,MAAM6lB,QAAQ1lB,UAAUL,EAAY+lB,SACzC,MAAMC,EAAWhmB,EAAYZ,SAAS6mB,EAAAA,UACrB,OAAbD,GACF1sB,KAAK4G,MAAMkkB,SAAS/U,iBAAAA,EAAoB2W,EAE3C,EACD,eAAA/c,CAAgBjJ,GACVA,EAAYZ,SAAS6mB,EAAAA,YAAc3sB,KAAK4G,MAAMkkB,SAAStf,OACzDxL,KAAK4G,MAAMkkB,SAAS1b,SAAS,MAE/BpP,KAAK4G,MAAM6lB,QAAQxlB,YAAYP,EAAY+lB,QAC5C,EACD,cAAAvlB,CAAeR,GACbA,EAAY+K,UAAUzR,KACvB,EACD,mBAAA4P,CAAoBC,EAAoBlJ,GAClCkJ,aAAuB8c,EAAAA,UACzB3sB,KAAK4G,MAAMkkB,SAAS1b,SAASS,EAEhC,KAIF+c,EAAA,CAAAhW,EAAAA,uBAAuB,CACtBkF,eAAgB+Q,EAAAA,cAChBzhB,UAAU,EACVge,gBAAgB0D,GACPA,EAAcC,IAEvB,IAAA9tB,GACEe,KAAKgtB,SAAU,CAChB,EACD,mBAAA9Q,CAAoB4Q,GAClB,MAAMJ,EAAWI,EAAcC,IAAIvhB,MAClB,OAAbkhB,GACF1sB,KAAKitB,eAAeP,EAAUI,GAEhC,MAAMI,EAAUJ,EAAcC,IAAIxd,aAClCvP,KAAKmtB,cAAcD,EAASJ,GAC5B9sB,KAAK4G,MAAMskB,IAAI7U,mBAAmB+W,OAAO5K,cAAcsK,EACxD,EACD,oBAAA7G,CAAqB6G,GACnB,MAAMO,EAAgBrtB,KAAK4G,MAAMskB,IAAIxH,WACf,OAAlB2J,GACFA,EAAcD,OAAO1X,iBAAiBoX,GAExC,MAAMI,EAAUJ,EAAcC,IAAI/c,KAClB,OAAZkd,GACFltB,KAAKstB,cAAcJ,EAASJ,GAE9B,MAAMJ,EAAWI,EAAcC,IAAIvhB,MAClB,OAAbkhB,GACF1sB,KAAKutB,eAAeb,EAAUI,EAEjC,EACD,4BAAAU,CAA6Bd,EAAoBI,GAC/C9sB,KAAKitB,eAAeP,EAAUI,EAC/B,EACD,2BAAAW,CAA4Bf,EAAoBI,GAC9C9sB,KAAKutB,eAAeb,EAAUI,EAC/B,EACD,cAAAG,CAAeP,EAAoBI,GACjCJ,EAASpb,QAAQtR,MACjB,MAAM0tB,EAAiBhB,EAASgB,eAAepuB,MAC/C,IAAIquB,EACmB,OAAnBD,GAA+D,QAAnCC,EAAU3tB,KAAK4G,MAAMskB,IAAIlb,OACvD2d,EAAQC,OAAOF,EAAgB1tB,KAAKgtB,SACpChtB,KAAKgtB,SAAU,GAEfhtB,KAAK4G,MAAMokB,iBAAiBhf,cAAa,EAE5C,EACD,cAAAuhB,CAAeb,EAAoBI,GACjC9sB,KAAK4G,MAAMokB,iBAAiBhf,cAAa,GACzC0gB,EAASjb,UAAUzR,MACnBA,KAAK0V,kBACN,EACD,2BAAAmY,CAA4BX,EAAkBJ,GAC5C9sB,KAAKmtB,cAAcD,EAASJ,EAC7B,EACD,0BAAAgB,CAA2BZ,EAAkBJ,GAC3C9sB,KAAKstB,cAAcJ,EAASJ,EAC7B,EACD,aAAAK,CAAcD,EAAkBJ,GAE/B,EACD,aAAAQ,CAAcJ,EAAkBJ,GAE/B,EACD,8BAAAiB,CAA+BL,GAC7B,IAAIC,EACmB,OAAnBD,GAA2B1tB,KAAK4G,MAAMokB,iBAAiB1rB,OAChB,QAAnCquB,EAAU3tB,KAAK4G,MAAMskB,IAAIlb,QAC/B2d,EAAQC,OAAOF,EAAgB1tB,KAAKgtB,SACpChtB,KAAKgtB,SAAU,EACfhtB,KAAK4G,MAAMokB,iBAAiBhf,cAAa,GAE5C,EACD,gBAAAqJ,CAAiB7J,GACf,gBAAIA,EACKA,EAAMwiB,sBAERnoB,MAAMwP,iBAAiB7J,EAC/B,QAWFtF,EAAAA,SAAS,CAACC,UAAW0G,QAASvN,OAAO,KAGrC2uB,EAAA,CAAArX,EAAAA,uBAAuB,CACtBkF,eAAgBoS,EAAAA,cAChBhf,UAAU,EACV9D,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMqM,MAAMjD,IACzB,EACDoZ,gBAAgBiE,GACPA,EAAcnC,IAEvB,cAAArU,CAAewW,GACb,MAAMvI,EAAY9kB,KAAK4G,MAAMqM,MAAMjD,KACjB,OAAd8U,GACF9kB,KAAKmuB,oBAAoBrJ,EAAWuI,EAEvC,EACD,gBAAAe,CAAiBf,GACf,MAAMvI,EAAY9kB,KAAK4G,MAAMqM,MAAMjD,KACjB,OAAd8U,GACF9kB,KAAKquB,oBAAoBvJ,EAAWuI,EAEvC,EACD,oBAAApR,CAAqBoR,GACnBrtB,KAAK4G,MAAMC,cAAc,0BAA2BwmB,EAAertB,KAAK4G,MACzE,EACD,mBAAAwV,CAAoBiR,GAClBrtB,KAAK4G,MAAMC,cAAc,yBAA0BwmB,EAAertB,KAAK4G,MACxE,EACD,2BAAA0nB,CAA4BX,EAAkBN,GAC5CM,EAAQY,OAAOhf,aAAavD,aAAa,CACvCwiB,eAAe,GAElB,EACD,mBAAAL,CAAoBpC,EAAyBsB,GAC3C,IAAIM,EAAUN,EAAcnC,IAAIlb,KAChB,OAAZ2d,IACFA,EAAU3tB,KAAK4G,MAAMklB,cAAcC,GACnCsB,EAAcnC,IAAIxN,QAAQiQ,IAE5BN,EAAcnB,UAAUxO,QAAQqO,EACjC,EACD,mBAAAsC,CAAoBtC,EAAyBsB,GAC3C,MAAMM,EAAUN,EAAcnC,IAAIlb,KAClB,OAAZ2d,GACFA,EAAQzB,UAAUxO,QAAQ,KAE7B,KAiBF7I,EAAA,CAAA/D,EAAAA,aAAa,CACZtH,SAAS,EACT,QAAAuH,CAAS+T,GACPjf,MAAMkL,SAAS+T,GACfA,EAAUQ,UAAUtZ,cAAa,GACjC,MAAMqhB,EAAgBrtB,KAAK4G,MAAMskB,IAAI7U,mBACrCrW,KAAK4G,MAAMskB,IAAIiD,oBAAoBrJ,EAAWuI,EAC/C,EACD,UAAAoB,CAAW3J,GACT,MAAMuI,EAAgBrtB,KAAK4G,MAAMskB,IAAIxH,WACf,OAAlB2J,GACFrtB,KAAK4G,MAAMskB,IAAImD,oBAAoBvJ,EAAWuI,GAEhDxnB,MAAM4oB,WAAW3J,EAClB,KAIF4J,EAAA,CAAA3c,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,QAAAwB,CAAS6d,GACP/oB,MAAMkL,SAAS6d,GACf,MAAMvB,EAAgBrtB,KAAK4G,MAAMskB,IAAI7U,mBACrCrW,KAAK4G,MAAMskB,IAAIiD,oBAAoBS,EAAcvB,EAClD,EACD,UAAAoB,CAAWG,GACT,MAAMvB,EAAgBrtB,KAAK4G,MAAMskB,IAAIxH,WACf,OAAlB2J,GACFrtB,KAAK4G,MAAMskB,IAAImD,oBAAoBO,EAAcvB,GAEnDxnB,MAAM4oB,WAAWG,EAClB,EACD,UAAAtc,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD6iB,UAAW,CAAC,aACZC,UAAW,EACXC,WAAY,EACZC,eAAgB,GAEnB,KAIFC,EAAA,CAAAld,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVvjB,UAAU,EACV,QAAA2F,CAASme,GACPlvB,KAAK4G,MAAMwkB,SAAS5b,WAAW0f,EAChC,EACD,aAAAhe,CAAcge,EAAsB/d,GAClCnR,KAAK4G,MAAM4kB,YAAY9N,QAAQwR,EAAUxS,OAAO1M,MAChDhQ,KAAK4G,MAAM8kB,WAAWhO,QAAQwR,EAAUC,YAAYnf,MACpDhQ,KAAK4G,MAAMglB,cAAclO,QAAQwR,EAAUE,eAAepf,KAC3D,EACD,cAAA0G,CAAewY,GACblvB,KAAK4G,MAAM4kB,YAAY9N,QAAQ,MAC/B1d,KAAK4G,MAAM8kB,WAAWhO,QAAQ,MAC9B1d,KAAK4G,MAAMglB,cAAclO,QAAQ,KAClC,EACD,oBAAA2R,CAAqBxR,GACnB7d,KAAK4G,MAAM4kB,YAAY9N,QAAQG,EAChC,EACD,mBAAAyR,CAAoBzR,GAClB7d,KAAK4G,MAAM4kB,YAAY9N,QAAQ,KAChC,EACD,yBAAA6R,CAA0BnZ,GACxBpW,KAAK4G,MAAM8kB,WAAWhO,QAAQtH,EAC/B,EACD,wBAAAoZ,CAAyBpZ,GACvBpW,KAAK4G,MAAM8kB,WAAWhO,QAAQ,KAC/B,EACD,4BAAA+R,CAA6BC,GAC3B1vB,KAAK4G,MAAMglB,cAAclO,QAAQgS,EAClC,EACD,2BAAAC,CAA4BD,GAC1B1vB,KAAK4G,MAAMglB,cAAclO,QAAQ,KAClC,EACD,YAAAnM,CAAa2d,GACXlvB,KAAK4G,MAAM0K,QAAQ4d,EACpB,EACD,eAAA1d,CAAgB0d,GACdlvB,KAAK4G,MAAM6K,UAAUyd,EACtB,KAIFU,EAAA,CAAA7d,EAAAA,QAAQ,CACPC,SAAU6d,EAAAA,SACV3d,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,aAAamN,OAAOvK,UAC7C,EACD,QAAApB,CAAS8M,GACPA,EAAW7M,MAAMwd,cAAcxiB,aAAa,QAC5ChM,KAAK4G,MAAM0kB,MAAM/b,aAAamN,OAAOgB,QAAQG,EAC9C,EACD,UAAAvL,GACE,OAAOtS,KAAK4G,MAAM0kB,MAAM/b,aAAamN,OAAOpK,YAC7C,KAIFwd,EAAA,CAAA/d,EAAAA,QAAQ,CACPC,SAAU6d,EAAAA,SACV3d,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,aAAa4f,YAAYhd,UAClD,EACD,QAAApB,CAASqF,GACPpW,KAAK4G,MAAM0kB,MAAM/b,aAAa4f,YAAYzR,QAAQtH,EACnD,EACD,OAAA2Z,CAAQ1qB,GACN,OAAOrF,KAAK4G,MAAM0kB,MAAM/b,aAAa4f,YAAYnwB,IAAIqG,EACtD,EACD,UAAAiN,GACE,OAAOtS,KAAK4G,MAAM0kB,MAAM/b,aAAa4f,YAAY7c,YAClD,KAMF0d,EAAA,CAAAje,EAAAA,QAAQ,CACPC,SAAU6d,EAAAA,SACV3d,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,aAAa6f,eAAejd,UACrD,EACD,QAAApB,CAAS2e,GACP1vB,KAAK4G,MAAM0kB,MAAM/b,aAAa6f,eAAe1R,QAAQgS,EACtD,EACD,OAAAK,CAAQE,GACN,OAAOjwB,KAAK4G,MAAM0kB,MAAM/b,aAAa6f,eAAepwB,IAAIixB,EACzD,EACD,UAAA3d,GACE,OAAOtS,KAAK4G,MAAM0kB,MAAM/b,aAAa6f,eAAe9c,YACrD,KA3SHnV,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAA6D7F,CAAAA,IAAA8F,EAAAH,GAoFtE9H,EAAS,KAAA,KAAAyvB,EAAA,CAAA9uB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA8iB,SAAA9rB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA8iB,SAOPxrB,CAAAA,IAAAyrB,EAAA9lB,GAGF9H,EAAS,KAAA,KAAA+yB,EAAA,CAAApyB,KAAA,QAAAO,KAAA,mBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,qBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAgjB,iBAAAhsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAgjB,iBAA2C1rB,CAAAA,IAAA2rB,EAAAhmB,GAkDpD9H,EAAS,KAAA,KAAA8wB,EAAA,CAAAnwB,KAAA,QAAAO,KAAA,MAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,QAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAkjB,IAAAlsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAkjB,IAGP5rB,CAAAA,IAAA6rB,EAAAlmB,GA4BF9H,EAAkB,KAAA,KAAA0X,EAAA,CAAA/W,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiL,MAAAjU,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiL,MAAwE3T,CAAAA,IAAA4T,EAAAjO,GA6B1F9H,EAAS,KAAA,KAAAuxB,EAAA,CAAA5wB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAojB,SAAApsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAojB,SAAoC9rB,CAAAA,IAAA+rB,EAAApmB,GA2C7C9H,EAAS,KAAA,KAAA8xB,EAAA,CAAAnxB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsjB,MAAAtsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsjB,MAAuDhsB,CAAAA,IAAAisB,EAAAtmB,GAgBhE9H,EAAS,KAAA,KAAAyyB,EAAA,CAAA9xB,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAwjB,YAAAxsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAwjB,YAAsClsB,CAAAA,IAAAmsB,EAAAxmB,GAkB/C9H,EAAS,KAAA,KAAA2yB,EAAA,CAAAhyB,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA0jB,WAAA1sB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA0jB,WAEPpsB,CAAAA,IAAAqsB,EAAA1mB,GAkBF9H,EAAS,KAAA,KAAA6yB,EAAA,CAAAlyB,KAAA,QAAAO,KAAA,gBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,kBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA4jB,cAAA5sB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA4jB,cAEPtsB,CAAAA,IAAAusB,EAAA5mB,IA/UwB,EAAA,GCxBfkrB,EAAgB,uBAAhB,OAAArrB,EAAA,MAAAqrB,UAAyBtrB,EACpC,WAAAjF,GACEiG,QACA7F,KAAKgF,GAAGgH,aAAa,SACrBhM,KAAKqF,MAAM2G,aAAa,SACxBhM,KAAKuF,KAAKyG,aAAamkB,EAAiB5qB,KACzC,CAEQ,mBAAAG,GACP,OAAQ1F,KAAKJ,YAAwCwwB,kBACtD,CAID,uBAAOA,GACL,IAAIA,EAYJ,OAXIjyB,OAAOkyB,eAAe5wB,KAAKO,KAAM,sBACnCowB,EAAmBpwB,KAAKswB,2BAEtBF,IACFA,EAAmBpwB,KAAKuwB,yBACxBpyB,OAAOgB,eAAea,KAAM,mBAAoB,CAC9CV,MAAO8wB,EACPI,YAAY,EACZC,cAAc,KAGXL,CACR,CAED,6BAAOG,GACL,OAAO,IAAI1F,CACZ,CAID,eAAWtlB,GACT,OAAO+T,EAAAA,WAAW3U,OAAO,GAAI,GAAI,kQAClC,GAHAkV,EAAAA,CAAAA,EAAAA,MACD1c,EAAA2H,EAAA,KAAA4rB,EAAA,CAAA5yB,KAAA,SAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAWzC,OAEV,KAAAwU,GAtCU3a,EAAgB0F,EAAAiV,GAapBjV,EAAgBwrB,sBAA4C,EAAAxrB,CAbxC,EAAA,GCahB6rB,EAAgB,4CAAhB,OAAA7rB,EAAA,cAAyB8rB,kDAc3B5wB,KAAA6wB,UAA2CzxB,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAA8wB,OAAA,IAS3C9wB,KAAA+wB,UAA4C3xB,EAAAY,KAAAgxB,OAAA,GAS5ChxB,KAAAixB,QAA0C7xB,EAAAY,KAAAkxB,OAAA,EAUpD,CAPC,aAAIC,GACF,OAAOjrB,EAAAA,SAAS8C,QACjB,CAEQ,mBAAAglB,GACP,OAAO,IAAIoD,CACZ,GAtCAC,EAAA,CAAAnrB,EAAAA,SAAS,CACRC,UAAWmrB,EAAAA,SACXhyB,MAAO,KACP,WAAA8H,CAAYypB,GACV7wB,KAAK4G,MAAMC,cAAc,sBAAuBgqB,EAAU7wB,KAAK4G,OAC/D5G,KAAK4G,MAAM8mB,eAAe1hB,aAAa6kB,GACtB,OAAbA,GACF7wB,KAAK4G,MAAMmqB,UAAU/kB,aAAa6kB,EAASU,OAAOnF,OAErD,KAIFoF,EAAA,CAAAtrB,EAAAA,SAAS,CACRC,UAAWsrB,EAAAA,SACXnyB,MAAO,KACP,WAAA8H,CAAY2pB,GACV/wB,KAAK4G,MAAMC,cAAc,uBAAwBkqB,EAAW/wB,KAAK4G,MAClE,KAIF8qB,EAAA,CAAAxrB,EAAAA,SAAS,CACRC,UAAWsB,EAAAA,SACXnI,MAAO,KACP,WAAA8H,CAAY6pB,GACVjxB,KAAK4G,MAAMC,cAAc,qBAAsBoqB,EAASjxB,KAAK4G,MAC9D,QAIFV,EAAAA,SAAS,CAACC,UAAWwrB,EAAAA,UAAWryB,MAAO,QACxCnC,EAAA2H,EAAA,KAAA8sB,EAAA,CAAA9zB,KAAA,SAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAImpB,YAEH,KAAAlsB,GAvBD9H,EAAS,KAAA,KAAAk0B,EAAA,CAAAvzB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6oB,SAAA7xB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6oB,SAA2CvxB,CAAAA,IAAAwxB,EAAA7rB,GASpD9H,EAAS,KAAA,KAAAq0B,EAAA,CAAA1zB,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+oB,UAAA/xB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+oB,UAA4CzxB,CAAAA,IAAA0xB,EAAA/rB,GASrD9H,EAAS,KAAA,KAAAu0B,EAAA,CAAA5zB,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAipB,QAAAjyB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAipB,QAA0C3xB,CAAAA,IAAA4xB,EAAAjsB,IAhCxB,EAAA,GCmBhBmsB,EAAqB,oGAArB,OAAAtsB,EAAA,cAA8B+sB,uDAUhC7xB,KAAAkC,QAAgC9C,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAyF,OAAA,IAgChCzF,KAAAmF,OAA6D/F,EAAAY,KAAAoF,OAAA,GAmB7DpF,KAAAyO,WAEPrP,EAAAY,KAAA0O,OAAA,GAqCgB1O,KAAA+sB,IAEhB3tB,EAAAY,KAAA8xB,OAAA,GA+CO9xB,KAAA+xB,MAA6D3yB,EAAAY,KAAAgyB,OAAA,GAc7DhyB,KAAA6wB,SAA2CzxB,EAAAY,KAAA8wB,OAAA,GAkF3C9wB,KAAAuF,KAA0DnG,EAAAY,KAAAwF,OAAA,GAa1DxF,KAAAixB,QAA0C7xB,EAAAY,KAAAkxB,OAAA,GAO1ClxB,KAAA+wB,UAA4C3xB,EAAAY,KAAAgxB,OAAA,EAuBtD,CAtHC,QAAIiB,GACF,OAAO/rB,EAAAA,SAAS8C,QACjB,CAOD,eAAIkpB,GACF,OAAOhsB,EAAAA,SAAS8C,QACjB,CAOD,UAAImpB,GACF,OAAOjsB,EAAAA,SAAS8C,QACjB,CAOD,iBAAIopB,GACF,OAAOlsB,EAAAA,SAAS8C,QACjB,CAOD,eAAIqpB,GACF,OAAOnsB,EAAAA,SAAS8C,QACjB,CA+DD,cAAIuJ,GACF,OAAOrM,EAAAA,SAAS8C,QACjB,CAOD,aAAI0J,GACF,OAAOxM,EAAAA,SAAS8C,QACjB,CAGD,aAAImoB,GACF,OAAOjrB,EAAAA,SAAS8C,QACjB,GA5RApB,EAAA,CAAA1B,EAAAA,SAAS,CACRC,UAAWxG,EACXL,MAAOK,EAAOE,UACd,WAAAuH,CAAYlF,GACVlC,KAAK4G,MAAMmmB,IAAI9d,aAAa/M,EAC7B,KAIFmE,EAAA,CAAAC,EAAAA,SAAS,CACRC,UAAWC,EACX0I,UAAU,EACV9D,UAAU,EACV,eAAA3E,CAAgBC,GACd1G,KAAK4G,MAAMC,cAAc,kCAAmCH,EAAa1G,KAAK4G,MAC/E,EACD,cAAAuI,CAAezI,GACb1G,KAAK4G,MAAM6H,WAAWW,SAAS1I,EAAYZ,SAASC,EAAAA,iBACrD,EACD,SAAAe,CAAUJ,GACR1G,KAAK4G,MAAM1E,OAAO6E,UAAUL,EAAYxE,QACxClC,KAAK4G,MAAM6H,WAAWW,SAAS1I,EAAYZ,SAASC,EAAAA,iBACrD,EACD,WAAAiB,CAAYN,GACV1G,KAAK4G,MAAM6H,WAAWW,SAAS,MAC/BpP,KAAK4G,MAAM1E,OAAO+E,YAAYP,EAAYxE,OAC3C,EACD,eAAAyN,CAAgBjJ,GACd1G,KAAK4G,MAAM6H,WAAWW,SAAS,KAChC,EACD,cAAAlI,CAAeR,GACb1G,KAAK4G,MAAMC,cAAc,iCAAkCH,EAAa1G,KAAK4G,MAC9E,EACD,mBAAAgJ,CAAoBC,EAAoBlJ,GAClCkJ,aAAuB9J,EAAAA,iBACzB/F,KAAK4G,MAAM6H,WAAWW,SAASS,EAElC,KAIFO,EAAA,CAAA9J,EAAAA,SAAS,CACRC,UAAWR,EAAAA,gBACXqF,UAAU,EACV,SAAAtE,CAAUuJ,GACRrQ,KAAKsyB,eAAejiB,EAAgBE,SACrC,EACD,cAAAC,CAAeC,GACbzQ,KAAKsyB,gBAAe,EACrB,EACD,iBAAA3hB,GACE3Q,KAAKsyB,gBAAe,EACrB,EACD,cAAAA,CAAe/hB,GACbvQ,KAAK4G,MAAMsrB,YAAYlmB,aAAauE,EAAW,IAAO,IACtDvQ,KAAK4G,MAAMwrB,cAAcpmB,aAAauE,EAAW,GAAM,GACxD,KAMFgiB,EAAA,CAAAzhB,EAAAA,aAAa,CACZtH,SAAS,EACTjD,UAAWoqB,EACX,SAAA7pB,CAAU4lB,GACwB,OAA5B1sB,KAAK4G,MAAMzB,OAAOqG,OACpBxL,KAAK4G,MAAMzB,OAAOiK,SAASsd,EAAS5mB,SAASU,IAE/CxG,KAAK4G,MAAM8mB,eAAe3mB,UAAU2lB,EAASgB,gBAC7C1tB,KAAK4G,MAAMiqB,SAAS9pB,UAAU2lB,EAASmE,UACvC7wB,KAAK4G,MAAMmqB,UAAUhqB,UAAU2lB,EAASqE,WACxC/wB,KAAK4G,MAAMqqB,QAAQlqB,UAAU2lB,EAASuE,SACtCjxB,KAAK4G,MAAMuqB,UAAUpqB,UAAU2lB,EAASyE,UACzC,EACD,WAAAnqB,CAAY0lB,GACV1sB,KAAK4G,MAAM8mB,eAAezmB,YAAYylB,EAASgB,gBAC/C1tB,KAAK4G,MAAMiqB,SAAS5pB,YAAYylB,EAASmE,UACzC7wB,KAAK4G,MAAMmqB,UAAU9pB,YAAYylB,EAASqE,WAC1C/wB,KAAK4G,MAAMqqB,QAAQhqB,YAAYylB,EAASuE,SACxCjxB,KAAK4G,MAAMuqB,UAAUlqB,YAAYylB,EAASyE,WACtCnxB,KAAK4G,MAAMzB,OAAOqG,QAAUkhB,EAAS5mB,SAASU,IAChDxG,KAAK4G,MAAMzB,OAAOiK,SAAS,KAE9B,EACD4C,SAAUwgB,EAAAA,QACV,QAAAzhB,CAASmc,GACPrnB,MAAMkL,SAASmc,GACfltB,KAAKiP,aAAajP,KAAK4G,MAAM1E,OAAO5C,MACrC,EACD,YAAA2P,CAAa/M,GACX,MAAMgrB,EAAUltB,KAAKgQ,KACL,OAAZkd,GACFA,EAAQtb,WAAWlR,EAAKmR,KAAAA,QAAS3P,EAAOzB,aAE3C,KAMFgyB,EAAA,CAAA1gB,EAAAA,QAAQ,CACPC,SAAU0gB,EAAAA,aACVtnB,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMmmB,IAAIxd,YACvB,EACD,WAAAojB,CAAYhnB,EAAcinB,EAAqB50B,EAAqBD,GACnD,OAAXC,IACFA,EAASgC,KAAK4G,MAAMrB,KAAKyK,MAE3BrE,EAAOgnB,YAAYC,EAAO50B,EAAQD,EACnC,EACD,QAAAgT,CAAS8hB,GACPhtB,MAAMkL,SAAS8hB,GACfA,EAAUhC,SAAS9pB,UAAU/G,KAAK4G,MAAMiqB,UACxCgC,EAAUZ,KAAKlrB,UAAU/G,KAAK4G,MAAMqrB,MACpCY,EAAUX,YAAYnrB,UAAU/G,KAAK4G,MAAMsrB,aAC3CW,EAAUV,OAAOprB,UAAU/G,KAAK4G,MAAMurB,QACtCU,EAAUT,cAAcrrB,UAAU/G,KAAK4G,MAAMwrB,eAC7CS,EAAUR,YAAYtrB,UAAU/G,KAAK4G,MAAMyrB,aAC3CQ,EAAU1B,UAAUpqB,UAAU/G,KAAK4G,MAAMuqB,UAC1C,EACD,UAAA1C,CAAWoE,GACTA,EAAUhC,SAAS5pB,YAAYjH,KAAK4G,MAAMiqB,UAC1CgC,EAAUZ,KAAKhrB,YAAYjH,KAAK4G,MAAMqrB,MACtCY,EAAUX,YAAYjrB,YAAYjH,KAAK4G,MAAMsrB,aAC7CW,EAAUV,OAAOlrB,YAAYjH,KAAK4G,MAAMurB,QACxCU,EAAUT,cAAcnrB,YAAYjH,KAAK4G,MAAMwrB,eAC/CS,EAAUR,YAAYprB,YAAYjH,KAAK4G,MAAMyrB,aAC7CQ,EAAU1B,UAAUlqB,YAAYjH,KAAK4G,MAAMuqB,WAC3CtrB,MAAM4oB,WAAWoE,EAClB,EACD,YAAAC,CAAaD,GAEZ,EACD,YAAAE,CAAaF,GAEZ,EACD,YAAAlZ,CAAa7F,EAA6BC,EAAqB8e,GAE9D,EACD,gBAAAG,CAAiBlf,EAA6B+e,GAE7C,KAIFxB,EAAA,CAAAnrB,EAAAA,SAAS,CACRC,UAAWmrB,EAAAA,SACXhyB,MAAO,KACP,WAAA8H,CAAYypB,GACV7wB,KAAK4G,MAAM8mB,eAAe1hB,aAAa6kB,GACtB,OAAbA,EACF7wB,KAAK4G,MAAMmrB,MAAMviB,aAEjBxP,KAAK4G,MAAMmrB,MAAMkB,YAEpB,KAIFC,EAAA,CAAAhtB,EAAAA,SAAS,CACRC,UAAWgtB,EAAAA,UACX7zB,MAAOqT,EAAKC,KAAAA,YACZwgB,YAAY,KAMbC,EAAA,CAAAntB,EAAAA,SAAS,CACRC,UAAWmtB,EAAAA,WACXh0B,MAAO,GACP8zB,YAAY,KAMbG,EAAA,CAAArtB,EAAAA,SAAS,CACRC,UAAWgtB,EAAAA,UACX7zB,MAAOqT,EAAKC,KAAAA,YACZwgB,YAAY,KAMbI,EAAA,CAAAttB,EAAAA,SAAS,CACRC,UAAWmtB,EAAAA,WACXh0B,MAAO,GACP8zB,YAAY,KAMbK,EAAA,CAAAvtB,EAAAA,SAAS,CACRC,UAAWutB,EAAAA,OACXp0B,MAAO,EACP8zB,YAAY,KAMb5rB,EAAA,CAAAuK,EAAAA,QAAQ,CACPC,SAAU2hB,EAAAA,YACVvoB,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMmmB,IAAIxd,YACvB,EACD,QAAAwB,CAAS6iB,GACP/tB,MAAMkL,SAAS6iB,GACfA,EAAS7C,UAAUhqB,UAAU/G,KAAK4G,MAAMmqB,WACxC6C,EAASrhB,WAAWxL,UAAU/G,KAAK4G,MAAM2L,YACzCqhB,EAASlhB,UAAU3L,UAAU/G,KAAK4G,MAAM8L,WACxCkhB,EAASnkB,SAAS1I,UAAU/G,KAAK4G,MAAMqqB,SACvC2C,EAASzC,UAAUpqB,UAAU/G,KAAK4G,MAAMuqB,UACzC,EACD,UAAA1C,CAAWmF,GACTA,EAAS7C,UAAU9pB,YAAYjH,KAAK4G,MAAMmqB,WAC1C6C,EAASrhB,WAAWtL,YAAYjH,KAAK4G,MAAM2L,YAC3CqhB,EAASlhB,UAAUzL,YAAYjH,KAAK4G,MAAM8L,WAC1CkhB,EAASnkB,SAASxI,YAAYjH,KAAK4G,MAAMqqB,SACzC2C,EAASzC,UAAUlqB,YAAYjH,KAAK4G,MAAMuqB,WAC1CtrB,MAAM4oB,WAAWmF,EAClB,EACD,YAAAd,CAAac,GAEZ,EACD,YAAAb,CAAaa,GAEZ,EACD,YAAAja,CAAa7F,EAA6BC,EAAqB6f,GAE9D,EACD,gBAAAZ,CAAiBlf,EAA6B8f,GAE7C,KAIFlC,EAAA,CAAAxrB,EAAAA,SAAS,CACRC,UAAWsB,EAAAA,SACXnI,MAAO,KACP,WAAA8H,CAAY7B,GACG,OAATA,EACFvF,KAAK4G,MAAMrB,KAAKiK,aAEhBxP,KAAK4G,MAAMrB,KAAK0tB,YAEnB,KAIFzB,EAAA,CAAAtrB,EAAAA,SAAS,CACRC,UAAWsrB,EAAAA,SACXnyB,MAAO,KACP8zB,YAAY,KAIbS,EAAA,CAAA3tB,EAAAA,SAAS,CACRC,UAAW2tB,EAAAA,WACXx0B,MAAOw0B,EAAAA,WAAWC,GAAG,GAAI,OAM1BC,EAAA,CAAA9tB,EAAAA,SAAS,CACRC,UAAWgtB,EAAAA,UACX7zB,MAAOqT,EAAKC,KAAAA,YACZwgB,YAAY,QAMbltB,EAAAA,SAAS,CAACC,UAAWwrB,EAAAA,UAAWryB,MAAO,QAlHxCnC,EAAA2H,EAAA,KAAAouB,EAAA,CAAAp1B,KAAA,SAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAIiqB,OAEH,KAAAhtB,GAOD9H,EAAA2H,EAAA,KAAAuuB,EAAA,CAAAv1B,KAAA,SAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAIkqB,cAEH,KAAAjtB,GAOD9H,EAAA2H,EAAA,KAAAyuB,EAAA,CAAAz1B,KAAA,SAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAImqB,SAEH,KAAAltB,GAOD9H,EAAA2H,EAAA,KAAA0uB,EAAA,CAAA11B,KAAA,SAAAO,KAAA,gBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,kBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAIoqB,gBAEH,KAAAntB,GAOD9H,EAAA2H,EAAA,KAAA2uB,EAAA,CAAA31B,KAAA,SAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAIqqB,cAEH,KAAAptB,GA+DD9H,EAAA2H,EAAA,KAAA+uB,EAAA,CAAA/1B,KAAA,SAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAIuK,aAEH,KAAAtN,GAOD9H,EAAA2H,EAAA,KAAAkvB,EAAA,CAAAl2B,KAAA,SAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAI0K,YAEH,KAAAzN,GAGD9H,EAAA2H,EAAA,KAAA8sB,EAAA,CAAA9zB,KAAA,SAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAImpB,YAEH,KAAAlsB,GArRD9H,EAAS,KAAA,KAAAyK,EAAA,CAAA9J,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA9F,OAAAlD,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA9F,OAAgC5C,CAAAA,IAAAmG,EAAAR,GAgCzC9H,EAAS,KAAA,KAAAkJ,EAAA,CAAAvI,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA7C,OAAAnG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA7C,OAA6D7F,CAAAA,IAAA8F,EAAAH,GAmBtE9H,EAAS,KAAA,KAAAiT,EAAA,CAAAtS,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAyG,WAAAzP,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAyG,WAEPnP,CAAAA,IAAAoP,EAAAzJ,GAqCF9H,EAAkB,KAAA,KAAAo1B,EAAA,CAAAz0B,KAAA,QAAAO,KAAA,MAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,QAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+kB,IAAA/tB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+kB,IAEhBztB,CAAAA,IAAAwyB,EAAA7sB,GA+CF9H,EAAS,KAAA,KAAAs1B,EAAA,CAAA30B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+pB,MAAA/yB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+pB,MAA6DzyB,CAAAA,IAAA0yB,EAAA/sB,GActE9H,EAAS,KAAA,KAAAk0B,EAAA,CAAAvzB,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6oB,SAAA7xB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6oB,SAA2CvxB,CAAAA,IAAAwxB,EAAA7rB,GAkFpD9H,EAAS,KAAA,KAAAqK,EAAA,CAAA1J,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAzC,KAAAvG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAzC,KAA0DjG,CAAAA,IAAAkG,EAAAP,GAanE9H,EAAS,KAAA,KAAAu0B,EAAA,CAAA5zB,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAipB,QAAAjyB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAipB,QAA0C3xB,CAAAA,IAAA4xB,EAAAjsB,GAOnD9H,EAAS,KAAA,KAAAq0B,EAAA,CAAA1zB,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+oB,UAAA/xB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+oB,UAA4CzxB,CAAAA,IAAA0xB,EAAA/rB,IAzQrB,EAAA,GCErBgvB,EAAmB,4KAAnB,OAAAnvB,EAAA,cAA4BovB,oDA8CrBl0B,KAAAsrB,OAAwElsB,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAurB,OAAA,IAWxEvrB,KAAA0rB,WAEhBtsB,EAAAY,KAAA2rB,OAAA,GAqBgB3rB,KAAA4rB,cAGhBxsB,EAAAY,KAAA6rB,OAAA,GAyBO7rB,KAAAm0B,WAAsC/0B,EAAAY,KAAAo0B,OAAA,GAStCp0B,KAAAq0B,YAAwCj1B,EAAAY,KAAAs0B,OAAA,GAmCxCt0B,KAAAu0B,MAAuDn1B,EAAAY,KAAAw0B,OAAA,GAmBvDx0B,KAAAy0B,WAEPr1B,EAAAY,KAAA00B,OAAA,GAkFO10B,KAAA20B,KAGPv1B,EAAAY,KAAA40B,OAAA,GAmBO50B,KAAA60B,UAEPz1B,EAAAY,KAAA80B,OAAA,GAmBO90B,KAAA+0B,WAEP31B,EAAAY,KAAAg1B,OAAA,GAgBOh1B,KAAAi1B,WAAsC71B,EAAAY,KAAAk1B,OAAA,GActCl1B,KAAAm1B,YAAwC/1B,EAAAY,KAAAo1B,OAAA,GAuCxCp1B,KAAAq1B,MAA2Fj2B,EAAAY,KAAAs1B,OAAA,GAwB3Ft1B,KAAAu1B,SAA6Cn2B,EAAAY,KAAAw1B,OAAA,GAoB7Cx1B,KAAAy1B,YAEPr2B,EAAAY,KAAA01B,OAAA,GA2CO11B,KAAA21B,MAKPv2B,EAAAY,KAAA41B,OAAA,GA4BO51B,KAAA61B,KAAoGz2B,EAAAY,KAAA81B,OAAA,GAQpG91B,KAAA+1B,WAA4D32B,EAAAY,KAAAg2B,QAAA,GAgB5Dh2B,KAAAi2B,OAAwD72B,EAAAY,KAAAk2B,QAAA,GAUxDl2B,KAAAm2B,QAAyD/2B,EAAAY,KAAAo2B,QAAA,GA0BzDp2B,KAAAq2B,SAAuEj3B,EAAAY,KAAAs2B,QAAA,EAGjF,CAviBW,gBAAAC,CAAiBC,GAE1B,CAES,mBAAAC,CAAoBD,GAC5B,MAAME,EAAOF,EAAc/b,EAAEkc,WAC7B,OAAO32B,KAAK42B,WAAWF,EACxB,CAES,eAAAG,CAAgBv3B,EAAew3B,GAExC,CAES,gBAAAC,CAAiBz3B,EAAew3B,GAEzC,CAES,gBAAAE,CAAiB13B,EAAew3B,GACxC,OAAO90B,SAAOi1B,OAAO33B,EAAO,EAC7B,CAES,UAAAs3B,CAAWF,GACnB,OAAQ12B,KAAKJ,YAA2Cs3B,WAAWC,OAAOT,EAC3E,GAEAzH,EAAA,CAAAne,EAAAA,aAAa,CACZtH,SAAS,EACT,YAAA+H,CAAa2d,GACXlvB,KAAK4G,MAAM0K,QAAQ4d,EACpB,EACD,eAAA1d,CAAgB0d,GACdlvB,KAAK4G,MAAM6K,UAAUyd,EACtB,EACD,UAAA5c,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD6iB,UAAW,CAAC,cACZ7d,MAAO,CACL+J,WAAY,QAEdqc,WAAY,QAEf,KAIFtH,EAAA,CAAA/d,EAAAA,QAAQ,CACPvI,SAAS,EACT,UAAA6tB,CAAWb,GACT,MAAMnxB,EAAQrF,KAAK4G,MAAM2vB,iBAAiBC,YACtCnxB,GACFrF,KAAKhB,IAAIqG,EAEZ,KAMF2qB,EAAA,CAAAje,EAAAA,QAAQ,CACPvI,SAAS,EACT,UAAA6tB,CAAWb,GACT,MAAMvG,EAAWjwB,KAAK4G,MAAM6vB,oBAAoBD,YAC5CvG,GACFjwB,KAAKhB,IAAIixB,EAEZ,EACD,eAAAqH,CAAgBzpB,GACd,MAAM6hB,EAAe1vB,KAAKgQ,KACL,OAAjB0f,IAEqB,OAAd7hB,EACT6hB,EAAa1e,MAAMumB,MAAMvrB,aAAa2G,EAAAA,KAAK6kB,WAAW,GAEtD9H,EAAa1e,MAAMumB,MAAMvrB,aAAa2G,EAAAA,KAAK8kB,YAAY,GAE1D,KAOFC,EAAA,CAAA3lB,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,WAAAojB,CAAYhnB,EAAcinB,EAAkB50B,EAAqBD,GAChD,OAAXC,IACFA,EAASgC,KAAK4G,MAAMquB,WAAWjlB,MAEjCrE,EAAOgnB,YAAYC,EAAO50B,EAAQD,EACnC,EACD,UAAAuU,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpDgF,MAAO,CACL2mB,UAAW,IAEb7I,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIF4I,EAAA,CAAA7lB,EAAAA,QAAQ,CACPC,SAAU6lB,EAAAA,WACV3lB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMutB,WAAW3kB,YAC9B,KAIFsoB,EAAA,CAAA/lB,EAAAA,QAAQ,CACPC,SAAU+lB,EAAAA,UACV7lB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMytB,YAAY7kB,YAC/B,EACD,aAAA0B,CAAc8mB,GACZh4B,KAAK4G,MAAM6tB,WAAW/W,QAAQsa,EAAU3yB,MAAM2K,KAC/C,EACD,cAAA0G,CAAeshB,GACbh4B,KAAK4G,MAAM6tB,WAAW/W,QAAQ,KAC/B,EACD,mBAAAua,CAAoB7hB,GAClBpW,KAAK4G,MAAM6tB,WAAW/W,QAAQtH,EAC/B,EACD,kBAAA8hB,CAAmB9hB,GACjBpW,KAAK4G,MAAM6tB,WAAW/W,QAAQ,KAC/B,EACDpL,WAAAA,KACS,IAAIylB,aAAY/rB,aAAa,CAClCmsB,YAAazE,EAAAA,OAAO0E,IAAI,IACxBC,YAAa3E,EAAAA,OAAO0E,IAAI,IACxBE,WAAYC,EAAMC,MAAAA,IAAc,EAAVp4B,KAAKq4B,GAAS,GACpCC,WAAYH,EAAMC,MAAAA,IAAc,GAAVp4B,KAAKq4B,GAAU,GACrCE,aAAcjF,EAAOkF,OAAAA,OACrBC,UAAW,GACXC,WAAYpF,EAAAA,OAAO0E,IAAI,IACvBW,WAAYrF,EAAAA,OAAO0E,IAAI,IACvBY,KAAMrmB,EAAKqmB,KAAAA,UAMhBC,EAAA,CAAAlnB,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM2tB,MAAMhlB,YACzB,EACD,QAAAwB,CAASqF,GACHA,aAAqB+iB,EAAAA,cACvB/iB,EAAU4iB,KAAKI,aAAY,GAC3BhjB,EAAU4iB,KAAKhtB,aAAa2G,EAAK0mB,KAAAA,WACjCjjB,EAAUohB,UAAUxrB,aAAa2G,EAAK6kB,KAAAA,WAEzC,EACD,OAAAzH,CAAQ1qB,GACN,OAAOrF,KAAK4G,MAAM2tB,MAAMhlB,aAAalK,MAAMrG,IAAIqG,EAChD,KAMFi0B,EAAA,CAAAvnB,EAAAA,QAAQ,CACPC,SAAUunB,EAAAA,SACVrnB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAM2tB,MAAM/kB,YACzB,EACD,QAAAuB,CAASyoB,GACPx5B,KAAKy5B,YAAYD,EAASl6B,MAAMA,MAAOk6B,EAAS1C,MAAMx3B,MACvD,EACD,aAAA4R,CAAcsoB,GACZx5B,KAAK4G,MAAMiuB,UAAUnX,QAAQ8b,EAASpc,MAAMpN,MAC5ChQ,KAAK4G,MAAMmuB,WAAWrX,QAAQ8b,EAASE,OAAO1pB,KAC/C,EACD,cAAA0G,CAAe8iB,GACbx5B,KAAK4G,MAAMiuB,UAAUnX,QAAQ,MAC7B1d,KAAK4G,MAAMmuB,WAAWrX,QAAQ,KAC/B,EACD,mBAAAic,CAAoBC,GAClB55B,KAAK4G,MAAMiuB,UAAUnX,QAAQkc,EAC9B,EACD,kBAAAC,CAAmBD,GACjB55B,KAAK4G,MAAMiuB,UAAUnX,QAAQ,KAC9B,EACD,oBAAAoc,CAAqBC,GACnB/5B,KAAK4G,MAAMmuB,WAAWrX,QAAQqc,EAC/B,EACD,mBAAAC,CAAoBD,GAClB/5B,KAAK4G,MAAMmuB,WAAWrX,QAAQ,KAC/B,EACD,eAAAuc,CAAgB36B,EAAek6B,GAC7Bx5B,KAAKy5B,YAAYn6B,EAAOk6B,EAAS1C,MAAMx3B,MACxC,EACD,eAAA46B,CAAgBpD,EAAe0C,GAC7Bx5B,KAAKy5B,YAAYD,EAASl6B,MAAMA,MAAOw3B,EACxC,EACD,WAAA2C,CAAYn6B,EAAew3B,GACzB,MAAMzxB,EAAQrF,KAAK4G,MAAMowB,iBAAiB13B,EAAOw3B,YAC7CzxB,GACFrF,KAAK4G,MAAM6tB,WAAW1E,QAAQ1qB,GAEhC,MAAM+X,EAAQpd,KAAK4G,MAAMiwB,gBAAgBv3B,EAAOw3B,YAC5C1Z,GACFpd,KAAK4G,MAAMiuB,UAAU9E,QAAQ3S,GAE/B,MAAMsc,EAAS15B,KAAK4G,MAAMmwB,iBAAiBz3B,EAAOw3B,YAC9C4C,GACF15B,KAAK4G,MAAMmuB,WAAWhF,QAAQ2J,EAEjC,EACD,UAAArC,CAAWb,GACT,MAAMgD,EAAWx5B,KAAKuP,aACtB,IAAI6S,EAEFA,EADEoX,EAASl6B,MAAM66B,cACH,EAELX,EAASY,UAAUznB,EAAAA,KAAKyP,YAAa,GAGhD,MAAMiY,EAAY7D,EAAc9b,EAAEic,WAClC6C,EAASl6B,MAAM0M,aAAaquB,EAAWjY,GAEN,OAA7BoU,EAAce,MAAM+C,MACtBd,EAASe,WAAWvuB,aAAawqB,EAAce,MAAM+C,KAAMlY,GAC3DoX,EAAS/4B,aAAauL,aAAawqB,EAAc/1B,aAAanB,OACjC,OAAzBk6B,EAASgB,MAAMl7B,OAA0C,OAAxBk6B,EAASiB,KAAKn7B,OACjDk6B,EAASkB,WAAWlB,EAASgB,MAAMl7B,MAAOk6B,EAASiB,KAAKn7B,MAAO8iB,IAE1B,OAA9BoU,EAAce,MAAMj4B,OAC7Bk6B,EAASe,WAAWvuB,aAAawqB,EAAce,MAAMj4B,MAAO8iB,GAC5DoX,EAAS/4B,aAAauL,aAAa,QAEnCwtB,EAASe,WAAWvuB,aAAa2G,EAAAA,KAAKC,YAAawP,GACnDoX,EAAS/4B,aAAauL,aAAa,MACN,OAAzBwtB,EAASgB,MAAMl7B,OAA0C,OAAxBk6B,EAASiB,KAAKn7B,OACjDk6B,EAASkB,WAAWlB,EAASgB,MAAMl7B,MAAOk6B,EAASiB,KAAKn7B,MAAO8iB,GAGpE,KAOFuY,EAAA,CAAA5oB,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+tB,KAAKplB,YACxB,EACD,QAAAwB,CAAS6oB,GACHA,aAAqBT,EAAAA,cACvBS,EAAUZ,KAAKI,aAAY,GAC3BQ,EAAUZ,KAAKhtB,aAAa2G,EAAKioB,KAAAA,WACjChB,EAAUpC,UAAUxrB,aAAa2G,EAAK8kB,KAAAA,YAEzC,EACD,OAAA1H,CAAQ3S,GACN,OAAOpd,KAAK4G,MAAM+tB,KAAKplB,aAAa6N,MAAMpe,IAAIoe,EAC/C,KAMFyd,EAAA,CAAA9oB,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,QAAS,SACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+tB,KAAKplB,YACxB,EACD,QAAAwB,CAASgpB,GACHA,aAAsBZ,EAAAA,cACxBY,EAAWf,KAAKI,aAAY,GAC5BW,EAAWf,KAAKhtB,aAAa2G,EAAKioB,KAAAA,WAClCb,EAAWvC,UAAUxrB,aAAa2G,EAAK8kB,KAAAA,YAE1C,EACD,OAAA1H,CAAQ2J,GACN,OAAO15B,KAAK4G,MAAM+tB,KAAKplB,aAAamqB,OAAO16B,IAAI06B,EAChD,KAMFoB,EAAA,CAAA/oB,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,UAAA+C,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD8iB,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIF+L,EAAA,CAAAhpB,EAAAA,QAAQ,CACPC,SAAU6lB,EAAAA,WACV3lB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMquB,WAAWzlB,YAC9B,EACD,UAAA8C,GACE,OAAQzM,MAAMyM,aAA4BtG,aAAa,CACrDwiB,eAAe,GAElB,KAIFwM,EAAA,CAAAjpB,EAAAA,QAAQ,CACPC,SAAUipB,EAAAA,UACV/oB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMuuB,YAAY3lB,YAC/B,EACD,aAAA0B,CAAcgqB,GACZl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQwd,EAAUvF,MAAM3lB,KAC1C,EACD,cAAA0G,CAAewkB,GACbl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,mBAAAyd,CAAoBC,GAClBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ0d,EAC1B,EACD,kBAAAC,CAAmBD,GACjBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,gBAAA4d,CAAiBC,GACA,OAAXA,GACFv7B,KAAK4G,MAAM+tB,KAAKplB,aAAavD,aAAa,CACxC8qB,MAAOyE,EAAOC,OAAO,IAG1B,EACD,UAAAlpB,GACE,MAAM4oB,EAAYr1B,MAAMyM,aAExB,OADA4oB,EAAUO,gBAAe,GAClBP,EAAUlvB,aAAa,CAC5B0vB,UAAW,EACXC,YAAa,GACbC,aAAc,GACdC,WAAY,IAEf,KAIFC,EAAA,CAAA/pB,EAAAA,QAAQ,CACPC,SAAU+pB,EAAAA,SACV7pB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASirB,GACP,MAAMnuB,EAAY7N,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAUvO,MAC7DU,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,EACxC,EACDyE,WAAAA,KACS,IAAI2pB,eAAwBjwB,aAAa,CAC9CkwB,cAAe,KACfC,cAAe,EACfC,eAAgB,EAChBC,cAAe1pB,EAAK6kB,KAAAA,UACpB8E,cAAe,EACfC,cAAe5pB,EAAK6kB,KAAAA,UACpBgF,YAAa,OAMlBC,EAAA,CAAA1qB,EAAAA,QAAQ,CACPC,SAAU0qB,EAAAA,SACVxqB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM2uB,SAASvlB,IAC5B,EACD,eAAAsnB,CAAgBzpB,GACd,GAAkB,OAAdA,EAEF,YADA7N,KAAKizB,aAGP,MAAM0J,EAAkB,IAAIC,EAAAA,YAAsB/uB,GAAW7B,aAAa,CACxEswB,cAAe,IAEjBK,EAAgBE,eAAc,GAC9B78B,KAAKwP,WAAW,KAAMmtB,EACvB,KAMFG,EAAA,CAAA/qB,EAAAA,QAAQ,CACPC,SAAU+qB,EAAAA,UACV7qB,SAAS,EACT,IAAAjT,GACEe,KAAKg9B,cAAgBh9B,KAAKg9B,cAAcC,KAAKj9B,MAC7CA,KAAKk9B,eAAiBl9B,KAAKk9B,eAAeD,KAAKj9B,MAC/CA,KAAKm9B,eAAiBn9B,KAAKm9B,eAAeF,KAAKj9B,KAChD,EACD,cAAImS,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASqqB,GACPA,EAAUgC,iBAAiB,cAAep9B,KAAKg9B,eAC/C5B,EAAUgC,iBAAiB,eAAgBp9B,KAAKk9B,gBAChD9B,EAAUgC,iBAAiB,eAAgBp9B,KAAKm9B,eACjD,EACD,UAAA1O,CAAW2M,GACTA,EAAUiC,oBAAoB,cAAer9B,KAAKg9B,eAClD5B,EAAUiC,oBAAoB,eAAgBr9B,KAAKk9B,gBACnD9B,EAAUiC,oBAAoB,eAAgBr9B,KAAKm9B,eACpD,EACD,aAAAG,CAAcvpB,GACZ,MAAMqnB,EAAYp7B,KAAKgQ,KACjButB,EAAuB,OAAdnC,EAAqBA,EAAUmC,OAAOj+B,MAAQ,KAC7D,GAAe,OAAXi+B,EAAiB,CACnB,MAAMC,EAAepC,EAAWoC,aAC1B/iB,EAAI1G,EAAM0pB,QAAUD,EAAa/iB,EACjCijB,EAAIH,EAAOI,QAAQljB,GACzBza,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa0xB,EACzD,CACF,EACD,aAAAV,CAAcjpB,GACZ/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAmpB,CAAenpB,GACb/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAopB,CAAeppB,GACb/T,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa,KACzD,KASF4xB,EAAA,CAAA7rB,EAAAA,QAAQ,CACPC,SAAU6rB,EAAAA,eACV3rB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAM+uB,MAAMnmB,YACzB,EACD,aAAA0B,CAAc4sB,EAA4C3sB,GACxDnR,KAAK4G,MAAMmvB,WAAWgI,SAASD,EAAS/H,WAAWiI,MACpD,EACD,cAAAtnB,CAAeonB,GACb99B,KAAK4G,MAAMmvB,WAAWkI,aACvB,EACD,uBAAAC,CAAwB1H,EAAgDrlB,GACtEnR,KAAK4G,MAAMmvB,WAAWoI,QAAQ3H,EAAerlB,EAC9C,EACD,sBAAAitB,CAAuB5H,GACrBx2B,KAAK4G,MAAMmvB,WAAWtc,WAAW+c,EAClC,EACDlkB,WAAAA,KACS,IAAI+rB,gBAAiCryB,aAAa,CACvDsyB,QAAS,OACTjM,YAAa,OAMlBkM,EAAA,CAAAC,EAAAA,QAAQ,CACPxsB,SAAUysB,EAAAA,cACV,cAAItsB,GACF,OAAOnS,KAAK4G,MAAMivB,KAAKtmB,YACxB,KAIFmvB,EAAA,CAAA3sB,EAAAA,QAAQ,CACPC,SAAUysB,EAAAA,cACV,cAAItsB,GACF,OAAOnS,KAAK4G,MAAMivB,KAAKtmB,YACxB,EACD,aAAA2B,CAAcslB,GAC6C,OAArDx2B,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAUvO,OAC7CU,KAAK4G,MAAMuvB,QAAQzY,QAAQ8Y,EAE9B,EACD,aAAAnkB,CAAcmkB,GACZA,EAAcmI,QACf,KAIFC,EAAA,CAAA7sB,EAAAA,QAAQ,CACPC,SAAUysB,EAAAA,cACV,aAAAvtB,CAAcslB,GACZx2B,KAAK4G,MAAM8kB,WAAW2L,WAAWb,GACjCx2B,KAAK4G,MAAMglB,cAAcyL,WAAWb,GACpCx2B,KAAK4G,MAAM+tB,KAAK0C,WAAWb,EAC5B,KAIFqI,EAAA,CAAAtmB,EAAAA,SAAS,CACRC,YAAa/K,EACbrC,UAAU,EACV,sBAAA0zB,CAAuBjxB,GACrB,IAAI2oB,EAAoE,KACxE,GAAkB,OAAd3oB,EAAoB,CACtB,MAAMiwB,EAAW99B,KAAK4G,MAAMivB,KAAK7lB,KAChB,OAAb8tB,IACFtH,EAAgBsH,EAASiB,eAAehgC,IAAI8O,YACxC2oB,IACFA,EAAgBsH,EAASiB,eAAeC,cAAcnxB,YAClD2oB,IACFA,EAAgB,OAIvB,MACCA,EAAgBx2B,KAAK4G,MAAMqvB,OAAOjmB,KAEpChQ,KAAK4G,MAAMuvB,QAAQzY,QAAQ8Y,GAC3Bx2B,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,GACvC7N,KAAK4G,MAAMglB,cAAc0L,gBAAgBzpB,EAC1C,KAvfH1Q,EAAkB,KAAA,KAAA8xB,EAAA,CAAAnxB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsjB,MAAAtsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsjB,MAAwEhsB,CAAAA,IAAAisB,EAAAtmB,GAW1F9H,EAAkB,KAAA,KAAA2yB,EAAA,CAAAhyB,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA0jB,WAAA1sB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA0jB,WAEhBpsB,CAAAA,IAAAqsB,EAAA1mB,GAqBF9H,EAAkB,KAAA,KAAA6yB,EAAA,CAAAlyB,KAAA,QAAAO,KAAA,gBAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,kBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA4jB,cAAA5sB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA4jB,cAGhBtsB,CAAAA,IAAAusB,EAAA5mB,GAyBF9H,EAAS,KAAA,KAAAu6B,EAAA,CAAA55B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmsB,WAAAn1B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmsB,WAAsC70B,CAAAA,IAAA80B,EAAAnvB,GAS/C9H,EAAS,KAAA,KAAAy6B,EAAA,CAAA95B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqsB,YAAAr1B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqsB,YAAwC/0B,CAAAA,IAAAg1B,EAAArvB,GAmCjD9H,EAAS,KAAA,KAAA26B,EAAA,CAAAh6B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAusB,MAAAv1B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAusB,MAAuDj1B,CAAAA,IAAAk1B,EAAAvvB,GAmBhE9H,EAAS,KAAA,KAAA87B,EAAA,CAAAn7B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAysB,WAAAz1B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAysB,WAEPn1B,CAAAA,IAAAo1B,EAAAzvB,GAkFF9H,EAAS,KAAA,KAAAm8B,EAAA,CAAAx7B,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2sB,KAAA31B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2sB,KAGPr1B,CAAAA,IAAAs1B,EAAA3vB,GAmBF9H,EAAS,KAAA,KAAAw9B,EAAA,CAAA78B,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6sB,UAAA71B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6sB,UAEPv1B,CAAAA,IAAAw1B,EAAA7vB,GAmBF9H,EAAS,KAAA,KAAA09B,EAAA,CAAA/8B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+sB,WAAA/1B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+sB,WAEPz1B,CAAAA,IAAA01B,EAAA/vB,GAgBF9H,EAAS,KAAA,KAAA29B,EAAA,CAAAh9B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAitB,WAAAj2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAitB,WAAsC31B,CAAAA,IAAA41B,EAAAjwB,GAc/C9H,EAAS,KAAA,KAAA49B,EAAA,CAAAj9B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmtB,YAAAn2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmtB,YAAwC71B,CAAAA,IAAA81B,EAAAnwB,GAuCjD9H,EAAS,KAAA,KAAA69B,EAAA,CAAAl9B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqtB,MAAAr2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqtB,MAA2F/1B,CAAAA,IAAAg2B,EAAArwB,GAwBpG9H,EAAS,KAAA,KAAA2+B,EAAA,CAAAh+B,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAutB,SAAAv2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAutB,SAA6Cj2B,CAAAA,IAAAk2B,EAAAvwB,GAoBtD9H,EAAS,KAAA,KAAAs/B,EAAA,CAAA3+B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAytB,YAAAz2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAytB,YAEPn2B,CAAAA,IAAAo2B,EAAAzwB,GA2CF9H,EAAS,KAAA,KAAA2/B,EAAA,CAAAh/B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2tB,MAAA32B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2tB,MAKPr2B,CAAAA,IAAAs2B,EAAA3wB,GA4BF9H,EAAS,KAAA,KAAAygC,EAAA,CAAA9/B,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6tB,KAAA72B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6tB,KAAoGv2B,CAAAA,IAAAw2B,EAAA7wB,GAQ7G9H,EAAS,KAAA,KAAAohC,EAAA,CAAAzgC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+tB,WAAA/2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+tB,WAA4Dz2B,CAAAA,IAAA02B,GAAA/wB,GAgBrE9H,EAAS,KAAA,KAAAuhC,EAAA,CAAA5gC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiuB,OAAAj3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiuB,OAAwD32B,CAAAA,IAAA42B,GAAAjxB,GAUjE9H,EAAS,KAAA,KAAAyhC,EAAA,CAAA9gC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmuB,QAAAn3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmuB,QAAyD72B,CAAAA,IAAA82B,GAAAnxB,GA0BlE9H,EAAS,KAAA,KAAA0hC,EAAA,CAAA/gC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAquB,SAAAr3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAquB,SAAuE/2B,CAAAA,IAAAg3B,GAAArxB,GAEzEH,EAAAoyB,WAA6B+H,EAAAA,eAAeC,QAAQ,iBAAAp6B,CAziB7B,EAAA,GCcnBq6B,EAAoB,mJAApB,OAAAr6B,EAAA,cAA6BuJ,+CAkD/BrO,KAAAqF,OAA+BjG,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAsF,OAAA,IAS/BtF,KAAAo/B,QAAkChgC,EAAAY,KAAAq/B,OAAA,GA0BlCr/B,KAAAs/B,UAAoClgC,EAAAY,KAAAu/B,OAAA,GAgBpCv/B,KAAAw/B,OAEPpgC,EAAAY,KAAAy/B,OAAA,GA4COz/B,KAAA61B,KAGPz2B,EAAAY,KAAA81B,OAAA,GAQO91B,KAAA+1B,WAA4D32B,EAAAY,KAAAg2B,OAAA,GAqB5Dh2B,KAAAi2B,OAAwD72B,EAAAY,KAAAk2B,OAAA,GAexDl2B,KAAAm2B,QAAyD/2B,EAAAY,KAAAo2B,OAAA,GAsFzDp2B,KAAA0/B,MAKPtgC,EAAAY,KAAA2/B,OAAA,GAmBO3/B,KAAA4/B,WAEPxgC,EAAAY,KAAA6/B,OAAA,GAmBO7/B,KAAA8/B,YAEP1gC,EAAAY,KAAA+/B,OAAA,GAwBO//B,KAAAsP,IAAiDlQ,EAAAY,KAAAggC,OAAA,GAiDjDhgC,KAAA2O,KAAoDvP,EAAAY,KAAA4O,OAAA,GAQpD5O,KAAAigC,MAAgC7gC,EAAAY,KAAAkgC,OAAA,GAYhClgC,KAAAmgC,SAAmC/gC,EAAAY,KAAAogC,OAAA,GA2BnCpgC,KAAAqgC,WAEPjhC,EAAAY,KAAAsgC,OAAA,GA2BOtgC,KAAAugC,YAEPnhC,EAAAY,KAAAwgC,OAAA,GA6BOxgC,KAAAq2B,SAEPj3B,EAAAY,KAAAs2B,OAAA,EACH,CA3fW,gBAAAmK,CAAiBjK,GACzB,OAAOx2B,KAAK0gC,WAAWlK,EACxB,CAES,iBAAAmK,CAAkBnK,GAC1B,OAAOx2B,KAAK0gC,WAAWlK,EACxB,CAES,UAAAkK,CAAWlK,GACnB,MAAMl3B,EAAQk3B,EAAc9b,EAAEic,WAC9B,OAAO30B,SAAOi1B,OAAO33B,EAAO,EAC7B,CAES,gBAAAshC,CAAiBthC,EAAeuhC,GAEzC,CAES,iBAAAC,CAAkBxhC,EAAeuhC,GAE1C,CAES,gBAAAE,CAAiBC,EAAsBxK,EAAgDpU,GAC9D,OAA7BoU,EAAce,MAAM+C,MACtB0G,EAAUC,WAAWj1B,aAAawqB,EAAce,MAAM+C,KAAMlY,GAC5D4e,EAAUvgC,aAAauL,aAAawqB,EAAc/1B,aAAanB,OACjC,OAA1B0hC,EAAUxG,MAAMl7B,OAA2C,OAAzB0hC,EAAUvG,KAAKn7B,OACnD0hC,EAAUtG,WAAWsG,EAAUxG,MAAMl7B,MAAO0hC,EAAUvG,KAAKn7B,MAAO8iB,IAE7B,OAA9BoU,EAAce,MAAMj4B,OAC7B0hC,EAAUC,WAAWj1B,aAAawqB,EAAce,MAAMj4B,MAAO8iB,GAC7D4e,EAAUvgC,aAAauL,aAAa,QAEpCg1B,EAAUC,WAAWj1B,aAAa2G,EAAAA,KAAKC,YAAawP,GACpD4e,EAAUvgC,aAAauL,aAAa,MACN,OAA1Bg1B,EAAUxG,MAAMl7B,OAA2C,OAAzB0hC,EAAUvG,KAAKn7B,OACnD0hC,EAAUtG,WAAWsG,EAAUxG,MAAMl7B,MAAO0hC,EAAUvG,KAAKn7B,MAAO8iB,GAGvE,GAEAjb,EAAA,CAAAjB,EAAAA,SAAS,CACRC,UAAWC,OACX9G,MAAO,GACP,WAAA8H,CAAY/B,GACVrF,KAAK4G,MAAMC,cAAc,wBAAyBxB,EAAOrF,KAAK4G,MAC/D,KAIFs6B,EAAA,CAAAh7B,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYg4B,GACVp/B,KAAK4G,MAAMC,cAAc,0BAA2Bu4B,EAASp/B,KAAK4G,MACnE,KAIFu6B,EAAA,CAAAj7B,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYk4B,GACV,MAAMxB,EAAW99B,KAAK4G,MAAMivB,KAAK7lB,KACjC,GAAiB,OAAb8tB,EAAmB,CACrB,MAAM1b,EAAS0b,EAAS5V,QAAQvV,EAAKyP,KAAAA,QACjCkd,IAAct/B,KAAK4G,MAAMw4B,QAAQ9/B,MACnCw+B,EAASsD,QAAQp1B,aAAa,GAAKoW,GAEnC0b,EAASsD,QAAQp1B,aAAa,EAAGoW,EAEpC,CACD,MAAM/S,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KACjC,GAAiB,OAAbX,EAAmB,CACrB,MAAM+S,EAAS/S,EAAS6Y,QAAQvV,EAAKyP,KAAAA,QACjCkd,IAAct/B,KAAK4G,MAAMw4B,QAAQ9/B,MACnC+P,EAAS2B,MAAMowB,QAAQp1B,aAAa,GAAKoW,GAEzC/S,EAAS2B,MAAMowB,QAAQp1B,aAAa,EAAGoW,EAE1C,CACF,KAIFif,EAAA,CAAAn7B,EAAAA,SAAS,CACRC,UAAW0G,QACXvN,OAAO,EACP,WAAA8H,CAAYo4B,GACVx/B,KAAK4G,MAAMC,cAAc,yBAA0B24B,EAAQx/B,KAAK4G,MACjE,EACD,MAAA06B,GACE,MAAMjyB,EAAWrP,KAAK4G,MAAM+H,KAAKqB,KAC3BuxB,EAAwB,OAAblyB,GAAqBA,EAASmyB,MAAMC,MAAMrC,QACrDsC,EAA2B,OAAbryB,GAAqBA,EAASiB,UAAUmxB,MAAMrC,QAC5DI,EAAS+B,GAAYG,EAC3B1hC,KAAKgM,aAAawzB,EACnB,KAMF5B,EAAA,CAAA7rB,EAAAA,QAAQ,CACPC,SAAU6rB,EAAAA,eACVzyB,UAAU,EACV,IAAAnM,GACEe,KAAKk9B,eAAiBl9B,KAAKk9B,eAAeD,KAAKj9B,MAC/CA,KAAKm9B,eAAiBn9B,KAAKm9B,eAAeF,KAAKj9B,KAChD,EACD,cAAAoS,CAAe0rB,EAA4C3sB,GACzDnR,KAAK4G,MAAMC,cAAc,2BAA4Bi3B,EAAU3sB,EAAYnR,KAAK4G,MACjF,EACD,aAAAsK,CAAc4sB,EAA4C3sB,GACxDnR,KAAK4G,MAAMmvB,WAAWgI,SAASD,EAAS/H,WAAWiI,OACnDF,EAASV,iBAAiB,eAAgBp9B,KAAKk9B,gBAC/CY,EAASV,iBAAiB,eAAgBp9B,KAAKm9B,eAChD,EACD,cAAAzmB,CAAeonB,GACbA,EAAST,oBAAoB,eAAgBr9B,KAAKk9B,gBAClDY,EAAST,oBAAoB,eAAgBr9B,KAAKm9B,gBAClDn9B,KAAK4G,MAAMmvB,WAAWkI,aACvB,EACD,aAAA5rB,CAAcyrB,GACZ99B,KAAK4G,MAAMC,cAAc,0BAA2Bi3B,EAAU99B,KAAK4G,MACpE,EACD,uBAAAs3B,CAAwB1H,EAAgDrlB,GACtEnR,KAAK4G,MAAMmvB,WAAWoI,QAAQ3H,EAAerlB,EAC9C,EACD,sBAAAitB,CAAuB5H,GACrBx2B,KAAK4G,MAAMmvB,WAAWtc,WAAW+c,EAClC,EACD,cAAA0G,CAAenpB,GACb/T,KAAK4G,MAAMw4B,QAAQpzB,cAAa,EACjC,EACD,cAAAmxB,CAAeppB,GACb/T,KAAK4G,MAAMw4B,QAAQpzB,cAAa,EACjC,EACDsG,WAAAA,KACS,IAAI+rB,gBAAiCryB,aAAa,CACvDsyB,QAAS,OACTjM,YAAa,OASlBkM,EAAA,CAAAC,EAAAA,QAAQ,CACPxsB,SAAUysB,EAAAA,cACV,cAAItsB,GACF,OAAOnS,KAAK4G,MAAMivB,KAAKtmB,YACxB,KAIFmvB,EAAA,CAAA3sB,EAAAA,QAAQ,CACPC,SAAUysB,EAAAA,cACV,cAAItsB,GACF,OAAOnS,KAAK4G,MAAMivB,KAAKtmB,YACxB,EACD,cAAA6C,CAAeokB,GACbx2B,KAAK4G,MAAMC,cAAc,6BAA8B2vB,EAAex2B,KAAK4G,MAC5E,EACD,aAAAsK,CAAcslB,GACZx2B,KAAK4G,MAAMy5B,WAAWsB,UAAUnL,GACyB,OAArDx2B,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAUvO,OAC7CU,KAAK4G,MAAMuvB,QAAQzY,QAAQ8Y,EAE9B,EACD,aAAAnkB,CAAcmkB,GACZA,EAAcmI,SACd3+B,KAAK4G,MAAMC,cAAc,4BAA6B2vB,EAAex2B,KAAK4G,MAC3E,KAIFg4B,EAAA,CAAA7sB,EAAAA,QAAQ,CACPC,SAAUysB,EAAAA,cACV,cAAArsB,CAAeokB,GACbx2B,KAAK4G,MAAMC,cAAc,8BAA+B2vB,EAAex2B,KAAK4G,MAC7E,EACD,aAAAsK,CAAcslB,GACZx2B,KAAK4G,MAAM84B,MAAMrI,WAAWb,GAC5Bx2B,KAAK4G,MAAM25B,YAAYlJ,WAAWb,EACnC,EACD,aAAAnkB,CAAcmkB,GACZx2B,KAAK4G,MAAMC,cAAc,6BAA8B2vB,EAAex2B,KAAK4G,MAC5E,KAIFg7B,EAAA,CAAA7vB,EAAAA,QAAQ,CACPC,SAAU6vB,EAAAA,UACVz2B,UAAU,EACV,IAAAnM,GACEe,KAAKk9B,eAAiBl9B,KAAKk9B,eAAeD,KAAKj9B,MAC/CA,KAAKm9B,eAAiBn9B,KAAKm9B,eAAeF,KAAKj9B,KAChD,EACD,QAAA+Q,CAASiwB,GACPhhC,KAAKy5B,YAAYuH,EAAU1hC,MAAMA,MAAO0hC,EAAUH,MAAMvhC,MACzD,EACD,cAAA8S,CAAe4uB,EAAsB7vB,GACnCnR,KAAK4G,MAAMC,cAAc,4BAA6Bm6B,EAAW7vB,EAAYnR,KAAK4G,MACnF,EACD,aAAAsK,CAAc8vB,EAAsB7vB,GAClCnR,KAAK4G,MAAMg5B,WAAWliB,QAAQsjB,EAAU5jB,MAAMpN,MAC9ChQ,KAAK4G,MAAMk5B,YAAYpiB,QAAQsjB,EAAUtH,OAAO1pB,MAChDgxB,EAAU5D,iBAAiB,eAAgBp9B,KAAKk9B,gBAChD8D,EAAU5D,iBAAiB,eAAgBp9B,KAAKm9B,eACjD,EACD,cAAAzmB,CAAesqB,GACbA,EAAU3D,oBAAoB,eAAgBr9B,KAAKk9B,gBACnD8D,EAAU3D,oBAAoB,eAAgBr9B,KAAKm9B,gBACnDn9B,KAAK4G,MAAMg5B,WAAWliB,QAAQ,MAC9B1d,KAAK4G,MAAMk5B,YAAYpiB,QAAQ,KAChC,EACD,aAAArL,CAAc2uB,GACZhhC,KAAK4G,MAAMC,cAAc,2BAA4Bm6B,EAAWhhC,KAAK4G,MACtE,EACD,mBAAA+yB,CAAoBC,GAClB55B,KAAK4G,MAAMg5B,WAAWliB,QAAQkc,EAC/B,EACD,kBAAAC,CAAmBD,GACjB55B,KAAK4G,MAAMg5B,WAAWliB,QAAQ,KAC/B,EACD,oBAAAoc,CAAqBC,GACnB/5B,KAAK4G,MAAMk5B,YAAYpiB,QAAQqc,EAChC,EACD,mBAAAC,CAAoBD,GAClB/5B,KAAK4G,MAAMk5B,YAAYpiB,QAAQ,KAChC,EACD,cAAAwf,CAAenpB,GACb/T,KAAK4G,MAAMw4B,QAAQpzB,cAAa,EACjC,EACD,cAAAmxB,CAAeppB,GACb/T,KAAK4G,MAAMw4B,QAAQpzB,cAAa,EACjC,EACD,eAAAiuB,CAAgB36B,EAAe0hC,GAC7BhhC,KAAKy5B,YAAYn6B,EAAO0hC,EAAUH,MAAMvhC,MACzC,EACD,eAAAwiC,CAAgBjB,EAAeG,GAC7BhhC,KAAKy5B,YAAYuH,EAAU1hC,MAAMA,MAAOuhC,EACzC,EACD,WAAApH,CAAYn6B,EAAeuhC,GACzB,MAAMzjB,EAAQpd,KAAK4G,MAAMg6B,iBAAiBthC,EAAOuhC,YAC7CzjB,GACFpd,KAAK4G,MAAMg5B,WAAW7P,QAAQ3S,GAEhC,MAAMsc,EAAS15B,KAAK4G,MAAMk6B,kBAAkBxhC,EAAOuhC,YAC/CnH,IACa,OAAXA,EACF15B,KAAK4G,MAAMk5B,YAAY/P,QAAQ2J,GAE/B15B,KAAK4G,MAAMk5B,YAAY7M,aAG5B,EACD,UAAAoE,CAAWb,GACT,MAAMwK,EAAYhhC,KAAKgQ,KACvB,GAAkB,OAAdgxB,EACF,OAEF,IAAI5e,EAEFA,EADE4e,EAAU1hC,MAAM66B,cACJ,EAEL6G,EAAU5G,UAAUznB,EAAAA,KAAKyP,YAAa,GAGjD,MAAM2f,EAAavL,EAAc9b,EAAEic,WACnCqK,EAAU1hC,MAAM0M,aAAa+1B,EAAY3f,GAEzCpiB,KAAK4G,MAAMm6B,iBAAiBC,EAAWxK,EAAepU,EACvD,KASF4f,EAAA,CAAAjwB,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,QAAS,QACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM84B,MAAMnwB,YACzB,EACD,QAAAwB,CAAS6oB,GACHA,aAAqBT,EAAAA,cACvBS,EAAUZ,KAAKI,aAAY,GAC3BQ,EAAUZ,KAAKhtB,aAAa2G,EAAKioB,KAAAA,WACjChB,EAAUpC,UAAUxrB,aAAa2G,EAAKsE,KAAAA,iBAEzC,EACD,OAAA8Y,CAAQ3S,GACN,OAAOpd,KAAK4G,MAAM84B,MAAMnwB,aAAa6N,MAAMpe,IAAIoe,EAChD,KAMF6kB,EAAA,CAAAlwB,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,QAAS,SACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM84B,MAAMnwB,YACzB,EACD,QAAAwB,CAASgpB,GACHA,aAAsBZ,EAAAA,cACxBY,EAAWf,KAAKI,aAAY,GAC5BW,EAAWf,KAAKhtB,aAAa2G,EAAKioB,KAAAA,WAClCb,EAAWvC,UAAUxrB,aAAa2G,EAAK8kB,KAAAA,YAE1C,EACD,OAAA1H,CAAQ2J,GACN,OAAO15B,KAAK4G,MAAM84B,MAAMnwB,aAAamqB,OAAO16B,IAAI06B,EACjD,KAMFwI,EAAA,CAAAnwB,EAAAA,QAAQ,CACPC,SAAUmwB,EAAAA,QACV/2B,UAAU,EACV,cAAAgH,CAAegwB,EAAkBjxB,GAC/BnR,KAAK4G,MAAMC,cAAc,0BAA2Bu7B,EAASjxB,EAAYnR,KAAK4G,MAC/E,EACD,aAAAsK,CAAckxB,EAAkBjxB,GAC9BnR,KAAK4G,MAAM+H,KAAK+O,QAAQ0kB,EAAQzzB,KAAKqB,KAAMmB,EAC5C,EACD,cAAAuF,CAAe0rB,GACbpiC,KAAK4G,MAAM+H,KAAK+O,QAAQ,KACzB,EACD,aAAArL,CAAc+vB,GACZpiC,KAAK4G,MAAMC,cAAc,yBAA0Bu7B,EAASpiC,KAAK4G,MAClE,EACD,kBAAAy7B,CAAmBhzB,EAAoB8B,GACrCnR,KAAK4G,MAAM+H,KAAK+O,QAAQrO,EAAU8B,EACnC,EACD,iBAAAmxB,CAAkBjzB,GAChBrP,KAAK4G,MAAM+H,KAAK+O,QAAQ,KACzB,KAIF7M,EAAA,CAAAkB,EAAAA,QAAQ,CACPC,SAAUuwB,EAAAA,SACVrwB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAM0I,IAAIC,YACvB,EACD,aAAA2B,CAAc7B,EAAoB8B,GAChCnR,KAAK4G,MAAMq5B,MAAMlC,SAAS1uB,EAAS4wB,MAAMjC,MAC1C,EACD,cAAAtnB,CAAerH,GACbrP,KAAK4G,MAAMq5B,MAAMhC,aAClB,EACD,kBAAAuE,CAAmBC,EAAoBtxB,GACrCnR,KAAK4G,MAAMq5B,MAAM9B,QAAQsE,EAAUtxB,EACpC,EACD,iBAAAuxB,CAAkBD,GAChBziC,KAAK4G,MAAMq5B,MAAMxmB,WAAWgpB,EAC7B,EACD,YAAA3P,CAAazjB,GACPA,EAASszB,OAAOrjC,QAClBU,KAAK4G,MAAMw4B,QAAQpzB,cAAa,GAChChM,KAAK4G,MAAM44B,OAAO8B,SAErB,EACD,YAAAvO,CAAa1jB,GACPA,EAASszB,OAAOrjC,QAClBU,KAAK4G,MAAMw4B,QAAQpzB,cAAa,GAChChM,KAAK4G,MAAM44B,OAAO8B,SAErB,EACD,iBAAAsB,CAAkBvzB,GAChBrP,KAAK4G,MAAM44B,OAAO8B,QACnB,EACD,mBAAAuB,CAAoBxzB,GAClBrP,KAAK4G,MAAM44B,OAAO8B,QACnB,EACD,YAAA3nB,CAAa7F,EAA6BC,EAAqB1E,GAC7DA,EAASiB,UAAUwyB,SACnB9iC,KAAK4G,MAAM44B,OAAO8B,QACnB,EACD,UAAAhvB,GACE,OAAQzM,MAAMyM,aAA0BtG,aAAa,CAEpD,EACF,KAIF+2B,EAAA,CAAAvE,EAAAA,QAAQ,CACPxsB,SAAUgxB,EAAAA,SACV,cAAI7wB,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKa,YACxB,KAIFyzB,EAAA,CAAAlxB,EAAAA,QAAQ,CACPC,SAAUgxB,EAAAA,SACV9wB,QAAS,OACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKa,YACxB,EACD8C,WAAAA,IACSQ,EAAAA,aAAanO,YAKvBu+B,EAAA,CAAAnxB,EAAAA,QAAQ,CACPC,SAAUgxB,EAAAA,SACV9wB,QAAS,SACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKa,YACxB,EACD,QAAAuB,CAAS0xB,GACP,MAAMjM,EAAgBx2B,KAAK4G,MAAMqvB,OAAOjmB,KAClB,OAAlBwmB,GACFx2B,KAAK2hC,UAAUnL,EAElB,EACD,SAAAmL,CAAUnL,GACR,MAAMiM,EAAWziC,KAAKgQ,KACtB,GAAIyyB,aAAoB3vB,EAAAA,aAAc,CACpC,MAAMpD,EAAU1P,KAAK4G,MAAM65B,iBAAiBjK,YACxC9mB,GACF+yB,EAAS/yB,QAAQ1Q,IAAI0Q,EAExB,CACF,EACD4C,WAAAA,IACSQ,EAAAA,aAAanO,YAOvBw+B,EAAA,CAAApxB,EAAAA,QAAQ,CACPC,SAAUgxB,EAAAA,SACV9wB,QAAS,UACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM+H,KAAKa,YACxB,EACD,QAAAuB,CAAS0xB,GACP,MAAMjM,EAAgBx2B,KAAK4G,MAAMqvB,OAAOjmB,KAClB,OAAlBwmB,GACFx2B,KAAKq3B,WAAWb,EAEnB,EACD,UAAAa,CAAWb,GACT,MAAMiM,EAAWziC,KAAKgQ,KACtB,GAAIyyB,aAAoB3vB,EAAAA,aAAc,CACpC,MAAMpD,EAAU1P,KAAK4G,MAAM+5B,kBAAkBnK,YACzC9mB,GACF+yB,EAAS/yB,QAAQ1Q,IAAI0Q,EAExB,CACF,EACD4C,WAAAA,IACSQ,EAAAA,aAAanO,YAOvBk6B,EAAA,CAAAtmB,EAAAA,SAAS,CACRC,YAAa/K,EACbrC,UAAU,EACV,sBAAA0zB,CAAuBjxB,GACrB,IAAI2oB,EAAoE,KACxE,GAAkB,OAAd3oB,EAAoB,CACtB,MAAMiwB,EAAW99B,KAAK4G,MAAMivB,KAAK7lB,KAChB,OAAb8tB,IACFtH,EAAgBsH,EAASiB,eAAehgC,IAAI8O,YACxC2oB,IACFA,EAAgBsH,EAASiB,eAAeC,cAAcnxB,YAClD2oB,IACFA,EAAgB,OAIvB,CACDx2B,KAAKojC,sBAAsB5M,EAC5B,EACD,qBAAA4M,CAAsB5M,GACE,OAAlBA,EACFx2B,KAAK4G,MAAMuvB,QAAQzY,QAAQ8Y,GAE3Bx2B,KAAK4G,MAAMuvB,QAAQzY,QAAQ1d,KAAK4G,MAAMqvB,OAAOjmB,KAEhD,KAvcH7S,EAAS,KAAA,KAAAgK,EAAA,CAAArJ,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA3C,MAAArG,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA3C,MAA+B/F,CAAAA,IAAAgG,EAAAL,GASxC9H,EAAS,KAAA,KAAA+jC,EAAA,CAAApjC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAo3B,QAAApgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAo3B,QAAkC9/B,CAAAA,IAAA+/B,EAAAp6B,GA0B3C9H,EAAS,KAAA,KAAAgkC,EAAA,CAAArjC,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAs3B,UAAAtgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAs3B,UAAoChgC,CAAAA,IAAAigC,EAAAt6B,GAgB7C9H,EAAS,KAAA,KAAAkkC,EAAA,CAAAvjC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAw3B,OAAAxgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAw3B,OAEPlgC,CAAAA,IAAAmgC,EAAAx6B,GA4CF9H,EAAS,KAAA,KAAAygC,EAAA,CAAA9/B,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6tB,KAAA72B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6tB,KAGPv2B,CAAAA,IAAAw2B,EAAA7wB,GAQF9H,EAAS,KAAA,KAAAohC,EAAA,CAAAzgC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+tB,WAAA/2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+tB,WAA4Dz2B,CAAAA,IAAA02B,EAAA/wB,GAqBrE9H,EAAS,KAAA,KAAAuhC,EAAA,CAAA5gC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAiuB,OAAAj3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAiuB,OAAwD32B,CAAAA,IAAA42B,EAAAjxB,GAejE9H,EAAS,KAAA,KAAAyhC,EAAA,CAAA9gC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmuB,QAAAn3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmuB,QAAyD72B,CAAAA,IAAA82B,EAAAnxB,GAsFlE9H,EAAS,KAAA,KAAAykC,EAAA,CAAA9jC,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA03B,MAAA1gC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA03B,MAKPpgC,CAAAA,IAAAqgC,EAAA16B,GAmBF9H,EAAS,KAAA,KAAA6kC,EAAA,CAAAlkC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA43B,WAAA5gC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA43B,WAEPtgC,CAAAA,IAAAugC,EAAA56B,GAmBF9H,EAAS,KAAA,KAAA8kC,EAAA,CAAAnkC,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA83B,YAAA9gC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA83B,YAEPxgC,CAAAA,IAAAygC,EAAA96B,GAwBF9H,EAAS,KAAA,KAAA+kC,EAAA,CAAApkC,KAAA,QAAAO,KAAA,MAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,QAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsH,IAAAtQ,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsH,IAAiDhQ,CAAAA,IAAA0gC,EAAA/6B,GAiD1D9H,EAAS,KAAA,KAAA0T,EAAA,CAAA/S,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2G,KAAA3P,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2G,KAAoDrP,CAAAA,IAAAsP,EAAA3J,GAQ7D9H,EAAS,KAAA,KAAA4lC,EAAA,CAAAjlC,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAi4B,MAAAjhC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAi4B,MAAgC3gC,CAAAA,IAAA4gC,EAAAj7B,GAYzC9H,EAAS,KAAA,KAAA8lC,EAAA,CAAAnlC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAm4B,SAAAnhC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAm4B,SAAmC7gC,CAAAA,IAAA8gC,EAAAn7B,GA2B5C9H,EAAS,KAAA,KAAA+lC,EAAA,CAAAplC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAq4B,WAAArhC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAq4B,WAEP/gC,CAAAA,IAAAghC,EAAAr7B,GA2BF9H,EAAS,KAAA,KAAAgmC,EAAA,CAAArlC,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAu4B,YAAAvhC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAu4B,YAEPjhC,CAAAA,IAAAkhC,EAAAv7B,GA6BF9H,EAAS,KAAA,KAAA0hC,EAAA,CAAA/gC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAquB,SAAAr3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAquB,SAEP/2B,CAAAA,IAAAg3B,EAAArxB,IA7f6B,EAAA,GCXpBo+B,EAAmB,sLAAnB,OAAAv+B,EAAA,cAA4BovB,oDAiCrBl0B,KAAAsrB,OAAwElsB,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAurB,OAAA,IAmBjFvrB,KAAAi1B,WAAsC71B,EAAAY,KAAAk1B,OAAA,GAkBtCl1B,KAAAm1B,YAAwC/1B,EAAAY,KAAAo1B,OAAA,GAmCxCp1B,KAAAq1B,MAA2Fj2B,EAAAY,KAAAs1B,OAAA,GAwB3Ft1B,KAAAu1B,SAA6Cn2B,EAAAY,KAAAw1B,OAAA,GAoB7Cx1B,KAAAy1B,YAEPr2B,EAAAY,KAAA01B,OAAA,GAgBO11B,KAAAsjC,SAA4ElkC,EAAAY,KAAAujC,OAAA,GAgB5EvjC,KAAAwjC,UAAyEpkC,EAAAY,KAAAyjC,OAAA,GA2CzEzjC,KAAA21B,MAKPv2B,EAAAY,KAAA41B,OAAA,GAQO51B,KAAA0jC,MAAwDtkC,EAAAY,KAAA2jC,OAAA,GAqBxD3jC,KAAA4jC,WAAsCxkC,EAAAY,KAAA6jC,OAAA,GAgEtC7jC,KAAAka,MAGP9a,EAAAY,KAAAma,OAAA,GAyBOna,KAAA0c,OAA0Dtd,EAAAY,KAAA2c,OAAA,GAqB1D3c,KAAA8jC,KAEP1kC,EAAAY,KAAA+jC,OAAA,GAiBO/jC,KAAAgkC,QAEP5kC,EAAAY,KAAAikC,OAAA,GAcOjkC,KAAAkkC,UAAmC9kC,EAAAY,KAAAmkC,QAAA,GAcnCnkC,KAAAokC,WAAoChlC,EAAAY,KAAAqkC,QAAA,GAQpCrkC,KAAAoa,KAA8Bhb,EAAAY,KAAAqa,QAAA,GA6F9Bra,KAAAskC,OAGPllC,EAAAY,KAAAukC,QAAA,GAkCOvkC,KAAAw/B,OAAoFpgC,EAAAY,KAAAy/B,QAAA,GAKpFz/B,KAAAo/B,QAAoDhgC,EAAAY,KAAAq/B,QAAA,GASpDr/B,KAAAq2B,SAAuEj3B,EAAAY,KAAAs2B,QAAA,EAkBjF,CA7kBW,UAAAM,CAAWF,GACnB,OAAQ12B,KAAKJ,YAA2Cs3B,WAAWC,OAAOT,EAC3E,CAES,mBAAA8N,CAAoBC,GAE7B,CAES,oBAAAC,CAAqBD,GAC7B,OAAOziC,EAAAA,OAAOi1B,OAAOwN,EAASnlC,MAAO,EACtC,CAmjBkB,eAAAqlC,CAAgB/R,EAAmB50B,GACpD6H,MAAM8+B,gBAAgB/R,EAAO50B,GAC7BgC,KAAKskC,OAAOM,QACb,CAEkB,gBAAAC,GACjBh/B,MAAMg/B,mBACN7kC,KAAKw/B,OAAOsF,mBAAmB9kC,KAChC,CAEkB,eAAA+kC,GACjBl/B,MAAMk/B,kBACN/kC,KAAKw/B,OAAOwF,qBAAqBhlC,KAClC,GA9jBAivB,EAAA,CAAAne,EAAAA,aAAa,CACZtH,SAAS,EACT,YAAA+H,CAAa2d,GACXlvB,KAAK4G,MAAM0K,QAAQ4d,EACpB,EACD,eAAA1d,CAAgB0d,GACdlvB,KAAK4G,MAAM6K,UAAUyd,EACtB,EACD,UAAA5c,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD6iB,UAAW,CAAC,cACZ7d,MAAO,CACL+J,WAAY,QAEdqc,WAAY,QAEf,KAIF0D,EAAA,CAAA/oB,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,UAAA+C,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpDgF,MAAO,CACL2mB,UAAW,IAEb7I,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIF+L,EAAA,CAAAhpB,EAAAA,QAAQ,CACPC,SAAU6lB,EAAAA,WACV3lB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMquB,WAAWzlB,YAC9B,EACD,UAAA8C,GACE,OAAQzM,MAAMyM,aAA4BtG,aAAa,CACrDgF,MAAO,CACLi0B,YAAa,gBAEfC,aAAa,EACb1W,eAAe,GAElB,KAIFwM,EAAA,CAAAjpB,EAAAA,QAAQ,CACPC,SAAUipB,EAAAA,UACV/oB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMuuB,YAAY3lB,YAC/B,EACD,aAAA0B,CAAcgqB,GACZl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQwd,EAAUvF,MAAM3lB,KAC1C,EACD,cAAA0G,CAAewkB,GACbl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,mBAAAyd,CAAoBC,GAClBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ0d,EAC1B,EACD,kBAAAC,CAAmBD,GACjBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,UAAApL,GACE,MAAM4oB,EAAYr1B,MAAMyM,aAUxB,OATA4oB,EAAUlvB,aAAa,CACrB0vB,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,WAAY,KAEdX,EAAUO,gBAAe,GACzBP,EAAUiK,gBAAe,GACzBjK,EAAUvF,MAAMnmB,aACT0rB,CACR,KAIFY,EAAA,CAAA/pB,EAAAA,QAAQ,CACPC,SAAU+pB,EAAAA,SACV7pB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASirB,GACP,MAAMnuB,EAAY7N,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAUvO,MAC7DU,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,EACxC,EACDyE,WAAAA,KACS,IAAI2pB,eAAwBjwB,aAAa,CAC9CkwB,cAAe,KACfC,cAAe,EACfC,eAAgB,EAChBC,cAAe1pB,EAAK6kB,KAAAA,UACpB8E,cAAe,EACfC,cAAe5pB,EAAK6kB,KAAAA,UACpBgF,YAAa,OAMlBC,EAAA,CAAA1qB,EAAAA,QAAQ,CACPC,SAAU0qB,EAAAA,SACVxqB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM2uB,SAASvlB,IAC5B,EACD,eAAAsnB,CAAgBzpB,GACd,GAAkB,OAAdA,EAEF,YADA7N,KAAKizB,aAGP,MAAM0J,EAAkB,IAAIC,EAAAA,YAAsB/uB,GAAW7B,aAAa,CACxEswB,cAAe,IAEjBK,EAAgBE,eAAc,GAC9B78B,KAAKwP,WAAW,KAAMmtB,EACvB,KAMFyI,EAAA,CAAArzB,EAAAA,QAAQ,CACPC,SAAU+pB,EAAAA,SACV7pB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM9lB,YACzB,EACD,eAAA81B,CAAgBC,EAAmBb,GACjC,OAAOzkC,KAAK4G,MAAM49B,oBAAoBC,EACvC,EACDnyB,WAAAA,IACS,IAAIizB,EAAAA,kBAKdC,EAAA,CAAAzzB,EAAAA,QAAQ,CACPC,SAAU+pB,EAAAA,SACV7pB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM9lB,YACzB,EACD,eAAA81B,CAAgBC,EAAmBb,GACjC,OAAOzkC,KAAK4G,MAAM89B,qBAAqBD,EACxC,EACDnyB,WAAAA,IACS,IAAImzB,EAAAA,gBAKd3I,EAAA,CAAA/qB,EAAAA,QAAQ,CACPC,SAAU+qB,EAAAA,UACV7qB,SAAS,EACT,IAAAjT,GACEe,KAAKg9B,cAAgBh9B,KAAKg9B,cAAcC,KAAKj9B,MAC7CA,KAAKk9B,eAAiBl9B,KAAKk9B,eAAeD,KAAKj9B,MAC/CA,KAAKm9B,eAAiBn9B,KAAKm9B,eAAeF,KAAKj9B,KAChD,EACD,cAAImS,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASqqB,GACPA,EAAUgC,iBAAiB,cAAep9B,KAAKg9B,eAC/C5B,EAAUgC,iBAAiB,eAAgBp9B,KAAKk9B,gBAChD9B,EAAUgC,iBAAiB,eAAgBp9B,KAAKm9B,eACjD,EACD,UAAA1O,CAAW2M,GACTA,EAAUiC,oBAAoB,cAAer9B,KAAKg9B,eAClD5B,EAAUiC,oBAAoB,eAAgBr9B,KAAKk9B,gBACnD9B,EAAUiC,oBAAoB,eAAgBr9B,KAAKm9B,eACpD,EACD,aAAAG,CAAcvpB,GACZ,MAAMqnB,EAAYp7B,KAAKgQ,KACjButB,EAAuB,OAAdnC,EAAqBA,EAAUmC,OAAOj+B,MAAQ,KAC7D,GAAe,OAAXi+B,EAAiB,CACnB,MAAMC,EAAepC,EAAWoC,aAC1B/iB,EAAI1G,EAAM0pB,QAAUD,EAAa/iB,EACjCijB,EAAIH,EAAOI,QAAQljB,GACzBza,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa0xB,EACzD,CACF,EACD,aAAAV,CAAcjpB,GACZ/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAmpB,CAAenpB,GACb/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAopB,CAAeppB,GACb/T,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa,KACzD,KASF05B,EAAA,CAAAlH,EAAAA,QAAQ,CACPxsB,SAAU6rB,EAAAA,eACV,cAAI1rB,GACF,OAAOnS,KAAK4G,MAAM+uB,MAAMpmB,YACzB,KAIFo2B,EAAA,CAAA5zB,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,UAAA+C,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpDgF,MAAO,CACL40B,aAAc,GACdC,UAAW,SACXC,UAAW,QAEbhX,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIFlU,EAAA,CAAA/I,EAAAA,QAAQ,CACPC,SAAU+zB,EAAAA,UACV7zB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMg9B,WAAWp0B,YAC9B,EACD,QAAAuB,CAAS4J,GACP3a,KAAKgmC,cACN,EACD,aAAA90B,CAAcyJ,GACZ3a,KAAK4G,MAAM8V,OAAOgB,QAAQ/C,EAAU+B,OAAO1M,MAC3ChQ,KAAK4G,MAAMwT,KAAK2jB,SAASpjB,EAAUP,KAAK4jB,MACzC,EACD,cAAAtnB,CAAeiE,GACb3a,KAAK4G,MAAMwT,KAAK6jB,cAChBj+B,KAAK4G,MAAM8V,OAAOgB,QAAQ,KAC3B,EACD,oBAAA2R,CAAqBxR,GACnB7d,KAAK4G,MAAM8V,OAAOgB,QAAQG,EAC3B,EACD,mBAAAyR,CAAoBzR,GAClB7d,KAAK4G,MAAM8V,OAAOgB,QAAQ,KAC3B,EACD,iBAAAuoB,CAAkB7D,GAChBpiC,KAAK4G,MAAMwT,KAAK+jB,QAAQiE,EACzB,EACD,gBAAA8D,CAAiB9D,GACfpiC,KAAK4G,MAAMwT,KAAK6Y,WAAWmP,EAC5B,EACD,YAAA4D,GACE,MAAMrrB,EAAY3a,KAAKgQ,KACvB,GAAkB,OAAd2K,EAAoB,CACtB,MAAMY,EAASvb,KAAKmmC,eACpBxrB,EAAUY,OAAOvP,aAAauP,EAC/B,CACF,EACD,YAAA4qB,GACE,MAAMrC,EAAO,IAAIsC,MACXC,EAAgBrmC,KAAK4G,MAAMo9B,QAAQzoB,OACnB,OAAlB8qB,GACFvC,EAAKjlC,KAAKwnC,GAEZ,MAAMC,EAAWtmC,KAAK4G,MAAMk9B,KAAK9F,MACjC,IAAK,MAAMuI,KAAUD,EAAU,CAC7B,MAAME,EAAUF,EAASC,GACzB,GAAoB,SAAhBC,EAAQzoC,IAAgB,CAC1B,MAAM0oC,EAAYzmC,KAAK4G,MAAMk9B,KAAK4C,UAAUF,GAC1B,OAAdC,GACF3C,EAAKjlC,KAAK4nC,EAEb,CACF,CACD,OAAO,IAAInrB,EAAAA,YAAY,KAAM,KAAM,KAAMoY,EAAAA,OAAOiT,GAAG,IAAK7C,EACzD,EACD,UAAAxxB,GACE,OAAQzM,MAAMyM,aAA2BtB,MAAMhF,aAAa,CAC1D46B,YAAa,GACbC,aAAc,IAEjB,KAOFlpB,EAAA,CAAA5L,EAAAA,QAAQ,CACPC,SAAU80B,EAAAA,WACV50B,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMsT,MAAM3K,YACzB,EACD,WAAAojB,CAAYhnB,EAAcinB,EAAiB50B,EAAqBD,GAC9D4N,EAAOo7B,aAAanU,EAAO70B,EAC5B,EACD,aAAAmT,CAAc2M,GACZ7d,KAAK4G,MAAMk9B,KAAK/F,SAASlgB,EAAWimB,KAAK9F,MAC1C,EACD,cAAAtnB,CAAemH,GACb7d,KAAK4G,MAAMk9B,KAAK7F,aACjB,EACD,iBAAA+I,CAAkBR,GAChBxmC,KAAK4G,MAAMk9B,KAAK3F,QAAQqI,EACzB,EACD,gBAAAS,CAAiBT,GACfxmC,KAAK4G,MAAMk9B,KAAKrqB,WAAW+sB,EAC5B,KAIFU,EAAA,CAAA1I,EAAAA,QAAQ,CACPxsB,SAAUm1B,EAAAA,QACV,cAAIh1B,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD,aAAA2B,CAAcs1B,GACZxmC,KAAK4G,MAAMsT,MAAM8rB,cAClB,EACD,cAAAtvB,CAAe8vB,GACbxmC,KAAK4G,MAAMsT,MAAM8rB,cAClB,EACD,SAAAU,CAAUF,GACR,MAAMY,EAASZ,EAAQzoC,IACvB,gBAAIqpC,EACK,KAEFlsB,YAAUvW,OAAOyiC,EAAQ,EAAG,EAAG,GAAG,GAAO,EAAOz0B,EAAK6kB,KAAAA,UAC7D,KAMF6P,EAAA,CAAAt1B,EAAAA,QAAQ,CACPC,SAAUm1B,EAAAA,QACVj1B,QAAS,OACT,IAAAjT,GACEe,KAAKub,OAASL,EAAAA,UAAUvW,OAAO3E,KAAKkS,QAAU,EAAG,EAAG,GAAG,GAAO,EAAOS,EAAK8kB,KAAAA,WAC3E,EACD,cAAItlB,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD+C,WAAAA,IACSkM,EAAAA,YAAY7Z,SAASqH,aAAa,CACvCoR,MAAO,YAQZkqB,EAAA,CAAAv1B,EAAAA,QAAQ,CACPC,SAAUm1B,EAAAA,QACVj1B,QAAS,SACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD+C,WAAAA,IACSkM,EAAAA,YAAY7Z,SAASqH,aAAa,CACvCoR,MAAO,cAMZmqB,EAAA,CAAAx1B,EAAAA,QAAQ,CACPC,SAAUm1B,EAAAA,QACVj1B,QAAS,UACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM8V,OAAOnN,YAC1B,EACD+C,WAAAA,IACSkM,EAAAA,YAAY7Z,SAASqH,aAAa,CACvCoR,MAAO,eAMZzB,EAAA,CAAA6iB,EAAAA,QAAQ,CACPxsB,SAAUmwB,EAAAA,QACV,cAAIhwB,GACF,OAAOnS,KAAK4G,MAAMsT,MAAM3K,YACzB,KAIFi4B,EAAA,CAAAC,EAAAA,cAAc,CACb3rB,eAAgBqjB,EAChBh0B,OAAO,EACPC,UAAU,EACV,mBAAA8Q,CAAoBwrB,EAA4C/jB,GAC9D,MAAMye,EAAUsF,EAAqBp4B,IAAIU,KACzC,GAAgB,OAAZoyB,EAAkB,CACpB,IAAIjxB,EAA0B,KAC1BwS,aAA4Bwb,IAC9BhuB,EAAawS,EAAiBrU,IAAIU,MAEpChQ,KAAK4G,MAAMwT,KAAK5K,WAAW,KAAM4yB,EAASjxB,EAAYu2B,EAAqB3pC,IAC5E,CACDiC,KAAK4kC,QACN,EACD,oBAAA3e,CAAqByhB,GACnB1nC,KAAK4G,MAAM44B,OAAOrV,iBAAiBud,GACnC,MAAMtF,EAAUsF,EAAqBp4B,IAAIU,KACzB,OAAZoyB,GACFpiC,KAAK4G,MAAMwT,KAAK6Y,WAAWmP,EAE9B,EACD,mBAAAhmB,CAAoBsrB,GAClBA,EAAqB/I,SACrB3+B,KAAK4kC,QACN,EACD,sBAAA+C,CAAuBnI,EAAiBkI,GAClClI,GACFx/B,KAAK4G,MAAM44B,OAAOnpB,iBAAiBqxB,GACnC1nC,KAAK4nC,aAEL5nC,KAAK4G,MAAM44B,OAAOrV,iBAAiBud,GACnC1nC,KAAK4kC,SAER,EACD,uBAAAiD,CAAwBzF,EAAkBjxB,EAAyBu2B,GACjE1nC,KAAK4G,MAAMwT,KAAK5K,WAAW,KAAM4yB,EAASjxB,EAAYu2B,EAAqB3pC,IAC5E,EACD,sBAAA+pC,CAAuB1F,EAAkBsF,GACvC1nC,KAAK4G,MAAMwT,KAAK6Y,WAAWmP,EAC5B,EACD,uBAAA2F,CAAwB3I,EAAkBsI,GACpCtI,EACFp/B,KAAK4G,MAAMw4B,QAAQ/oB,iBAAiBqxB,GAEpC1nC,KAAK4G,MAAMw4B,QAAQjV,iBAAiBud,GAEtC,MAAMM,EAAyBhoC,KAAK4G,MAAMw4B,QAAQ6I,gBAC5CC,EAAoBloC,KAAKwV,YAC/B,IAAK,MAAMC,KAAgByyB,EAAmB,CAC5C,MAAMC,EAAmBD,EAAkBzyB,GACZ,IAA3BuyB,GAAiChoC,KAAK4G,MAAMw4B,QAAQgJ,cAAcD,GAGpEA,EAAiB7I,UAAUtzB,cAAa,GAFxCm8B,EAAiB7I,UAAUtzB,cAAa,EAI3C,CACF,EACD,MAAA44B,GACE,GAAI5kC,KAAK4G,MAAM44B,OAAOyI,gBAAkB,EACtC,OAEF,MAAMI,EAAgBroC,KAAK4G,MAAM0hC,cAAcnJ,GAC/C,IAAIoJ,EAAgD,KACpD,MAAMC,EAAoBxoC,KAAK4G,MAAM44B,OAAOhqB,YAC5C,IAAK,MAAMC,KAAgB+yB,EAAmB,CAC5CD,EAAmBC,EAAkB/yB,GACrC,KACD,CACqB,OAAlB4yB,GAA0BA,IAAkBE,GACtB,OAArBA,GAA8BA,EAAiB/I,OAAOlgC,QAChC,OAArBipC,GACFvoC,KAAK4G,MAAM44B,OAAOrV,iBAAiBoe,GAErCvoC,KAAK4G,MAAM44B,OAAOnpB,iBAAiBgyB,GAEtC,EACD,QAAAT,GACE,GAAI5nC,KAAK4G,MAAM44B,OAAOyI,iBAAmB,EACvC,OAEF,MAAMO,EAAoBxoC,KAAK4G,MAAM44B,OAAOhqB,YAC5C,IAAK,MAAMC,KAAgB+yB,EAAmB,CAC5C,MAAMD,EAAmBC,EAAkB/yB,GAC3C,IAAK8yB,EAAiB/I,OAAOlgC,MAAO,CAClCU,KAAK4G,MAAM44B,OAAOrV,iBAAiBoe,GACnC,KACD,CACF,CACF,KAOFlH,EAAA,CAAAoG,EAAAA,cAAc,CACb3rB,eAAgBqjB,EAChB/zB,UAAU,EACV,mBAAA8Q,CAAoBwrB,EAA4C/jB,GAC1D3jB,KAAK4G,MAAM6hC,WACbf,EAAqBp2B,QAAQtR,KAAK4G,OAEpC,MAAMk3B,EAAW4J,EAAqB7R,KAAK7lB,KAC3C,GAAiB,OAAb8tB,EAAmB,CACrB,IAAI3sB,EAA0B,KAC1BwS,aAA4Bwb,IAC9BhuB,EAAawS,EAAiBkS,KAAK7lB,MAErChQ,KAAK4G,MAAM88B,MAAMl0B,WAAW,KAAMsuB,EAAU3sB,EAAYu2B,EAAqB3pC,IAC9E,CACF,EACD,oBAAAkoB,CAAqByhB,GACnB,MAAM5J,EAAW4J,EAAqB7R,KAAK7lB,KAC1B,OAAb8tB,GACF99B,KAAK4G,MAAM88B,MAAMzQ,WAAW6K,GAE1B99B,KAAK4G,MAAM6hC,WACbf,EAAqBj2B,UAAUzR,KAAK4G,MAEvC,EACD,wBAAA8hC,CAAyB5K,EAA4C3sB,EAAyBu2B,GAC5F1nC,KAAK4G,MAAM88B,MAAMl0B,WAAW,KAAMsuB,EAAU3sB,EAAYu2B,EAAqB3pC,IAC9E,EACD,uBAAA4qC,CAAwB7K,EAA4C4J,GAClE1nC,KAAK4G,MAAM88B,MAAMzQ,WAAW6K,EAC7B,KAIFoD,EAAA,CAAAuG,EAAAA,cAAc,CACb3rB,eAAgBqjB,KAIjBN,EAAA,CAAAtmB,EAAAA,SAAS,CACRC,YAAa/K,EACbrC,UAAU,EACV,sBAAA0zB,CAAuBjxB,GACrB7N,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,EACxC,KA3hBH1Q,EAAkB,KAAA,KAAA8xB,EAAA,CAAAnxB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsjB,MAAAtsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsjB,MAAwEhsB,CAAAA,IAAAisB,EAAAtmB,GAmB1F9H,EAAS,KAAA,KAAA29B,EAAA,CAAAh9B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAitB,WAAAj2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAitB,WAAsC31B,CAAAA,IAAA41B,EAAAjwB,GAkB/C9H,EAAS,KAAA,KAAA49B,EAAA,CAAAj9B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmtB,YAAAn2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmtB,YAAwC71B,CAAAA,IAAA81B,EAAAnwB,GAmCjD9H,EAAS,KAAA,KAAA69B,EAAA,CAAAl9B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqtB,MAAAr2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqtB,MAA2F/1B,CAAAA,IAAAg2B,EAAArwB,GAwBpG9H,EAAS,KAAA,KAAA2+B,EAAA,CAAAh+B,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAutB,SAAAv2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAutB,SAA6Cj2B,CAAAA,IAAAk2B,EAAAvwB,GAoBtD9H,EAAS,KAAA,KAAAs/B,EAAA,CAAA3+B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAytB,YAAAz2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAytB,YAEPn2B,CAAAA,IAAAo2B,EAAAzwB,GAgBF9H,EAAS,KAAA,KAAAioC,EAAA,CAAAtnC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAs7B,SAAAtkC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAs7B,SAA4EhkC,CAAAA,IAAAikC,EAAAt+B,GAgBrF9H,EAAS,KAAA,KAAAqoC,EAAA,CAAA1nC,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAw7B,UAAAxkC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAw7B,UAAyElkC,CAAAA,IAAAmkC,EAAAx+B,GA2ClF9H,EAAS,KAAA,KAAA2/B,EAAA,CAAAh/B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2tB,MAAA32B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2tB,MAKPr2B,CAAAA,IAAAs2B,EAAA3wB,GAQF9H,EAAS,KAAA,KAAAuoC,EAAA,CAAA5nC,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA07B,MAAA1kC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA07B,MAAwDpkC,CAAAA,IAAAqkC,EAAA1+B,GAqBjE9H,EAAS,KAAA,KAAAwoC,EAAA,CAAA7nC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA47B,WAAA5kC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA47B,WAAsCtkC,CAAAA,IAAAukC,EAAA5+B,GAgE/C9H,EAAS,KAAA,KAAA2d,EAAA,CAAAhd,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAkS,MAAAlb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAkS,MAGP5a,CAAAA,IAAA6a,EAAAlV,GAyBF9H,EAAS,KAAA,KAAAwgB,EAAA,CAAA7f,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA0U,OAAA1d,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA0U,OAA0Dpd,CAAAA,IAAAqd,EAAA1X,GAqBnE9H,EAAS,KAAA,KAAA+pC,EAAA,CAAAppC,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA87B,KAAA9kC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA87B,KAEPxkC,CAAAA,IAAAykC,EAAA9+B,GAiBF9H,EAAS,KAAA,KAAAkqC,EAAA,CAAAvpC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAg8B,QAAAhlC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAg8B,QAEP1kC,CAAAA,IAAA2kC,EAAAh/B,GAcF9H,EAAS,KAAA,KAAAmqC,EAAA,CAAAxpC,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAk8B,UAAAllC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAk8B,UAAmC5kC,CAAAA,IAAA6kC,GAAAl/B,GAc5C9H,EAAS,KAAA,KAAAoqC,EAAA,CAAAzpC,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAo8B,WAAAplC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAo8B,WAAoC9kC,CAAAA,IAAA+kC,GAAAp/B,GAQ7C9H,EAAS,KAAA,KAAAwe,EAAA,CAAA7d,KAAA,QAAAO,KAAA,OAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,SAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAoS,KAAApb,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAoS,KAA8B9a,CAAAA,IAAA+a,GAAApV,GA6FvC9H,EAAS,KAAA,KAAAqqC,EAAA,CAAA1pC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAs8B,OAAAtlC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAs8B,OAGPhlC,CAAAA,IAAAilC,GAAAt/B,GAkCF9H,EAAS,KAAA,KAAAkkC,EAAA,CAAAvjC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAw3B,OAAAxgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAw3B,OAAoFlgC,CAAAA,IAAAmgC,GAAAx6B,GAK7F9H,EAAS,KAAA,KAAA+jC,EAAA,CAAApjC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAo3B,QAAApgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAo3B,QAAoD9/B,CAAAA,IAAA+/B,GAAAp6B,GAS7D9H,EAAS,KAAA,KAAA0hC,EAAA,CAAA/gC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAquB,SAAAr3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAquB,SAAuE/2B,CAAAA,IAAAg3B,GAAArxB,GAiBzEH,EAAAoyB,WAA6B+H,EAAAA,eAAeC,QAAQ,iBAAAp6B,CA/kB7B,EAAA,GCNnB8jC,EAAiB,4IAAjB,OAAA9jC,EAAA,cAA0BovB,oDAiCnBl0B,KAAAsrB,OAAwElsB,EAAAY,KAAAiF,GAAA7F,EAAAY,KAAAurB,OAAA,IAyBjFvrB,KAAA6oC,SAAoCzpC,EAAAY,KAAA8oC,OAAA,GASpC9oC,KAAA+oC,UAAsC3pC,EAAAY,KAAAgpC,OAAA,GAuCtChpC,KAAAipC,IAAiD7pC,EAAAY,KAAAkpC,OAAA,GAmBjDlpC,KAAAmpC,SAEP/pC,EAAAY,KAAAopC,OAAA,GASOppC,KAAAqpC,OAAkCjqC,EAAAY,KAAAspC,OAAA,GAgBlCtpC,KAAAi1B,WAAsC71B,EAAAY,KAAAk1B,OAAA,GAkBtCl1B,KAAAm1B,YAAwC/1B,EAAAY,KAAAo1B,OAAA,GAkCxCp1B,KAAAq1B,MAA2Fj2B,EAAAY,KAAAs1B,OAAA,GAwB3Ft1B,KAAAu1B,SAA6Cn2B,EAAAY,KAAAw1B,OAAA,GAoB7Cx1B,KAAAy1B,YAEPr2B,EAAAY,KAAA01B,OAAA,GA2CO11B,KAAA21B,MAKPv2B,EAAAY,KAAA41B,OAAA,GAQO51B,KAAA0jC,MAAwDtkC,EAAAY,KAAA2jC,OAAA,GA2FxD3jC,KAAAskC,OAGPllC,EAAAY,KAAAukC,OAAA,GAkCOvkC,KAAAw/B,OAAoFpgC,EAAAY,KAAAy/B,OAAA,GAKpFz/B,KAAAo/B,QAAoDhgC,EAAAY,KAAAq/B,OAAA,GASpDr/B,KAAAq2B,SAAuEj3B,EAAAY,KAAAs2B,OAAA,EAkBjF,CA/cW,UAAAM,CAAWF,GACnB,OAAQ12B,KAAKJ,YAAyCs3B,WAAWC,OAAOT,EACzE,CAES,mBAAA8N,CAAoBC,GAE7B,CAES,oBAAAC,CAAqBD,GAC7B,OAAOziC,EAAAA,OAAOi1B,OAAOwN,EAASnlC,MAAO,EACtC,CAqbkB,eAAAqlC,CAAgB/R,EAAmB50B,GACpD6H,MAAM8+B,gBAAgB/R,EAAO50B,GAC7BgC,KAAKskC,OAAOM,QACb,CAEkB,gBAAAC,GACjBh/B,MAAMg/B,mBACN7kC,KAAKw/B,OAAOsF,mBAAmB9kC,KAChC,CAEkB,eAAA+kC,GACjBl/B,MAAMk/B,kBACN/kC,KAAKw/B,OAAOwF,qBAAqBhlC,KAClC,GAhcAivB,EAAA,CAAAne,EAAAA,aAAa,CACZtH,SAAS,EACT,YAAA+H,CAAa2d,GACXlvB,KAAK4G,MAAM0K,QAAQ4d,EACpB,EACD,eAAA1d,CAAgB0d,GACdlvB,KAAK4G,MAAM6K,UAAUyd,EACtB,EACD,UAAA5c,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD6iB,UAAW,CAAC,YACZ7d,MAAO,CACL+J,WAAY,QAEdqc,WAAY,QAEf,KAIFmS,EAAA,CAAAx3B,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,WAAAojB,CAAYhnB,EAAcinB,EAAkB50B,EAAqBD,GAChD,OAAXC,IACFA,EAASgC,KAAK4G,MAAMquB,WAAWjlB,MAEjCrE,EAAOgnB,YAAYC,EAAO50B,EAAQD,EACnC,EACD,UAAAuU,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpDgF,MAAO,CACL2mB,UAAW,IAEb7I,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIFwa,EAAA,CAAAz3B,EAAAA,QAAQ,CACPC,SAAU6lB,EAAAA,WACV3lB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMiiC,SAASr5B,YAC5B,KAIFi6B,EAAA,CAAA13B,EAAAA,QAAQ,CACPC,SAAU03B,EAAAA,QACVx3B,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMmiC,UAAUv5B,YAC7B,EACD,aAAA0B,CAAcy4B,GACZ3pC,KAAK4G,MAAMuiC,SAASzrB,QAAQisB,EAAQtkC,MAAM2K,MAC1ChQ,KAAK4G,MAAMyiC,OAAOtL,SAAS4L,EAAQN,OAAOrL,MAC3C,EACD,cAAAtnB,CAAeizB,GACb3pC,KAAK4G,MAAMyiC,OAAOpL,cAClBj+B,KAAK4G,MAAMuiC,SAASzrB,QAAQ,KAC7B,EACD,mBAAAua,CAAoB7hB,GAClBpW,KAAK4G,MAAMuiC,SAASzrB,QAAQtH,EAC7B,EACD,kBAAA8hB,CAAmB9hB,GACjBpW,KAAK4G,MAAMuiC,SAASzrB,QAAQ,KAC7B,EACD,mBAAAksB,CAAoB5I,GAClBhhC,KAAK4G,MAAMyiC,OAAOlL,QAAQ6C,EAC3B,EACD,kBAAA6I,CAAmB7I,GACjBhhC,KAAK4G,MAAMyiC,OAAOpW,WAAW+N,EAC9B,EACD1uB,WAAAA,KACS,IAAIo3B,WAAU19B,aAAa,CAChCmsB,YAAazE,EAAAA,OAAO0E,IAAI,GACxBC,YAAa3E,EAAAA,OAAO0E,IAAI,IACxBU,WAAYpF,EAAAA,OAAO0E,IAAI,IACvBW,WAAYrF,EAAAA,OAAO0E,IAAI,IACvBY,KAAMrmB,EAAKqmB,KAAAA,UAMhB8Q,EAAA,CAAA/3B,EAAAA,QAAQ,CACPC,SAAUknB,EAAAA,aACVhnB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMqiC,IAAI15B,YACvB,EACD,QAAAwB,CAASqF,GACHA,aAAqB+iB,EAAAA,cACvB/iB,EAAU4iB,KAAKI,aAAY,GAC3BhjB,EAAU4iB,KAAKhtB,aAAa2G,EAAK0mB,KAAAA,WACjCjjB,EAAUohB,UAAUxrB,aAAa2G,EAAK6kB,KAAAA,WAEzC,EACD,OAAAzH,CAAQ1qB,GACN,OAAOrF,KAAK4G,MAAMqiC,IAAI15B,aAAalK,MAAMrG,IAAIqG,EAC9C,KAMF0kC,EAAA,CAAAvL,EAAAA,QAAQ,CACPxsB,SAAU6vB,EAAAA,UACVz2B,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMqiC,IAAI15B,YACvB,KAIFurB,EAAA,CAAA/oB,EAAAA,QAAQ,CACPC,SAAU2c,EAAAA,UACVzc,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM0kB,MAAM/b,YACzB,EACD,UAAA+C,GACE,OAAQzM,MAAMyM,aAA2BtG,aAAa,CACpD8iB,UAAW,EACXC,WAAY,GACZC,eAAgB,GAEnB,KAIF+L,EAAA,CAAAhpB,EAAAA,QAAQ,CACPC,SAAU6lB,EAAAA,WACV3lB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMquB,WAAWzlB,YAC9B,EACD,UAAA8C,GACE,OAAQzM,MAAMyM,aAA4BtG,aAAa,CACrDgF,MAAO,CACLi0B,YAAa,gBAEfC,aAAa,EACb1W,eAAe,GAElB,KAIFwM,EAAA,CAAAjpB,EAAAA,QAAQ,CACPC,SAAUipB,EAAAA,UACV/oB,SAAS,EACT9G,UAAU,EACV,cAAI+G,GACF,OAAOnS,KAAK4G,MAAMuuB,YAAY3lB,YAC/B,EACD,aAAA0B,CAAcgqB,GACZl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQwd,EAAUvF,MAAM3lB,KAC1C,EACD,cAAA0G,CAAewkB,GACbl7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,mBAAAyd,CAAoBC,GAClBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ0d,EAC1B,EACD,kBAAAC,CAAmBD,GACjBp7B,KAAK4G,MAAM+uB,MAAMjY,QAAQ,KAC1B,EACD,UAAApL,GACE,MAAM4oB,EAAar1B,MAAMyM,aAA6CtG,aAAa,CACjF0vB,UAAW,GACXC,YAAa,GACbC,aAAc,GACdC,WAAY,KAKd,OAHAX,EAAUO,gBAAe,GACzBP,EAAUiK,gBAAe,GACzBjK,EAAUvF,MAAMnmB,aACT0rB,CACR,KAIFY,EAAA,CAAA/pB,EAAAA,QAAQ,CACPC,SAAU+pB,EAAAA,SACV7pB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASirB,GACP,MAAMnuB,EAAY7N,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAUvO,MAC7DU,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,EACxC,EACDyE,WAAAA,KACS,IAAI2pB,eAAwBjwB,aAAa,CAC9CkwB,cAAe,KACfC,cAAe,EACfC,eAAgB,EAChBC,cAAe1pB,EAAK6kB,KAAAA,UACpB8E,cAAe,EACfC,cAAe5pB,EAAK6kB,KAAAA,UACpBgF,YAAa,OAMlBC,EAAA,CAAA1qB,EAAAA,QAAQ,CACPC,SAAU0qB,EAAAA,SACVxqB,SAAS,EACT,cAAIC,GACF,OAAOnS,KAAK4G,MAAM2uB,SAASvlB,IAC5B,EACD,eAAAsnB,CAAgBzpB,GACd,GAAkB,OAAdA,EAEF,YADA7N,KAAKizB,aAGP,MAAM0J,EAAkB,IAAIC,EAAAA,YAAsB/uB,GAAW7B,aAAa,CACxEswB,cAAe,IAEjBK,EAAgBE,eAAc,GAC9B78B,KAAKwP,WAAW,KAAMmtB,EACvB,KAMFG,EAAA,CAAA/qB,EAAAA,QAAQ,CACPC,SAAU+qB,EAAAA,UACV7qB,SAAS,EACT,IAAAjT,GACEe,KAAKg9B,cAAgBh9B,KAAKg9B,cAAcC,KAAKj9B,MAC7CA,KAAKk9B,eAAiBl9B,KAAKk9B,eAAeD,KAAKj9B,MAC/CA,KAAKm9B,eAAiBn9B,KAAKm9B,eAAeF,KAAKj9B,KAChD,EACD,cAAImS,GACF,OAAOnS,KAAK4G,MAAMyuB,MAAM7lB,YACzB,EACD,QAAAuB,CAASqqB,GACPA,EAAUgC,iBAAiB,cAAep9B,KAAKg9B,eAC/C5B,EAAUgC,iBAAiB,eAAgBp9B,KAAKk9B,gBAChD9B,EAAUgC,iBAAiB,eAAgBp9B,KAAKm9B,eACjD,EACD,UAAA1O,CAAW2M,GACTA,EAAUiC,oBAAoB,cAAer9B,KAAKg9B,eAClD5B,EAAUiC,oBAAoB,eAAgBr9B,KAAKk9B,gBACnD9B,EAAUiC,oBAAoB,eAAgBr9B,KAAKm9B,eACpD,EACD,aAAAG,CAAcvpB,GACZ,MAAMqnB,EAAYp7B,KAAKgQ,KACjButB,EAAuB,OAAdnC,EAAqBA,EAAUmC,OAAOj+B,MAAQ,KAC7D,GAAe,OAAXi+B,EAAiB,CACnB,MAAMC,EAAepC,EAAWoC,aAC1B/iB,EAAI1G,EAAM0pB,QAAUD,EAAa/iB,EACjCijB,EAAIH,EAAOI,QAAQljB,GACzBza,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa0xB,EACzD,CACF,EACD,aAAAV,CAAcjpB,GACZ/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAmpB,CAAenpB,GACb/T,KAAKs9B,cAAcvpB,EACpB,EACD,cAAAopB,CAAeppB,GACb/T,KAAK4G,MAAMyvB,SAASliB,aAAatG,UAAU7B,aAAa,KACzD,KASF05B,EAAA,CAAAlH,EAAAA,QAAQ,CACPxsB,SAAU6rB,EAAAA,eACV,cAAI1rB,GACF,OAAOnS,KAAK4G,MAAM+uB,MAAMpmB,YACzB,KAIFi4B,EAAA,CAAAC,EAAAA,cAAc,CACb3rB,eAAgBqjB,EAChBh0B,OAAO,EACPC,UAAU,EACV,mBAAA8Q,CAAoBwrB,EAA4C/jB,GAC9D,MAAMqd,EAAY0G,EAAqBhI,MAAM1vB,KAC7C,GAAkB,OAAdgxB,EAAoB,CACtB,IAAI7vB,EAA0B,KAC1BwS,aAA4Bwb,IAC9BhuB,EAAawS,EAAiB+b,MAAM1vB,MAEtChQ,KAAK4G,MAAMyiC,OAAO75B,WAAW,KAAMwxB,EAAW7vB,EAAYu2B,EAAqB3pC,IAChF,CACDiC,KAAK4kC,QACN,EACD,oBAAA3e,CAAqByhB,GACnB1nC,KAAK4G,MAAM44B,OAAOrV,iBAAiBud,GACnC,MAAM1G,EAAY0G,EAAqBhI,MAAM1vB,KAC3B,OAAdgxB,GACFhhC,KAAK4G,MAAMyiC,OAAOpW,WAAW+N,EAEhC,EACD,mBAAA5kB,CAAoBsrB,GAClBA,EAAqB/I,SACrB3+B,KAAK4kC,QACN,EACD,sBAAA+C,CAAuBnI,EAAiBkI,GAClClI,GACFx/B,KAAK4G,MAAM44B,OAAOnpB,iBAAiBqxB,GACnC1nC,KAAK4nC,aAEL5nC,KAAK4G,MAAM44B,OAAOrV,iBAAiBud,GACnC1nC,KAAK4kC,SAER,EACD,yBAAAoF,CAA0BhJ,EAAsB7vB,EAAyBu2B,GACvE1nC,KAAK4G,MAAMyiC,OAAO75B,WAAW,KAAMwxB,EAAW7vB,EAAYu2B,EAAqB3pC,IAChF,EACD,wBAAAksC,CAAyBjJ,EAAsB0G,GAC7C1nC,KAAK4G,MAAMyiC,OAAOpW,WAAW+N,EAC9B,EACD,uBAAA+G,CAAwB3I,EAAkBsI,GACpCtI,EACFp/B,KAAK4G,MAAMw4B,QAAQ/oB,iBAAiBqxB,GAEpC1nC,KAAK4G,MAAMw4B,QAAQjV,iBAAiBud,GAEtC,MAAMM,EAAyBhoC,KAAK4G,MAAMw4B,QAAQ6I,gBAC5CC,EAAoBloC,KAAKwV,YAC/B,IAAK,MAAMC,KAAgByyB,EAAmB,CAC5C,MAAMC,EAAmBD,EAAkBzyB,GACZ,IAA3BuyB,GAAiChoC,KAAK4G,MAAMw4B,QAAQgJ,cAAcD,GAGpEA,EAAiB7I,UAAUtzB,cAAa,GAFxCm8B,EAAiB7I,UAAUtzB,cAAa,EAI3C,CACF,EACD,MAAA44B,GACE,GAAI5kC,KAAK4G,MAAM44B,OAAOyI,iBAAmB,EAAG,CAC1C,MAAMI,EAAgBroC,KAAK4G,MAAM0hC,cAAcnJ,GAC/C,IAAIoJ,EAAgD,KACpD,MAAMC,EAAoBxoC,KAAK4G,MAAM44B,OAAOhqB,YAC5C,IAAK,MAAMC,KAAgB+yB,EAAmB,CAC5CD,EAAmBC,EAAkB/yB,GACrC,KACD,CACqB,OAAlB4yB,GAA0BA,IAAkBE,GACtB,OAArBA,GAA8BA,EAAiB/I,OAAOlgC,QAChC,OAArBipC,GACFvoC,KAAK4G,MAAM44B,OAAOrV,iBAAiBoe,GAErCvoC,KAAK4G,MAAM44B,OAAOnpB,iBAAiBgyB,GAEtC,CACF,EACD,QAAAT,GACE,GAAI5nC,KAAK4G,MAAM44B,OAAOyI,gBAAkB,EAAG,CACzC,MAAMO,EAAoBxoC,KAAK4G,MAAM44B,OAAOhqB,YAC5C,IAAK,MAAMC,KAAgB+yB,EAAmB,CAC5C,MAAMD,EAAmBC,EAAkB/yB,GAC3C,IAAK8yB,EAAiB/I,OAAOlgC,MAAO,CAClCU,KAAK4G,MAAM44B,OAAOrV,iBAAiBoe,GACnC,KACD,CACF,CACF,CACF,KAOFlH,EAAA,CAAAoG,EAAAA,cAAc,CACb3rB,eAAgBqjB,EAChB/zB,UAAU,EACV,mBAAA8Q,CAAoBwrB,EAA4C/jB,GAC1D3jB,KAAK4G,MAAM6hC,WACbf,EAAqBp2B,QAAQtR,KAAK4G,OAEpC,MAAMk3B,EAAW4J,EAAqB7R,KAAK7lB,KAC3C,GAAiB,OAAb8tB,EAAmB,CACrB,IAAI3sB,EAA0B,KAC1BwS,aAA4Bwb,IAC9BhuB,EAAawS,EAAiBkS,KAAK7lB,MAErChQ,KAAK4G,MAAM88B,MAAMl0B,WAAW,KAAMsuB,EAAU3sB,EAAYu2B,EAAqB3pC,IAC9E,CACF,EACD,oBAAAkoB,CAAqByhB,GACnB,MAAM5J,EAAW4J,EAAqB7R,KAAK7lB,KAC1B,OAAb8tB,GACF99B,KAAK4G,MAAM88B,MAAMzQ,WAAW6K,GAE1B99B,KAAK4G,MAAM6hC,WACbf,EAAqBj2B,UAAUzR,KAAK4G,MAEvC,EACD,wBAAA8hC,CAAyB5K,EAA4C3sB,EAAyBu2B,GAC5F1nC,KAAK4G,MAAM88B,MAAMl0B,WAAW,KAAMsuB,EAAU3sB,EAAYu2B,EAAqB3pC,IAC9E,EACD,uBAAA4qC,CAAwB7K,EAA4C4J,GAClE1nC,KAAK4G,MAAM88B,MAAMzQ,WAAW6K,EAC7B,KAIFoD,EAAA,CAAAuG,EAAAA,cAAc,CACb3rB,eAAgBqjB,KAIjBN,EAAA,CAAAtmB,EAAAA,SAAS,CACRC,YAAa/K,EACbrC,UAAU,EACV,sBAAA0zB,CAAuBjxB,GACrB7N,KAAK4G,MAAM6uB,YAAY6B,gBAAgBzpB,EACxC,KA7ZH1Q,EAAkB,KAAA,KAAA8xB,EAAA,CAAAnxB,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAsjB,MAAAtsB,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAsjB,MAAwEhsB,CAAAA,IAAAisB,EAAAtmB,GAyB1F9H,EAAS,KAAA,KAAAosC,EAAA,CAAAzrC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA6gC,SAAA7pC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA6gC,SAAoCvpC,CAAAA,IAAAwpC,EAAA7jC,GAS7C9H,EAAS,KAAA,KAAAqsC,EAAA,CAAA1rC,KAAA,QAAAO,KAAA,YAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,cAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA+gC,UAAA/pC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA+gC,UAAsCzpC,CAAAA,IAAA0pC,EAAA/jC,GAuC/C9H,EAAS,KAAA,KAAAssC,EAAA,CAAA3rC,KAAA,QAAAO,KAAA,MAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,QAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAihC,IAAAjqC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAihC,IAAiD3pC,CAAAA,IAAA4pC,EAAAjkC,GAmB1D9H,EAAS,KAAA,KAAA2sC,EAAA,CAAAhsC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmhC,SAAAnqC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmhC,SAEP7pC,CAAAA,IAAA8pC,EAAAnkC,GASF9H,EAAS,KAAA,KAAA4sC,EAAA,CAAAjsC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqhC,OAAArqC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqhC,OAAkC/pC,CAAAA,IAAAgqC,EAAArkC,GAgB3C9H,EAAS,KAAA,KAAA29B,EAAA,CAAAh9B,KAAA,QAAAO,KAAA,aAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,eAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAitB,WAAAj2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAitB,WAAsC31B,CAAAA,IAAA41B,EAAAjwB,GAkB/C9H,EAAS,KAAA,KAAA49B,EAAA,CAAAj9B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAmtB,YAAAn2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAmtB,YAAwC71B,CAAAA,IAAA81B,EAAAnwB,GAkCjD9H,EAAS,KAAA,KAAA69B,EAAA,CAAAl9B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAqtB,MAAAr2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAqtB,MAA2F/1B,CAAAA,IAAAg2B,EAAArwB,GAwBpG9H,EAAS,KAAA,KAAA2+B,EAAA,CAAAh+B,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAutB,SAAAv2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAutB,SAA6Cj2B,CAAAA,IAAAk2B,EAAAvwB,GAoBtD9H,EAAS,KAAA,KAAAs/B,EAAA,CAAA3+B,KAAA,QAAAO,KAAA,cAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,gBAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAytB,YAAAz2B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAytB,YAEPn2B,CAAAA,IAAAo2B,EAAAzwB,GA2CF9H,EAAS,KAAA,KAAA2/B,EAAA,CAAAh/B,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA2tB,MAAA32B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA2tB,MAKPr2B,CAAAA,IAAAs2B,EAAA3wB,GAQF9H,EAAS,KAAA,KAAAuoC,EAAA,CAAA5nC,KAAA,QAAAO,KAAA,QAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,UAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAA07B,MAAA1kC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAA07B,MAAwDpkC,CAAAA,IAAAqkC,EAAA1+B,GA2FjE9H,EAAS,KAAA,KAAAqqC,EAAA,CAAA1pC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAs8B,OAAAtlC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAs8B,OAGPhlC,CAAAA,IAAAilC,EAAAt/B,GAkCF9H,EAAS,KAAA,KAAAkkC,EAAA,CAAAvjC,KAAA,QAAAO,KAAA,SAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,WAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAw3B,OAAAxgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAw3B,OAAoFlgC,CAAAA,IAAAmgC,EAAAx6B,GAK7F9H,EAAS,KAAA,KAAA+jC,EAAA,CAAApjC,KAAA,QAAAO,KAAA,UAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,YAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAo3B,QAAApgC,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAo3B,QAAoD9/B,CAAAA,IAAA+/B,EAAAp6B,GAS7D9H,EAAS,KAAA,KAAA0hC,EAAA,CAAA/gC,KAAA,QAAAO,KAAA,WAAAwJ,QAAA,EAAAC,SAAA,EAAAnJ,OAAA,CAAAoJ,IAAAC,GAAA,aAAAA,EAAAjJ,IAAAiJ,GAAAA,EAAAquB,SAAAr3B,IAAA,CAAAgJ,EAAA1I,KAAA0I,EAAAquB,SAAuE/2B,CAAAA,IAAAg3B,EAAArxB,GAiBzEH,EAAAoyB,WAA6B+H,EAAAA,eAAeC,QAAQ,iBAAAp6B,CAjd/B,EAAA"}