// @swim/retail-demo v0.1.0 (c) 2015-2022 Swim.inc
(function(global, factory) {
  typeof exports === "object" && typeof module !== "undefined" ? factory(exports, require("@swim/panel"), require("@swim/component"), require("@swim/view"), require("@swim/dom"), require("@swim/controller"), require("@swim/client"), require("@swim/uri"), require("@swim/widget"), require("@swim/table"), require("@swim/theme"), require("@swim/math"), require("@swim/domain"), require("@swim/graphics"), require("@swim/button")) : typeof define === "function" && define.amd ? define([ "exports", "@swim/panel", "@swim/component", "@swim/view", "@swim/dom", "@swim/controller", "@swim/client", "@swim/uri", "@swim/widget", "@swim/table", "@swim/theme", "@swim/math", "@swim/domain", "@swim/graphics", "@swim/button" ], factory) : (global = typeof globalThis !== "undefined" ? globalThis : global || self, 
  factory((global.swim = global.swim || {}, global.swim.retaildemo = global.swim.retaildemo || {}), global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim, global.swim));
})(this, (function(exports, panel, component, view, dom, controller, client, uri, widget, table, theme, math, domain, graphics, button) {
  "use strict";
  function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
    function accept(f) {
      if (f !== void 0 && typeof f !== "function") throw new TypeError("Function expected");
      return f;
    }
    var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
    var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
    var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
    var _, done = false;
    for (var i = decorators.length - 1; i >= 0; i--) {
      var context = {};
      for (var p in contextIn) context[p] = p === "access" ? {} : contextIn[p];
      for (var p in contextIn.access) context.access[p] = contextIn.access[p];
      context.addInitializer = function(f) {
        if (done) throw new TypeError("Cannot add initializers after decoration has completed");
        extraInitializers.push(accept(f || null));
      };
      var result = (0, decorators[i])(kind === "accessor" ? {
        get: descriptor.get,
        set: descriptor.set
      } : descriptor[key], context);
      if (kind === "accessor") {
        if (result === void 0) continue;
        if (result === null || typeof result !== "object") throw new TypeError("Object expected");
        if (_ = accept(result.get)) descriptor.get = _;
        if (_ = accept(result.set)) descriptor.set = _;
        if (_ = accept(result.init)) initializers.unshift(_);
      } else if (_ = accept(result)) {
        if (kind === "field") initializers.unshift(_); else descriptor[key] = _;
      }
    }
    if (target) Object.defineProperty(target, contextIn.name, descriptor);
    done = true;
  }
  function __runInitializers(thisArg, initializers, value) {
    var useValue = arguments.length > 2;
    for (var i = 0; i < initializers.length; i++) {
      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
    }
    return useValue ? value : void 0;
  }
  typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
  };
  let OrderController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _row_decorators;
    let _row_initializers = [];
    let _leaf_decorators;
    let _leaf_initializers = [];
    let _shapeCell_decorators;
    let _shapeCell_initializers = [];
    let _orderCell_decorators;
    let _orderCell_initializers = [];
    let _statusCell_decorators;
    let _statusCell_initializers = [];
    return _a = class OrderController extends widget.TimeSeriesController {
      constructor(orderId, orderType) {
        super();
        this.orderId = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.row = __runInitializers(this, _row_initializers, void 0);
        this.leaf = __runInitializers(this, _leaf_initializers, void 0);
        this.shapeCell = __runInitializers(this, _shapeCell_initializers, void 0);
        this.orderCell = __runInitializers(this, _orderCell_initializers, void 0);
        this.statusCell = __runInitializers(this, _statusCell_initializers, void 0);
        this.setKey(orderId);
        this.orderId = orderId;
        this.orderType = orderType;
      }
    }, (() => {
      _row_decorators = [ view.ViewRef({
        viewType: table.RowView,
        extends: true,
        initView(rowView) {
          rowView.set({
            style: {
              height: "72px"
            }
          });
        }
      }) ];
      _leaf_decorators = [ view.ViewRef({
        viewType: table.LeafView,
        extends: true,
        initView(leafView) {
          leafView.set({
            style: {
              height: "40px",
              marginTop: "16px",
              marginBottom: "16px"
            }
          });
        },
        viewDidPress() {
          return;
        },
        viewDidLongPress() {
          return;
        }
      }) ];
      _shapeCell_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        viewKey: "shape",
        extends: true,
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _orderCell_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        viewKey: "order",
        extends: true,
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      _statusCell_decorators = [ view.ViewRef({
        viewType: table.TextCellView,
        viewKey: "status",
        extends: true,
        get parentView() {
          return this.owner.leaf.insertView();
        },
        createView() {
          return table.TextCellView.create().set({
            style: {
              color: theme.Look.accentColor
            }
          });
        }
      }) ];
      __esDecorate(null, null, _row_decorators, {
        kind: "field",
        name: "row",
        static: false,
        private: false,
        access: {
          has: obj => "row" in obj,
          get: obj => obj.row,
          set: (obj, value) => {
            obj.row = value;
          }
        }
      }, _row_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _leaf_decorators, {
        kind: "field",
        name: "leaf",
        static: false,
        private: false,
        access: {
          has: obj => "leaf" in obj,
          get: obj => obj.leaf,
          set: (obj, value) => {
            obj.leaf = value;
          }
        }
      }, _leaf_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _shapeCell_decorators, {
        kind: "field",
        name: "shapeCell",
        static: false,
        private: false,
        access: {
          has: obj => "shapeCell" in obj,
          get: obj => obj.shapeCell,
          set: (obj, value) => {
            obj.shapeCell = value;
          }
        }
      }, _shapeCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderCell_decorators, {
        kind: "field",
        name: "orderCell",
        static: false,
        private: false,
        access: {
          has: obj => "orderCell" in obj,
          get: obj => obj.orderCell,
          set: (obj, value) => {
            obj.orderCell = value;
          }
        }
      }, _orderCell_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusCell_decorators, {
        kind: "field",
        name: "statusCell",
        static: false,
        private: false,
        access: {
          has: obj => "statusCell" in obj,
          get: obj => obj.statusCell,
          set: (obj, value) => {
            obj.statusCell = value;
          }
        }
      }, _statusCell_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  var OrderType;
  (function(OrderType) {
    OrderType["OrderA"] = "A";
    OrderType["OrderB"] = "B";
    OrderType["OrderC"] = "C";
    OrderType["Unknown"] = "Unknown";
  })(OrderType || (OrderType = {}));
  var OrderStatus;
  (function(OrderStatus) {
    OrderStatus["orderPlaced"] = "orderPlaced";
    OrderStatus["orderProcessed"] = "orderProcessed";
    OrderStatus["readyForPickup"] = "readyForPickup";
    OrderStatus["pickupCompleted"] = "pickupCompleted";
  })(OrderStatus || (OrderStatus = {}));
  let OrderListController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _customerId_decorators;
    let _customerId_initializers = [];
    let _emptyState_decorators;
    let _emptyState_initializers = [];
    let _panel_decorators;
    let _panel_initializers = [];
    let _tablePanel_decorators;
    let _tablePanel_initializers = [];
    let _header_decorators;
    let _header_initializers = [];
    let _table_decorators;
    let _table_initializers = [];
    let _shapeCol_decorators;
    let _shapeCol_initializers = [];
    let _orderCol_decorators;
    let _orderCol_initializers = [];
    let _statusCol_decorators;
    let _statusCol_initializers = [];
    let _ordersDownlink_decorators;
    let _ordersDownlink_initializers = [];
    return _a = class OrderListController extends widget.TimeTableController {
      constructor(title) {
        var _a;
        super();
        this.listTitle = (__runInitializers(this, _instanceExtraInitializers), void 0);
        this.customerId = __runInitializers(this, _customerId_initializers, void 0);
        this.emptyState = __runInitializers(this, _emptyState_initializers, void 0);
        this.panel = __runInitializers(this, _panel_initializers, void 0);
        this.tablePanel = __runInitializers(this, _tablePanel_initializers, void 0);
        this.header = __runInitializers(this, _header_initializers, void 0);
        this.table = __runInitializers(this, _table_initializers, void 0);
        this.shapeCol = __runInitializers(this, _shapeCol_initializers, void 0);
        this.orderCol = __runInitializers(this, _orderCol_initializers, void 0);
        this.statusCol = __runInitializers(this, _statusCol_initializers, void 0);
        this.ordersDownlink = __runInitializers(this, _ordersDownlink_initializers, void 0);
        this.listTitle = title;
        const customerId = ((_a = /(?<=\/customer\/)[^\s!?\/.*#|]+(?=\/|$|\?)/gm.exec(window.location.href)) !== null && _a !== void 0 ? _a : [ "" ])[0];
        this.customerId.set(customerId);
        this.ordersDownlink.setHostUri("warp://localhost:9001");
        this.ordersDownlink.setNodeUri(`/customer/${this.customerId.value}`);
        this.ordersDownlink.open();
      }
      getOrderShapeSvgView(orderType, status) {
        const htmlView = dom.HtmlView.create();
        let path;
        if (orderType === OrderType.OrderA) {
          path = "M12,2L22,22L2,22Z";
        } else {
          path = "M2,2L22,2L22,22L2,22Z";
        }
        let colorClass = OrderListController.getColorFromStatus(status);
        const htmlIconView = graphics.HtmlIconView.create().setIntrinsic({
          graphics: orderType === OrderType.OrderC ? graphics.PolygonIcon.create(999) : graphics.VectorIcon.create(24, 24, path),
          style: {
            width: "40px",
            height: "40px",
            marginRight: "18px",
            marginBottom: "-2px"
          }
        });
        htmlView.node.classList.add("svg", colorClass);
        htmlView.insertChild(htmlIconView, null);
        return htmlView;
      }
      static getColorFromStatus(status) {
        if (status === OrderStatus.orderPlaced) {
          return "orange";
        } else if (status === OrderStatus.orderProcessed) {
          return "yellow";
        }
        return "teal";
      }
    }, (() => {
      _customerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _emptyState_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const containerEl = document.createElement("div");
          const containerView = dom.HtmlView.fromNode(containerEl).set({
            style: {
              width: "100%",
              height: "auto",
              display: "flex",
              flexDirection: "column",
              justifyContent: "flex-start",
              alignItems: "center",
              margin: "0px",
              marginTop: "80px"
            }
          });
          containerView.appendChild("div").set({
            style: {
              width: "100%",
              height: "auto",
              display: "flex",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "flex-start",
              margin: "0px"
            }
          });
          containerView.appendChild("p").set({
            style: {
              margin: "0px",
              fontSize: "20px",
              fontWeight: "400",
              maxWidth: "400px",
              color: "yellow"
            }
          });
          containerView.node.innerText = "Tap the (+) button below to add an order!";
          return containerView;
        }
      }) ];
      _panel_decorators = [ controller.TraitViewRef({
        extends: true,
        initView(parentPanelView) {
          parentPanelView.node.classList.add("order-list-controller__panel");
          parentPanelView.style.set({
            margin: "0px"
          });
          super.initView(parentPanelView);
          this.owner.table.insertView();
          this.owner.header.insertView();
        }
      }) ];
      _tablePanel_decorators = [ view.ViewRef({
        extends: true,
        initView(panelView) {
          super.initView(panelView);
          panelView.node.classList.add("order-list-controller__panel-view");
          panelView.set({
            style: {
              marginTop: 50
            },
            unitHeight: 1
          });
        }
      }) ];
      _header_decorators = [ view.ViewRef({
        extends: true,
        createView() {
          const headerView = super.createView();
          this.owner.shapeCol.insertView(headerView);
          this.owner.orderCol.insertView(headerView);
          this.owner.statusCol.insertView(headerView);
          return headerView;
        }
      }) ];
      _table_decorators = [ view.ViewRef({
        extends: true,
        createLayout() {
          const cols = new Array;
          cols.push(table.ColLayout.create("shape", 1, 0, 0, false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("order", 2, 0, 0, false, false, theme.Look.accentColor));
          cols.push(table.ColLayout.create("status", 4, 0, 0, false, false, theme.Look.accentColor));
          return new table.TableLayout(null, null, null, math.Length.px(8), cols);
        }
      }) ];
      _shapeCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "shape",
        extends: true,
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Shape"
          });
        }
      }) ];
      _orderCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "order",
        extends: true,
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Order"
          });
        }
      }) ];
      _statusCol_decorators = [ view.ViewRef({
        viewType: table.ColView,
        viewKey: "status",
        extends: true,
        get parentView() {
          return this.owner.header.attachView();
        },
        createView() {
          return table.TextColView.create().set({
            label: "Status"
          });
        }
      }) ];
      _ordersDownlink_decorators = [ client.MapDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "orders",
        consumed: true,
        keyForm: uri.Uri.form(),
        didUpdate(nodeUri, value) {
          var _a, _b, _c, _d, _e;
          let orderController = this.owner.getChild(nodeUri.pathName, OrderController);
          const status = (_a = value.get("status").stringValue()) !== null && _a !== void 0 ? _a : "unknown";
          let orderType = OrderType.Unknown;
          if ((_b = value.get("products").get("A").numberValue()) !== null && _b !== void 0 ? _b : 0) {
            orderType = OrderType.OrderA;
          } else if ((_c = value.get("products").get("B").numberValue()) !== null && _c !== void 0 ? _c : 0) {
            orderType = OrderType.OrderB;
          } else if ((_d = value.get("products").get("C").numberValue()) !== null && _d !== void 0 ? _d : 0) {
            orderType = OrderType.OrderC;
          }
          if (status === "pickupCompleted") {
            if (orderController) {
              this.owner.removeChild(nodeUri.pathName);
            }
          } else if (orderController) {
            let moodStatus = OrderListController.orderStatusMood.get(status);
            const shapeCell = orderController.shapeCell.attachView();
            [ "orange", "yellow", "lime", "teal" ].forEach((color => {
              var _a;
              (_a = shapeCell.content.view) === null || _a === void 0 ? void 0 : _a.node.classList.remove(color);
            }));
            (_e = shapeCell.content.view) === null || _e === void 0 ? void 0 : _e.node.classList.add(OrderListController.getColorFromStatus(status));
            const orderCell = orderController.orderCell.attachView();
            orderCell.modifyMood(theme.Feel.default, moodStatus.moodModifier);
            const statusCell = orderController.statusCell.attachView();
            statusCell.content.set(OrderListController.orderStatusDescription.get(status));
            statusCell.modifyMood(theme.Feel.default, moodStatus.moodModifier);
          } else if (orderController === null) {
            orderController = new OrderController(nodeUri.pathName, orderType);
            orderController.title.setValue(nodeUri.pathName);
            let moodStatus = OrderListController.orderStatusMood.get(status || "orderPlaced");
            const shapeCell = orderController.shapeCell.attachView();
            shapeCell.set({
              style: {
                height: "40px",
                display: "flex",
                flexDirection: "row",
                alignItems: "flex-end"
              }
            }).modifyMood(theme.Feel.default, moodStatus.moodModifier);
            shapeCell.content.insertView(void 0, this.owner.getOrderShapeSvgView(orderType, status));
            shapeCell.node.firstChild.style.alignSelf = "unset";
            const orderCell = orderController.orderCell.attachView();
            orderCell.set({
              style: {
                height: "40px",
                display: "flex",
                flexDirection: "row",
                alignItems: "flex-end"
              }
            }).modifyMood(theme.Feel.default, moodStatus.moodModifier);
            orderCell.content.set(`Order ${orderType}`);
            orderCell.node.firstChild.style.alignSelf = "unset";
            const statusCell = orderController.statusCell.attachView();
            statusCell.set({
              style: {
                height: "40px",
                display: "flex",
                flexDirection: "row",
                alignItems: "flex-end"
              }
            }).modifyMood(theme.Feel.default, moodStatus.moodModifier);
            statusCell.content.set(OrderListController.orderStatusDescription.get(status));
            statusCell.node.firstChild.style.alignSelf = "unset";
            orderController.shapeCell.insertView();
            orderController.orderCell.insertView();
            orderController.statusCell.insertView();
            this.owner.series.addController(orderController, void 0, nodeUri.pathName);
          }
        }
      }) ];
      __esDecorate(null, null, _customerId_decorators, {
        kind: "field",
        name: "customerId",
        static: false,
        private: false,
        access: {
          has: obj => "customerId" in obj,
          get: obj => obj.customerId,
          set: (obj, value) => {
            obj.customerId = value;
          }
        }
      }, _customerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _emptyState_decorators, {
        kind: "field",
        name: "emptyState",
        static: false,
        private: false,
        access: {
          has: obj => "emptyState" in obj,
          get: obj => obj.emptyState,
          set: (obj, value) => {
            obj.emptyState = value;
          }
        }
      }, _emptyState_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _panel_decorators, {
        kind: "field",
        name: "panel",
        static: false,
        private: false,
        access: {
          has: obj => "panel" in obj,
          get: obj => obj.panel,
          set: (obj, value) => {
            obj.panel = value;
          }
        }
      }, _panel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _tablePanel_decorators, {
        kind: "field",
        name: "tablePanel",
        static: false,
        private: false,
        access: {
          has: obj => "tablePanel" in obj,
          get: obj => obj.tablePanel,
          set: (obj, value) => {
            obj.tablePanel = value;
          }
        }
      }, _tablePanel_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _header_decorators, {
        kind: "field",
        name: "header",
        static: false,
        private: false,
        access: {
          has: obj => "header" in obj,
          get: obj => obj.header,
          set: (obj, value) => {
            obj.header = value;
          }
        }
      }, _header_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _table_decorators, {
        kind: "field",
        name: "table",
        static: false,
        private: false,
        access: {
          has: obj => "table" in obj,
          get: obj => obj.table,
          set: (obj, value) => {
            obj.table = value;
          }
        }
      }, _table_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _shapeCol_decorators, {
        kind: "field",
        name: "shapeCol",
        static: false,
        private: false,
        access: {
          has: obj => "shapeCol" in obj,
          get: obj => obj.shapeCol,
          set: (obj, value) => {
            obj.shapeCol = value;
          }
        }
      }, _shapeCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderCol_decorators, {
        kind: "field",
        name: "orderCol",
        static: false,
        private: false,
        access: {
          has: obj => "orderCol" in obj,
          get: obj => obj.orderCol,
          set: (obj, value) => {
            obj.orderCol = value;
          }
        }
      }, _orderCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusCol_decorators, {
        kind: "field",
        name: "statusCol",
        static: false,
        private: false,
        access: {
          has: obj => "statusCol" in obj,
          get: obj => obj.statusCol,
          set: (obj, value) => {
            obj.statusCol = value;
          }
        }
      }, _statusCol_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _ordersDownlink_decorators, {
        kind: "field",
        name: "ordersDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "ordersDownlink" in obj,
          get: obj => obj.ordersDownlink,
          set: (obj, value) => {
            obj.ordersDownlink = value;
          }
        }
      }, _ordersDownlink_initializers, _instanceExtraInitializers);
    })(), _a.orderStatusMood = new Map([ [ OrderStatus.orderPlaced, domain.Status.improving(0, 1, 2, 3, 4)(1.4) ], [ OrderStatus.orderProcessed, domain.Status.improving(0, 1, 2, 3, 4)(2) ], [ OrderStatus.readyForPickup, domain.Status.improving(0, 1, 2, 3, 4)(3) ], [ OrderStatus.pickupCompleted, domain.Status.unknown() ] ]), 
    _a.orderStatusDescription = new Map([ [ OrderStatus.orderPlaced, "Received by store" ], [ OrderStatus.orderProcessed, "Store is processing order" ], [ OrderStatus.readyForPickup, "Order is ready for pickup!" ], [ OrderStatus.pickupCompleted, "Unknown status" ] ]), 
    _a;
  })();
  let MainController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _customerId_decorators;
    let _customerId_initializers = [];
    let _inFlightCount_decorators;
    let _inFlightCount_initializers = [];
    let _pickupReady_decorators;
    let _pickupReady_initializers = [];
    let _sheet_decorators;
    let _sheet_initializers = [];
    let _emptyState_decorators;
    let _emptyState_initializers = [];
    let _placeOrderFab_decorators;
    let _placeOrderFab_initializers = [];
    let _pickupOrdersFab_decorators;
    let _pickupOrdersFab_initializers = [];
    let _orderListController_decorators;
    let _orderListController_initializers = [];
    let _statusDownlink_decorators;
    let _statusDownlink_initializers = [];
    let _placeOrderDownlink_decorators;
    let _placeOrderDownlink_initializers = [];
    let _updateOrderDownlink_decorators;
    let _updateOrderDownlink_initializers = [];
    return _a = class MainController extends panel.BoardController {
      constructor() {
        var _a;
        super();
        this.customerId = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _customerId_initializers, void 0));
        this.inFlightCount = __runInitializers(this, _inFlightCount_initializers, void 0);
        this.pickupReady = __runInitializers(this, _pickupReady_initializers, void 0);
        this.sheet = __runInitializers(this, _sheet_initializers, void 0);
        this.emptyState = __runInitializers(this, _emptyState_initializers, void 0);
        this.placeOrderFab = __runInitializers(this, _placeOrderFab_initializers, void 0);
        this.pickupOrdersFab = __runInitializers(this, _pickupOrdersFab_initializers, void 0);
        this.orderListController = __runInitializers(this, _orderListController_initializers, void 0);
        this.statusDownlink = __runInitializers(this, _statusDownlink_initializers, void 0);
        this.placeOrderDownlink = __runInitializers(this, _placeOrderDownlink_initializers, void 0);
        this.updateOrderDownlink = __runInitializers(this, _updateOrderDownlink_initializers, void 0);
        const boardView = this.sheet.attachView();
        boardView.appendChild(panel.PanelView, MainController.MAIN_PANEL_KEY);
        const customerId = ((_a = /(?<=\/customer\/)[^\s!?\/.*#|]+(?=\/|$|\?)/gm.exec(window.location.href)) !== null && _a !== void 0 ? _a : [ "" ])[0];
        this.customerId.set(customerId);
        const hostUri = "warp://localhost:9001";
        const nodeUri = `/customer/${this.customerId.value}`;
        this.placeOrderDownlink.setHostUri(hostUri);
        this.placeOrderDownlink.setNodeUri(nodeUri);
        this.placeOrderDownlink.open();
        this.statusDownlink.setHostUri(hostUri);
        this.statusDownlink.setNodeUri(nodeUri);
        this.statusDownlink.open();
        this.orderListController.attachController(new OrderListController(MainController.ORDER_LIST_CONTROLLER_KEY));
      }
      createOrder(orderType) {
        const products = {
          [orderType.charAt(orderType.length - 1)]: 1
        };
        const status = "orderPlaced";
        const timestamp = Date.now().valueOf();
        this.placeOrderDownlink.command({
          products: products,
          status: status,
          timestamp: timestamp
        });
      }
      pickUpAllOrders() {
        var _a, _b;
        Object.values((_b = (_a = this.orderListController.controller) === null || _a === void 0 ? void 0 : _a.series.controllers) !== null && _b !== void 0 ? _b : {}).forEach((controller => {
          if (controller === void 0) {
            return;
          }
          this.updateOrderDownlink.setNodeUri(`/order/${controller.key}`);
          this.updateOrderDownlink.open();
          this.updateOrderDownlink.command(`{status:${OrderStatus.pickupCompleted}}`);
          this.updateOrderDownlink.close();
        }));
      }
    }, (() => {
      _customerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _inFlightCount_decorators = [ component.Property({
        valueType: Number,
        value: void 0,
        extends: true,
        binds: true,
        didSetValue(newValue = 0, oldValue) {
          var _a;
          const panelView = this.owner.sheet.attachView().getChild(MainController.MAIN_PANEL_KEY);
          if (newValue > 0 && (oldValue === void 0 || oldValue === 0) && panelView) {
            this.owner.emptyState.removeView();
            (_a = this.owner.orderListController.controller) === null || _a === void 0 ? void 0 : _a.panel.insertView(panelView, void 0, void 0, MainController.ORDER_LIST_CONTROLLER_KEY).set({
              unitWidth: 1,
              unitHeight: 1
            });
          } else if (newValue === 0 && (oldValue === void 0 || oldValue > 0) && panelView) {
            panelView.removeChild(MainController.ORDER_LIST_CONTROLLER_KEY);
            this.owner.emptyState.insertView(panelView).set({
              classList: [ "empty-state-view" ]
            });
          }
        }
      }) ];
      _pickupReady_decorators = [ component.Property({
        valueType: Boolean,
        value: undefined,
        binds: true,
        extends: true,
        didSetValue(value, oldValue = false) {
          const boardView = this.owner.sheet.attachView();
          if (value) {
            this.owner.placeOrderFab.removeView();
            this.owner.pickupOrdersFab.insertView(boardView);
          } else {
            this.owner.pickupOrdersFab.removeView();
            this.owner.placeOrderFab.insertView(boardView);
          }
        }
      }) ];
      _sheet_decorators = [ controller.TraitViewRef({
        extends: true,
        createView() {
          const mainElement = document.createElement("main");
          const boardView = new panel.BoardView(mainElement).set({
            style: {
              width: "100%",
              flexGrow: 1,
              flexShrink: 1,
              flexBasis: "0px",
              margin: "0px",
              backgroundColor: "#212121"
            }
          });
          return boardView;
        }
      }) ];
      _emptyState_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const containerEl = document.createElement("div");
          const containerView = dom.HtmlView.fromNode(containerEl).set({
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              margin: "0px",
              marginBottom: "80px"
            }
          });
          const svgContainerView = containerView.appendChild("div").set({
            style: {
              width: "100%",
              height: "auto",
              display: "flex",
              flexDirection: "row",
              justifyContent: "center",
              alignItems: "flex-start",
              margin: "0px"
            },
            classList: [ "empty-state-svg-container" ]
          });
          svgContainerView.appendChild(graphics.HtmlIconView, "triangle").set({
            graphics: graphics.VectorIcon.create(24, 24, "M12,2L22,22L2,22Z"),
            style: {
              width: "40px",
              height: "40px",
              marginRight: "24px"
            },
            classList: [ "empty-state-svg", "svg", "yellow" ]
          });
          svgContainerView.appendChild(graphics.HtmlIconView, "square").set({
            graphics: graphics.VectorIcon.create(24, 24, "M2,2L22,2L22,22L2,22Z"),
            style: {
              width: "40px",
              height: "40px",
              marginRight: "24px"
            },
            classList: [ "empty-state-svg", "svg", "yellow" ]
          });
          svgContainerView.appendChild(graphics.HtmlIconView, "circle").set({
            graphics: graphics.PolygonIcon.create(999),
            style: {
              width: "40px",
              height: "40px"
            },
            classList: [ "empty-state-svg", "svg", "yellow" ]
          });
          const emptyStatePView = containerView.appendChild("p").set({
            style: {
              fontSize: "20px",
              fontWeight: "400",
              color: "#F8D260",
              marginTop: "24px",
              marginRight: "80px",
              marginBottom: "80px",
              marginLeft: "80px"
            }
          });
          emptyStatePView.node.innerText = "Tap the (+) button below to add an order!";
          return containerView;
        }
      }) ];
      _placeOrderFab_decorators = [ view.ViewRef({
        viewType: button.ButtonStack,
        createView() {
          var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
          const buttonStackView = super.createView().set({
            style: {
              position: "absolute",
              bottom: "24px",
              right: "24px"
            }
          });
          (_a = buttonStackView.button.view) === null || _a === void 0 ? void 0 : _a.style.backgroundColor.set("#F8D260");
          buttonStackView.button.attachView().icon.attachView();
          (_b = buttonStackView.button.view) === null || _b === void 0 ? void 0 : _b.icon.push(graphics.VectorIcon.create(24, 24, "M11,13L5,13L5,11L11,11L11,5L13,5L13,11L19,11L19,13L13,13L13,19L11,19Z"), false);
          (_c = buttonStackView.button.view) === null || _c === void 0 ? void 0 : _c.set({
            style: {
              width: "100%",
              height: "100%"
            },
            classList: [ "button-stack-view" ]
          });
          (_e = (_d = buttonStackView.button.view) === null || _d === void 0 ? void 0 : _d.icon.view) === null || _e === void 0 ? void 0 : _e.set({
            style: {
              transform: math.Transform.parse("scale(1.5,1.5)")
            },
            classList: [ "svg-container-view" ]
          });
          const that = this;
          const handleClick = function(orderType) {
            return function() {
              that.owner.createOrder(orderType);
            };
          };
          const circle = buttonStackView.appendChild(button.ButtonItem, "circle");
          (_f = circle.button) === null || _f === void 0 ? void 0 : _f.style.backgroundColor.set("#F8D260");
          const circleLabel = circle.insertChild(dom.HtmlView, null, "label").set({
            style: {
              height: "24px",
              lineHeight: "24px",
              paddingTop: "2px",
              paddingBottom: "2px",
              paddingLeft: "4px",
              paddingRight: "4px",
              backgroundColor: "rgba(33, 33, 33, 0.8)",
              borderRadius: "4px",
              boxShadow: "0px 0px 4px rgba(33, 33, 33, 0.8)"
            },
            classList: [ "button-label", "circle-label" ]
          });
          circleLabel.node.innerText = "Order C: $30.00";
          const circleButton = circle.button;
          circleButton === null || circleButton === void 0 ? void 0 : circleButton.icon.push(graphics.PolygonIcon.create(999), false).set({
            style: {
              width: "24px",
              height: "24px",
              left: "8px",
              top: "8px"
            },
            iconLayout: {
              width: 24,
              height: 24
            }
          });
          circle.addEventListener("click", handleClick(OrderType.OrderC));
          const square = buttonStackView.appendChild(button.ButtonItem, "square");
          (_g = square.button) === null || _g === void 0 ? void 0 : _g.style.backgroundColor.set("#F8D260");
          const squareLabel = square.insertChild(dom.HtmlView, null, "label").set({
            style: {
              height: "24px",
              lineHeight: "24px",
              paddingTop: "2px",
              paddingBottom: "2px",
              paddingLeft: "4px",
              paddingRight: "4px",
              backgroundColor: "rgba(33, 33, 33, 0.8)",
              borderRadius: "4px",
              boxShadow: "0px 0px 4px rgba(33, 33, 33, 0.8)"
            },
            classList: [ "button-label", "circle-label" ]
          });
          squareLabel.node.innerText = "Order B: $20.00";
          square.addEventListener("click", handleClick(OrderType.OrderB));
          (_h = square.button) === null || _h === void 0 ? void 0 : _h.icon.push(graphics.VectorIcon.create(24, 24, "M2,2L22,2L22,22L2,22Z"), false);
          const triangle = buttonStackView.appendChild(button.ButtonItem, "triangle");
          (_j = triangle.button) === null || _j === void 0 ? void 0 : _j.style.backgroundColor.set("#F8D260");
          const triangleLabel = triangle.insertChild(dom.HtmlView, null, "label").set({
            style: {
              height: "24px",
              lineHeight: "24px",
              paddingTop: "4px",
              paddingBottom: "4px",
              paddingLeft: "6px",
              paddingRight: "6px",
              backgroundColor: "rgba(33, 33, 33, 0.8)",
              borderRadius: "4px",
              boxShadow: "0px 0px 4px rgba(33, 33, 33, 0.8)"
            },
            classList: [ "button-label", "circle-label" ]
          });
          triangleLabel.node.innerText = "Order A: $10.00";
          triangle.addEventListener("click", handleClick(OrderType.OrderA));
          (_k = triangle.button) === null || _k === void 0 ? void 0 : _k.icon.push(graphics.VectorIcon.create(24, 24, "M12,2L22,22L2,22Z"), false);
          return buttonStackView;
        },
        initView(buttonStackView) {
          buttonStackView.node.addEventListener("click", (() => {
            buttonStackView.presence.toggle();
          }));
        }
      }) ];
      _pickupOrdersFab_decorators = [ view.ViewRef({
        viewType: button.FloatingButton,
        createView() {
          var _a;
          const fab = super.createView().set({
            style: {
              position: "absolute",
              bottom: "24px",
              right: "24px",
              width: "56px",
              height: "56px",
              overflow: "unset"
            },
            classList: [ "pickup-orders-fab-button" ]
          });
          fab.style.backgroundColor.set("#66FFDD");
          fab.icon.attachView();
          fab.icon.push(graphics.VectorIcon.create(24, 24, "M5,8L5,19L19,19L19,8L16,8L16,16L12,14L8,16L8,8L5,8ZM5,21C4.45,21,3.98,20.8,3.59,20.41C3.2,20.02,3,19.55,3,19L3,6.53C3,6.29,3.04,6.07,3.11,5.85C3.19,5.63,3.3,5.43,3.45,5.25L4.7,3.73C4.88,3.49,5.11,3.31,5.39,3.19C5.66,3.06,5.95,3,6.25,3L17.75,3C18.05,3,18.34,3.06,18.61,3.19C18.89,3.31,19.12,3.49,19.3,3.73L20.55,5.25C20.7,5.43,20.81,5.63,20.89,5.85C20.96,6.07,21,6.29,21,6.53L21,19C21,19.55,20.8,20.02,20.41,20.41C20.02,20.8,19.55,21,19,21L5,21ZM5.4,6L18.6,6L17.75,5L6.25,5L5.4,6ZM10,8L10,12.75L12,11.75L14,12.75L14,8L10,8ZM5,8.04L19,8.04L5,8.04Z"), false);
          (_a = fab.icon.view) === null || _a === void 0 ? void 0 : _a.set({
            style: {
              transform: math.Transform.parse("scale(1.5,1.5)")
            },
            classList: [ "svg", "black" ]
          });
          const that = this.owner;
          fab.addEventListener("click", (function() {
            that.pickUpAllOrders();
          }));
          const helperText = fab.insertChild("p", null).set({
            style: {
              position: "absolute",
              bottom: "34px",
              right: "35px",
              width: "200px",
              color: "#66FFDD",
              fontSize: "20px",
              fontWeight: "400",
              lineHeight: "27px"
            },
            classList: [ "pickup-orders-helper-text" ]
          });
          helperText.node.innerText = `Tap the button below\n        to pick up orders!`;
          return fab;
        }
      }) ];
      _orderListController_decorators = [ controller.ControllerRef({
        controllerType: OrderListController
      }) ];
      _statusDownlink_decorators = [ client.ValueDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "status",
        consumed: true,
        didSet(value) {
          var _a, _b, _c, _d, _e;
          const orderCount = (_a = value.get("orderCount").numberValue()) !== null && _a !== void 0 ? _a : 0;
          const pickupCompleted = (_b = value.get("orderStates").get(OrderStatus.pickupCompleted).numberValue()) !== null && _b !== void 0 ? _b : 0;
          const newInFlightCount = orderCount - pickupCompleted;
          this.owner.inFlightCount.set(newInFlightCount);
          const orderPlaced = (_c = value.get("orderStates").get(OrderStatus.orderPlaced).numberValue()) !== null && _c !== void 0 ? _c : 0;
          const orderProcessed = (_d = value.get("orderStates").get(OrderStatus.orderProcessed).numberValue()) !== null && _d !== void 0 ? _d : 0;
          const readyForPickup = (_e = value.get("orderStates").get(OrderStatus.readyForPickup).numberValue()) !== null && _e !== void 0 ? _e : 0;
          const newPickupReadyValue = orderPlaced === 0 && orderProcessed === 0 && readyForPickup > 0;
          this.owner.pickupReady.set(newPickupReadyValue);
        }
      }) ];
      _placeOrderDownlink_decorators = [ client.MapDownlink({
        laneUri: "placeOrder",
        consumed: true,
        keyForm: uri.Uri.form()
      }) ];
      _updateOrderDownlink_decorators = [ client.MapDownlink({
        hostUri: "warp://localhost:9001",
        laneUri: "updateOrder",
        consumed: true,
        keyForm: uri.Uri.form()
      }) ];
      __esDecorate(null, null, _customerId_decorators, {
        kind: "field",
        name: "customerId",
        static: false,
        private: false,
        access: {
          has: obj => "customerId" in obj,
          get: obj => obj.customerId,
          set: (obj, value) => {
            obj.customerId = value;
          }
        }
      }, _customerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _inFlightCount_decorators, {
        kind: "field",
        name: "inFlightCount",
        static: false,
        private: false,
        access: {
          has: obj => "inFlightCount" in obj,
          get: obj => obj.inFlightCount,
          set: (obj, value) => {
            obj.inFlightCount = value;
          }
        }
      }, _inFlightCount_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _pickupReady_decorators, {
        kind: "field",
        name: "pickupReady",
        static: false,
        private: false,
        access: {
          has: obj => "pickupReady" in obj,
          get: obj => obj.pickupReady,
          set: (obj, value) => {
            obj.pickupReady = value;
          }
        }
      }, _pickupReady_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _sheet_decorators, {
        kind: "field",
        name: "sheet",
        static: false,
        private: false,
        access: {
          has: obj => "sheet" in obj,
          get: obj => obj.sheet,
          set: (obj, value) => {
            obj.sheet = value;
          }
        }
      }, _sheet_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _emptyState_decorators, {
        kind: "field",
        name: "emptyState",
        static: false,
        private: false,
        access: {
          has: obj => "emptyState" in obj,
          get: obj => obj.emptyState,
          set: (obj, value) => {
            obj.emptyState = value;
          }
        }
      }, _emptyState_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _placeOrderFab_decorators, {
        kind: "field",
        name: "placeOrderFab",
        static: false,
        private: false,
        access: {
          has: obj => "placeOrderFab" in obj,
          get: obj => obj.placeOrderFab,
          set: (obj, value) => {
            obj.placeOrderFab = value;
          }
        }
      }, _placeOrderFab_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _pickupOrdersFab_decorators, {
        kind: "field",
        name: "pickupOrdersFab",
        static: false,
        private: false,
        access: {
          has: obj => "pickupOrdersFab" in obj,
          get: obj => obj.pickupOrdersFab,
          set: (obj, value) => {
            obj.pickupOrdersFab = value;
          }
        }
      }, _pickupOrdersFab_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _orderListController_decorators, {
        kind: "field",
        name: "orderListController",
        static: false,
        private: false,
        access: {
          has: obj => "orderListController" in obj,
          get: obj => obj.orderListController,
          set: (obj, value) => {
            obj.orderListController = value;
          }
        }
      }, _orderListController_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _statusDownlink_decorators, {
        kind: "field",
        name: "statusDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "statusDownlink" in obj,
          get: obj => obj.statusDownlink,
          set: (obj, value) => {
            obj.statusDownlink = value;
          }
        }
      }, _statusDownlink_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _placeOrderDownlink_decorators, {
        kind: "field",
        name: "placeOrderDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "placeOrderDownlink" in obj,
          get: obj => obj.placeOrderDownlink,
          set: (obj, value) => {
            obj.placeOrderDownlink = value;
          }
        }
      }, _placeOrderDownlink_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _updateOrderDownlink_decorators, {
        kind: "field",
        name: "updateOrderDownlink",
        static: false,
        private: false,
        access: {
          has: obj => "updateOrderDownlink" in obj,
          get: obj => obj.updateOrderDownlink,
          set: (obj, value) => {
            obj.updateOrderDownlink = value;
          }
        }
      }, _updateOrderDownlink_initializers, _instanceExtraInitializers);
    })(), _a.MAIN_PANEL_KEY = "mainPanelView", _a.ORDER_LIST_CONTROLLER_KEY = "orderListController", 
    _a;
  })();
  let CustomerController = (() => {
    var _a;
    let _instanceExtraInitializers = [];
    let _customerId_decorators;
    let _customerId_initializers = [];
    let _appBarView_decorators;
    let _appBarView_initializers = [];
    let _mainController_decorators;
    let _mainController_initializers = [];
    return _a = class CustomerController extends panel.BoardController {
      constructor() {
        var _a, _b;
        super();
        this.customerId = (__runInitializers(this, _instanceExtraInitializers), __runInitializers(this, _customerId_initializers, void 0));
        this.appBarView = __runInitializers(this, _appBarView_initializers, void 0);
        this.mainController = __runInitializers(this, _mainController_initializers, void 0);
        const customerId = ((_a = /(?<=\/customer\/)[^\s!?\/.*#|]+(?=\/|$|\?)/gm.exec(window.location.href)) !== null && _a !== void 0 ? _a : [ "" ])[0];
        this.customerId.set(customerId);
        this.initBoard();
        (_b = this.mainController.controller) === null || _b === void 0 ? void 0 : _b.sheet.insertView(this.sheet.attachView());
      }
      initBoard() {
        const boardView = this.sheet.attachView().set({
          style: {
            width: "100%",
            height: "100%",
            display: "flex",
            flexDirection: "column",
            justifyContent: "flex-start",
            alignItems: "flex-start",
            boxSizing: "border-box"
          }
        });
        this.appBarView.insertView(boardView);
        this.mainController.attachController();
      }
    }, (() => {
      _customerId_decorators = [ component.Property({
        valueType: String,
        value: ""
      }) ];
      _appBarView_decorators = [ view.ViewRef({
        viewType: dom.HtmlView,
        createView() {
          const nav = document.createElement("nav");
          nav.style.backgroundColor = "#181818";
          return new dom.HtmlView(nav).set({
            style: {
              width: "100%",
              height: "80px",
              flexGrow: 0,
              flexShrink: 0,
              flexBasis: "auto",
              boxSizing: "border-box",
              padding: "16px"
            }
          });
        },
        initView(appBarView) {
          const container = appBarView.appendChild("div").set({
            style: {
              width: "100%",
              height: "100%",
              display: "flex",
              flexDirection: "row",
              justifyContent: "flex-start",
              alignItems: "flex-start",
              boxSizing: "border-box"
            }
          });
          container.insertChild(graphics.HtmlIconView, null, "nStreamIcon").setIntrinsic({
            graphics: graphics.VectorIcon.create(64, 64, "M0,0H64V64H0Z M5,5V59H59V5Z M44,38.78V46L25,29.55V46H20V18Z M39,25V18H44V29.33Z"),
            style: {
              width: "48px",
              height: "48px",
              marginRight: "16px"
            },
            classList: [ "n-stream-icon" ]
          });
          const detailsContainer = container.appendChild("div", "app-bar-details-container").setIntrinsic({
            style: {
              height: "100%",
              display: "flex",
              flexDirection: "column",
              flexBasis: "0px",
              flexGrow: 1,
              flexShrink: 1,
              justifyContent: "space-between",
              alignItems: "flex-start"
            }
          });
          const title = detailsContainer.appendChild("h1").set({
            style: {
              width: "auto",
              fontWeight: "600",
              fontSize: "20px",
              lineHeight: "24px",
              color: "#FFFFFF",
              margin: "0px",
              boxSizing: "border-box"
            }
          });
          title.node.innerText = "NStream - Retail 360";
          const detailsInnerContainer = detailsContainer.appendChild("div").set({
            style: {
              width: "100%",
              display: "flex",
              flexDirection: "row",
              justifyContent: "space-between",
              alignItems: "flex-start",
              boxSizing: "border-box"
            },
            classList: [ "details-inner-container" ]
          });
          const subtitle = detailsInnerContainer.appendChild("p").set({
            style: {
              fontWeight: "400",
              fontSize: "16px",
              lineHeight: "17px",
              color: "#FFFFFF",
              boxSizing: "border-box",
              margin: "0px"
            }
          });
          subtitle.node.innerText = "1.0.0b";
          const customerNodeName = detailsInnerContainer.appendChild("p").set({
            style: {
              fontWeight: "400",
              fontSize: "16px",
              lineHeight: "17px",
              color: "#FFFFFF",
              margin: "0px",
              boxSizing: "border-box"
            }
          });
          customerNodeName.node.innerText = `/${this.owner.customerId.value}`;
          const rightAppBarContainer = container.appendChild("div").setIntrinsic({
            style: {
              height: "100%",
              display: "flex",
              justifyContent: "flex-start",
              alignItems: "flex-end"
            },
            classList: [ "right-app-bar-container" ]
          });
          rightAppBarContainer.insertChild(graphics.HtmlIconView, null, "user-img-icon").setIntrinsic({
            graphics: graphics.VectorIcon.create(24, 24, "M12,2 C6.48,2 2,6.48 2,12 C2,17.52 6.48,22 12,22 C17.52,22 22,17.52 22,12 C22,6.48 17.52,2 12,2 Z M12,6 C13.93,6 15.5,7.57 15.5,9.5 C15.5,11.43 13.93,13 12,13 C10.07,13 8.5,11.43 8.5,9.5 C8.5,7.57 10.07,6 12,6 Z M12,20 C9.97,20 7.57,19.18 5.86,17.12 C7.55,15.8 9.68,15 12,15 C14.32,15 16.45,15.8 18.14,17.12 C16.43,19.18 14.03,20 12,20 Z"),
            style: {
              width: "36px",
              height: "36px",
              marginLeft: "2px"
            },
            classList: [ "user-img-icon" ]
          });
        }
      }) ];
      _mainController_decorators = [ controller.ControllerRef({
        controllerType: MainController,
        controllerKey: "body"
      }) ];
      __esDecorate(null, null, _customerId_decorators, {
        kind: "field",
        name: "customerId",
        static: false,
        private: false,
        access: {
          has: obj => "customerId" in obj,
          get: obj => obj.customerId,
          set: (obj, value) => {
            obj.customerId = value;
          }
        }
      }, _customerId_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _appBarView_decorators, {
        kind: "field",
        name: "appBarView",
        static: false,
        private: false,
        access: {
          has: obj => "appBarView" in obj,
          get: obj => obj.appBarView,
          set: (obj, value) => {
            obj.appBarView = value;
          }
        }
      }, _appBarView_initializers, _instanceExtraInitializers);
      __esDecorate(null, null, _mainController_decorators, {
        kind: "field",
        name: "mainController",
        static: false,
        private: false,
        access: {
          has: obj => "mainController" in obj,
          get: obj => obj.mainController,
          set: (obj, value) => {
            obj.mainController = value;
          }
        }
      }, _mainController_initializers, _instanceExtraInitializers);
    })(), _a;
  })();
  exports.CustomerController = CustomerController;
  exports.MainController = MainController;
  Object.defineProperties(exports, {
    __esModule: {
      value: true
    },
    [Symbol.toStringTag]: {
      value: "Module"
    }
  });
}));
//# sourceMappingURL=retail-demo-customer.min.js.map
