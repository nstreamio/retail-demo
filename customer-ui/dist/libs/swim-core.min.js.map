{"version":3,"file":"swim-core.min.js","sources":["../../../node_modules/tslib/tslib.es6.mjs","../swim-util/src/main/Random.ts","../swim-util/src/main/ByteOrder.ts","../swim-util/src/main/Murmur3.ts","../swim-util/src/main/Lazy.ts","../swim-util/src/main/Equals.ts","../swim-util/src/main/HashCode.ts","../swim-util/src/main/Equivalent.ts","../swim-util/src/main/Compare.ts","../swim-util/src/main/Identity.ts","../swim-util/src/main/Booleans.ts","../swim-util/src/main/Numbers.ts","../swim-util/src/main/Strings.ts","../swim-util/src/main/Identifiers.ts","../swim-util/src/main/Functions.ts","../swim-util/src/main/Constructors.ts","../swim-util/src/main/Arrays.ts","../swim-util/src/main/Objects.ts","../swim-util/src/main/Values.ts","../swim-util/src/main/Like.ts","../swim-util/src/main/Creatable.ts","../swim-util/src/main/Observable.ts","../swim-util/src/main/Consumable.ts","../swim-util/src/main/Cursor.ts","../swim-util/src/main/Mapping.ts","../swim-util/src/main/Domain.ts","../swim-util/src/main/Range.ts","../swim-util/src/main/Interpolate.ts","../swim-util/src/main/Interpolator.ts","../swim-util/src/main/Timing.ts","../swim-util/src/main/Easing.ts","../swim-util/src/main/Tweening.ts","../swim-util/src/main/Scale.ts","../swim-util/src/main/LinearDomain.ts","../swim-util/src/main/LinearRange.ts","../swim-util/src/main/LinearScale.ts","../swim-util/src/main/Assert.ts","../swim-util/src/main/Severity.ts","../swim-codec/src/main/source/Tag.ts","../swim-codec/src/main/source/Mark.ts","../swim-codec/src/main/source/Span.ts","../swim-codec/src/main/format/OutputStyle.ts","../swim-codec/src/main/output/OutputSettings.ts","../swim-codec/src/main/input/InputException.ts","../swim-codec/src/main/input/InputSettings.ts","../swim-codec/src/main/input/Input.ts","../swim-codec/src/main/input/InputError.ts","../swim-codec/src/main/unicode/StringInput.ts","../swim-codec/src/main/output/OutputException.ts","../swim-codec/src/main/output/Output.ts","../swim-codec/src/main/unicode/StringOutput.ts","../swim-codec/src/main/writer/WriterException.ts","../swim-codec/src/main/writer/Writer.ts","../swim-codec/src/main/unicode/StringWriter.ts","../swim-codec/src/main/unicode/Unicode.ts","../swim-codec/src/main/format/Format.ts","../swim-codec/src/main/number/Base10.ts","../swim-codec/src/main/source/Diagnostic.ts","../swim-codec/src/main/input/InputEmpty.ts","../swim-codec/src/main/input/InputDone.ts","../swim-codec/src/main/input/InputBuffer.ts","../swim-codec/src/main/input/InputBufferEmpty.ts","../swim-codec/src/main/input/InputBufferDone.ts","../swim-codec/src/main/input/InputBufferError.ts","../swim-codec/src/main/output/OutputFull.ts","../swim-codec/src/main/output/OutputDone.ts","../swim-codec/src/main/output/OutputError.ts","../swim-codec/src/main/output/OutputBuffer.ts","../swim-codec/src/main/output/OutputBufferFull.ts","../swim-codec/src/main/output/OutputBufferDone.ts","../swim-codec/src/main/output/OutputBufferError.ts","../swim-codec/src/main/parser/ParserException.ts","../swim-codec/src/main/parser/Parser.ts","../swim-codec/src/main/parser/ParserDone.ts","../swim-codec/src/main/parser/ParserError.ts","../swim-codec/src/main/writer/WriterEnd.ts","../swim-codec/src/main/writer/WriterDone.ts","../swim-codec/src/main/writer/WriterError.ts","../swim-codec/src/main/writer/WriterSequence.ts","../swim-codec/src/main/binary/ByteOutput.ts","../swim-codec/src/main/binary/ByteOutputUint8Array.ts","../swim-codec/src/main/binary/ByteOutputBuffer.ts","../swim-codec/src/main/binary/Binary.ts","../swim-codec/src/main/unicode/UtfErrorMode.ts","../swim-codec/src/main/unicode/UtfErrorModeFatal.ts","../swim-codec/src/main/unicode/UtfErrorModeReplacement.ts","../swim-codec/src/main/number/Base16.ts","../swim-codec/src/main/unicode/Utf8DecodedOutput.ts","../swim-codec/src/main/unicode/Utf8EncodedOutput.ts","../swim-codec/src/main/unicode/Utf8.ts","../swim-codec/src/main/number/Base10NumberParser.ts","../swim-codec/src/main/number/Base10IntegerWriter.ts","../swim-codec/src/main/number/Base16Parser.ts","../swim-codec/src/main/number/Base16Writer.ts","../swim-codec/src/main/number/Base16IntegerWriter.ts","../swim-codec/src/main/number/Base64.ts","../swim-codec/src/main/number/Base64Parser.ts","../swim-codec/src/main/number/Base64Writer.ts","../swim-component/src/main/Affinity.ts","../swim-component/src/main/FastenerContext.ts","../swim-component/src/main/Fastener.ts","../swim-component/src/main/Property.ts","../swim-component/src/main/Animator.ts","../swim-component/src/main/Timer.ts","../swim-component/src/main/EventHandler.ts","../swim-component/src/main/EventTimer.ts","../swim-component/src/main/Provider.ts","../swim-component/src/main/Component.ts","../swim-component/src/main/ComponentRelation.ts","../swim-component/src/main/ComponentRef.ts","../swim-component/src/main/ComponentSet.ts","../swim-component/src/main/Service.ts","../swim-collections/src/main/NodeCursor.ts","../swim-collections/src/main/BTreeContext.ts","../swim-collections/src/main/BTree.ts","../swim-collections/src/main/BTreePage.ts","../swim-collections/src/main/BTreeLeaf.ts","../swim-collections/src/main/BTreeNode.ts","../swim-collections/src/main/STreeContext.ts","../swim-collections/src/main/STree.ts","../swim-collections/src/main/STreePage.ts","../swim-collections/src/main/STreeLeaf.ts","../swim-collections/src/main/STreeNode.ts","../swim-constraint/src/main/ConstraintSymbol.ts","../swim-constraint/src/main/ConstraintExpression.ts","../swim-constraint/src/main/ConstraintSum.ts","../swim-constraint/src/main/ConstraintTerm.ts","../swim-constraint/src/main/ConstraintProduct.ts","../swim-constraint/src/main/ConstraintConstant.ts","../swim-constraint/src/main/ConstraintProperty.ts","../swim-constraint/src/main/ConstraintAnimator.ts","../swim-constraint/src/main/Constraint.ts","../swim-constraint/src/main/ConstraintScope.ts","../swim-constraint/src/main/ConstraintContext.ts","../swim-constraint/src/main/ConstraintRow.ts","../swim-structure/src/main/Item.ts","../swim-structure/src/main/Field.ts","../swim-structure/src/main/Attr.ts","../swim-structure/src/main/Slot.ts","../swim-structure/src/main/Value.ts","../swim-structure/src/main/Record.ts","../swim-structure/src/main/RecordMap.ts","../swim-structure/src/main/RecordMapView.ts","../swim-structure/src/main/Data.ts","../swim-structure/src/main/Text.ts","../swim-structure/src/main/Num.ts","../swim-structure/src/main/Bool.ts","../swim-structure/src/main/Extant.ts","../swim-structure/src/main/Absent.ts","../swim-structure/src/main/Expression.ts","../swim-structure/src/main/operator/Operator.ts","../swim-structure/src/main/operator/BinaryOperator.ts","../swim-structure/src/main/operator/BinaryOperatorInterpolator.ts","../swim-structure/src/main/operator/UnaryOperator.ts","../swim-structure/src/main/operator/UnaryOperatorInterpolator.ts","../swim-structure/src/main/operator/ConditionalOperator.ts","../swim-structure/src/main/operator/ConditionalOperatorInterpolator.ts","../swim-structure/src/main/interpreter/InterpreterException.ts","../swim-structure/src/main/interpreter/InterpreterSettings.ts","../swim-structure/src/main/interpreter/Interpreter.ts","../swim-structure/src/main/operator/OrOperator.ts","../swim-structure/src/main/operator/AndOperator.ts","../swim-structure/src/main/operator/BitwiseOrOperator.ts","../swim-structure/src/main/operator/BitwiseXorOperator.ts","../swim-structure/src/main/operator/BitwiseAndOperator.ts","../swim-structure/src/main/operator/LtOperator.ts","../swim-structure/src/main/operator/LeOperator.ts","../swim-structure/src/main/operator/EqOperator.ts","../swim-structure/src/main/operator/NeOperator.ts","../swim-structure/src/main/operator/GeOperator.ts","../swim-structure/src/main/operator/GtOperator.ts","../swim-structure/src/main/operator/PlusOperator.ts","../swim-structure/src/main/operator/MinusOperator.ts","../swim-structure/src/main/operator/TimesOperator.ts","../swim-structure/src/main/operator/DivideOperator.ts","../swim-structure/src/main/operator/ModuloOperator.ts","../swim-structure/src/main/operator/NotOperator.ts","../swim-structure/src/main/operator/BitwiseNotOperator.ts","../swim-structure/src/main/operator/NegativeOperator.ts","../swim-structure/src/main/operator/PositiveOperator.ts","../swim-structure/src/main/operator/InvokeOperator.ts","../swim-structure/src/main/operator/InvokeOperatorInterpolator.ts","../swim-structure/src/main/selector/Selector.ts","../swim-structure/src/main/selector/IdentitySelector.ts","../swim-structure/src/main/selector/GetSelector.ts","../swim-structure/src/main/selector/GetAttrSelector.ts","../swim-structure/src/main/selector/GetItemSelector.ts","../swim-structure/src/main/selector/KeysSelector.ts","../swim-structure/src/main/selector/ValuesSelector.ts","../swim-structure/src/main/selector/ChildrenSelector.ts","../swim-structure/src/main/selector/DescendantsSelector.ts","../swim-structure/src/main/selector/FilterSelector.ts","../swim-structure/src/main/selector/LiteralSelector.ts","../swim-structure/src/main/func/Func.ts","../swim-structure/src/main/func/LambdaFunc.ts","../swim-structure/src/main/func/BridgeFunc.ts","../swim-structure/src/main/func/MathModule.ts","../swim-structure/src/main/form/FormException.ts","../swim-structure/src/main/form/Form.ts","../swim-structure/src/main/form/TagForm.ts","../swim-structure/src/main/form/UnitForm.ts","../swim-structure/src/main/form/StringForm.ts","../swim-structure/src/main/form/NumberForm.ts","../swim-structure/src/main/form/BooleanForm.ts","../swim-structure/src/main/form/AnyForm.ts","../swim-structure/src/main/form/ItemForm.ts","../swim-structure/src/main/form/ValueForm.ts","../swim-recon/src/main/Recon.ts","../swim-recon/src/main/parser/BlockParser.ts","../swim-recon/src/main/parser/AttrParser.ts","../swim-recon/src/main/parser/BlockItemParser.ts","../swim-recon/src/main/parser/InlineItemParser.ts","../swim-recon/src/main/parser/RecordParser.ts","../swim-recon/src/main/parser/MarkupParser.ts","../swim-recon/src/main/parser/DataParser.ts","../swim-recon/src/main/parser/IdentParser.ts","../swim-recon/src/main/parser/StringParser.ts","../swim-recon/src/main/parser/RawStringParser.ts","../swim-recon/src/main/parser/NumberParser.ts","../swim-recon/src/main/parser/LambdaFuncParser.ts","../swim-recon/src/main/parser/ConditionalOperatorParser.ts","../swim-recon/src/main/parser/OrOperatorParser.ts","../swim-recon/src/main/parser/AndOperatorParser.ts","../swim-recon/src/main/parser/BitwiseOrOperatorParser.ts","../swim-recon/src/main/parser/BitwiseXorOperatorParser.ts","../swim-recon/src/main/parser/BitwiseAndOperatorParser.ts","../swim-recon/src/main/parser/ComparisonOperatorParser.ts","../swim-recon/src/main/parser/AttrExpressionParser.ts","../swim-recon/src/main/parser/AdditiveOperatorParser.ts","../swim-recon/src/main/parser/MultiplicativeOperatorParser.ts","../swim-recon/src/main/parser/PrefixOperatorParser.ts","../swim-recon/src/main/parser/InvokeOperatorParser.ts","../swim-recon/src/main/parser/PrimaryParser.ts","../swim-recon/src/main/parser/LiteralParser.ts","../swim-recon/src/main/parser/SelectorParser.ts","../swim-recon/src/main/parser/ReconParser.ts","../swim-recon/src/main/parser/ReconStructureParser.ts","../swim-recon/src/main/writer/AttrWriter.ts","../swim-recon/src/main/writer/SlotWriter.ts","../swim-recon/src/main/writer/BlockWriter.ts","../swim-recon/src/main/writer/PrimaryWriter.ts","../swim-recon/src/main/writer/MarkupTextWriter.ts","../swim-recon/src/main/writer/DataWriter.ts","../swim-recon/src/main/writer/IdentWriter.ts","../swim-recon/src/main/writer/StringWriter.ts","../swim-recon/src/main/writer/LambdaFuncWriter.ts","../swim-recon/src/main/writer/ConditionalOperatorWriter.ts","../swim-recon/src/main/writer/InfixOperatorWriter.ts","../swim-recon/src/main/writer/PrefixOperatorWriter.ts","../swim-recon/src/main/writer/InvokeOperatorWriter.ts","../swim-recon/src/main/writer/LiteralSelectorWriter.ts","../swim-recon/src/main/writer/GetSelectorWriter.ts","../swim-recon/src/main/writer/GetAttrSelectorWriter.ts","../swim-recon/src/main/writer/GetItemSelectorWriter.ts","../swim-recon/src/main/writer/KeysSelectorWriter.ts","../swim-recon/src/main/writer/ValuesSelectorWriter.ts","../swim-recon/src/main/writer/ChildrenSelectorWriter.ts","../swim-recon/src/main/writer/DescendantsSelectorWriter.ts","../swim-recon/src/main/writer/FilterSelectorWriter.ts","../swim-recon/src/main/writer/ReconWriter.ts","../swim-recon/src/main/writer/ReconStructureWriter.ts","../swim-uri/src/main/Uri.ts","../swim-uri/src/main/UriScheme.ts","../swim-uri/src/main/UriAuthority.ts","../swim-uri/src/main/UriUser.ts","../swim-uri/src/main/UriHost.ts","../swim-uri/src/main/UriPort.ts","../swim-uri/src/main/UriPath.ts","../swim-uri/src/main/UriQuery.ts","../swim-uri/src/main/UriFragment.ts","../swim-math/src/main/Length.ts","../swim-math/src/main/Angle.ts","../swim-math/src/main/R2Vector.ts","../swim-math/src/main/R2Shape.ts","../swim-math/src/main/R2Point.ts","../swim-math/src/main/R2Curve.ts","../swim-math/src/main/R2Segment.ts","../swim-math/src/main/R2QuadraticCurve.ts","../swim-math/src/main/R2CubicCurve.ts","../swim-math/src/main/R2EllipticCurve.ts","../swim-math/src/main/R2Spline.ts","../swim-math/src/main/R2Path.ts","../swim-math/src/main/R2Circle.ts","../swim-math/src/main/R2Box.ts","../swim-math/src/main/R2Group.ts","../swim-math/src/main/Transform.ts","../swim-math/src/main/IdentityTransform.ts","../swim-math/src/main/TranslateTransform.ts","../swim-math/src/main/ScaleTransform.ts","../swim-math/src/main/RotateTransform.ts","../swim-math/src/main/SkewTransform.ts","../swim-math/src/main/AffineTransform.ts","../swim-math/src/main/TransformList.ts","../swim-geo/src/main/GeoProjection.ts","../swim-geo/src/main/GeoShape.ts","../swim-geo/src/main/GeoPoint.ts","../swim-geo/src/main/GeoCurve.ts","../swim-geo/src/main/GeoSegment.ts","../swim-geo/src/main/GeoSpline.ts","../swim-geo/src/main/GeoPath.ts","../swim-geo/src/main/GeoTile.ts","../swim-geo/src/main/GeoBox.ts","../swim-geo/src/main/GeoGroup.ts","../swim-geo/src/main/GeoJson.ts","../swim-time/src/main/TimeZone.ts","../swim-time/src/main/DateTime.ts","../swim-time/src/main/DateTimeLocale.ts","../swim-time/src/main/DateTimeSpecifiers.ts","../swim-time/src/main/DateTimeFormat.ts","../swim-time/src/main/TimeInterval.ts","../swim-time/src/main/TimeDomain.ts","../swim-time/src/main/TimeRange.ts","../swim-time/src/main/TimeScale.ts","../swim-constraint/src/main/ConstraintGroup.ts","../swim-constraint/src/main/ConstraintSolver.ts","../swim-uri/src/main/UriCache.ts","../swim-structure/src/main/collections/ValueCursor.ts","../swim-structure/src/main/collections/ValueEntryCursor.ts"],"sourcesContent":["/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n  return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose;\n    if (async) {\n        if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n        dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n        if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n        dispose = value[Symbol.dispose];\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  function next() {\n    while (env.stack.length) {\n      var rec = env.stack.pop();\n      try {\n        var result = rec.dispose && rec.dispose.call(rec.value);\n        if (rec.async) return Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n      }\n      catch (e) {\n          fail(e);\n      }\n    }\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport const Random = {\n  fillBytes: (function () {\n    if (typeof window !== \"undefined\" && window.crypto !== void 0) {\n      return function (array: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array): void {\n        window.crypto.getRandomValues(array);\n      };\n    } else if (typeof window !== \"undefined\" && (window as any).msCrypto !== void 0) {\n      return function (array: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array): void {\n        ((window as any).msCrypto as Crypto).getRandomValues(array);\n      };\n    }\n    return function (array: Int8Array | Uint8Array | Int16Array | Uint16Array | Int32Array | Uint32Array): void {\n      if (array instanceof Int8Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = 128 - Math.round(Math.random() * 256);\n        }\n      } else if (array instanceof Uint8Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = Math.round(Math.random() * 256);\n        }\n      } else if (array instanceof Int16Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = 32768 - Math.round(Math.random() * 65536);\n        }\n      } else if (array instanceof Uint16Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = Math.round(Math.random() * 65536);\n        }\n      } else if (array instanceof Int32Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = 2147483648 - Math.round(Math.random() * 4294967296);\n        }\n      } else if (array instanceof Uint32Array) {\n        for (let i = 0; i < array.length; i += 1) {\n          array[i] = Math.round(Math.random() * 4294967296);\n        }\n      } else {\n        throw new TypeError(\"\" + array);\n      }\n    };\n  })(),\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Endianness of multi-byte words.\n * @public\n */\nexport type ByteOrder = \"BE\" | \"LE\";\n\n/** @public */\nexport const ByteOrder = {\n  /**\n   * The `ByteOrder` where the most significant byte comes first.\n   */\n  get BigEndian(): ByteOrder {\n    return \"BE\";\n  },\n\n  /**\n   * The `ByteOrder` where the least significant byte comes first.\n   */\n  get LittleEndian(): ByteOrder {\n    return \"LE\";\n  },\n\n  /**\n   * Memoized `NativeOrder`.\n   * @internal\n   */\n  NativeEndian: void 0 as ByteOrder | undefined,\n\n  /**\n   * The `ByteOrder` of the host machine.\n   */\n  get NativeOrder(): ByteOrder {\n    if (this.NativeEndian === void 0) {\n      const bom = new ArrayBuffer(2);\n      new Uint16Array(bom)[0] = 0xfeff;\n      const b = new Uint8Array(bom);\n      if (b[0] === 0xfe && b[1] === 0xff) {\n        this.NativeEndian = this.BigEndian;\n      } else if (b[0] === 0xff && b[1] === 0xfe) {\n        this.NativeEndian = this.LittleEndian;\n      } else {\n        throw new Error();\n      }\n    }\n    return this.NativeEndian;\n  }\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {ByteOrder} from \"./ByteOrder\";\nimport {Strings} from \"./\"; // forward import\n\n/**\n * 32-bit [MurmurHash](https://en.wikipedia.org/wiki/MurmurHash) algorithm,\n * version 3.\n * @public\n */\nexport const Murmur3 = {\n  /**\n   * Mixes a new hash `value` into the accumulated hash `code`,\n   * and returns the accumulated hash value.\n   */\n  mix(code: number, value: number): number {\n    value = ((value & 0xffff) * 0xcc9e2d51) + (((value >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;\n    value = this.rotl(value, 15);\n    value = ((value & 0xffff) * 0x1b873593) + (((value >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;\n    code ^= value;\n    code = this.rotl(code, 13);\n    code = ((code & 0xffff) * 5) + (((code >>> 16) * 5 & 0xffff) << 16) & 0xffffffff;\n    code = ((code & 0xffff) + 0x6b64) + (((code >>> 16) + 0xe654 & 0xffff) << 16);\n    return code;\n  },\n\n  /**\n   * Mixes each consecutive 4-byte word of `array` into `code`,\n   * and returns the accumulated hash value.\n   */\n  mixUint8Array(code: number, array: Uint8Array): number {\n    if (ByteOrder.NativeOrder === ByteOrder.BigEndian) {\n      return this.mixUint8ArrayBE(code, array);\n    } else if (ByteOrder.NativeOrder === ByteOrder.LittleEndian) {\n      return this.mixUInt8ArrayLE(code, array);\n    }\n    throw new Error();\n  },\n\n  /** @internal */\n  mixUint8ArrayBE(code: number, array: Uint8Array): number {\n    let offset = 0;\n    const limit = array.length;\n    while (offset + 3 < limit) {\n      const word = (array[offset    ]! & 0xff) << 24 | (array[offset + 1]! & 0xff) << 16\n                 | (array[offset + 2]! & 0xff) <<  8 |  array[offset + 3]! & 0xff;\n      code = this.mix(code, word);\n      offset += 4;\n    }\n    if (offset < limit) {\n      let word = (array[offset]! & 0xff) << 24;\n      if (offset + 1 < limit) {\n        word |= (array[offset + 1]! & 0xff) << 16;\n        if (offset + 2 < limit) {\n          word |= (array[offset + 2]! & 0xff) << 8;\n          //assert offset + 3 === limit;\n        }\n      }\n      word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;\n      word = this.rotl(word, 15);\n      word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;\n      code ^= word;\n    }\n    return code ^ limit;\n  },\n\n  /** @internal */\n  mixUInt8ArrayLE(code: number, array: Uint8Array): number {\n    let offset = 0;\n    const limit = array.length;\n    while (offset + 3 < limit) {\n      const word =  array[offset    ]! & 0xff        | (array[offset + 1]! & 0xff) <<  8\n                 | (array[offset + 2]! & 0xff) << 16 | (array[offset + 3]! & 0xff) << 24;\n      code = this.mix(code, word);\n      offset += 4;\n    }\n    if (offset < limit) {\n      let word = array[offset]! & 0xff;\n      if (offset + 1 < limit) {\n        word |= (array[offset + 1]! & 0xff) << 8;\n        if (offset + 2 < limit) {\n          word |= (array[offset + 2]! & 0xff) << 16;\n          //assert offset + 3 === limit;\n        }\n      }\n      word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;\n      word = this.rotl(word, 15);\n      word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;\n      code ^= word;\n    }\n    return code ^ limit;\n  },\n\n  /**\n   * Mixes each consecutive 4-byte word of the UTF-8 encoding of `string`\n   * into `code`, and returns the accumulated hash value.\n   */\n  mixString(code: number, string: string): number {\n    if (ByteOrder.NativeOrder === ByteOrder.BigEndian) {\n      return this.mixStringBE(code, string);\n    } else if (ByteOrder.NativeOrder === ByteOrder.LittleEndian) {\n      return this.mixStringLE(code, string);\n    }\n    throw new Error();\n  },\n\n  /** @internal */\n  mixStringBE(code: number, string: string): number {\n    let word = 0;\n    let k = 32;\n    let i = 0;\n    const n = string.length;\n    let utf8Length = 0;\n    while (i < n) {\n      let c = string.codePointAt(i);\n      if (c === void 0) {\n        c = string.charCodeAt(i);\n      }\n      if (c >= 0 && c <= 0x7f) { // U+0000..U+007F\n        k -= 8;\n        word |= c << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        utf8Length += 1;\n      } else if (c >= 0x80 && c <= 0x7ff) { // U+0080..U+07FF\n        k -= 8;\n        word |= (0xc0 | (c >>> 6)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | (c & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        utf8Length += 2;\n      } else if (c >= 0x0800 && c <= 0xffff || // U+0800..U+D7FF\n                 c >= 0xe000 && c <= 0xffff) { // U+E000..U+FFFF\n        k -= 8;\n        word |= (0xe0 | (c  >>> 12)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | ((c >>>  6) & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | (c & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        utf8Length += 3;\n      } else if (c >= 0x10000 && c <= 0x10ffff) { // U+10000..U+10FFFF\n        k -= 8;\n        word |= (0xf0 | (c  >>> 18)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | ((c >>> 12) & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | ((c >>>  6) & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= (0x80 | (c & 0x3f)) << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        utf8Length += 4;\n      } else { // surrogate or invalid code point\n        k -= 8;\n        word |= 0xef << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= 0xbf << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        k -= 8;\n        word |= 0xbd << k;\n        if (k === 0) { code = this.mix(code, word); word = 0; k = 32; }\n        utf8Length += 3;\n      }\n      i = Strings.offsetByCodePoints(string, i, 1);\n    }\n    if (k !== 32) {\n      word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;\n      word = this.rotl(word, 15);\n      word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;\n      code ^= word;\n    }\n    return code ^ utf8Length;\n  },\n\n  /** @internal */\n  mixStringLE(code: number, string: string): number {\n    let word = 0;\n    let k = 0;\n    let i = 0;\n    const n = string.length;\n    let utf8Length = 0;\n    while (i < n) {\n      let c = string.codePointAt(i);\n      if (c === void 0) {\n        c = string.charCodeAt(i);\n      }\n      if (c >= 0 && c <= 0x7f) { // U+0000..U+007F\n        word |= c << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        utf8Length += 1;\n      } else if (c >= 0x80 && c <= 0x7ff) { // U+0080..U+07FF\n        word |= (0xc0 | (c >>> 6)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | (c & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        utf8Length += 2;\n      } else if (c >= 0x0800 && c <= 0xffff || // U+0800..U+D7FF\n                 c >= 0xe000 && c <= 0xffff) { // U+E000..U+FFFF\n        word |= (0xe0 | (c  >>> 12)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | ((c >>>  6) & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | (c & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        utf8Length += 3;\n      } else if (c >= 0x10000 && c <= 0x10ffff) { // U+10000..U+10FFFF\n        word |= (0xf0 | (c  >>> 18)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | ((c >>> 12) & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | ((c >>>  6) & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= (0x80 | (c & 0x3f)) << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        utf8Length += 4;\n      } else { // surrogate or invalid code point\n        word |= 0xef << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= 0xbf << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        word |= 0xbd << k;\n        k += 8;\n        if (k === 32) { code = this.mix(code, word); word = 0; k = 0; }\n        utf8Length += 3;\n      }\n      i = Strings.offsetByCodePoints(string, i, 1);\n    }\n    if (k !== 32) {\n      word = ((word & 0xffff) * 0xcc9e2d51) + (((word >>> 16) * 0xcc9e2d51 & 0xffff) << 16) & 0xffffffff;\n      word = this.rotl(word, 15);\n      word = ((word & 0xffff) * 0x1b873593) + (((word >>> 16) * 0x1b873593 & 0xffff) << 16) & 0xffffffff;\n      code ^= word;\n    }\n    return code ^ utf8Length;\n  },\n\n  /**\n   * Finalizes the given hash `code`.\n   */\n  mash(code: number): number {\n    code ^= code >>> 16;\n    code = ((code & 0xffff) * 0x85ebca6b) + (((code >>> 16) * 0x85ebca6b & 0xffff) << 16) & 0xffffffff;\n    code ^= code >>> 13;\n    code = ((code & 0xffff) * 0xc2b2ae35) + (((code >>> 16) * 0xc2b2ae35 & 0xffff) << 16) & 0xffffffff;\n    code ^= code >>> 16;\n    return code >>> 0;\n  },\n\n  /** @internal */\n  rotl(value: number, distance: number): number {\n    return (value << distance) | (value >>> (32 - distance));\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Decorator that memoizes the computed value of a getter or nullary method.\n * @public\n */\nexport const Lazy: {\n  <F extends () => unknown>(target: F, context?: ClassMethodDecoratorContext<ThisParameterType<F>, F>): F;\n  <T, R>(target: (this: T) => R, context?: ClassGetterDecoratorContext<T, R>): (this: T) => R;\n} = function <T, R>(target: (this: T) => R, context?: ClassMethodDecoratorContext<T, (this: T) => R> | ClassGetterDecoratorContext<T, R>): (this: T) => R {\n  let defined = false;\n  let value: R;\n  return function (this: T): R {\n    if (!defined) {\n      defined = true;\n      value = target.call(this);\n    }\n    return value;\n  };\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Type that implements a universal equality relation.\n * @public\n */\nexport interface Equals {\n  /**\n   * Returns `true` if `this` is equal to `that`, otherwise returns `false`.\n   */\n  equals(that: unknown): boolean;\n}\n\n/** @public */\nexport const Equals = (function () {\n  const Equals = function (x: unknown, y: unknown): boolean {\n    if (Equals[Symbol.hasInstance](x)) {\n      return x.equals(y);\n    }\n    return x === y;\n  } as {\n    /**\n     * Returns `true` if `x` conforms to [[Equals]] and is\n     * [[Equals.equals equal]] to `y`, otherwise returns `x === y`.\n     */\n    (x: unknown, y: unknown): boolean;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[Equals]] interface.\n     */\n    [Symbol.hasInstance](instance: unknown): instance is Equals;\n  };\n\n  Object.defineProperty(Equals, Symbol.hasInstance, {\n    value: function (instance: unknown): instance is Equals {\n      if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n        return false;\n      }\n      return typeof (instance as Equals).equals === \"function\";\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return Equals;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Equals} from \"./Equals\";\n\n/**\n * Type that is convertible to a hash value consistent with its universal\n * equality relation.\n * @public\n */\nexport interface HashCode extends Equals {\n  /**\n   * Returns a 32-bit hash value for this object.\n   */\n  hashCode(): number;\n}\n\n/** @public */\nexport const HashCode = (function () {\n  const HashCode = function (x: HashCode | null | undefined): number {\n    if (x === void 0) {\n      return 0;\n    } else if (x === null) {\n      return 1;\n    }\n    return x.hashCode();\n  } as {\n    /**\n     * Returns the [[HashCode.hashCode hash code]] of `x`, if `x` is an object;\n     * otherwise returns `0` or `1` if `x` is `undefined` or `null`, respectively.\n     */\n    (x: HashCode | null | undefined): number;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[HashCode]] interface.\n     */\n    [Symbol.hasInstance](instance: unknown): instance is HashCode;\n  };\n\n  Object.defineProperty(HashCode, Symbol.hasInstance, {\n    value: function (instance: unknown): instance is HashCode {\n      if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n        return false;\n      }\n      return typeof (instance as HashCode).hashCode === \"function\";\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return HashCode;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Type that implements a universal equivalence relation.\n * @public\n */\nexport interface Equivalent {\n  /**\n   * Returns `true` if `this` is equivalent to `that` within some optionally\n   * specified error tolerance `epsilon`, otherwise returns `false`.\n   */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n}\n\n/** @public */\nexport const Equivalent = (function () {\n  const Equivalent = function (x:unknown, y: unknown, epsilon?: number): boolean {\n    if (Equivalent[Symbol.hasInstance](x)) {\n      return x.equivalentTo(y, epsilon);\n    }\n    return x === y;\n  } as {\n    /**\n     * Returns `true` if `x` conforms to [[Equivalent]] and is\n     * [[Equivalent.equivalentTo equivalent to]] `y`, otherwise returns `x === y`.\n     */\n    (x: unknown, y: unknown, epsilon?: number): boolean;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[Equivalent]] interface.\n     */\n    [Symbol.hasInstance](instance: unknown): instance is Equivalent;\n\n    /**\n     * Default equivalence tolerance.\n     */\n    readonly Epsilon: number;\n  };\n\n  Object.defineProperty(Equivalent, Symbol.hasInstance, {\n    value: function (instance: unknown): instance is Equivalent {\n      if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n        return false;\n      }\n      return typeof (instance as Equivalent).equivalentTo === \"function\";\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(Equivalent, \"Epsilon\", {\n    value: 1.0e-8,\n    enumerable: true,\n    configurable: true,\n  });\n\n  return Equivalent;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport type Comparator<T> = (a: T, b: T) => number;\n\n/**\n * Type that implements a universal partial order.\n * @public\n */\nexport interface Compare {\n  /**\n   * Returns the relative order of `this` with respect to `that`. Returns `-1`\n   * if `this` orders before `that`; returns `1` if `this` orders after `that`;\n   * returns `0` if `this` and `that` are equivalent; and returns `NaN` if\n   * `this` is not comparable to `that`.\n   */\n  compareTo(that: unknown): number;\n}\n\n/** @public */\nexport const Compare = (function () {\n  const Compare = function (x: unknown, y: unknown): number {\n    if (x === void 0) {\n      if (y === void 0) {\n        return 0;\n      }\n      return 1;\n    } else if (x === null) {\n      if (y === void 0) {\n        return -1;\n      } else if (y === null) {\n        return 0;\n      }\n      return 1;\n    } else if (typeof (x as Compare).compareTo === \"function\") {\n      if (y === void 0 || y === null) {\n        return -1;\n      }\n      return (x as Compare).compareTo(y);\n    }\n    return NaN;\n  } as {\n    /**\n     * Returns the relative order of `x` with respect to `y`. Returns `-1` if `x`\n     * orders before `y`; returns `1` if `x` orders after `y`; returns `0` if `x`\n     * and `y` are equivalent; and returns `NaN` if `x` is not comparable to `y`.\n     * Objects are [[Compare.compareTo compared to]] each other when both are\n     * defined, otherwise defined objects order before `null`, and `null` orders\n     * before `undefined`.\n     */\n    (x: unknown, y: unknown): number;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[Compare]] interface.\n     */\n    [Symbol.hasInstance](instance: unknown): instance is Compare;\n  };\n\n  Object.defineProperty(Compare, Symbol.hasInstance, {\n    value: function (instance: unknown): instance is Compare {\n      if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n        return false;\n      }\n      return typeof (instance as Compare).compareTo === \"function\";\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return Compare;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities for comparing and hashing object identities.\n * @public\n */\nexport const Identity = {\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the hash code of object `x` is less than the hash code of object `y`;\n   * returns `1` if the hash code of object `x` is greater than the hash code\n   * of object `y`; and returns `0` if `x` and `y` are identical objects.\n   * If either `x` or `y` is `null` or `undefined`, then objects order before\n   * `null`, and `null` orders before `undefined`.\n   */\n  compare(x: object | null | undefined, y: object | null | undefined): number {\n    if (x !== null && typeof x === \"object\") {\n      if (y !== null && typeof y === \"object\") {\n        const xh = Identity.hash(x);\n        const yh = Identity.hash(y);\n        return xh < yh ? -1 : xh > yh ? 1 : 0;\n      }\n      return -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a unique 32-bit hash value for a particular object instance.\n   */\n  hash: (function () {\n    let codes: WeakMap<object, number> | null = null;\n    let nextCode = 2;\n    return function hash(x: object | null | undefined): number {\n      if (x !== null && typeof x === \"object\") {\n        if (codes === null) {\n          codes = new WeakMap<object, number>();\n        }\n        let hashCode = codes.get(x);\n        if (hashCode === void 0) {\n          hashCode = ~~nextCode;\n          codes.set(x, hashCode);\n          nextCode += 1;\n        }\n        return hashCode;\n      } else if (x === null) {\n        return 1;\n      } else if (x === void 0) {\n        return 0;\n      }\n      throw new TypeError(\"\" + x);\n    };\n  })(),\n\n  fromLike<T>(value: T): T {\n    return value;\n  },\n\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"./types\";\n\n/**\n * Utilities for comparing and hashing booleans.\n * @public\n */\nexport const Booleans = {\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * `x` is `true` and `y` is `false`; returns `1` if `x` is `false` and `y`\n   * is `true`; and returns `0` if `x` and `y` are equal booleans. If either\n   * `x` or `y` is `null` or `undefined`, then booleans order before `null`,\n   * and `null` orders before `undefined`.\n   */\n  compare(x: boolean | null | undefined, y: boolean | null | undefined): number {\n    if (typeof x === \"boolean\") {\n      return typeof y === \"boolean\" ? (x && !y ? -1 : !x && y ? 1 : 0) : -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a hash code for a number.\n   */\n  hash(x: boolean | null | undefined): number {\n    if (x === true) {\n      return 3;\n    } else if (x === false) {\n      return 2;\n    } else if (x === null) {\n      return 1;\n    } else if (x === void 0) {\n      return 0;\n    }\n    throw new TypeError(\"\" + x);\n  },\n\n  fromLike<T extends boolean | string | number | null | undefined>(value: T): boolean | Uninitable<T> {\n    if (value === void 0 || value === null) {\n      return value as boolean | Uninitable<T>;\n    }\n    return Boolean(value);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"./types\";\nimport {Equivalent} from \"./Equivalent\";\n\n/**\n * Utilities for comparing and hashing numbers.\n * @public\n */\nexport const Numbers = {\n  /**\n   * Returns `true` if `x` and `y` are equal numbers, or if both are `NaN`;\n   * otherwise returns `x === y` if either `x` or `y` is not defined.\n   */\n  equal(x: number | null | undefined, y: number | null | undefined): boolean {\n    return x === y || typeof x === \"number\" && typeof y === \"number\" && isNaN(x) && isNaN(y);\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are both defined, and the difference between\n   * the two is less than `epsilon`, or if both are `NaN`; otherwise returns\n   * `x === y` if either `x` or `y` is not defined.\n   */\n  equivalent(x: number | null | undefined, y: number | null | undefined, epsilon?: number): boolean {\n    return x === y || typeof x === \"number\" && typeof y === \"number\" && (isNaN(x) && isNaN(y) || Math.abs(y - x) < (epsilon !== void 0 ? epsilon : Equivalent.Epsilon));\n  },\n\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the number `x` less than the number `y`; returns `1` if the number `x` is\n   * greater than the number `y`; and returns `0` if `x` and `y` are equal\n   * numbers, or if both are `NaN`. If either `x` or `y` is `NaN`, `null`,\n   * or `undefined`, then numbers order before `NaN`, `NaN` orders before\n   * `null`, and `null` orders before `undefined`.\n   */\n  compare(x: number | null | undefined, y: number | null | undefined): number {\n    if (typeof x === \"number\") {\n      return typeof y === \"number\" ? (x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0) : -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a 32-bit hash value for the number `x`, if defined; otherwise\n   * returns `0` or `1` if `x` is `undefined` or `null`, respectively.\n   */\n  hash: (function () {\n    let hashArrayBuffer: ArrayBuffer | null = null;\n    let hashFloat64Array: Float64Array | null = null;\n    let hashInt32Array: Int32Array | null = null;\n    return function hash(x: number | null | undefined): number {\n      if (typeof x === \"number\") {\n        if (x === ~~x) {\n          return ~~x;\n        } else if (hashArrayBuffer === null) {\n          hashArrayBuffer = new ArrayBuffer(8);\n          hashFloat64Array = new Float64Array(hashArrayBuffer);\n          hashInt32Array = new Int32Array(hashArrayBuffer);\n        }\n        hashFloat64Array![0] = x;\n        return hashInt32Array![0]! ^ hashInt32Array![1]!;\n      } else if (x === null) {\n        return 1;\n      } else if (x === void 0) {\n        return 0;\n      }\n      throw new TypeError(\"\" + x);\n    };\n  })(),\n\n  fromLike<T extends number | string | boolean | null | undefined>(value: T): number | Uninitable<T> {\n    if (value === void 0 || value === null) {\n      return value as number | Uninitable<T>;\n    }\n    return Number(value);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"./types\";\nimport {Murmur3} from \"./Murmur3\";\n\n/**\n * Utilities for comparing and hashing strings.\n * @public\n */\nexport const Strings = {\n  codePointAt(string: string, index: number): number | undefined {\n    const length = string.length;\n    index = index ? Number(index) : 0; // Coerce to number.\n    if (index !== index) { // Convert NaN to zero.\n      index = 0;\n    }\n    if (index >= 0 && index < length) {\n      const c1 = string.charCodeAt(index);\n      if (c1 <= 0xd7ff || c1 >= 0xe000) { // U+0000..U+D7FF | U+E000..U+FFFF\n        return c1;\n      } else if (c1 <= 0xdbff && index + 1 < length) {\n        const c2 = string.charCodeAt(index + 1);\n        if (c2 >= 0xdc00 && c2 <= 0xdfff) { // U+10000..U+10FFFF\n          return ((c1 & 0x03ff) << 10 + c2 & 0x03ff) + 0x10000;\n        }\n      }\n    }\n    return void 0;\n  },\n\n  offsetByCodePoints(string: string, index: number, count: number): number {\n    if (count > 0) {\n      const length = string.length;\n      while (count > 0 && index < length) {\n        const c1 = string.charCodeAt(index);\n        if (c1 <= 0xd7ff || c1 >= 0xe000) { // U+0000..U+D7FF | U+E000..U+FFFF\n          index += 1;\n        } else if (c1 <= 0xdbff && index + 1 < length) {\n          const c2 = string.charCodeAt(index + 1);\n          if (c2 >= 0xdc00 && c2 <= 0xdfff) { // U+10000..U+10FFFF\n            index += 2;\n          } else {\n            index += 1;\n          }\n        } else {\n          index += 1;\n        }\n        count -= 1;\n      }\n    } else if (count < 0) {\n      while (count < 0 && index > 0) {\n        const c2 = string.charCodeAt(index - 1);\n        if (c2 <= 0xd7ff || c2 >= 0xe000) { // U+0000..U+D7FF | U+E000..U+FFFF\n          index -= 1;\n        } else if (c2 >= 0xdc00 && c2 <= 0xdfff && index - 1 > 0) {\n          const c1 = string.charCodeAt(index - 2);\n          if (c1 >= 0xd800 && c1 <= 0xdfff) { // U+10000..U+10FFFF\n            index -= 2;\n          } else {\n            index -= 1;\n          }\n        } else {\n          index -= 1;\n        }\n        count -= 1;\n      }\n    }\n    return index;\n  },\n\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the string `x` lexicographically orders before the string `y`; returns `1`\n   * if the string `x` lexicographically orders after the string `y`; and\n   * returns `0` if `x` and `y` are equal strings. If either `x` or `y` is\n   * `null` or `undefined`, then strings order before `null`, and `null` orders\n   * before `undefined`.\n   */\n  compare(x: string | null | undefined, y: string | null | undefined): number {\n    if (typeof x === \"string\") {\n      return typeof y === \"string\" ? (x < y ? -1 : x > y ? 1 : 0) : -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a hash code for a string.\n   */\n  hash(x: string | null | undefined): number {\n    if (typeof x === \"string\") {\n      return Murmur3.mash(Murmur3.mixString(0, x));\n    } else if (x === null) {\n      return 1;\n    } else if (x === void 0) {\n      return 0;\n    }\n    throw new TypeError(\"\" + x);\n  },\n\n  fromLike<T extends string | number | boolean | null | undefined>(value: T): string | Uninitable<T> {\n    if (value === void 0 || value === null) {\n      return value as string | Uninitable<T>;\n    }\n    return String(value);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"./Strings\";\n\n/**\n * Utilities for working with ECMAScript identifiers.\n * @public\n */\nexport const Identifiers = {\n  /** @internal */\n  isStartChar(c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x2ff\n        || c >= 0x370 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  },\n\n  /** @internal */\n  isPartChar(c: number): boolean {\n    return c === 45/*'-'*/\n        || c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c === 0xb7\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x203f && c <= 0x2040\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  },\n\n  isValid(identifier: string): boolean {\n    let c: number | undefined;\n    if (identifier.length === 0 || (c = identifier.codePointAt(0)) === void 0 || !this.isStartChar(c)) {\n      return false;\n    }\n    let i = Strings.offsetByCodePoints(identifier, 0, 1);\n    while (i < identifier.length && (c = identifier.codePointAt(0)) !== void 0 && this.isPartChar(c)) {\n      i = Strings.offsetByCodePoints(identifier, i, 1);\n    }\n    return i === identifier.length && !this.isReserved(identifier);\n  },\n\n  isReserved(identifier: string): boolean {\n    switch (identifier) {\n      case \"await\":\n      case \"break\":\n      case \"case\":\n      case \"catch\":\n      case \"class\":\n      case \"const\":\n      case \"continue\":\n      case \"debugger\":\n      case \"default\":\n      case \"delete\":\n      case \"do\":\n      case \"else\":\n      case \"enum\":\n      case \"export\":\n      case \"extends\":\n      case \"false\":\n      case \"finally\":\n      case \"for\":\n      case \"function\":\n      case \"if\":\n      case \"import\":\n      case \"in\":\n      case \"instanceof\":\n      case \"new\":\n      case \"null\":\n      case \"return\":\n      case \"super\":\n      case \"switch\":\n      case \"this\":\n      case \"throw\":\n      case \"true\":\n      case \"try\":\n      case \"typeof\":\n      case \"var\":\n      case \"void\":\n      case \"while\":\n      case \"with\":\n      case \"yield\":\n        return true;\n      default:\n        return false;\n    }\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Utilities for comparing and hashing functions.\n * @public\n */\nexport const Functions = {\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the hash code of function `x` is less than the hash code of function `y`;\n   * returns `1` if the hash code of function `x` is greater than the hash code\n   * of function `y`; and returns `0` if `x` and `y` are identical functions.\n   * If either `x` or `y` is `null` or `undefined`, then functions order before\n   * `null`, and `null` orders before `undefined`.\n   */\n  compare(x: Function | null | undefined, y: Function | null | undefined): number {\n    if (typeof x === \"function\") {\n      if (typeof y === \"function\") {\n        const xh = Functions.hash(x);\n        const yh = Functions.hash(y);\n        return xh < yh ? -1 : xh > yh ? 1 : 0;\n      }\n      return -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a 32-bit hash value for a function.\n   */\n  hash: (function () {\n    let codes: WeakMap<Function, number> | null = null;\n    let nextCode = 2;\n    return function hash(x: Function | null | undefined): number {\n      if (typeof x === \"function\") {\n        if (codes === null) {\n          codes = new WeakMap<Function, number>();\n        }\n        let hashCode = codes.get(x);\n        if (hashCode === void 0) {\n          hashCode = ~~nextCode;\n          codes.set(x, hashCode);\n          nextCode += 1;\n        }\n        return hashCode;\n      } else if (x === null) {\n        return 1;\n      } else if (x === void 0) {\n        return 0;\n      }\n      throw new TypeError(\"\" + x);\n    };\n  })(),\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"./Murmur3\";\n\n/**\n * Utilities for comparing and hashing constructors.\n * @public\n */\nexport const Constructors = {\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the hash code of constructor `x` is less than the hash code of constructor\n   * `y`; returns `1` if the hash code of constructor `x` is greater than the\n   * hash code of constructor `y`; and returns `0` if `x` and `y` are identical\n   * constructors. If either `x` or `y` is `null` or `undefined`, then\n   * constructors order before `null`, and `null` orders before `undefined`.\n   */\n  compare(x: Function | null | undefined, y: Function | null | undefined): number {\n    if (typeof x === \"function\") {\n      if (typeof y === \"function\") {\n        const xh = Constructors.hash(x);\n        const yh = Constructors.hash(y);\n        return xh < yh ? -1 : xh > yh ? 1 : 0;\n      }\n      return -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a 32-bit hash value for a constructor.\n   */\n  hash: (function () {\n    let codes: WeakMap<Function, number> | null = null;\n    return function hash(x: Function | null | undefined): number {\n      if (typeof x === \"function\") {\n        if (codes === null) {\n          codes = new WeakMap<Function, number>();\n        }\n        let hashCode = codes.get(x);\n        if (hashCode === void 0) {\n          hashCode = Murmur3.mash(Murmur3.mixString(0, x.name));\n          codes.set(x, hashCode);\n        }\n        return hashCode;\n      } else if (x === null) {\n        return 1;\n      } else if (x === void 0) {\n        return 0;\n      }\n      throw new TypeError(\"\" + x);\n    };\n  })(),\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"./Murmur3\";\nimport {Lazy} from \"./Lazy\";\nimport {Values} from \"./\"; // forward import\n\n/**\n * Utilities for immutably updating, comparing, and hashing arrays.\n * @public\n */\nexport const Arrays = {\n  empty: Lazy(function <T>(): readonly T[] {\n    return Object.freeze([]);\n  }) as <T>() => readonly T[],\n\n  /**\n   * Returns a copy of an array with the given element inserted, if the element\n   * is not already present in the array; otherwise returns the input array if\n   * it already contains the specified element.\n   */\n  inserted<T>(newElement: T, oldArray: readonly T[] | null | undefined): readonly T[] {\n    const n = oldArray !== void 0 && oldArray !== null ? oldArray.length : 0;\n    const newArray = new Array<T>(n + 1);\n    for (let i = 0; i < n; i += 1) {\n      const element = oldArray![i]!;\n      if (element === newElement) {\n        return oldArray!;\n      }\n      newArray[i] = element;\n    }\n    newArray[n] = newElement;\n    return newArray;\n  },\n\n  /**\n   * Returns a copy of an array with the given element removed; returns the\n   * input array if it does not contain the specified element.\n   */\n  removed<T>(oldElement: T, oldArray: readonly T[] | null | undefined): readonly T[] {\n    const n = oldArray !== void 0 && oldArray !== null ? oldArray.length : 0;\n    if (n === 0) {\n      return oldArray !== void 0 && oldArray !== null ? oldArray : Arrays.empty();\n    } else if (n === 1) {\n      return oldArray![0]! !== oldElement ? oldArray! : Arrays.empty();\n    }\n    const newArray = new Array<T>(n - 1);\n    let i = 0;\n    while (i < n) {\n      const element = oldArray![i]!;\n      if (element === oldElement) {\n        i += 1;\n        while (i < n) {\n          newArray[i - 1] = oldArray![i]!;\n          i += 1;\n        }\n        return newArray;\n      }\n      newArray[i] = element;\n      i += 1;\n    }\n    return oldArray!;\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are structurally equal arrays; otherwise\n   * returns `x === y` if either `x` or `y` is not an array.\n   */\n  equal(x: ArrayLike<unknown> | null | undefined, y: ArrayLike<unknown> | null | undefined): boolean {\n    if (x === y) {\n      return true;\n    } else if (x !== null && typeof x === \"object\" && y !== null && typeof y === \"object\") {\n      const n = x.length;\n      if (n !== y.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        if (!Values.equal(x[i], y[i])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are structurally [[Equivalent.equivalentTo\n   * equivalent]] arrays; otherwise returns `x === y` if either `x` or `y` is\n   * not an array.\n   */\n  equivalent(x: ArrayLike<unknown> | null | undefined, y: ArrayLike<unknown> | null | undefined, epsilon?: number): boolean {\n    if (x === y) {\n      return true;\n    } else if (x !== null && typeof x === \"object\" && y !== null && typeof y === \"object\") {\n      const n = x.length;\n      if (n !== y.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        if (!Values.equivalent(x[i], y[i], epsilon)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the elements of array `x` order lexicographically before the elements of\n   * array `y`; returns `1` if the elements of array `x` order lexicographically\n   * after the elements of array `y`; and returns `0` if `x` and `y` are equal\n   * arrays. If either `x` or `y` is `null` or `undefined`, then arrays order\n   * before `null`, and `null` orders before `undefined`.\n   */\n  compare(x: ArrayLike<unknown> | null | undefined, y: ArrayLike<unknown> | null | undefined): number {\n    if (x !== null && typeof x === \"object\") {\n      if (y !== null && typeof y === \"object\") {\n        if (x === y) {\n          return 0;\n        }\n        const p = x.length;\n        const q = y.length;\n        let order = 0;\n        for (let i = 0, n = Math.min(p, q); i < n && order === 0; i += 1) {\n          order = Values.compare(x[i], y[i]);\n        }\n        return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n      }\n      return -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a 32-bit hash value for the elements of array `x`, if defined;\n   * otherwise returns `0` or `1` if `x` is `undefined` or `null`, respectively.\n   */\n  hash(x: ArrayLike<unknown> | null | undefined): number {\n    if (typeof x === \"object\" && x !== null) {\n      let code = 0;\n      for (let i = 0; i < x.length; i += 1) {\n        code = Murmur3.mix(code, Values.hash(x[i]));\n      }\n      return Murmur3.mash(code);\n    } else if (x === null) {\n      return 1;\n    } else if (x === void 0) {\n      return 0;\n    }\n    throw new TypeError(\"\" + x);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"./Murmur3\";\nimport {Strings} from \"./Strings\";\nimport {Values} from \"./\"; // forward import\n\n/**\n * Utilities for comparing and hashing structural objects.\n * @public\n */\nexport const Objects = {\n  /**\n   * Returns `true` if the given object has no own properties.\n   */\n  isEmpty(x: object | null | undefined): boolean {\n    if (x !== null && typeof x === \"object\") {\n      for (const k in x) {\n        if (Object.prototype.hasOwnProperty.call(x, k)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns `true` if `object` has any of the specified `keys`,\n   * as determined by `key in object`. Returns `false` if `object`\n   * is `undefined` or `null`, or if `typeof object` is neither\n   * `\"object\"` nor `\"function\"`, or if none of the specified `keys`\n   * are present in `object`.\n   */\n  hasAnyKey<O>(object: unknown, ...keys: (keyof O)[]): object is O {\n    if (object === null || (typeof object !== \"object\" && typeof object !== \"function\")) {\n      return false;\n    }\n    for (let i = 0; i < keys.length; i += 1) {\n      if (keys[i]! in object) {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns `true` if `object` has all of the specified `keys`,\n   * as determined by `key in object`. Returns `false` if `object`\n   * is `undefined` or `null`, or if `typeof object` is neither\n   * `\"object\"` nor `\"function\"`, or if at least one of specified `keys`\n   * are not present in `object`.\n   */\n  hasAllKeys<O>(object: unknown, ...keys: (keyof O)[]): object is O {\n    if (object === null || (typeof object !== \"object\" && typeof object !== \"function\")) {\n      return false;\n    }\n    for (let i = 0; i < keys.length; i += 1) {\n      if (!(keys[i]! in object)) {\n        return false;\n      }\n    }\n    return true;\n  },\n\n  /**\n   * Returns a shallow copy of `object` with the given `key`-`value` pair\n   * inserted before the `target` entry value, in traversal order.\n   */\n  inserted<O, K extends keyof O>(object: O, key: K, value: O[K], target: unknown): O {\n    let inserted = false;\n    const newObject = {} as O;\n    for (const oldKey in object) {\n      if (Object.prototype.hasOwnProperty.call(object, oldKey)) {\n        const oldValue = object[oldKey]!;\n        if (!inserted && oldValue === target) {\n          newObject[key as keyof O] = value as O[keyof O];\n          inserted = true;\n        }\n        newObject[oldKey] = oldValue;\n      }\n    }\n    if (!inserted) {\n      newObject[key as keyof O] = value as O[keyof O];\n    }\n    return newObject;\n  },\n\n  getFirstKey<O>(object: O): keyof O | undefined {\n    for (const k in object) {\n      if (Object.prototype.hasOwnProperty.call(object, k)) {\n        return k;\n      }\n    }\n    return void 0;\n  },\n\n  getFirstValue<O>(object: O): O[keyof O] | undefined {\n    for (const k in object) {\n      if (Object.prototype.hasOwnProperty.call(object, k)) {\n        return object[k]!;\n      }\n    }\n    return void 0;\n  },\n\n  getNextKey<O>(object: O, key: keyof O): keyof O | undefined {\n    let mark = false;\n    for (const k in object) {\n      if (Object.prototype.hasOwnProperty.call(object, k)) {\n        if (mark) {\n          return k;\n        } else if (k === key) {\n          mark = true;\n        }\n      }\n    }\n    return void 0;\n  },\n\n  getNextValue<O>(object: O, key: keyof O): O[keyof O] | undefined {\n    let mark = false;\n    for (const k in object) {\n      if (Object.prototype.hasOwnProperty.call(object, k)) {\n        if (mark) {\n          return object[k]!;\n        } else if (k === key) {\n          mark = true;\n        }\n      }\n    }\n    return void 0;\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are structurally equal objects; otherwise\n   * returns `x === y` if either `x` or `y` is not an object.\n   */\n  equal(x: object | null | undefined, y: object | null | undefined): boolean {\n    if (x === y) {\n      return true;\n    } else if (x !== null && typeof x === \"object\" && y !== null && typeof y === \"object\") {\n      const xKeys = Object.keys(x);\n      const yKeys = Object.keys(y);\n      const n = xKeys.length;\n      if (n !== yKeys.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        const key = xKeys[i]!;\n        if (key !== yKeys[i] || !Values.equal((x as any)[key], (y as any)[key])) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are structurally [[Equivalent.equivalentTo\n   * equivalent]] objects; otherwise returns `x === y` if either `x` or `y` is\n   * not an object.\n   */\n  equivalent(x: object | null | undefined, y: object | null | undefined, epsilon?: number): boolean {\n    if (x === y) {\n      return true;\n    } else if (x !== null && typeof x === \"object\" && y !== null && typeof y === \"object\") {\n      const xKeys = Object.keys(x);\n      const yKeys = Object.keys(y);\n      const n = xKeys.length;\n      if (n !== yKeys.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        const key = xKeys[i]!;\n        if (key !== yKeys[i] || !Values.equivalent((x as any)[key], (y as any)[key], epsilon)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Returns the relative order of `x` with respect to `y`. Returns `-1` if\n   * the entries of object `x` order lexicographically before the entries of\n   * object `y`; returns `1` if the entries of object `x` order\n   * lexicographically after the entries of object `y`; and returns `0` if `x`\n   * and `y` are equal objects. If either `x` or `y` is `null` or `undefined`,\n   * then objects order before `null`, and `null` orders before `undefined`.\n   */\n  compare(x: object | null | undefined, y: object | null | undefined): number {\n    if (x !== null && typeof x === \"object\") {\n      if (y !== null && typeof y === \"object\") {\n        if (x === y) {\n          return 0;\n        }\n        const xKeys = Object.keys(x);\n        const yKeys = Object.keys(y);\n        const p = xKeys.length;\n        const q = yKeys.length;\n        const n = Math.min(p, q);\n        let order = 0;\n        for (let i = 0; i < n && order === 0; i += 1) {\n          const xKey = xKeys[i]!;\n          const yKey = yKeys[i]!;\n          order = Strings.compare(xKey, yKey);\n          if (order === 0) {\n            order = Values.compare((x as any)[xKey], (y as any)[yKey]);\n          }\n        }\n        return order !== 0 ? order : p > q ? 1 : p < q ? -1 : 0;\n      }\n      return -1;\n    } else if (x === null) {\n      return y === void 0 ? -1 : y === null ? 0 : 1;\n    } else if (x === void 0) {\n      return y === void 0 ? 0 : 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a 32-bit hash value for the entries of object `x`, if defined;\n   * otherwise returns `0` or `1` if `x` is `undefined` or `null`, respectively.\n   */\n  hash(x: object | null | undefined): number {\n    if (typeof x === \"object\" && x !== null) {\n      let code = 0;\n      const keys = Object.keys(x);\n      for (let i = 0; i < keys.length; i += 1) {\n        const key = keys[i]!;\n        code = Murmur3.mix(Murmur3.mix(code, Strings.hash(key)), Values.hash((x as any)[key]));\n      }\n      return Murmur3.mash(code);\n    } else if (x === null) {\n      return 1;\n    } else if (x === void 0) {\n      return 0;\n    }\n    throw new TypeError(\"\" + x);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Equals} from \"./Equals\";\nimport {HashCode} from \"./HashCode\";\nimport {Equivalent} from \"./Equivalent\";\nimport {Compare} from \"./Compare\";\nimport {Numbers} from \"./Numbers\";\nimport {Strings} from \"./Strings\";\nimport {Functions} from \"./Functions\";\nimport {Arrays} from \"./Arrays\";\nimport {Objects} from \"./Objects\";\n\n/**\n * Utilities for comparing and hashing structural values. A structural value\n * is typed by object structure, rather than by name.\n * @public\n */\nexport const Values = {\n  /**\n   * Returns `true` if `x` and `y` are structurally equal, otherwise returns `false`.\n   */\n  equal(x: unknown, y: unknown): boolean {\n    if (x instanceof Date) {\n      x = x.getTime();\n    }\n    if (y instanceof Date) {\n      y = y.getTime();\n    }\n\n    if (x === y) {\n      return true;\n    } else if (typeof x === \"number\") {\n      if (typeof y === \"number\") {\n        return isNaN(x) && isNaN(y);\n      }\n    } else if (Equals[Symbol.hasInstance](x)) {\n      return x.equals(y);\n    } else if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        return Arrays.equal(x, y);\n      }\n    } else if (x !== null && typeof x === \"object\") {\n      if (y !== null && typeof y === \"object\") {\n        return Objects.equal(x, y);\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns `true` if `x` and `y` are structurally equivalent, otherwise returns `false`.\n   */\n  equivalent(x: unknown, y: unknown, epsilon: number = Equivalent.Epsilon): boolean {\n    if (x instanceof Date) {\n      x = x.getTime();\n    }\n    if (y instanceof Date) {\n      y = y.getTime();\n    }\n\n    if (x === y) {\n      return true;\n    } else if (typeof x === \"number\") {\n      if (typeof y === \"number\") {\n        return isNaN(x) && isNaN(y) || Math.abs(y - x) < epsilon;\n      }\n    } else if (Equivalent[Symbol.hasInstance](x)) {\n      return x.equivalentTo(y, epsilon);\n    } else if (Array.isArray(x)) {\n      if (Array.isArray(y)) {\n        return Arrays.equivalent(x, y, epsilon);\n      }\n    } else if (typeof x === \"object\" && x !== null) {\n      if (typeof y === \"object\" && y !== null) {\n        return Objects.equivalent(x, y, epsilon);\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Returns `-1` if `x` orders before `y`; returns `1` if `x` orders after `y`;\n   * returns `0` if `x` and `y` are equivalent; and returns `NaN` if `x` is not\n   * comparable to `y`.\n   */\n  compare(x: unknown, y: unknown): number {\n    if (x instanceof Date) {\n      x = x.getTime();\n    }\n    if (y instanceof Date) {\n      y = y.getTime();\n    }\n\n    if (x === void 0) {\n      if (y === void 0) {\n        return 0;\n      }\n      return 1;\n    } else if (x === null) {\n      if (y === void 0) {\n        return -1;\n      } else if (y === null) {\n        return 0;\n      }\n      return 1;\n    } else if (typeof x === \"boolean\") {\n      if (y === void 0 || y === null) {\n        return -1;\n      } else if (typeof y === \"boolean\") {\n        return x && !y ? -1 : !x && y ? 1 : 0;\n      }\n      return 1;\n    } else if (typeof x === \"number\") {\n      if (y === void 0 || y === null || typeof y === \"boolean\") {\n        return -1;\n      } else if (typeof y === \"number\") {\n        return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n      }\n      return 1;\n    } else if (typeof x === \"string\") {\n      if (y === void 0 || y === null || typeof y === \"boolean\" || typeof y === \"number\") {\n        return -1;\n      } else if (typeof y === \"string\") {\n        return x < y ? -1 : x > y ? 1 : 0;\n      }\n      return 1;\n    } else if (Compare[Symbol.hasInstance](x)) {\n      return x.compareTo(y);\n    } else if (typeof x === \"function\") {\n      if (y === void 0 || y === null || typeof y === \"boolean\" || typeof y === \"number\" || typeof y === \"string\") {\n        return -1;\n      } else if (typeof y === \"function\") {\n        return Functions.compare(x, y);\n      }\n      return 1;\n    } else if (Array.isArray(x)) {\n      if (y === void 0 || y === null || typeof y === \"boolean\" || typeof y === \"number\" || typeof y === \"string\" || typeof y === \"function\") {\n        return -1;\n      } else if (Array.isArray(y)) {\n        return Arrays.compare(x, y);\n      }\n      return 1;\n    } else if (typeof x === \"object\") {\n      if (y === void 0 || y === null || typeof y === \"boolean\" || typeof y === \"number\" || typeof y === \"string\" || typeof y === \"function\" || Array.isArray(y)) {\n        return -1;\n      } else if (typeof y === \"object\") {\n        return Objects.compare(x, y);\n      }\n      return 1;\n    }\n    return NaN;\n  },\n\n  /**\n   * Returns a hash code for a structural value.\n   */\n  hash(x: unknown): number {\n    if (x instanceof Date) {\n      x = x.getTime();\n    }\n\n    if (x === void 0) {\n      return 0;\n    } else if (x === null) {\n      return 1;\n    } else if (x === false) {\n      return 2;\n    } else if (x === true) {\n      return 3;\n    } else if (typeof x === \"number\") {\n      return Numbers.hash(x);\n    } else if (typeof x === \"string\") {\n      return Strings.hash(x);\n    } else if (HashCode[Symbol.hasInstance](x)) {\n      return x.hashCode();\n    } else if (typeof x === \"function\") {\n      return Functions.hash(x);\n    } else if (Array.isArray(x)) {\n      return Arrays.hash(x);\n    } else if (typeof x === \"object\") {\n      return Objects.hash(x);\n    }\n    throw new TypeError(\"\" + x);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Identity} from \"./Identity\";\nimport {Strings} from \"./Strings\";\nimport {Numbers} from \"./Numbers\";\nimport {Booleans} from \"./Booleans\";\nimport {Objects} from \"./Objects\";\n\n/**\n * Associates a type `T` with a loosely typed representation `L`. Loose type\n * representations are modeled as a phantom method `likeType?(like: L): void`\n * whose argument type is the loosely typed representation of `T`. Because the\n * `likeType` method is optional, values of type `T` are assignable to type\n * `Like<T, L>`, and vice versa.\n *\n * The preferred way to associate loose type representations with a custom\n * class is to declare a `likeType?(like: L): void` method on the class itself.\n * The `Like` type is used to inject a phantom `likeType` method into an\n * existing type. This enables ad hoc loose types to be declared without\n * needing to change the declaration of the strict type.\n *\n * @example Ad hoc number coercion\n *\n * ```ts\n * const NumberLike: FromLike<Like<number, string | boolean>> = {\n *   fromLike(value: number | string | boolean): number {\n *     return Number(value);\n *   },\n * };\n *\n * NumberLike.fromLike(\"42\") // yields 42\n * NumberLike.fromLike(true) // yields 1\n * ```\n *\n * @example Using an ad hoc conversion with a `@Property` fastener\n *\n * ```ts\n * class Person {\n *   @Property({valueType: NumberLike})\n *   readonly age!: Property<Like<number, string | boolean>>;\n * }\n *\n * const person = new Person();\n * person.age.setValue(\"42\");\n * person.age.value // yields 42\n * ```\n *\n * @public\n */\nexport type Like<T, L> = T & {likeType?(like: LikeType<T> | L): void};\n\n/**\n * Extracts the loosely typed representation of a type `T`. `LikeType` is used\n * in conjunction with [[FromLike]] to generically convert loosely typed values\n * to strictly typed instances using only a single generic type parameter to\n * track both strict and loose types.\n * @public\n */\nexport type LikeType<T> = T extends {likeType?(like: infer L): any} ? L : never;\n\n/**\n * Conversion from loosely typed values to a strictly typed instances.\n *\n * @example Generic wrapper class\n *\n * Consider the case of implementing a generic wrapper class. Although the\n * wrapper encapsulates a particular concrete type, the API for the wrapper\n * should accept similarly typed values--but not any value. Two generic types\n * are in play here, the strict type being wrapped, and a loose type that's\n * accepted as arguments and internally converted to the strict type. These\n * types are not independent of each other; each strict type has an associated\n * loose type from which it can be converted. To minimize boilerplate, the\n * wrapper class should only need to be parameterized with a single type.\n *\n * These requirements can be cleanly met with a combination of [[Like]] types\n * and `FromLike` conversions. The generic wrapper class described above can\n * be implemented as follows:\n *\n * ```\n * class GenericWrapper<T> {\n *   valueType: FromLike<T>;\n *   value: T;\n *   constructor(valueType: FromLike<T>, value: T) {\n *     this.valueType = valueType;\n *     this.value = value;\n *   }\n *   set(value: T | LikeType<T>): void {\n *     this.value = this.valueType.fromLike(value);\n *   }\n * }\n * ```\n *\n * When no loose type conversions are needed, `GenericWrapper` can be\n * instantiated with an identity `FromLike` converter.\n *\n * ```\n * const greeting = new GenericWrapper(FromLike<string>(), \"\");\n * greeting.set(\"Hello, world!\");\n * greeting.value // yields \"Hello, world!\";\n * ```\n *\n * A `GenericWrapper` parameterized with a `Like` type and accompanying\n * `FromLike` conversion can be set with any like-typed value.\n *\n * ```\n * const NumberLike: FromLike<Like<number, string | boolean>> = {\n *   fromLike(value: number | string | boolean): number {\n *     return Number(value);\n *   },\n * };\n * export const foo = new GenericWrapper(NumberLike, 0);\n * foo.set(\"42\")\n * foo.value // yields 42\n * ```\n *\n * @public\n */\nexport interface FromLike<T> {\n  /**\n   * Coerces a loosely typed `value` to a strictly typed instance.\n   */\n  fromLike(value: T | LikeType<T>): T;\n}\n\n/** @public */\nexport const FromLike = (function () {\n  const FromLike = function <F>(type?: F, value?: F extends {fromLike(value: infer L): any} ? L : unknown): (F extends {fromLike(...args: any): infer T} ? T : unknown) | FromLike<F extends abstract new (...args: any) => infer T ? T : any> {\n    let likeness: FromLike<any>;\n    if (FromLike[Symbol.hasInstance](type)) {\n      likeness = type;\n    } else if (type === String) {\n      likeness = Strings;\n    } else if (type === Number) {\n      likeness = Numbers;\n    } else if (type === Boolean) {\n      likeness = Booleans;\n    } else {\n      likeness = Identity;\n    }\n    if (arguments.length < 2) {\n      return likeness;\n    }\n    return likeness.fromLike(value);\n  } as {\n    /**\n     * Returns the [[FromLike.fromLike fromLike]] conversion of `value` by `type`,\n     * if `type` conforms to the `FromLike` interface; otherwise returns `value` itself.\n     */\n    <F>(type: F, value: F extends {fromLike(value: infer L): any} ? L : any): F extends {fromLike(...args: any): infer T} ? T : any;\n    /**\n     * Returns a [[FromLike]] converter for the given `type`. Returns `type` itself,\n     * if `type` conforms to the `FromLike` interface; returns a primitive converter,\n     * if `type` is the `String`, `Number`, or `Boolean` constructor; otherwise\n     * returns an identity converter.\n     */\n    <F>(type: F): FromLike<F extends abstract new (...args: any) => infer T ? T : any>;\n    /**\n     * Returns an identity [[FromLike]] converter.\n     */\n    <T>(): FromLike<T>;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[FromLike]] interface.\n     */\n    [Symbol.hasInstance]<T>(instance: unknown): instance is FromLike<T>\n  };\n\n  Object.defineProperty(FromLike, Symbol.hasInstance, {\n    value: function <T>(instance: unknown): instance is FromLike<T> {\n      return Objects.hasAllKeys<FromLike<T>>(instance, \"fromLike\");\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return FromLike;\n})();\n\n/**\n * Conversion to loosely typed values from strictly typed instances.\n * @public\n */\nexport interface ToLike<T> {\n  /**\n   * Returns a loosely typed representation of this instance.\n   */\n  toLike(): LikeType<T>;\n}\n\n/** @public */\nexport const ToLike = (function () {\n  const ToLike = function (value: unknown): unknown {\n    if (ToLike[Symbol.hasInstance](value)) {\n      return value.toLike();\n    }\n    return value;\n  } as {\n    /**\n     * Returns the [[ToLike.toLike toLike]] conversion of `value`, if `value`\n     * conforms to the `ToLike` interface; otherwise returns `value` itself.\n     */\n    <T>(value: ToLike<T>): T;\n    (value: any): any;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[ToLike]] interface.\n     */\n    [Symbol.hasInstance]<T>(instance: unknown): instance is ToLike<T>\n  };\n\n  Object.defineProperty(ToLike, Symbol.hasInstance, {\n    value: function <T>(instance: unknown): instance is ToLike<T> {\n      return Objects.hasAllKeys<ToLike<T>>(instance, \"toLike\");\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return ToLike;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport type Creates<C> =\n  C extends {create(...args: any): infer T} ? T : never;\n\n/** @public */\nexport interface Creatable<T> {\n  create(): T;\n}\n\n/** @public */\nexport const Creatable = {\n  [Symbol.hasInstance]<T>(instance: unknown): instance is Creatable<T> {\n    if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n      return false;\n    }\n    return typeof (instance as Creatable<T>).create === \"function\";\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"./types\";\nimport type {Observer} from \"./Observer\";\n\n/** @public */\nexport type Observes<O> =\n  O extends {readonly observerType?: Class<infer T>} ? T : {};\n\n/** @public */\nexport interface Observable {\n  readonly observerType?: Class<Observer>;\n\n  observe(observer: Observes<this>): void;\n\n  unobserve(observer: Observes<this>): void;\n}\n\n/** @public */\nexport const Observable = {\n  [Symbol.hasInstance](instance: unknown): instance is Observable {\n    if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n      return false;\n    }\n    return typeof (instance as Observable).observe === \"function\"\n        && typeof (instance as Observable).unobserve === \"function\";\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport type Consumer = unknown;\n\n/** @public */\nexport interface Consumable {\n  consume(consumer: Consumer): void;\n\n  unconsume(consumer: Consumer): void;\n}\n\n/** @public */\nexport const Consumable = {\n  [Symbol.hasInstance](instance: unknown): instance is Consumable {\n    if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n      return false;\n    }\n    return typeof (instance as Consumable).consume === \"function\"\n        && typeof (instance as Consumable).unconsume === \"function\";\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"./Lazy\";\n\n/** @public */\nexport abstract class Cursor<T> implements IterableIterator<T> {\n  abstract isEmpty(): boolean;\n\n  abstract head(): T;\n\n  abstract step(): void;\n\n  abstract skip(count: number): void;\n\n  abstract hasNext(): boolean;\n\n  abstract nextIndex(): number;\n\n  abstract next(): IteratorResult<T>;\n\n  abstract hasPrevious(): boolean;\n\n  abstract previousIndex(): number;\n\n  abstract previous(): IteratorResult<T>;\n\n  set(newValue: T): void {\n    throw new Error(\"immutable\");\n  }\n\n  delete(): void {\n    throw new Error(\"immutable\");\n  }\n\n  [Symbol.iterator](): IterableIterator<T> {\n    return this;\n  }\n\n  @Lazy\n  static empty<T>(): Cursor<T> {\n    return new EmptyCursor();\n  }\n\n  static unary<T>(value: T): Cursor<T> {\n    return new UnaryCursor<T>(value);\n  }\n\n  static array<T>(array: readonly T[], index?: number, limit?: number): Cursor<T> {\n    if (index === void 0) {\n      index = 0;\n    }\n    if (limit === void 0) {\n      limit = array.length;\n    }\n    return new ArrayCursor<T>(array, index, limit);\n  }\n\n  static keys<K, V>(cursor: Cursor<[K, V]>): Cursor<K> {\n    return new KeysCursor<K, V>(cursor);\n  }\n\n  static values<K, V>(cursor: Cursor<[K, V]>): Cursor<V> {\n    return new ValuesCursor<K, V>(cursor);\n  }\n}\n\n/** @internal */\nexport class EmptyCursor<T> extends Cursor<T> {\n  override isEmpty(): boolean {\n    return true;\n  }\n\n  override head(): T {\n    throw new Error(\"empty\");\n  }\n\n  override step(): void {\n    throw new Error(\"empty\");\n  }\n\n  override skip(count: number): void {\n    // nop\n  }\n\n  override hasNext(): boolean {\n    return false;\n  }\n\n  override nextIndex(): number {\n    return 0;\n  }\n\n  override next(): IteratorResult<T> {\n    return {done: true, value: void 0};\n  }\n\n  override hasPrevious(): boolean {\n    return false;\n  }\n\n  override previousIndex(): number {\n    return -1;\n  }\n\n  override previous(): IteratorResult<T> {\n    return {done: true, value: void 0};\n  }\n}\n\n/** @internal */\nexport class UnaryCursor<T> extends Cursor<T> {\n  constructor(value: T) {\n    super();\n    this.value = value;\n    this.index = 0;\n  }\n\n  /** @internal */\n  readonly value: T;\n\n  /** @internal */\n  index: number;\n\n  override isEmpty(): boolean {\n    return this.index !== 0;\n  }\n\n  override head(): T {\n    if (this.index !== 0) {\n      throw new Error(\"empty\");\n    }\n    return this.value;\n  }\n\n  override step(): void {\n    if (this.index !== 0) {\n      throw new Error(\"empty\");\n    }\n    this.index = 1;\n  }\n\n  override skip(count: number): void {\n    this.index = Math.min(Math.max(0, this.index + count), 1);\n  }\n\n  override hasNext(): boolean {\n    return this.index === 0;\n  }\n\n  override nextIndex(): number {\n    return this.index;\n  }\n\n  override next(): IteratorResult<T> {\n    if (this.index !== 0) {\n      return {done: true, value: void 0};\n    }\n    this.index = 1;\n    return {done: true, value: this.value};\n  }\n\n  override hasPrevious(): boolean {\n    return this.index === 1;\n  }\n\n  override previousIndex(): number {\n    return this.index - 1;\n  }\n\n  override previous(): IteratorResult<T> {\n    if (this.index !== 1) {\n      return {done: true, value: void 0};\n    }\n    this.index = 0;\n    return {done: true, value: this.value};\n  }\n}\n\n/** @internal */\nexport class ArrayCursor<T> extends Cursor<T> {\n  constructor(array: readonly T[], index: number, limit: number) {\n    super();\n    this.array = array;\n    this.index = index;\n    this.limit = limit;\n  }\n\n  /** @internal */\n  readonly array: readonly T[];\n\n  /** @internal */\n  index: number;\n\n  /** @internal */\n  readonly limit: number;\n\n  override isEmpty(): boolean {\n    return this.index >= this.limit;\n  }\n\n  override head(): T {\n    if (this.index >= this.limit) {\n      throw new Error(\"empty\");\n    }\n    return this.array[this.index]!;\n  }\n\n  override step(): void {\n    const index = this.index;\n    if (index >= this.limit) {\n      throw new Error(\"empty\");\n    }\n    this.index += 1;\n  }\n\n  override skip(count: number): void {\n    this.index = Math.min(this.index + count, this.limit);\n  }\n\n  override hasNext(): boolean {\n    return this.index < this.limit;\n  }\n\n  override nextIndex(): number {\n    return this.index;\n  }\n\n  override next(): IteratorResult<T> {\n    const index = this.index;\n    if (index >= this.limit) {\n      this.index = this.limit;\n      return {done: true, value: void 0};\n    }\n    this.index += 1;\n    return {done: this.index === this.limit, value: this.array[index]!};\n  }\n\n  override hasPrevious(): boolean {\n    return this.index > 0;\n  }\n\n  override previousIndex(): number {\n    return this.index - 1;\n  }\n\n  override previous(): IteratorResult<T> {\n    const index = this.index - 1;\n    if (index < 0) {\n      this.index = 0;\n      return {done: true, value: void 0};\n    }\n    this.index = index;\n    return {done: index === 0, value: this.array[index]!};\n  }\n}\n\n/** @internal */\nexport class KeysCursor<K, V> extends Cursor<K> {\n  constructor(cursor: Cursor<[K, V]>) {\n    super();\n    this.cursor = cursor;\n  }\n\n  /** @internal */\n  readonly cursor: Cursor<[K, V]>;\n\n  override isEmpty(): boolean {\n    return this.cursor.isEmpty();\n  }\n\n  override head(): K {\n    return this.cursor.head()[0];\n  }\n\n  override step(): void {\n    this.cursor.step();\n  }\n\n  override skip(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  override hasNext(): boolean {\n    return this.cursor.hasNext();\n  }\n\n  override nextIndex(): number {\n    return this.cursor.nextIndex();\n  }\n\n  override next(): IteratorResult<K> {\n    const next = this.cursor.next();\n    return {done: next.done, value: next.value !== void 0 ? next.value[0] : void 0};\n  }\n\n  override hasPrevious(): boolean {\n    return this.cursor.hasPrevious();\n  }\n\n  override previousIndex(): number {\n    return this.cursor.previousIndex();\n  }\n\n  override previous(): IteratorResult<K> {\n    const previous = this.cursor.previous();\n    return {done: previous.done, value: previous.value !== void 0 ? previous.value[0] : void 0};\n  }\n\n  override delete(): void {\n    this.cursor.delete();\n  }\n}\n\n/** @internal */\nexport class ValuesCursor<K, V> extends Cursor<V> {\n  constructor(cursor: Cursor<[K, V]>) {\n    super();\n    this.cursor = cursor;\n  }\n\n  /** @internal */\n  readonly cursor: Cursor<[K, V]>;\n\n  override isEmpty(): boolean {\n    return this.cursor.isEmpty();\n  }\n\n  override head(): V {\n    return this.cursor.head()[1];\n  }\n\n  override step(): void {\n    this.cursor.step();\n  }\n\n  override skip(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  override hasNext(): boolean {\n    return this.cursor.hasNext();\n  }\n\n  override nextIndex(): number {\n    return this.cursor.nextIndex();\n  }\n\n  override next(): IteratorResult<V> {\n    const next = this.cursor.next();\n    return {done: next.done, value: next.value !== void 0 ? next.value[1] : void 0};\n  }\n\n  override hasPrevious(): boolean {\n    return this.cursor.hasPrevious();\n  }\n\n  override previousIndex(): number {\n    return this.cursor.previousIndex();\n  }\n\n  override previous(): IteratorResult<V> {\n    const previous = this.cursor.previous();\n    return {done: previous.done, value: previous.value !== void 0 ? previous.value[1] : void 0};\n  }\n\n  override delete(): void {\n    this.cursor.delete();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport type {Equals} from \"./Equals\";\nimport type {Equivalent} from \"./Equivalent\";\nimport type {Domain} from \"./Domain\";\nimport type {Range} from \"./Range\";\n\n/** @public */\nexport interface Mapping<X, Y> extends Equals, Equivalent {\n  (x: X): Y;\n\n  readonly domain: Domain<X>;\n\n  readonly range: Range<Y>;\n\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Mapping = (function (_super: typeof Function) {\n  const Mapping = function <X, Y>(domain: Domain<X>, range: Range<Y>): Mapping<X, Y> {\n    const mapping = function (x: X): Y {\n      return mapping.range(mapping.domain(x));\n    } as Mapping<X, Y>;\n    Object.setPrototypeOf(mapping, Mapping.prototype);\n    (mapping as Mutable<typeof mapping>).domain = domain;\n    (mapping as Mutable<typeof mapping>).range = range;\n    return mapping;\n  } as {\n    <X, Y>(domain: Domain<X>, range: Range<Y>): Mapping<X, Y>;\n\n    /** @internal */\n    prototype: Mapping<any, any>;\n  };\n\n  Mapping.prototype = Object.create(_super.prototype);\n  Mapping.prototype.constructor = Mapping;\n\n  Mapping.prototype.canEqual = function <X, Y>(this: Mapping<X, Y>, that: unknown): boolean {\n    return that instanceof Mapping;\n  };\n\n  Mapping.prototype.equals = function <X, Y>(this: Mapping<X, Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Mapping) {\n      return that.canEqual(this)\n          && this.domain.equals(that.domain)\n          && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  Mapping.prototype.equivalentTo = function <X, Y>(this: Mapping<X, Y>, that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Mapping) {\n      return this.domain.equivalentTo(that.domain, epsilon)\n          && this.range.equivalentTo(that.range, epsilon);\n    }\n    return false;\n  };\n\n  Mapping.prototype.toString = function <X, Y>(this: Mapping<X, Y>): string {\n    return \"Mapping(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return Mapping;\n})(Function);\n\n/** @public */\nexport interface Piecewise<X, Y> extends Mapping<X, Y> {\n  readonly intervals: readonly Mapping<X, Y>[];\n\n  interval(x: X): Mapping<X, Y>;\n\n  /** @override */\n  readonly domain: Domain<X>;\n\n  /** @override */\n  readonly range: Range<Y>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Piecewise = (function (_super: typeof Mapping) {\n  const Piecewise = function <X, Y>(...intervals: readonly Mapping<X, Y>[]): Piecewise<X, Y> {\n    const piecewise = function (x: X): Y {\n      const interval = piecewise.interval(x);\n      return interval(x);\n    } as Piecewise<X, Y>;\n    Object.setPrototypeOf(piecewise, Piecewise.prototype);\n    const n = intervals.length;\n    if (n === 0) {\n      throw new Error(\"no piecewise intervals\");\n    }\n    let interval = intervals[0]!;\n    let domain = interval.domain;\n    let range = interval.range;\n    for (let i = 1; i < n; i += 1) {\n      interval = intervals[i]!;\n      domain = domain.union(interval.domain);\n      range = range.union(interval.range);\n    }\n    (piecewise as Mutable<typeof piecewise>).intervals = intervals;\n    (piecewise as Mutable<typeof piecewise>).domain = domain;\n    (piecewise as Mutable<typeof piecewise>).range = range;\n    return piecewise;\n  } as {\n    /** @internal */\n    <X, Y>(...intervals: readonly Mapping<X, Y>[]): Piecewise<X, Y>;\n\n    /** @internal */\n    prototype: Piecewise<any, any>;\n  };\n\n  Piecewise.prototype = Object.create(_super.prototype);\n  Piecewise.prototype.constructor = Piecewise;\n\n  Piecewise.prototype.interval = function <X, Y>(this: Piecewise<X, Y>, x: X): Mapping<X, Y> {\n    const intervals = this.intervals;\n    let lo = 0;\n    let hi = intervals.length - 1;\n    let interval: Mapping<X, Y> | undefined;\n    while (lo <= hi) {\n      const mid = (lo + hi) >>> 1;\n      interval = intervals[mid]!;\n      const domain = interval.domain;\n      const u = domain(x);\n      if (u < 0) {\n        hi = mid - 1;\n      } else if (u >= 1) {\n        lo = mid + 1;\n      } else {\n        break;\n      }\n    }\n    return interval!;\n  };\n\n  Piecewise.prototype.canEqual = function <X, Y>(this: Piecewise<X, Y>, that: unknown): boolean {\n    return that instanceof Piecewise;\n  };\n\n  Piecewise.prototype.equals = function <X, Y>(this: Piecewise<X, Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Piecewise) {\n      return that.canEqual(this)\n          && this.domain.equals(that.domain)\n          && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  Piecewise.prototype.toString = function <X, Y>(this: Piecewise<X, Y>): string {\n    let s = \"Piecewise(\";\n    const intervals = this.intervals;\n    for (let i = 0; i < intervals.length; i += 1) {\n      const interval = intervals[i]!;\n      if (i !== 0) {\n        s += \", \";\n      }\n      s += interval.toString();\n    }\n    s += \")\";\n    return s;\n  };\n\n  return Piecewise;\n})(Mapping);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Lazy} from \"./Lazy\";\nimport {Values} from \"./Values\";\nimport {Mapping} from \"./Mapping\";\nimport {Range} from \"./\"; // forward import\nimport {LinearDomain} from \"./\"; // forward import\nimport type {LinearRange} from \"./LinearRange\";\n\n/** @public */\nexport type DomainLike<X> = Domain<X> | readonly [X, X];\n\n/** @public */\nexport interface Domain<X> extends Mapping<X, number> {\n  readonly 0: X;\n\n  readonly 1: X;\n\n  /** @override */\n  readonly domain: this;\n\n  /** @override */\n  readonly range: LinearRange;\n\n  contains(x: X): boolean;\n\n  union(that: Domain<X>): Domain<X>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Domain = (function (_super: typeof Mapping) {\n  const Domain = function <X>(x0: X, x1: X): Domain<X> {\n    const domain = function (x: X): number {\n      return Values.equal(x, domain[1]) ? 1 : 0;\n    } as Domain<X>;\n    Object.setPrototypeOf(domain, Domain.prototype);\n    (domain as Mutable<typeof domain>)[0] = x0;\n    (domain as Mutable<typeof domain>)[1] = x1;\n    return domain;\n  } as {\n    <X>(x0: X, x1: X): Domain<X>;\n\n    /** @internal */\n    prototype: Domain<any>;\n\n    unit(): LinearDomain;\n  };\n\n  Domain.prototype = Object.create(_super.prototype);\n  Domain.prototype.constructor = Domain;\n\n  Object.defineProperty(Domain.prototype, \"domain\", {\n    get<X>(this: Domain<X>): Domain<X> {\n      return this;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(Domain.prototype, \"range\", {\n    get<X>(this: Domain<X>): LinearRange {\n      return Range.unit();\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Domain.prototype.contains = function <X>(this: Domain<X>, x: X): boolean {\n    return Values.compare(this[0], x) <= 0 && Values.compare(x, this[1]) <= 0;\n  };\n\n  Domain.prototype.union = function <X>(this: Domain<X>, that: Domain<X>): Domain<X> {\n    const x00 = this[0];\n    const x01 = this[1];\n    const x10 = that[0];\n    const x11 = that[1];\n    const x0 = Values.compare(x00, x10) <= 0 ? x00 : x10;\n    const x1 = Values.compare(x01, x11) >= 0 ? x01 : x11;\n    return Domain(x0, x1);\n  };\n\n  Domain.prototype.canEqual = function <X>(this: Domain<X>, that: unknown): boolean {\n    return that instanceof Domain;\n  };\n\n  Domain.prototype.equals = function <X>(this: Domain<X>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Domain) {\n      return that.canEqual(this)\n          && Values.equal(this[0], that[0])\n          && Values.equal(this[1], that[1]);\n    }\n    return false;\n  };\n\n  Domain.prototype.equivalentTo = function <X>(this: Domain<X>, that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Domain) {\n      return Values.equivalent(this[0], that[0], epsilon)\n          && Values.equivalent(this[1], that[1], epsilon);\n    }\n    return false;\n  };\n\n  Domain.prototype.toString = function <X>(this: Domain<X>): string {\n    return \"Domain(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  Domain.unit = Lazy(function (): LinearDomain {\n    return LinearDomain(0, 1);\n  });\n\n  return Domain;\n})(Mapping);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Lazy} from \"./Lazy\";\nimport {Values} from \"./Values\";\nimport {Mapping} from \"./Mapping\";\nimport {Domain} from \"./Domain\";\nimport type {LinearDomain} from \"./LinearDomain\";\nimport {LinearRange} from \"./\"; // forward import\n\n/** @public */\nexport type RangeLike<Y> = Range<Y> | readonly [Y, Y];\n\n/** @public */\nexport interface Range<Y> extends Mapping<number, Y> {\n  readonly 0: Y;\n\n  readonly 1: Y;\n\n  /** @override */\n  readonly domain: LinearDomain;\n\n  /** @override */\n  readonly range: this;\n\n  union(that: Range<Y>): Range<Y>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Range = (function (_super: typeof Mapping) {\n  const Range = function <Y>(y0: Y, y1: Y): Range<Y> {\n    const range = function (u: number): Y {\n      return u < 1 ? range[0] : range[1];\n    } as Range<Y>;\n    Object.setPrototypeOf(range, Range.prototype);\n    (range as Mutable<typeof range>)[0] = y0;\n    (range as Mutable<typeof range>)[1] = y1;\n    return range;\n  } as {\n    <Y>(y0: Y, y1: Y): Range<Y>;\n\n    /** @internal */\n    prototype: Range<any>;\n\n    unit(): LinearRange;\n  };\n\n  Range.prototype = Object.create(_super.prototype);\n  Range.prototype.constructor = Range;\n\n  Object.defineProperty(Range.prototype, \"domain\", {\n    get<Y>(this: Range<Y>): LinearDomain {\n      return Domain.unit();\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(Range.prototype, \"range\", {\n    get<Y>(this: Range<Y>): Range<Y> {\n      return this;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Range.prototype.union = function <Y>(this: Range<Y>, that: Range<Y>): Range<Y> {\n    const y00 = this[0];\n    const y01 = this[1];\n    const y10 = that[0];\n    const y11 = that[1];\n    const y0Order = Values.compare(y00, y01);\n    const y1Order = Values.compare(y10, y11);\n    let y0: Y;\n    let y1: Y;\n    if (y0Order <= 0 && y1Order <= 0) {\n      y0 = Values.compare(y00, y10) <= 0 ? y00 : y10;\n      y1 = Values.compare(y01, y11) >= 0 ? y01 : y11;\n    } else if (y0Order >= 0 && y1Order >= 0) {\n      y0 = Values.compare(y00, y10) >= 0 ? y00 : y10;\n      y1 = Values.compare(y01, y11) <= 0 ? y01 : y11;\n    } else if (y0Order <= 0 && y1Order >= 0) {\n      y0 = Values.compare(y00, y11) <= 0 ? y00 : y11;\n      y1 = Values.compare(y01, y10) >= 0 ? y01 : y10;\n    } else { // y0Order >= 0 && y1Order <= 0\n      y0 = Values.compare(y01, y10) <= 0 ? y01 : y10;\n      y1 = Values.compare(y00, y11) >= 0 ? y00 : y11;\n    }\n    return Range(y0, y1);\n  };\n\n  Range.prototype.canEqual = function <Y>(this: Domain<Y>, that: unknown): boolean {\n    return that instanceof Range;\n  };\n\n  Range.prototype.equals = function <Y>(this: Domain<Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Range) {\n      return that.canEqual(this)\n          && Values.equal(this[0], that[0])\n          && Values.equal(this[1], that[1]);\n    }\n    return false;\n  };\n\n  Range.prototype.equivalentTo = function <Y>(this: Domain<Y>, that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Range) {\n      return Values.equivalent(this[0], that[0], epsilon)\n          && Values.equivalent(this[1], that[1], epsilon);\n    }\n    return false;\n  };\n\n  Range.prototype.toString = function <Y>(this: Domain<Y>): string {\n    return \"Range(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  Range.unit = Lazy(function (): LinearRange {\n    return LinearRange(0, 1);\n  });\n\n  return Range;\n})(Mapping);\n\n/** @public */\nexport interface Constant<Y> extends Range<Y> {\n  readonly value: Y;\n\n  /** @override */\n  readonly 0: Y;\n\n  /** @override */\n  readonly 1: Y;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Constant = (function (_super: typeof Range) {\n  const Constant = function <Y>(value: Y): Constant<Y> {\n    const range = function (u: number): Y {\n      return range.value;\n    } as Constant<Y>;\n    Object.setPrototypeOf(range, Constant.prototype);\n    (range as Mutable<typeof range>).value = value;\n    return range;\n  } as {\n    <Y>(value: Y): Constant<Y>;\n\n    /** @internal */\n    prototype: Constant<any>;\n  };\n\n  Constant.prototype = Object.create(_super.prototype);\n  Constant.prototype.constructor = Constant;\n\n  Object.defineProperty(Constant.prototype, 0, {\n    get<Y>(this: Constant<Y>): Y {\n      return this.value;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(Constant.prototype, 1, {\n    get<Y>(this: Constant<Y>): Y {\n      return this.value;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Constant.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof Constant;\n  };\n\n  Constant.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Constant) {\n      return that.canEqual(this) && Values.equal(this.value, that.value);\n    }\n    return false;\n  };\n\n  Constant.prototype.toString = function (): string {\n    return \"Constant(\" + this.value + \")\";\n  };\n\n  return Constant;\n})(Range);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Interpolator} from \"./Interpolator\";\n\n/**\n * Type that can be [[Interpolator interpolated]] to values of type `T`.\n * @public\n */\nexport interface Interpolate<T = unknown> {\n  /**\n   * Returns an [[Interpolator]] function that blends between `this` value and\n   * `that` value, if possible; otherwise returns `null` if `this` is unable to\n   * construct an interpolator to `that`.\n   */\n  interpolateTo(that: unknown): Interpolator<T> | null;\n}\n\n/** @public */\nexport const Interpolate = (function () {\n  const Interpolate = function (x: unknown, y: unknown): Interpolator | null {\n    if (Interpolate[Symbol.hasInstance](x)) {\n      return x.interpolateTo(y);\n    }\n    return null;\n  } as {\n    /**\n     * Returns `x.interpolateTo(y)`, if `x` conforms to the\n     * [[Interpolate]] interface; otherwise returns `null`.\n     */\n    <T>(x: Interpolate<T> | null | undefined, y: unknown): Interpolator<T> | null;\n    (x: unknown, y: unknown): Interpolator | null;\n\n    /**\n     * Returns `true` if `instance` appears to conform to the [[Interpolate]] interface.\n     */\n    [Symbol.hasInstance](instance: unknown): instance is Interpolate;\n  };\n\n  Object.defineProperty(Interpolate, Symbol.hasInstance, {\n    value: function (instance: unknown): instance is Interpolate {\n      if (instance === null || (typeof instance !== \"object\" && typeof instance !== \"function\")) {\n        return false;\n      }\n      return typeof (instance as Interpolate).interpolateTo === \"function\";\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  return Interpolate;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Values} from \"./Values\";\nimport {Range} from \"./Range\";\nimport {Interpolate} from \"./Interpolate\";\n\n/** @public */\nexport interface Interpolator<Y = unknown> extends Range<Y>, Interpolate<Interpolator<Y>> {\n  /** @override */\n  readonly 0: Y;\n\n  /** @override */\n  readonly 1: Y;\n\n  /** @override */\n  union(that: Range<Y>): Interpolator<Y>;\n\n  map<Y2>(transform: (y: Y) => Y2): Interpolator<Y2>;\n\n  interpolateTo(that: Interpolator<Y>): Interpolator<Interpolator<Y>>;\n  interpolateTo(that: unknown): Interpolator<Interpolator<Y>> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Interpolator = (function (_super: typeof Range) {\n  const Interpolator = function (y0: unknown, y1: unknown): Interpolator {\n    let interpolator: Interpolator | null;\n    if (y0 === y1) {\n      interpolator = IdentityInterpolator(y0);\n    } else if (typeof y0 === \"number\" && typeof y1 === \"number\") {\n      interpolator = NumberInterpolator(y0, y1);\n    } else if (Array.isArray(y0) && Array.isArray(y1)) {\n      interpolator = ArrayInterpolator(y0, y1);\n    } else {\n      interpolator = Interpolate(y0, y1);\n      if (interpolator === null) {\n        interpolator = StepInterpolator(y0, y1);\n      }\n    }\n    return interpolator;\n  } as {\n    <Y>(y0: Y, y1: Y): Interpolator<Y>;\n    (y0: unknown, y1: unknown): Interpolator;\n\n    /** @internal */\n    prototype: Interpolator<any>;\n  };\n\n  Interpolator.prototype = Object.create(_super.prototype);\n  Interpolator.prototype.constructor = Interpolator;\n\n  Interpolator.prototype.union = function <Y>(this: Interpolator<Y>, that: Range<Y>): Interpolator<Y> {\n    const y00 = this[0];\n    const y01 = this[1];\n    const y10 = that[0];\n    const y11 = that[1];\n    const y0Order = Values.compare(y00, y01);\n    const y1Order = Values.compare(y10, y11);\n    let y0: Y;\n    let y1: Y;\n    if (y0Order <= 0 && y1Order <= 0) {\n      y0 = Values.compare(y00, y10) <= 0 ? y00 : y10;\n      y1 = Values.compare(y01, y11) >= 0 ? y01 : y11;\n    } else if (y0Order >= 0 && y1Order >= 0) {\n      y0 = Values.compare(y00, y10) >= 0 ? y00 : y10;\n      y1 = Values.compare(y01, y11) <= 0 ? y01 : y11;\n    } else if (y0Order <= 0 && y1Order >= 0) {\n      y0 = Values.compare(y00, y11) <= 0 ? y00 : y11;\n      y1 = Values.compare(y01, y10) >= 0 ? y01 : y10;\n    } else { // y0Order >= 0 && y1Order <= 0\n      y0 = Values.compare(y01, y10) <= 0 ? y01 : y10;\n      y1 = Values.compare(y00, y11) >= 0 ? y00 : y11;\n    }\n    return Interpolator(y0, y1);\n  };\n\n  Interpolator.prototype.map = function <Y, Y2>(this: Interpolator<Y>, transform: (y: Y) => Y2): Interpolator<Y2> {\n    return InterpolatorMap(this, transform);\n  };\n\n  Interpolator.prototype.interpolateTo = function <Y>(this: Interpolator<Y>, that: unknown): Interpolator<Interpolator<Y>> | null {\n    if (that instanceof Interpolator) {\n      return InterpolatorInterpolator(this, that);\n    }\n    return null;\n  } as typeof Interpolator.prototype.interpolateTo;\n\n  Interpolator.prototype.canEqual = function <Y>(this: Interpolator<Y>, that: unknown): boolean {\n    return that instanceof this.constructor;\n  };\n\n  Interpolator.prototype.equals = function <Y>(this: Interpolator<Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Interpolator) {\n      return that.canEqual(this)\n          && Values.equal(this[0], that[0])\n          && Values.equal(this[1], that[1]);\n    }\n    return false;\n  };\n\n  Interpolator.prototype.toString = function <Y>(this: Interpolator<Y>): string {\n    return \"Interpolator(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  return Interpolator;\n})(Range);\n\n/** @internal */\nexport interface InterpolatorMap<Y, Y2> extends Interpolator<Y2> {\n  /** @internal */\n  readonly interpolator: Interpolator<Y>;\n\n  /** @internal */\n  readonly transform: (y: Y) => Y2;\n\n  /** @override */\n  readonly 0: Y2;\n\n  /** @override */\n  readonly 1: Y2;\n\n  /** @override */\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const InterpolatorMap = (function (_super: typeof Interpolator) {\n  const InterpolatorMap = function <Y, Y2>(interpolator: Interpolator<Y>, transform: (y: Y) => Y2): InterpolatorMap<Y, Y2> {\n    const map = function (u: number): Y2 {\n      return map.transform(map.interpolator(u));\n    } as InterpolatorMap<Y, Y2>;\n    Object.setPrototypeOf(map, InterpolatorMap.prototype);\n    (map as Mutable<typeof map>).interpolator = interpolator;\n    (map as Mutable<typeof map>).transform = transform;\n    return map;\n  } as {\n    <Y, Y2>(interpolator: Interpolator<Y>, transform: (y: Y) => Y2): InterpolatorMap<Y, Y2>;\n\n    /** @internal */\n    prototype: InterpolatorMap<any, any>;\n  };\n\n  InterpolatorMap.prototype = Object.create(_super.prototype);\n  InterpolatorMap.prototype.constructor = InterpolatorMap;\n\n  Object.defineProperty(InterpolatorMap.prototype, 0, {\n    get<Y, Y2>(this: InterpolatorMap<Y, Y2>): Y2 {\n      return this.transform(this.interpolator[0]);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(InterpolatorMap.prototype, 1, {\n    get<Y, Y2>(this: InterpolatorMap<Y, Y2>): Y2 {\n      return this.transform(this.interpolator[1]);\n    },\n    configurable: true,\n  });\n\n  InterpolatorMap.prototype.equals = function <Y, Y2>(this: InterpolatorMap<Y, Y2>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InterpolatorMap) {\n      return this.interpolator.equals(that.interpolator)\n          && this.transform === that.transform;\n    }\n    return false;\n  };\n\n  return InterpolatorMap;\n})(Interpolator);\n\n/** @internal */\nexport interface IdentityInterpolator<Y> extends Interpolator<Y> {\n  /** @internal */\n  readonly value: Y;\n\n  /** @override */\n  readonly 0: Y;\n\n  /** @override */\n  readonly 1: Y;\n\n  /** @override */\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const IdentityInterpolator = (function (_super: typeof Interpolator) {\n  const IdentityInterpolator = function <Y>(value: Y): IdentityInterpolator<Y> {\n    const interpolator = function (u: number): Y {\n      return interpolator.value;\n    } as IdentityInterpolator<Y>;\n    Object.setPrototypeOf(interpolator, IdentityInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).value = value;\n    return interpolator;\n  } as {\n    <Y>(value: Y): IdentityInterpolator<Y>;\n\n    /** @internal */\n    prototype: IdentityInterpolator<any>;\n  };\n\n  IdentityInterpolator.prototype = Object.create(_super.prototype);\n  IdentityInterpolator.prototype.constructor = IdentityInterpolator;\n\n  Object.defineProperty(IdentityInterpolator.prototype, 0, {\n    get<Y>(this: IdentityInterpolator<Y>): Y {\n      return this.value;\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(IdentityInterpolator.prototype, 1, {\n    get<Y>(this: IdentityInterpolator<Y>): Y {\n      return this.value;\n    },\n    configurable: true,\n  });\n\n  IdentityInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof IdentityInterpolator) {\n      return this.value === that.value;\n    }\n    return false;\n  };\n\n  return IdentityInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport interface StepInterpolator<Y> extends Interpolator<Y> {\n  /** @internal */\n  readonly phase: number;\n\n  /** @override */\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const StepInterpolator = (function (_super: typeof Interpolator) {\n  const StepInterpolator = function <Y>(y0: Y, y1: Y, phase?: number): StepInterpolator<Y> {\n    const interpolator = function (u: number): Y {\n      return u < interpolator.phase ? interpolator[0] : interpolator[1];\n    } as StepInterpolator<Y>;\n    Object.setPrototypeOf(interpolator, StepInterpolator.prototype);\n    if (phase === void 0) {\n      phase = 1;\n    }\n    (interpolator as Mutable<typeof interpolator>).phase = phase;\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    <Y>(y0: Y, y1: Y, phase?: number): StepInterpolator<Y>;\n\n    /** @internal */\n    prototype: StepInterpolator<any>;\n  };\n\n  StepInterpolator.prototype = Object.create(_super.prototype);\n  StepInterpolator.prototype.constructor = StepInterpolator;\n\n  StepInterpolator.prototype.equals = function <Y>(this: StepInterpolator<Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof StepInterpolator) {\n      return that.canEqual(this)\n          && this.phase === that.phase\n          && Values.equal(this[0], that[0])\n          && Values.equal(this[1], that[1]);\n    }\n    return false;\n  };\n\n  return StepInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport const NumberInterpolator = (function (_super: typeof Interpolator) {\n  const NumberInterpolator = function (y0: number, y1: number): Interpolator<number> {\n    const interpolator = function (u: number): number {\n      const y0 = interpolator[0];\n      const y1 = interpolator[1];\n      return y0 + u * (y1 - y0);\n    } as Interpolator<number>;\n    Object.setPrototypeOf(interpolator, NumberInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    (y0: number, y1: number): Interpolator<number>;\n\n    /** @internal */\n    prototype: Interpolator<number>;\n  };\n\n  NumberInterpolator.prototype = Object.create(_super.prototype);\n  NumberInterpolator.prototype.constructor = NumberInterpolator;\n\n  return NumberInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport interface ArrayInterpolator<Y> extends Interpolator<readonly Y[]> {\n  /** @internal */\n  readonly interpolators: readonly Interpolator<Y>[];\n\n  /** @override */\n  readonly 0: readonly Y[];\n\n  /** @override */\n  readonly 1: readonly Y[];\n\n  /** @override */\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const ArrayInterpolator = (function (_super: typeof Interpolator) {\n  const ArrayInterpolator = function <Y>(y0: readonly Y[], y1: readonly Y[]): ArrayInterpolator<Y> {\n    const interpolator = function (u: number): readonly Y[] {\n      const interpolators = interpolator.interpolators;\n      const interpolatorCount = interpolators.length;\n      const array = new Array<Y>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        array[i] = interpolators[i]!(u);\n      }\n      return array;\n    } as ArrayInterpolator<Y>;\n    Object.setPrototypeOf(interpolator, ArrayInterpolator.prototype);\n    const interpolatorCount = Math.min(y0.length, y1.length);\n    const interpolators = new Array<Interpolator<Y>>(interpolatorCount);\n    for (let i = 0; i < interpolatorCount; i += 1) {\n      interpolators[i] = Interpolator(y0[i]!, y1[i]!);\n    }\n    (interpolator as Mutable<typeof interpolator>).interpolators = interpolators;\n    return interpolator;\n  } as {\n    <Y>(y0: readonly Y[], y1: readonly Y[]): ArrayInterpolator<Y>;\n\n    /** @internal */\n    prototype: ArrayInterpolator<any>;\n  };\n\n  ArrayInterpolator.prototype = Object.create(_super.prototype);\n  ArrayInterpolator.prototype.constructor = ArrayInterpolator;\n\n  Object.defineProperty(ArrayInterpolator.prototype, 0, {\n    get<Y>(this: ArrayInterpolator<Y>): readonly Y[] {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const array = new Array<Y>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        array[i] = interpolators[i]![0];\n      }\n      return array;\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(ArrayInterpolator.prototype, 1, {\n    get<Y>(this: ArrayInterpolator<Y>): readonly Y[] {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const array = new Array<Y>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        array[i] = interpolators[i]![1];\n      }\n      return array;\n    },\n    configurable: true,\n  });\n\n  ArrayInterpolator.prototype.equals = function <Y>(this: ArrayInterpolator<Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ArrayInterpolator) {\n      const n = this.interpolators.length;\n      if (n !== that.interpolators.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        if (!this.interpolators[i]!.equals(that.interpolators[i]!)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return ArrayInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport const InterpolatorInterpolator = (function (_super: typeof Interpolator) {\n  const InterpolatorInterpolator = function <Y>(y0: Interpolator<Y>, y1: Interpolator<Y>): Interpolator<Interpolator<Y>> {\n    const interpolator = function (u: number): Interpolator<Y> {\n      if (u === 0) {\n        return interpolator[0];\n      } else if (u === 1) {\n        return interpolator[1];\n      }\n      return Interpolator(interpolator[0](u), interpolator[1](u));\n    } as Interpolator<Interpolator<Y>>;\n    Object.setPrototypeOf(interpolator, InterpolatorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    <Y>(y0: Interpolator<Y>, y1: Interpolator<Y>): Interpolator<Interpolator<Y>>;\n\n    /** @internal */\n    prototype: Interpolator<any>;\n  };\n\n  InterpolatorInterpolator.prototype = Object.create(_super.prototype);\n  InterpolatorInterpolator.prototype.constructor = InterpolatorInterpolator;\n\n  return InterpolatorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"./types\";\nimport type {Mutable} from \"./types\";\nimport {Values} from \"./Values\";\nimport {Domain} from \"./Domain\";\nimport {Interpolator} from \"./Interpolator\";\nimport type {EasingLike} from \"./Easing\";\nimport type {EasingType} from \"./Easing\";\nimport {Easing} from \"./\"; // forward import\nimport {Tweening} from \"./\"; // forward import\n\n/** @public */\nexport type TimingLike = Timing | TimingInit;\n\n/** @public */\nexport interface TimingInit {\n  /** @internal */\n  readonly typeid?: \"TimingInit\";\n  easing?: EasingLike;\n  t0?: number;\n  t1?: number;\n  dt?: number;\n}\n\n/** @public */\nexport interface Timing extends Domain<number> {\n  /** @internal */\n  readonly typeid?: \"Timing\";\n\n  likeType?(like: TimingInit | EasingType): void;\n\n  /** @override */\n  readonly 0: number;\n\n  /** @override */\n  readonly 1: number;\n\n  readonly duration: number;\n\n  readonly easing: Easing;\n\n  /** @override */\n  contains(t: number): boolean;\n\n  withDomain(t0: number, t1: number): Timing;\n\n  withDuration(dt: number): Timing;\n\n  overRange<Y>(range: Interpolator<Y>): Tweening<Y>;\n  overRange<Y>(y0: Y, y1: Y): Tweening<Y>;\n\n  /** @override */\n  union(that: Domain<number>): Timing;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Timing = (function (_super: typeof Domain) {\n  const Timing = function (easing: Easing, t0: number, t1: number): Timing {\n    const timing = function (t: number): number {\n      const t0 = timing[0];\n      const t1 = timing[1];\n      return timing.easing(Math.min(Math.max(0, (t - t0) / (t1 - t0)), 1));\n    } as Timing;\n    Object.setPrototypeOf(timing, Timing.prototype);\n    (timing as Mutable<typeof timing>).easing = easing;\n    (timing as Mutable<typeof timing>)[0] = t0;\n    (timing as Mutable<typeof timing>)[1] = t1;\n    return timing;\n  } as {\n    (easing: Easing, t0: number, t1: number): Timing;\n\n    /** @internal */\n    prototype: Timing;\n\n    fromLike<T extends TimingLike | boolean | null | undefined>(value: T): Timing | (T extends true ? true : never) | (T extends false ? false : never) | Uninitable<T>;\n\n    fromInit(init: TimingInit): Timing;\n  };\n\n  Timing.prototype = Object.create(_super.prototype);\n  Timing.prototype.constructor = Timing;\n\n  Object.defineProperty(Timing.prototype, \"duration\", {\n    get(this: Timing): number {\n      return this[1] - this[0];\n    },\n    configurable: true,\n  });\n\n  Timing.prototype.contains = function (t: number): boolean {\n    return this[0] <= t && t <= this[1];\n  };\n\n  Timing.prototype.withDomain = function (t0: number, t1: number): Timing {\n    return Timing(this.easing, t0, t1);\n  };\n\n  Timing.prototype.withDuration = function (dt: number): Timing {\n    const t0 = this[0];\n    return Timing(this.easing, t0, t0 + dt);\n  };\n\n  Timing.prototype.overRange = function <Y>(this: Timing, y0: Interpolator<Y> | Y, y1: Y): Tweening<Y> {\n    let range: Interpolator<Y>;\n    if (arguments.length === 1) {\n      range = y0 as Interpolator<Y>;\n    } else {\n      range = Interpolator(y0 as Y, y1);\n    }\n    return Tweening(this, range);\n  } as typeof Timing.prototype.overRange;\n\n  Timing.prototype.union = function (that: Domain<number>): Timing {\n    return Timing(this.easing, Math.min(this[0], that[0]), Math.max(this[1], that[1]));\n  };\n\n  Timing.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof Timing;\n  };\n\n  Timing.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Timing) {\n      return that.canEqual(this)\n          && this.easing.equals(that.easing)\n          && Values.equal(this[0], that[0])\n          && Values.equal(this[1], that[1]);\n    }\n    return false;\n  };\n\n  Timing.prototype.equivalentTo = function (that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Timing) {\n      return this.easing.equivalentTo(that.easing, epsilon)\n          && Values.equivalent(this[0], that[0], epsilon)\n          && Values.equivalent(this[1], that[1], epsilon);\n    }\n    return false;\n  };\n\n  Timing.prototype.toString = function (): string {\n    return \"Timing(\" + this.easing + \", \" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  Timing.fromLike = function <T extends TimingLike | boolean | null | undefined>(value: T): Timing | (T extends true ? true : never) | (T extends false ? false : never) | Uninitable<T> {\n    if (value === void 0 || value === null || typeof value === \"boolean\" || value instanceof Timing) {\n      return value as Timing | (T extends true ? true : never) | (T extends false ? false : never) | Uninitable<T>;\n    } else if (typeof value === \"object\") {\n      return this.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  };\n\n  Timing.fromInit = function (init: TimingInit): Timing {\n    let easing = init.easing;\n    if (easing === void 0) {\n      easing = Easing.linear;\n    } else if (typeof easing === \"string\") {\n      easing = Easing(easing);\n    }\n    let t0 = init.t0;\n    if (t0 === void 0) {\n      t0 = 0;\n    }\n    let t1 = init.t1;\n    if (t1 === void 0) {\n      const dt = init.dt;\n      if (dt !== void 0) {\n        t1 = t0 + dt;\n      } else {\n        t1 = t0;\n      }\n    }\n    return Timing(easing, t0, t1);\n  };\n\n  return Timing;\n})(Domain);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"./types\";\nimport type {Mutable} from \"./types\";\nimport {Timing} from \"./Timing\";\n\n/** @public */\nexport type EasingLike = Easing | EasingType;\n\n/** @public */\nexport type EasingType = \"linear\" | \"quad-in\" | \"quad-out\" | \"quad-in-out\"\n                       | \"cubic-in\" | \"cubic-out\" | \"cubic-in-out\"\n                       | \"quart-in\" | \"quart-out\" | \"quart-in-out\"\n                       | \"expo-in\" | \"expo-out\" | \"expo-in-out\"\n                       | \"circ-in\" | \"circ-out\" | \"circ-in-out\"\n                       | \"back-in\" | \"back-out\" | \"back-in-out\"\n                       | \"elastic-in\" | \"elastic-out\" | \"elastic-in-out\"\n                       | \"bounce-in\" | \"bounce-out\" | \"bounce-in-out\";\n\n/** @public */\nexport interface Easing extends Timing {\n  /** @override */\n  likeType?(like: EasingType): void;\n\n  readonly type: string;\n\n  /** @override */\n  readonly 0: 0;\n\n  /** @override */\n  readonly 1: 1;\n\n  /** @override */\n  readonly easing: this;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Easing = (function (_super: typeof Timing) {\n  const Easing = function (type: string): Easing {\n    switch (type) {\n      case \"linear\": return Easing.linear;\n      case \"quad-in\": return Easing.quadIn;\n      case \"quad-out\": return Easing.quadOut;\n      case \"quad-in-out\": return Easing.quadInOut;\n      case \"cubic-in\": return Easing.cubicIn;\n      case \"cubic-out\": return Easing.cubicOut;\n      case \"cubic-in-out\": return Easing.cubicInOut;\n      case \"quart-in\": return Easing.quartIn;\n      case \"quart-out\": return Easing.quartOut;\n      case \"quart-in-out\": return Easing.quartInOut;\n      case \"expo-in\": return Easing.expoIn;\n      case \"expo-out\": return Easing.expoOut;\n      case \"expo-in-out\": return Easing.expoInOut;\n      case \"circ-in\": return Easing.circIn;\n      case \"circ-out\": return Easing.circOut;\n      case \"circ-in-out\": return Easing.circInOut;\n      case \"back-in\": return Easing.backIn;\n      case \"back-out\": return Easing.backOut;\n      case \"back-in-out\": return Easing.backInOut;\n      case \"elastic-in\": return Easing.elasticIn;\n      case \"elastic-out\": return Easing.elasticOut;\n      case \"elastic-in-out\": return Easing.elasticInOut;\n      case \"bounce-in\": return Easing.bounceIn;\n      case \"bounce-out\": return Easing.bounceOut;\n      case \"bounce-in-out\": return Easing.bounceInOut;\n      default: throw new Error(\"unknown easing function: \" + type);\n    }\n  } as {\n    (type: string): Easing;\n\n    /** @internal */\n    prototype: Easing;\n\n    readonly linear: Easing;\n    readonly quadIn: Easing;\n    readonly quadOut: Easing;\n    readonly quadInOut: Easing;\n    readonly cubicIn: Easing;\n    readonly cubicOut: Easing;\n    readonly cubicInOut: Easing;\n    readonly quartIn: Easing;\n    readonly quartOut: Easing;\n    readonly quartInOut: Easing;\n    readonly expoIn: Easing;\n    readonly expoOut: Easing;\n    readonly expoInOut: Easing;\n    readonly circIn: Easing;\n    readonly circOut: Easing;\n    readonly circInOut: Easing;\n    readonly backIn: Easing;\n    readonly backOut: Easing;\n    readonly backInOut: Easing;\n    readonly elasticIn: Easing;\n    readonly elasticOut: Easing;\n    readonly elasticInOut: Easing;\n    readonly bounceIn: Easing;\n    readonly bounceOut: Easing;\n    readonly bounceInOut: Easing;\n\n    fromLike<T extends EasingLike | null | undefined>(value: T): Easing | Uninitable<T>;\n  };\n\n  Easing.prototype = Object.create(_super.prototype);\n  Easing.prototype.constructor = Easing;\n\n  Object.defineProperty(Easing.prototype, 0, {\n    value: 0,\n  });\n\n  Object.defineProperty(Easing.prototype, 1, {\n    value: 1,\n  });\n\n  Object.defineProperty(Easing.prototype, \"easing\", {\n    get(this: Easing): Easing {\n      return this;\n    },\n  });\n\n  Easing.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof Easing;\n  };\n\n  Easing.prototype.equals = function (that: unknown): boolean {\n    return this === that;\n  };\n\n  Easing.prototype.equivalentTo = function (that: unknown, epsilon?: number): boolean {\n    return this === that;\n  };\n\n  Easing.prototype.toString = function (): string {\n    return \"Easing(\\\"\" + this.type + \"\\\")\";\n  };\n\n  Easing.fromLike = function <T extends EasingLike | null | undefined>(value: T): Easing | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof Easing) {\n      return value as Easing | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return Easing(value);\n    }\n    throw new TypeError(\"\" + value);\n  };\n\n  (Easing as Mutable<typeof Easing>).linear = function (u: number): number {\n    return u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.linear, Easing.prototype);\n  (Easing.linear as Mutable<Easing>).type = \"linear\";\n\n  (Easing as Mutable<typeof Easing>).quadIn = function (u: number): number {\n    return u * u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.quadIn, Easing.prototype);\n  (Easing.quadIn as Mutable<Easing>).type = \"quad-in\";\n\n  (Easing as Mutable<typeof Easing>).quadOut = function (u: number): number {\n    return u * (2 - u);\n  } as Easing;\n  Object.setPrototypeOf(Easing.quadOut, Easing.prototype);\n  (Easing.quadOut as Mutable<Easing>).type = \"quad-out\";\n\n  (Easing as Mutable<typeof Easing>).quadInOut = function (u: number): number {\n    u *= 2;\n    if (u <= 1) {\n      u = u * u;\n    } else {\n      u -= 1;\n      u = u * (2 - u);\n      u += 1;\n    }\n    u /= 2;\n    return u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.quadInOut, Easing.prototype);\n  (Easing.quadInOut as Mutable<Easing>).type = \"quad-in-out\";\n\n  (Easing as Mutable<typeof Easing>).cubicIn = function (u: number): number {\n    return u * u * u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.cubicIn, Easing.prototype);\n  (Easing.cubicIn as Mutable<Easing>).type = \"cubic-in\";\n\n  (Easing as Mutable<typeof Easing>).cubicOut = function (u: number): number {\n    u -= 1;\n    u = u * u * u;\n    u += 1;\n    return u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.cubicOut, Easing.prototype);\n  (Easing.cubicOut as Mutable<Easing>).type = \"cubic-out\";\n\n  (Easing as Mutable<typeof Easing>).cubicInOut = function (u: number): number {\n    u *= 2;\n    if (u <= 1) {\n      u = u * u * u;\n    } else {\n      u -= 2;\n      u = u * u * u;\n      u += 2;\n    }\n    u /= 2;\n    return u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.cubicInOut, Easing.prototype);\n  (Easing.cubicInOut as Mutable<Easing>).type = \"cubic-in-out\";\n\n  (Easing as Mutable<typeof Easing>).quartIn = function (u: number): number {\n    return u * u * u * u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.quartIn, Easing.prototype);\n  (Easing.quartIn as Mutable<Easing>).type = \"quart-in\";\n\n  (Easing as Mutable<typeof Easing>).quartOut = function (u: number): number {\n    u -= 1;\n    return 1 - u * u * u * u;\n  } as Easing;\n  Object.setPrototypeOf(Easing.quartOut, Easing.prototype);\n  (Easing.quartOut as Mutable<Easing>).type = \"quart-out\";\n\n  (Easing as Mutable<typeof Easing>).quartInOut = function (u: number): number {\n    const v = u - 1;\n    return u < 0.5 ? 8 * u * u * u * u : 1 - 8 * v * v * v * v;\n  } as Easing;\n  Object.setPrototypeOf(Easing.quartInOut, Easing.prototype);\n  (Easing.quartInOut as Mutable<Easing>).type = \"quart-in-out\";\n\n  (Easing as Mutable<typeof Easing>).expoIn = function (u: number): number {\n    if (u === 0) {\n      return 0;\n    }\n    return Math.pow(2, 10 * (u - 1));\n  } as Easing;\n  Object.setPrototypeOf(Easing.expoIn, Easing.prototype);\n  (Easing.expoIn as Mutable<Easing>).type = \"expo-in\";\n\n  (Easing as Mutable<typeof Easing>).expoOut = function (u: number): number {\n    if (u === 1) {\n      return 1;\n    }\n    return (-Math.pow(2, -10 * u) + 1);\n  } as Easing;\n  Object.setPrototypeOf(Easing.expoOut, Easing.prototype);\n  (Easing.expoOut as Mutable<Easing>).type = \"expo-out\";\n\n  (Easing as Mutable<typeof Easing>).expoInOut = function (u: number): number {\n    if (u === 1 || u === 0) {\n      return u;\n    }\n    u *= 2;\n    if (u < 1) {\n      return 0.5 * Math.pow(2, 10 * (u - 1));\n    }\n    return 0.5 * (-Math.pow(2, -10 * (u - 1)) + 2);\n  } as Easing;\n  Object.setPrototypeOf(Easing.expoInOut, Easing.prototype);\n  (Easing.expoInOut as Mutable<Easing>).type = \"expo-in-out\";\n\n  (Easing as Mutable<typeof Easing>).circIn = function (u: number): number {\n    return -1 * (Math.sqrt(1 - (u / 1) * u) - 1);\n  } as Easing;\n  Object.setPrototypeOf(Easing.circIn, Easing.prototype);\n  (Easing.circIn as Mutable<Easing>).type = \"circ-in\";\n\n  (Easing as Mutable<typeof Easing>).circOut = function (u: number): number {\n    u -= 1;\n    return Math.sqrt(1 - u * u);\n  } as Easing;\n  Object.setPrototypeOf(Easing.circOut, Easing.prototype);\n  (Easing.circOut as Mutable<Easing>).type = \"circ-out\";\n\n  (Easing as Mutable<typeof Easing>).circInOut = function (u: number): number {\n    u *= 2;\n    if (u < 1) {\n      return -0.5 * (Math.sqrt(1 - u * u) - 1);\n    }\n    const st = u - 2;\n    return 0.5 * (Math.sqrt(1 - st * st) + 1);\n  } as Easing;\n  Object.setPrototypeOf(Easing.circInOut, Easing.prototype);\n  (Easing.circInOut as Mutable<Easing>).type = \"circ-in-out\";\n\n  (Easing as Mutable<typeof Easing>).backIn = function (u: number): number {\n    const m = 1.70158; // m - Magnitude\n    return u * u * ((m + 1) * u - m);\n  } as Easing;\n  Object.setPrototypeOf(Easing.backIn, Easing.prototype);\n  (Easing.backIn as Mutable<Easing>).type = \"back-in\";\n\n  (Easing as Mutable<typeof Easing>).backOut = function (u: number): number {\n    const m = 1.70158;\n    const st = (u / 1) - 1;\n    return (st * st * ((m + 1) * m + m)) + 1;\n  } as Easing;\n  Object.setPrototypeOf(Easing.backOut, Easing.prototype);\n  (Easing.backOut as Mutable<Easing>).type = \"back-out\";\n\n  (Easing as Mutable<typeof Easing>).backInOut = function (u: number): number {\n    const m = 1.70158;\n    const s = m * 1.525;\n    if ((u *= 2) < 1) {\n      return 0.5 * u * u * (((s + 1) * u) - s);\n    }\n    const st = u - 2;\n    return 0.5 * (st * st * ((s + 1) * st + s) + 2);\n  } as Easing;\n  Object.setPrototypeOf(Easing.backInOut, Easing.prototype);\n  (Easing.backInOut as Mutable<Easing>).type = \"back-in-out\";\n\n  (Easing as Mutable<typeof Easing>).elasticIn = function (u: number): number {\n    if (u === 0 || u === 1) {\n      return u;\n    }\n    const m = 0.7;\n    const st = (u / 1) - 1;\n    const s = (1 - m) / 2 * Math.PI * Math.asin(1);\n    return -(Math.pow(2, 10 * st) * Math.sin((st - s) * 2 * Math.PI / (1 - m)));\n  } as Easing;\n  Object.setPrototypeOf(Easing.elasticIn, Easing.prototype);\n  (Easing.elasticIn as Mutable<Easing>).type = \"elastic-in\";\n\n  (Easing as Mutable<typeof Easing>).elasticOut = function (u: number): number {\n    if (u === 0 || u === 1) {\n      return u;\n    }\n    const m = 0.7;\n    const s = (1 -  m) / (2 * Math.PI) * Math.asin(1);\n    u *= 2;\n    return (Math.pow(2, -10 * u) * Math.sin((u - s) * 2 * Math.PI / (1 - m))) + 1;\n  } as Easing;\n  Object.setPrototypeOf(Easing.elasticOut, Easing.prototype);\n  (Easing.elasticOut as Mutable<Easing>).type = \"elastic-out\";\n\n  (Easing as Mutable<typeof Easing>).elasticInOut = function (u: number): number {\n    if (u === 0 || u === 1) {\n      return u;\n    }\n    const m = 0.65;\n    const s = (1 - m) / (2 * Math.PI) * Math.asin(1);\n    const st = u * 2;\n    const st1 = st - 1;\n    if(st < 1) {\n      return -0.5 * (Math.pow(2, 10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)));\n    }\n    return (Math.pow(2, -10 * st1) * Math.sin((st1 - s) * 2 * Math.PI / (1 - m)) * 0.5) + 1;\n  } as Easing;\n  Object.setPrototypeOf(Easing.elasticInOut, Easing.prototype);\n  (Easing.elasticInOut as Mutable<Easing>).type = \"elastic-in-out\";\n\n  (Easing as Mutable<typeof Easing>).bounceIn = function (u: number): number {\n    const p = 7.5625;\n    if ((u = 1 - u) < 1 / 2.75) {\n      return 1 - (p * u * u);\n    } else if (u < 2 / 2.75) {\n      return 1 - (p * (u -= 1.5 / 2.75) * u + 0.75);\n    } else if (u < 2.5 / 2.75) {\n      return 1 - (p * (u -= 2.25 / 2.75) * u + 0.9375);\n    }\n    return 1 - (p * (u -= 2.625 / 2.75) * u + 0.984375);\n  } as Easing;\n  Object.setPrototypeOf(Easing.bounceIn, Easing.prototype);\n  (Easing.bounceIn as Mutable<Easing>).type = \"bounce-in\";\n\n  (Easing as Mutable<typeof Easing>).bounceOut = function (u: number): number {\n    const p = 7.5625;\n    if (u < 1 / 2.75) {\n      return p * u * u;\n    } else if (u < 2 / 2.75) {\n      return p * (u -= 1.5 / 2.75) * u + 0.75;\n    } else if (u < 2.5 / 2.75) {\n      return p * (u -= 2.25 / 2.75) * u + 0.9375;\n    }\n    return p * (u -= 2.625 / 2.75) * u + 0.984375;\n  } as Easing;\n  Object.setPrototypeOf(Easing.bounceOut, Easing.prototype);\n  (Easing.bounceOut as Mutable<Easing>).type = \"bounce-out\";\n\n  (Easing as Mutable<typeof Easing>).bounceInOut = function (u: number): number {\n    const invert = u < 0.5;\n    u = invert ? 1 - (u * 2) : (u * 2) - 1;\n    const p = 7.5625;\n    if (u < 1 / 2.75) {\n      u = p * u * u;\n    } else if (u < 2 / 2.75) {\n      u = p * (u -= 1.5 / 2.75) * u + 0.75;\n    } else if (u < 2.5 / 2.75) {\n      u = p * (u -= 2.25 / 2.75) * u + 0.9375;\n    } else {\n      u = p * (u -= 2.625 / 2.75) * u + 0.984375;\n    }\n    return invert ? (1 - u) * 0.5 : u * 0.5 + 0.5;\n  } as Easing;\n  Object.setPrototypeOf(Easing.bounceInOut, Easing.prototype);\n  (Easing.bounceInOut as Mutable<Easing>).type = \"bounce-in-out\";\n\n  return Easing;\n})(Timing);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Mapping} from \"./Mapping\";\nimport type {Interpolator} from \"./Interpolator\";\nimport type {Timing} from \"./Timing\";\n\n/** @public */\nexport interface Tweening<Y> extends Mapping<number, Y> {\n  /** @override */\n  readonly domain: Timing;\n\n  /** @override */\n  readonly range: Interpolator<Y>;\n\n  withDomain(t0: number, t1: number): Tweening<Y>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Tweening = (function (_super: typeof Mapping) {\n  const Tweening = function <Y>(domain: Timing, range: Interpolator<Y>): Tweening<Y> {\n    const tweening = function (u: number): Y {\n      return tweening.range(tweening.domain(u));\n    } as Tweening<Y>;\n    Object.setPrototypeOf(tweening, Tweening.prototype);\n    (tweening as Mutable<typeof tweening>).domain = domain;\n    (tweening as Mutable<typeof tweening>).range = range;\n    return tweening;\n  } as {\n    <Y>(domain: Timing, range: Interpolator<Y>): Tweening<Y>\n\n    /** @internal */\n    prototype: Tweening<any>;\n  };\n\n  Tweening.prototype = Object.create(_super.prototype);\n  Tweening.prototype.constructor = Tweening;\n\n  Tweening.prototype.withDomain = function <Y>(this: Tweening<Y>, t0: number, t1: number): Tweening<Y> {\n    return this.domain.withDomain(t0, t1).overRange(this.range);\n  };\n\n  Tweening.prototype.canEqual = function <Y>(this: Tweening<Y>, that: unknown): boolean {\n    return that instanceof Tweening;\n  };\n\n  Tweening.prototype.equals = function <Y>(this: Tweening<Y>, that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Tweening) {\n      return this.domain.equals(that.domain) && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  Tweening.prototype.toString = function <Y>(this: Tweening<Y>): string {\n    return \"Tweening(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return Tweening;\n})(Mapping);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Mapping} from \"./Mapping\";\nimport type {Domain} from \"./Domain\";\nimport type {Range} from \"./Range\";\n\n/** @public */\nexport interface Scale<X, Y> extends Mapping<X, Y> {\n  readonly inverse: Mapping<Y, X>;\n\n  withDomain(domain: Domain<X>): Scale<X, Y>;\n  withDomain(x0: X, x1: X): Scale<X, Y>;\n\n  overRange(range: Range<Y>): Scale<X, Y>;\n  overRange(y0: Y, y1: Y): Scale<X, Y>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Scale = (function (_super: typeof Mapping) {\n  const Scale = function (): never {\n    throw new Error();\n  } as {\n    /** @internal */\n    (): never;\n\n    /** @internal */\n    prototype: Scale<any, any>;\n  };\n\n  Scale.prototype = Object.create(_super.prototype);\n  Scale.prototype.constructor = Scale;\n\n  Scale.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof Scale;\n  };\n\n  Scale.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Scale) {\n      return this.domain.equals(that.domain) && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  Scale.prototype.toString = function (): string {\n    return \"Scale(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return Scale;\n})(Mapping);\n\n/** @public */\nexport interface ContinuousScale<X, Y> extends Scale<X, Y> {\n  /** @override */\n  readonly inverse: Mapping<Y, X>;\n\n  /** @override */\n  withDomain(domain: Domain<X>): ContinuousScale<X, Y>;\n  withDomain(x0: X, x1: X): ContinuousScale<X, Y>;\n\n  /** @override */\n  overRange(range: Range<Y>): ContinuousScale<X, Y>;\n  overRange(y0: Y, y1: Y): ContinuousScale<X, Y>;\n\n  clampDomain(xMin: X | undefined, xMax: X | undefined,\n              zMin: number | undefined, zMax: number | undefined,\n              epsilon?: number): ContinuousScale<X, Y>;\n\n  solveDomain(x1: X, y1: Y, x2?: X, y2?: Y,\n              reflect?: boolean, epsilon?: number): ContinuousScale<X, Y>;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const ContinuousScale = (function (_super: typeof Scale) {\n  const ContinuousScale = function (): never {\n    throw new Error();\n  } as {\n    /** @internal */\n    (): never;\n\n    /** @internal */\n    prototype: ContinuousScale<any, any>;\n  };\n\n  ContinuousScale.prototype = Object.create(_super.prototype);\n  ContinuousScale.prototype.constructor = ContinuousScale;\n\n  ContinuousScale.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof ContinuousScale;\n  };\n\n  ContinuousScale.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ContinuousScale) {\n      return this.domain.equals(that.domain) && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  ContinuousScale.prototype.toString = function (): string {\n    return \"ContinuousScale(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return ContinuousScale;\n})(Scale);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Domain} from \"./Domain\";\nimport type {Interpolate} from \"./Interpolate\";\nimport {Interpolator} from \"./Interpolator\";\nimport {LinearRange} from \"./\"; // forward import\n\n/** @public */\nexport interface LinearDomain extends Domain<number>, Interpolate<LinearDomain> {\n  /** @override */\n  readonly 0: number;\n\n  /** @override */\n  readonly 1: number;\n\n  readonly inverse: LinearRange;\n\n  /** @override */\n  contains(x: number): boolean;\n\n  /** @override */\n  union(that: Domain<number>): LinearDomain;\n\n  /** @override */\n  interpolateTo(that: LinearDomain): Interpolator<LinearDomain>;\n  interpolateTo(that: unknown): Interpolator<LinearDomain> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const LinearDomain = (function (_super: typeof Domain) {\n  const LinearDomain = function (x0: number, x1: number): LinearDomain {\n    const domain = function (x: number): number {\n      const x0 = domain[0];\n      const x1 = domain[1];\n      const dx = x1 - x0;\n      return dx !== 0 ? (x - x0) / dx : 0;\n    } as LinearDomain;\n    Object.setPrototypeOf(domain, LinearDomain.prototype);\n    (domain as Mutable<typeof domain>)[0] = x0;\n    (domain as Mutable<typeof domain>)[1] = x1;\n    return domain;\n  } as {\n    (x0: number, x1: number): LinearDomain;\n\n    /** @internal */\n    prototype: LinearDomain;\n  };\n\n  LinearDomain.prototype = Object.create(_super.prototype);\n  LinearDomain.prototype.constructor = LinearDomain;\n\n  Object.defineProperty(LinearDomain.prototype, \"inverse\", {\n    get(this: LinearDomain): LinearRange {\n      return LinearRange(this[0], this[1]);\n    },\n    configurable: true,\n  });\n\n  LinearDomain.prototype.contains = function (x: number): boolean {\n    return this[0] <= x && x <= this[1];\n  };\n\n  LinearDomain.prototype.union = function (that: Domain<number>): LinearDomain {\n    return LinearDomain(Math.min(this[0], that[0]), Math.max(this[1], that[1]));\n  };\n\n  LinearDomain.prototype.interpolateTo = function (this: LinearDomain, that: unknown): Interpolator<LinearDomain> | null {\n    if (that instanceof LinearDomain) {\n      return LinearDomainInterpolator(this, that);\n    }\n    return null;\n  } as typeof LinearDomain.prototype.interpolateTo;\n\n  LinearDomain.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof LinearDomain;\n  };\n\n  LinearDomain.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LinearDomain) {\n      return that.canEqual(this) && this[0] === that[0] && this[1] === that[1];\n    }\n    return false;\n  };\n\n  LinearDomain.prototype.toString = function (): string {\n    return \"LinearDomain(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  return LinearDomain;\n})(Domain);\n\n/** @internal */\nexport const LinearDomainInterpolator = (function (_super: typeof Interpolator) {\n  const LinearDomainInterpolator = function (x0: LinearDomain, x1: LinearDomain): Interpolator<LinearDomain> {\n    const interpolator = function (u: number): LinearDomain {\n      const x0 = interpolator[0];\n      const x00 = x0[0];\n      const x01 = x0[1];\n      const x1 = interpolator[1];\n      const x10 = x1[0];\n      const x11 = x1[1];\n      return LinearDomain(x00 + u * (x10 - x00), x01 + u * (x11 - x01));\n    } as Interpolator<LinearDomain>;\n    Object.setPrototypeOf(interpolator, LinearDomainInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = x0;\n    (interpolator as Mutable<typeof interpolator>)[1] = x1;\n    return interpolator;\n  } as {\n    (x0: LinearDomain, x1: LinearDomain): Interpolator<LinearDomain>;\n\n    /** @internal */\n    prototype: Interpolator<LinearDomain>;\n  };\n\n  LinearDomainInterpolator.prototype = Object.create(_super.prototype);\n  LinearDomainInterpolator.prototype.constructor = LinearDomainInterpolator;\n\n  return LinearDomainInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Range} from \"./Range\";\nimport type {Interpolate} from \"./Interpolate\";\nimport {Interpolator} from \"./Interpolator\";\nimport {LinearDomain} from \"./LinearDomain\";\n\n/** @public */\nexport interface LinearRange extends Range<number>, Interpolate<LinearRange> {\n  /** @override */\n  readonly 0: number;\n\n  /** @override */\n  readonly 1: number;\n\n  readonly inverse: LinearDomain;\n\n  /** @override */\n  union(that: Range<number>): LinearRange;\n\n  /** @override */\n  interpolateTo(that: LinearRange): Interpolator<LinearRange>;\n  interpolateTo(that: unknown): Interpolator<LinearRange> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const LinearRange = (function (_super: typeof Range) {\n  const LinearRange = function (y0: number, y1: number): LinearRange {\n    const range = function (u: number): number {\n      const y0 = range[0];\n      const y1 = range[1];\n      return y0 + u * (y1 - y0);\n    } as LinearRange;\n    Object.setPrototypeOf(range, LinearRange.prototype);\n    (range as Mutable<typeof range>)[0] = y0;\n    (range as Mutable<typeof range>)[1] = y1;\n    return range;\n  } as {\n    (y0: number, y1: number): LinearRange;\n\n    /** @internal */\n    prototype: LinearRange;\n  };\n\n  LinearRange.prototype = Object.create(_super.prototype);\n  LinearRange.prototype.constructor = LinearRange;\n\n  Object.defineProperty(LinearRange.prototype, \"inverse\", {\n    get(this: LinearRange): LinearDomain {\n      return LinearDomain(this[0], this[1]);\n    },\n    configurable: true,\n  });\n\n  LinearRange.prototype.union = function (that: Range<number>): LinearRange {\n    const y00 = this[0];\n    const y01 = this[1];\n    const y10 = that[0];\n    const y11 = that[1];\n    let y0: number;\n    let y1: number;\n    if (y00 <= y01 && y10 <= y11) {\n      y0 = Math.min(y00, y10);\n      y1 = Math.max(y01, y11);\n    } else if (y00 >= y01 && y10 >= y11) {\n      y0 = Math.max(y00, y10);\n      y1 = Math.min(y01, y11);\n    } else if (y00 <= y01 && y10 >= y11) {\n      y0 = Math.min(y00, y11);\n      y1 = Math.max(y01, y10);\n    } else { // y00 >= y01 && y10 <= y11\n      y0 = Math.min(y01, y10);\n      y1 = Math.max(y00, y11);\n    }\n    return LinearRange(y0, y1);\n  };\n\n  LinearRange.prototype.interpolateTo = function (this: LinearRange, that: unknown): Interpolator<LinearRange> | null {\n    if (that instanceof LinearRange) {\n      return LinearRangeInterpolator(this, that);\n    }\n    return null;\n  } as typeof LinearRange.prototype.interpolateTo;\n\n  LinearRange.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof LinearRange;\n  };\n\n  LinearRange.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LinearRange) {\n      return that.canEqual(this) && this[0] === that[0] && this[1] === that[1];\n    }\n    return false;\n  };\n\n  LinearRange.prototype.toString = function (): string {\n    return \"LinearRange(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  return LinearRange;\n})(Range);\n\n/** @internal */\nexport const LinearRangeInterpolator = (function (_super: typeof Interpolator) {\n  const LinearRangeInterpolator = function (y0: LinearRange, y1: LinearRange): Interpolator<LinearRange> {\n    const interpolator = function (u: number): LinearRange {\n      const y0 = interpolator[0];\n      const y00 = y0[0];\n      const y01 = y0[1];\n      const y1 = interpolator[1];\n      const y10 = y1[0];\n      const y11 = y1[1];\n      return LinearRange(y00 + u * (y10 - y00), y01 + u * (y11 - y01));\n    } as Interpolator<LinearRange>;\n    Object.setPrototypeOf(interpolator, LinearRangeInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    (y0: LinearRange, y1: LinearRange): Interpolator<LinearRange>;\n\n    /** @internal */\n    prototype: Interpolator<LinearRange>;\n  };\n\n  LinearRangeInterpolator.prototype = Object.create(_super.prototype);\n  LinearRangeInterpolator.prototype.constructor = LinearRangeInterpolator;\n\n  return LinearRangeInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"./types\";\nimport {Equivalent} from \"./Equivalent\";\nimport type {Interpolate} from \"./Interpolate\";\nimport {Interpolator} from \"./Interpolator\";\nimport {ContinuousScale} from \"./Scale\";\nimport {LinearDomain} from \"./LinearDomain\";\nimport {LinearRange} from \"./LinearRange\";\n\n/** @public */\nexport interface LinearScale extends ContinuousScale<number, number>, Interpolate<LinearScale> {\n  /** @override */\n  readonly domain: LinearDomain;\n\n  /** @override */\n  readonly range: LinearRange;\n\n  /** @override */\n  readonly inverse: LinearScale;\n\n  /** @override */\n  withDomain(domain: LinearDomain): LinearScale;\n  withDomain(x0: number, x1: number): LinearScale;\n\n  /** @override */\n  overRange(range: LinearRange): LinearScale;\n  overRange(y0: number, y1: number): LinearScale;\n\n  /** @override */\n  clampDomain(xMin: number | undefined, xMax: number | undefined,\n              zMin: number | undefined, zMax: number | undefined,\n              epsilon?: number): LinearScale;\n\n  /** @override */\n  solveDomain(x1: number, y1: number, x2?: number, y2?: number,\n              reflect?: boolean, epsilon?: number): LinearScale;\n\n  /** @override */\n  interpolateTo(that: LinearScale): Interpolator<LinearScale>;\n  interpolateTo(that: unknown): Interpolator<LinearScale> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const LinearScale = (function (_super: typeof ContinuousScale) {\n  const LinearScale = function (domain: LinearDomain, range: LinearRange): LinearScale {\n    const scale = function (x: number): number {\n      return scale.range(scale.domain(x));\n    } as LinearScale;\n    Object.setPrototypeOf(scale, LinearScale.prototype);\n    (scale as Mutable<typeof scale>).domain = domain;\n    (scale as Mutable<typeof scale>).range = range;\n    return scale;\n  } as {\n    (domain: LinearDomain, range: LinearRange): LinearScale;\n\n    /** @internal */\n    prototype: LinearScale;\n  };\n\n  LinearScale.prototype = Object.create(_super.prototype);\n  LinearScale.prototype.constructor = LinearScale;\n\n  Object.defineProperty(LinearScale.prototype, \"inverse\", {\n    get(this: LinearScale): LinearScale {\n      return LinearScale(this.range.inverse, this.domain.inverse);\n    },\n    configurable: true,\n  });\n\n  LinearScale.prototype.withDomain = function (x0: LinearDomain | number, x1?: number): LinearScale {\n    let domain: LinearDomain;\n    if (arguments.length === 1) {\n      domain = x0 as LinearDomain;\n    } else {\n      domain = LinearDomain(x0 as number, x1!);\n    }\n    return LinearScale(domain, this.range);\n  };\n\n  LinearScale.prototype.overRange = function (y0: LinearRange | number, y1?: number): LinearScale {\n    let range: LinearRange;\n    if (arguments.length === 1) {\n      range = y0 as LinearRange;\n    } else {\n      range = LinearRange(y0 as number, y1!);\n    }\n    return LinearScale(this.domain, range);\n  };\n\n  LinearScale.prototype.clampDomain = function (xMin: number | undefined, xMax: number | undefined,\n                                                zMin: number | undefined, zMax: number | undefined,\n                                                epsilon?: number): LinearScale {\n    if (epsilon === void 0) {\n      epsilon = Equivalent.Epsilon;\n    }\n    let x0 = this.domain[0];\n    let x1 = this.domain[1];\n    if (xMin !== void 0 && xMax !== void 0 && Math.abs(x1 - x0) > xMax - xMin) {\n      if (x0 < x1) {\n        x0 = xMin;\n        x1 = xMax;\n      } else {\n        x1 = xMin;\n        x0 = xMax;\n      }\n    } else {\n      if (xMin !== void 0) {\n        if (x0 < x1 && x0 < xMin) {\n          x1 += xMin - x0;\n          x0 = xMin;\n        } else if (x1 < x0 && x1 < xMin) {\n          x0 += xMin - x1;\n          x1 = xMin;\n        }\n      }\n      if (xMax !== void 0) {\n        if (x0 < x1 && x1 > xMax) {\n          x0 -= x1 - xMax;\n          x1 = xMax;\n        } else if (x1 < x0 && x0 > xMax) {\n          x1 -= x0 - xMax;\n          x0 = xMax;\n        }\n      }\n    }\n\n    const y0 = this(x0);\n    const y1 = this(x1);\n    const dy = y0 < y1 ? y1 - y0 : y0 - y1;\n    const z = Math.abs(dy / (x1 - x0));\n    if (zMin !== void 0 && z < 1 / zMin) {\n      const dz = dy * zMin;\n      const xSum = x0 + x1;\n      x0 = (xSum - dz) / 2;\n      x1 = (xSum + dz) / 2;\n    } else if (zMax !== void 0 && z > 1 / zMax) {\n      const dz = dy * zMax;\n      const xSum = x0 + x1;\n      x0 = (xSum - dz) / 2;\n      x1 = (xSum + dz) / 2;\n    }\n\n    if (Math.abs(x0 - this.domain[0]) < epsilon && Math.abs(x1 - this.domain[1]) < epsilon) {\n      return this;\n    }\n    return LinearScale(LinearDomain(x0, x1), this.range);\n  };\n\n  LinearScale.prototype.solveDomain = function (x1: number, y1: number, x2?: number, y2?: number,\n                                                reflect?: boolean, epsilon?: number): LinearScale {\n    if (epsilon === void 0) {\n      epsilon = Equivalent.Epsilon;\n    }\n    const dx = this.domain[1] - this.domain[0];\n    const y0 = this.range[0];\n    const y3 = this.range[1];\n    let m: number;\n    if (x2 === void 0 || y2 === void 0 || Math.abs(x2 - x1) < epsilon || Math.abs(y2 - y1) < epsilon) {\n      m = (y3 - y0) / (dx !== 0 ? dx : epsilon);\n    } else {\n      m = (y2 - y1) / (x2 - x1);\n      if ((reflect === void 0 || !reflect) && (m < 0 !== (y3 - y0) / dx < 0)) {\n        m = -m;\n      }\n    }\n    const b = y1 - m * x1;\n    const x0 = (y0 - b) / m;\n    const x3 = (y3 - b) / m;\n\n    if (Math.abs(x0 - this.domain[0]) < epsilon && Math.abs(x3 - this.domain[1]) < epsilon) {\n      return this;\n    }\n    return LinearScale(LinearDomain(x0, x3), this.range);\n  };\n\n  LinearScale.prototype.interpolateTo = function (this: LinearScale, that: unknown): Interpolator<LinearScale> | null {\n    if (that instanceof LinearScale) {\n      return LinearScaleInterpolator(this, that);\n    }\n    return null;\n  } as typeof LinearScale.prototype.interpolateTo;\n\n  LinearScale.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof LinearScale;\n  };\n\n  LinearScale.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LinearScale) {\n      return this.domain.equals(that.domain) && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  LinearScale.prototype.toString = function (): string {\n    return \"LinearScale(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return LinearScale;\n})(ContinuousScale);\n\n/** @internal */\nexport const LinearScaleInterpolator = (function (_super: typeof Interpolator) {\n  const LinearScaleInterpolator = function (s0: LinearScale, s1: LinearScale): Interpolator<LinearScale> {\n    const interpolator = function (u: number): LinearScale {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const x0 = s0.domain;\n      const x00 = x0[0];\n      const x01 = x0[1];\n      const x1 = s1.domain;\n      const x10 = x1[0];\n      const x11 = x1[1];\n      const domain = LinearDomain(x00 + u * (x10 - x00), x01 + u * (x11 - x01));\n      const y0 = s0.range;\n      const y00 = y0[0];\n      const y01 = y0[1];\n      const y1 = s1.range;\n      const y10 = y1[0];\n      const y11 = y1[1];\n      const range = LinearRange(y00 + u * (y10 - y00), y01 + u * (y11 - y01));\n      return LinearScale(domain, range);\n    } as Interpolator<LinearScale>;\n    Object.setPrototypeOf(interpolator, LinearScaleInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: LinearScale, s1: LinearScale): Interpolator<LinearScale>;\n\n    /** @internal */\n    prototype: Interpolator<LinearScale>;\n  };\n\n  LinearScaleInterpolator.prototype = Object.create(_super.prototype);\n  LinearScaleInterpolator.prototype.constructor = LinearScaleInterpolator;\n\n  return LinearScaleInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Values} from \"./Values\";\n\n/**\n * Exception thrown when an [[Assert]] fails.\n * @public\n */\nexport class AssertException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, AssertException.prototype);\n  }\n}\n\n/**\n * Callable [[Assert]] interface.\n *\n * @public\n */\nexport interface AssertFunction extends Assert {\n  /**\n   * Asserts that `condition` is truthy.\n   *\n   * @throws [[AssertException]] with `message` if `condition` is falsy.\n   */\n  (condition: unknown, message?: string): void;\n}\n\n/**\n * Type that implements common assertion functions.\n * @public\n */\nexport interface Assert {\n  /**\n   * Asserts that `condition` is truthy.\n   *\n   * @throws [[AssertException]] with `message` if `condition` is falsy.\n   */\n  ok(condition: unknown, message?: string): void;\n\n  /**\n   * Asserts that `condition` is falsy.\n   *\n   * @throws [[AssertException]] with `message` if `condition` is truthy.\n   */\n  notOk(condition: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is identical (`===`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not identical (`!==`) to `rhs`.\n   */\n  identical(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not identical (`!==`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is identical (`===`) to `rhs`.\n   */\n  notIdentical(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is less than (`<`) `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not less than (`!<`) `rhs`.\n   */\n  lessThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is less than or equal (`<=`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not less than or equal (`!<=`) to `rhs`.\n   */\n  lessThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is greater than (`>`) `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not greater than (`!>`) `rhs`.\n   */\n  greaterThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is greater than or equal (`>=`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not greater than or equal (`!>=`) to `rhs`.\n   */\n  greaterThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not less than (`!<`) `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is less than (`<`) `rhs`.\n   */\n  notLessThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not less than or equal (`!<=`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is less than or equal (`<=`) to `rhs`.\n   */\n  notLessThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not greater than (`!>`) `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is greater than (`>`) `rhs`.\n   */\n  notGreaterThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not greater than or equal (`!>=`) to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is greater than or equal (`>=`) to `rhs`.\n   */\n  notGreaterThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `object` has the prototype of `constructor` in its prototype chain.\n   *\n   * @throws [[AssertException]] with `message` if `object` does not have the prototype of `constructor` in its prototype chain.\n   */\n  instanceOf(object: unknown, constructor: Function, message?: string): void;\n\n  /**\n   * Asserts that `object` does not have the prototype of `constructor` in its prototype chain.\n   *\n   * @throws [[AssertException]] with `message` if `object` does have the prototype of `constructor` in its prototype chain.\n   */\n  notInstanceOf(object: unknown, constructor: Function, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is [[Values.equal structurally equal]] to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not structurally equal to `rhs`.\n   */\n  equal(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not [[Values.equal structurally equal]] to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is structurally equal to `rhs`.\n   */\n  notEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is [[Values.equivalent structurally equivalent]] to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is not structurally equivalent to `rhs`.\n   */\n  equivalent(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` is not [[Values.equivalent structurally equivalent]] to `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` is structurally equivalent to `rhs`.\n   */\n  notEquivalent(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` [[Values.compare structurally orders before]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does not structurally order before `rhs`.\n   */\n  compareLessThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` does not [[Values.compare structurally order before]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does structurally order before `rhs`.\n   */\n  compareNotLessThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` [[Values.compare structurally orders before or the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does not structurally order before or the same as `rhs`.\n   */\n  compareLessThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` does not [[Values.compare structurally order before or the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does structurally order before or the same as `rhs`.\n   */\n  compareNotLessThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` [[Values.compare structurally orders the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does not structurally order before or the same as `rhs`.\n   */\n  compareEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` does not [[Values.compare structurally order the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does structurally order before or the same as `rhs`.\n   */\n  compareNotEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` [[Values.compare structurally orders after or the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does not structurally order after or the same as `rhs`.\n   */\n  compareGreaterThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` does not [[Values.compare structurally order after or the same as]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does structurally order after or the same as `rhs`.\n   */\n  compareNotGreaterThanOrEqual(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` [[Values.compare structurally orders after]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does not structurally order after `rhs`.\n   */\n  compareGreaterThan(lhs: unknown, rhs: unknown, message?: string): void;\n\n  /**\n   * Asserts that `lhs` does not [[Values.compare structurally order after]] `rhs`.\n   *\n   * @throws [[AssertException]] with `message` if `lhs` does structurally order after `rhs`.\n   */\n  compareNotGreaterThan(lhs: unknown, rhs: unknown, message?: string): void;\n}\n\n/** @public */\nexport const Assert = (function () {\n  const Assert = function (condition: unknown, message?: string): void {\n    if (!condition) {\n      throw new AssertException(message);\n    }\n  } as AssertFunction;\n\n  Assert.ok = function (condition: unknown, message?: string): void {\n    if (!condition) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notOk = function (condition: unknown, message?: string): void {\n    if (condition) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.equal = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!Values.equal(lhs, rhs)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.equal(lhs, rhs)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.identical = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (lhs !== rhs) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notIdentical = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (lhs === rhs) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.lessThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!((lhs as any) < (rhs as any))) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.lessThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!((lhs as any) <= (rhs as any))) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.greaterThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!((lhs as any) > (rhs as any))) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.greaterThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!((lhs as any) >= (rhs as any))) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notLessThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if ((lhs as any) < (rhs as any)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notLessThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if ((lhs as any) <= (rhs as any)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notGreaterThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if ((lhs as any) > (rhs as any)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notGreaterThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if ((lhs as any) >= (rhs as any)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.instanceOf = function (object: unknown, constructor: Function, message?: string): void {\n    if (!(object instanceof constructor)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.notInstanceOf = function (object: unknown, constructor: Function, message?: string): void {\n    if (object instanceof constructor) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareLessThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!(Values.compare(lhs, rhs) < 0)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareNotLessThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.compare(lhs, rhs) < 0) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareLessThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!(Values.compare(lhs, rhs) <= 0)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareNotLessThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.compare(lhs, rhs) <= 0) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!(Values.compare(lhs, rhs) === 0)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareNotEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.compare(lhs, rhs) === 0) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareGreaterThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!(Values.compare(lhs, rhs) >= 0)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareNotGreaterThanOrEqual = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.compare(lhs, rhs) >= 0) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareGreaterThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (!(Values.compare(lhs, rhs) > 0)) {\n      throw new AssertException(message);\n    }\n  };\n\n  Assert.compareNotGreaterThan = function (lhs: unknown, rhs: unknown, message?: string): void {\n    if (Values.compare(lhs, rhs) > 0) {\n      throw new AssertException(message);\n    }\n  };\n\n  return Assert;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"./Murmur3\";\nimport type {HashCode} from \"./HashCode\";\nimport type {Compare} from \"./Compare\";\nimport {Numbers} from \"./Numbers\";\nimport {Strings} from \"./Strings\";\nimport {Constructors} from \"./Constructors\";\n\n/**\n * Level of importance. Used for log levels and diagnostic classifications.\n * @public\n */\nexport class Severity implements HashCode, Compare {\n  /** @internal */\n  constructor(level: number, label: string) {\n    this.level = level;\n    this.label = label;\n  }\n\n  /**\n   * The integer level of importance of this `Severity`, with higher  levels\n   * signifying greater importance. An integer between `0` and `7`, inclusive.\n   * One of `TraceLevel`, `DebugLevel`, `InfoLevel`, `NoteLevel`,\n   * `WarningLevel`, `ErrorLevel`, `AlertLevel`, `FatalLevel`.\n   */\n  readonly level: number;\n\n  /**\n   * A descriptive label for this `Severity`.\n   */\n  readonly label: string;\n\n  /**\n   * Returns `true` if this `Severity` has `TraceLevel` of importance.\n   */\n  isTrace(): boolean {\n    return this.level === Severity.TraceLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `DebugLevel` of importance.\n   */\n  isDebug(): boolean {\n    return this.level === Severity.DebugLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `InfoLevel` of importance.\n   */\n  isInfo(): boolean {\n    return this.level === Severity.InfoLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `NoteLevel` of importance.\n   */\n  isNote(): boolean {\n    return this.level === Severity.NoteLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `WarningLevel` of importance.\n   */\n  isWarning(): boolean {\n    return this.level === Severity.WarningLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `ErrorLevel` of importance.\n   */\n  isError(): boolean {\n    return this.level === Severity.ErrorLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `AlertLevel` of importance.\n   */\n  isAlert(): boolean {\n    return this.level === Severity.AlertLevel;\n  }\n\n  /**\n   * Returns `true` if this `Severity` has `FatalLevel` of importance.\n   */\n  isFatal(): boolean {\n    return this.level === Severity.FatalLevel;\n  }\n\n  compareTo(that: unknown): number {\n    if (this === that) {\n      return 0;\n    } else if (that instanceof Severity) {\n      if (this.level < that.level) {\n        return -1;\n      } else if (this.level > that.level) {\n        return 1;\n      }\n      return this.label.localeCompare(that.label);\n    }\n    return NaN;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Severity) {\n      return this.level === that.level && this.label === that.label;\n    }\n    return false;\n  }\n\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(Severity),\n        Numbers.hash(this.level)), Strings.hash(this.label)));\n  }\n\n  toString(): string {\n    return this.label;\n  }\n\n  static readonly TraceLevel: number = 0;\n  static readonly DebugLevel: number = 1;\n  static readonly InfoLevel: number = 2;\n  static readonly NoteLevel: number = 3;\n  static readonly WarningLevel: number = 4;\n  static readonly ErrorLevel: number = 5;\n  static readonly AlertLevel: number = 6;\n  static readonly FatalLevel: number = 7;\n\n  static readonly TraceLabel: string = \"trace\";\n  static readonly DebugLabel: string = \"debug\";\n  static readonly InfoLabel: string = \"info\";\n  static readonly NoteLabel: string = \"note\";\n  static readonly WarningLabel: string = \"warning\";\n  static readonly ErrorLabel: string = \"error\";\n  static readonly AlertLabel: string = \"alert\";\n  static readonly FatalLabel: string = \"fatal\";\n\n  /** @internal */\n  static Trace: Severity | null = null;\n  /** @internal */\n  static Debug: Severity | null = null;\n  /** @internal */\n  static Info: Severity | null = null;\n  /** @internal */\n  static Note: Severity | null = null;\n  /** @internal */\n  static Warning: Severity | null = null;\n  /** @internal */\n  static Error: Severity | null = null;\n  /** @internal */\n  static Alert: Severity | null = null;\n  /** @internal */\n  static Fatal: Severity | null = null;\n\n  /**\n   * Returns a `Severity` with the given importance `level`, and optional\n   * descriptive `label`.\n   *\n   * @throws `Error` if `level` is not a valid level of importance.\n   */\n  static create(level: number, label?: string): Severity {\n    switch (level) {\n      case this.TraceLevel:\n        return this.trace(label);\n      case this.DebugLevel:\n        return this.debug(label);\n      case this.InfoLevel:\n        return this.info(label);\n      case this.NoteLevel:\n        return this.note(label);\n      case this.WarningLevel:\n        return this.warning(label);\n      case this.ErrorLevel:\n        return this.error(label);\n      case this.AlertLevel:\n        return this.alert(label);\n      case this.FatalLevel:\n        return this.fatal(label);\n      default:\n        throw new Error(\"\" + level);\n    }\n  }\n\n  /**\n   * Returns a `Severity` with `TraceLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static trace(label?: string): Severity {\n    if (label === void 0 || label === this.TraceLabel) {\n      if (this.Trace === null) {\n        this.Trace = new Severity(this.TraceLevel, this.TraceLabel);\n      }\n      return this.Trace;\n    }\n    return new Severity(this.TraceLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `DebugLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static debug(label?: string): Severity {\n    if (label === void 0 || label === this.DebugLabel) {\n      if (this.Debug === null) {\n        this.Debug = new Severity(this.DebugLevel, this.DebugLabel);\n      }\n      return this.Debug;\n    }\n    return new Severity(this.DebugLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `InfoLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static info(label?: string): Severity {\n    if (label === void 0 || label === this.InfoLabel) {\n      if (this.Info === null) {\n        this.Info = new Severity(this.InfoLevel, this.InfoLabel);\n      }\n      return this.Info;\n    }\n    return new Severity(this.InfoLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `NoteLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static note(label?: string): Severity {\n    if (label === void 0 || label === this.NoteLabel) {\n      if (this.Note === null) {\n        this.Note = new Severity(this.NoteLevel, this.NoteLabel);\n      }\n      return this.Note;\n    }\n    return new Severity(this.NoteLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `WarningLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static warning(label?: string): Severity {\n    if (label === void 0 || label === this.WarningLabel) {\n      if (this.Warning === null) {\n        this.Warning = new Severity(this.WarningLevel, this.WarningLabel);\n      }\n      return this.Warning;\n    }\n    return new Severity(this.WarningLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `ErrorLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static error(label?: string): Severity {\n    if (label === void 0 || label === this.ErrorLabel) {\n      if (this.Error === null) {\n        this.Error = new Severity(this.ErrorLevel, this.ErrorLabel);\n      }\n      return this.Error;\n    }\n    return new Severity(this.ErrorLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `AlertLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static alert(label?: string): Severity {\n    if (label === void 0 || label === this.AlertLabel) {\n      if (this.Alert === null) {\n        this.Alert = new Severity(this.AlertLevel, this.AlertLabel);\n      }\n      return this.Alert;\n    }\n    return new Severity(this.AlertLevel, label);\n  }\n\n  /**\n   * Returns a `Severity` with `FatalLevel` of importance, and an optional\n   * descriptive `label`.\n   */\n  static fatal(label?: string): Severity {\n    if (label === void 0 || label === this.FatalLabel) {\n      if (this.Fatal === null) {\n        this.Fatal = new Severity(this.FatalLevel, this.FatalLabel);\n      }\n      return this.Fatal;\n    }\n    return new Severity(this.FatalLevel, label);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {HashCode} from \"@swim/util\";\nimport type {Mark} from \"./Mark\";\nimport type {Output} from \"../output/Output\";\nimport type {Display} from \"../format/Display\";\nimport type {Debug} from \"../format/Debug\";\n\n/**\n * Description of a source location. Tags are used to annotate input sources,\n * particularly for [[Diagnostic diagnostic]] purposes. A [[Mark]] tag\n * annotates a source position. A [[Span]] tag annotate a source range.\n *\n * @see [[Diagnostic]]\n * @public\n */\nexport abstract class Tag implements HashCode, Display, Debug {\n  /**\n   * The first source position covered by this `Tag`.\n   */\n  abstract readonly start: Mark;\n\n  /**\n   * The last source position covered by this `Tag`.\n   */\n  abstract readonly end: Mark;\n\n  /**\n   * Returns a `Tag` that includes all source locations covered by\n   * both this tag, and `that` tag.\n   */\n  abstract union(that: Tag): Tag;\n\n  /**\n   * Returns the position of this `Tag` relative to the given `mark`.\n   */\n  abstract shift(mark: Mark): Tag;\n\n  abstract display<T>(output: Output<T>): Output<T>;\n\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  abstract equals(that: unknown): boolean;\n\n  abstract hashCode(): number;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Tag} from \"./Tag\";\nimport {Span} from \"../\"; // forward import\nimport type {Output} from \"../output/Output\";\nimport {Format} from \"../\"; // forward import\n\n/**\n * Description of a source position, identified by byte offset, line, and\n * column number, with an optional note.\n * @public\n */\nexport class Mark extends Tag {\n  /** @internal */\n  constructor(offset: number, line: number, column: number, note: string | undefined) {\n    super();\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n    this.note = note;\n  }\n\n  /**\n   * The zero-based byte offset of this position.\n   */\n  readonly offset: number;\n\n  /**\n   * The one-based line number of this position.\n   */\n  readonly line: number;\n\n  /**\n   * The one-based column number of this position.\n   */\n  readonly column: number;\n\n  /**\n   * The note attached to the marked position, or `null` if this position has\n   * no attached note.\n   */\n  readonly note: string | undefined;\n\n  withNote(note: string | undefined): Mark {\n    if (this.note !== note) {\n      return Mark.at(this.offset, this.line, this.column, note);\n    } else {\n      return this;\n    }\n  }\n\n  /**\n   * Returns this position, if its byte offset is less than or equal to\n   * `that` position; otherwise returns `that` position.\n   */\n  min(that: Mark): Mark {\n    return this.offset <= that.offset ? this : that;\n  }\n\n  /**\n   * Returns this position, if its byte offset is greater than or equal to\n   * `that` position; otherwise returns `that` position.\n   */\n  max(that: Mark): Mark {\n    return this.offset >= that.offset ? this : that;\n  }\n\n  override get start(): Mark {\n    return this;\n  }\n\n  override get end(): Mark {\n    return this;\n  }\n\n  override union(that: Tag): Tag {\n    if (that instanceof Mark) {\n      if (this.offset === that.offset && this.line === that.line\n          && this.column === that.column) {\n        return this;\n      } else {\n        return Span.from(this, that);\n      }\n    } else if (that instanceof Span) {\n      const start = this.min(that.start);\n      const end = this.max(that.end);\n      if (start === that.start && end === that.end) {\n        return that;\n      } else {\n        return Span.from(start, end);\n      }\n    }\n    throw new Error(that.toString());\n  }\n\n  override shift(mark: Mark): Mark {\n    const offset = this.offset + (this.offset - mark.offset);\n    const line = this.line + (this.line - mark.line);\n    let column = this.column;\n    if (line === 1) {\n      column += (this.column - mark.column);\n    }\n    if (offset === this.offset && line === this.line && column === this.column) {\n      return this;\n    } else {\n      return Mark.at(offset, line, column, this.note);\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Mark) {\n      return this.offset === that.offset && this.line === that.line\n          && this.column === that.column && this.note === that.note;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(Constructors.hash(Mark),\n        Numbers.hash(this.offset)), Numbers.hash(this.line)), Numbers.hash(this.column)),\n        Strings.hash(this.note)));\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = Format.displayNumber(output, this.line);\n    output = output.write(58/*':'*/);\n    output = Format.displayNumber(output, this.column);\n    if (this.note !== void 0) {\n      output = output.write(58/*':'*/).write(32/*' '*/).write(this.note);\n    }\n    return output;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Mark\").write(\".\").write(\"at\").write(\"(\");\n    output = Format.debugNumber(output, this.offset);\n    output = output.write(\", \");\n    output = Format.debugNumber(output, this.line);\n    output = output.write(\", \");\n    output = Format.debugNumber(output, this.column);\n    if (this.note !== void 0) {\n      output = output.write(\", \");\n      output = Format.debugString(output, this.note);\n    }\n    output = output.write(\")\");\n    return output;\n  }\n\n  override toString(): string {\n    return Format.display(this);\n  }\n\n  /**\n   * Returns a `Mark` at byte offset `0`, line `1`, and column `1`, with no\n   * attached note.\n   */\n  @Lazy\n  static get zero(): Mark {\n    return new Mark(0, 1, 1, void 0);\n  }\n\n  /**\n   * Returns a new `Mark` at the given zero-based byte `offset`, one-based\n   * `line` number, and one-based `column` number, with an optionally attached\n   * `note`.\n   */\n  static at(offset: number, line: number, column: number, note?: string | undefined): Mark {\n    return new Mark(offset, line, column, note);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Tag} from \"./Tag\";\nimport {Mark} from \"./Mark\";\nimport type {Output} from \"../output/Output\";\nimport {Format} from \"../\"; // forward import\n\n/**\n * Description of a source range, identified by a closed interval between start\n * and end [[Mark marks]].\n * @public\n */\nexport class Span extends Tag {\n  /** @internal */\n  constructor(start: Mark, end: Mark) {\n    super();\n    this.start = start;\n    this.end = end;\n  }\n\n  override readonly start: Mark;\n\n  override readonly end: Mark;\n\n  override union(that: Tag): Tag {\n    if (that instanceof Mark) {\n      const start = this.start.min(that);\n      const end = this.end.max(that);\n      if (start === this.start && end === this.end) {\n        return this;\n      } else {\n        return Span.from(start, end);\n      }\n    } else if (that instanceof Span) {\n      const start = this.start.min(that.start);\n      const end = this.end.max(that.end);\n      if (start === this.start && end === this.end) {\n        return this;\n      } else {\n        return Span.from(start, end);\n      }\n    }\n    throw new Error(that.toString());\n  }\n\n  override shift(mark: Mark): Span {\n    const start = this.start.shift(mark);\n    const end = this.end.shift(mark);\n    if (start === this.start && end === this.end) {\n      return this;\n    } else {\n      return Span.from(start, end);\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Span) {\n      return this.start.equals(that.start) && this.end.equals(that.end);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(Span),\n        this.start.hashCode()), this.end.hashCode()));\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    if (this.start.note !== void 0) {\n      output = output.write(this.start.note).write(58/*':'*/).write(32/*' '*/);\n    }\n    output = Format.displayNumber(output, this.start.line);\n    output = output.write(58/*':'*/);\n    output = Format.displayNumber(output, this.start.column);\n    output = output.write(45/*'-'*/);\n    output = Format.displayNumber(output, this.end.line);\n    output = output.write(58/*':'*/);\n    output = Format.displayNumber(output, this.end.column);\n    if (this.end.note !== void 0) {\n      output = output.write(58/*':'*/).write(32/*' '*/).write(this.end.note);\n    }\n    return output;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Span\").write(\".\").write(\"from\").write(\"(\");\n    output = this.start.debug(output);\n    output = output.write(\", \");\n    output = this.end.debug(output);\n    output = output.write(\")\");\n    return output;\n  }\n\n  override toString(): string {\n    return Format.display(this);\n  }\n\n  /**\n   * Returns a new `Span` representing the closed interval between the given\n   * `start` and `end` marks.\n   */\n  static from(start: Mark, end: Mark): Span {\n    if (start.offset > end.offset) {\n      const tmp = start;\n      start = end;\n      end = tmp;\n    }\n    return new Span(start, end);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\n\n/**\n * Stylized text output utility functions.\n * @public\n */\nexport const OutputStyle = (function () {\n  const OutputStyle = {} as {\n    /**\n     * Writes the ASCII reset escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    reset<T>(output: Output<T>): Output<T>\n\n    /**\n     * Writes the ASCII bold (increased intensity) escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    bold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII faint (decreased intensity) escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    faint<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII black foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    black<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII red foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    red<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII green foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    green<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII yellow foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    yellow<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII blue foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    blue<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII magenta foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    magenta<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII cyan foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    cyan<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII gray foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    gray<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold black foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    blackBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold red foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    redBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold green foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    greenBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold yellow foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    yellowBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold blue foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    blueBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold magenta foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    magentaBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold cyan foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    cyanBold<T>(output: Output<T>): Output<T>;\n\n    /**\n     * Writes the ASCII bold gray foreground color escape code to `output`,\n     * if [[OutputSettings.isStyled `output.settings.isStyled()`]] is `true`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    grayBold<T>(output: Output<T>): Output<T>;\n  };\n\n  OutputStyle.reset = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.bold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.faint = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(50/*'2'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.black = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(48/*'0'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.red = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(49/*'1'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.green = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(50/*'2'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.yellow = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(51/*'3'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.blue = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(52/*'4'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.magenta = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(53/*'5'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.cyan = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(54/*'6'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.gray = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(48/*'0'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(55/*'7'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.blackBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(48/*'0'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.redBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(49/*'1'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.greenBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(50/*'2'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.yellowBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(51/*'3'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.blueBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(52/*'4'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.magentaBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(53/*'5'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.cyanBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(54/*'6'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  OutputStyle.grayBold = function <T>(output: Output<T>): Output<T> {\n    if (output.settings.isStyled()) {\n      output = output.write(27).write(91/*'['*/).write(49/*'1'*/).write(59/*';'*/)\n                     .write(51/*'3'*/).write(55/*'7'*/).write(109/*'m'*/);\n    }\n    return output;\n  };\n\n  return OutputStyle;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Booleans} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport type {Debug} from \"../format/Debug\";\nimport {Format} from \"../format/Format\";\n\n/**\n * Either an [[OutputSettings]] instance, or an [[OutputSettingsInit]] object\n * initializer.\n * @public\n */\nexport type OutputSettingsLike = OutputSettings | OutputSettingsInit;\n\n/**\n * [[OutputSettings]] object initializer.\n * @public\n */\nexport interface OutputSettingsInit {\n  lineSeparator?: string;\n  isPretty?: boolean;\n  isStyled?: boolean;\n  precision?: number;\n}\n\n/**\n * [[Output]] production parameters. `OutputSettings` provide contextual\n * configuration parameters to output producers, such as [[Writer Writers]].\n * Uses include enabling pretty printing and styling generated output.\n * Subclasses can provide additional parameters understood by specialized\n * output producers.\n * @public\n */\nexport class OutputSettings implements Debug, HashCode {\n  protected constructor(lineSeparator: string, pretty: boolean,\n                        styled: boolean, precision: number) {\n    Object.defineProperty(this, \"lineSeparator\", {\n      value: lineSeparator,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"pretty\", {\n      value: pretty,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"styled\", {\n      value: styled,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"precision\", {\n      value: precision,\n      enumerable: true,\n    });\n  }\n\n  /**\n   * The Unicode code point sequence used to separate lines of text.\n   * Defaults to the runtime operating system's line separator.\n   */\n  readonly lineSeparator!: string;\n\n  /**\n   * Returns a copy of these settings with the given `lineSeparator`.\n   */\n  withLineSeparator(lineSeparator: string | undefined): string | OutputSettings {\n    return this.copy(lineSeparator, this.pretty, this.styled, this.precision);\n  }\n\n  /** @internal */\n  readonly pretty!: boolean;\n\n  /**\n   * Returns `true` if output producers should pretty print their output,\n   * when possible.\n   */\n  isPretty(): boolean {\n    return this.pretty;\n  }\n\n  /**\n   * Returns a copy of these settings with the given `pretty` flag.\n   */\n  asPretty(pretty: boolean): OutputSettings {\n    return this.copy(this.lineSeparator, pretty, this.styled, this.precision);\n  }\n\n  /** @internal */\n  readonly styled!: boolean;\n\n  /**\n   * Returns `true` if output producers should style their output,\n   * when possible.\n   */\n  isStyled(): boolean {\n    return this.styled;\n  }\n\n  /**\n   * Returns a copy of these settings with the given `styled` flag.\n   */\n  asStyled(styled: boolean): OutputSettings {\n    return this.copy(this.lineSeparator, this.pretty, styled, this.precision);\n  }\n\n  /**\n   * Returns the numeric precision output producers should use\n   * when formatting numbers.\n   */\n  readonly precision!: number;\n\n  /**\n   * Returns a copy of these settings with the given numeric `precision`.\n   */\n  withPrecision(precision: number): OutputSettings {\n    return this.copy(this.lineSeparator, this.pretty, this.styled, precision);\n  }\n\n  protected copy(lineSeparator: string | undefined, pretty: boolean,\n                 styled: boolean, precision: number): OutputSettings {\n    return OutputSettings.create(lineSeparator, pretty, styled, precision);\n  }\n\n  protected canEqual(that: unknown): boolean {\n    return that instanceof OutputSettings;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof OutputSettings) {\n      return that.canEqual(this) && this.lineSeparator === that.lineSeparator\n          && this.pretty === that.pretty && this.styled === that.styled\n          && this.precision === that.precision;\n    }\n    return false;\n  }\n\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Constructors.hash(OutputSettings), Strings.hash(this.lineSeparator)),\n        Booleans.hash(this.pretty)), Booleans.hash(this.styled)),\n        Numbers.hash(this.precision)));\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"OutputSettings\").write(46/*'.'*/);\n    if (!this.pretty && !this.styled) {\n      output = output.write(\"standard\");\n    } else if (this.pretty && !this.styled) {\n      output = output.write(\"pretty\");\n    } else if (!this.pretty && this.styled) {\n      output = output.write(\"styled\");\n    } else {\n      output = output.write(\"prettyStyled\");\n    }\n    output = output.write(40/*'('*/).write(41/*')'*/);\n    if (this.lineSeparator !== Format.lineSeparator) {\n      output = output.write(46/*'.'*/).write(\"lineSeparator\").write(40/*'('*/)\n                     .display(this.lineSeparator).write(41/*')'*/);\n    }\n    if (this.precision !== -1) {\n      output = output.write(46/*'.'*/).write(\"precision\").write(40/*'('*/)\n                     .display(this.precision).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  /**\n   * Returns `OutputSettings` configured with the system line separator,\n   * pretty printing disabled, and styling disabled.\n   */\n  @Lazy\n  static standard(): OutputSettings {\n    return new OutputSettings(Format.lineSeparator, false, false, -1);\n  }\n\n  /**\n   * Returns `OutputSettings` configured with the system line separator,\n   * pretty printing enabled, and styling disabled.\n   */\n  @Lazy\n  static pretty(): OutputSettings {\n    return new OutputSettings(Format.lineSeparator, true, false, -1);\n  }\n\n  /**\n   * Returns `OutputSettings` configured with the system line separator,\n   * pretty printing disabled, and styling enabled.\n   */\n  @Lazy\n  static styled(): OutputSettings {\n    return new OutputSettings(Format.lineSeparator, false, true, -1);\n  }\n\n  /**\n   * Returns `OutputSettings` configured with the system line separator,\n   * pretty printing enabled, and styling enabled.\n   */\n  @Lazy\n  static prettyStyled(): OutputSettings {\n    return new OutputSettings(Format.lineSeparator, true, true, -1);\n  }\n\n  /**\n   * Returns `OutputSettings` configured with the given `lineSeparator`, pretty\n   * printing enabled if `isPretty` is `true`, styling enabled if `isStyled`\n   * is `true`, and with the given numeric `precision`.\n   */\n  static create(lineSeparator?: string, pretty?: boolean,\n                styled?: boolean, precision?: number): OutputSettings {\n    if (typeof lineSeparator !== \"string\") {\n      lineSeparator = Format.lineSeparator;\n    }\n    if (typeof pretty !== \"boolean\") {\n      pretty = false;\n    }\n    if (typeof styled !== \"boolean\") {\n      styled = false;\n    }\n    if (typeof precision !== \"number\") {\n      precision = -1;\n    }\n    if (lineSeparator === Format.lineSeparator && precision === -1) {\n      if (!pretty && !styled) {\n        return OutputSettings.standard();\n      } else if (pretty && !styled) {\n        return OutputSettings.pretty();\n      } else if (!pretty && styled) {\n        return OutputSettings.styled();\n      } else {\n        return OutputSettings.prettyStyled();\n      }\n    }\n    return new OutputSettings(lineSeparator, pretty, styled, precision);\n  }\n\n  /**\n   * Converts a settings `init` object to an instance of `OutputSettings`.\n   */\n  static fromInit(init: OutputSettingsInit): OutputSettings {\n    return OutputSettings.create(init.lineSeparator, init.isPretty,\n                                 init.isStyled, init.precision);\n  }\n\n  /**\n   * Converts a loosely typed settings `value` to an instance of `OutputSettings`.\n   */\n  static fromLike(value: OutputSettingsLike | undefined): OutputSettings {\n    if (value instanceof OutputSettings) {\n      return value;\n    } else if (typeof value === \"object\" && value !== null) {\n      return OutputSettings.fromInit(value);\n    }\n    return OutputSettings.standard();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Thrown when reading invalid [[Input]].\n * @public\n */\nexport class InputException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, InputException.prototype);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Booleans} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport type {Debug} from \"../format/Debug\";\nimport {Format} from \"../format/Format\";\n\n/**\n * Either an [[InputSettings]] instance, or an [[InputSettingsInit]] object\n * initializer.\n * @public\n */\nexport type InputSettingsLike = InputSettings | InputSettingsInit;\n\n/**\n * [[InputSettings]] object initializer.\n * @public\n */\nexport interface InputSettingsInit {\n  isStripped?: boolean;\n}\n\n/**\n * [[Input]] consumption parameters. `InputSettings` provide contextual\n * configuration parameters to input consumers, such as [[Parser Parsers]].\n * @public\n */\nexport class InputSettings implements HashCode, Debug {\n  protected constructor(stripped: boolean) {\n    Object.defineProperty(this, \"stripped\", {\n      value: stripped,\n      enumerable: true,\n    });\n  }\n\n  /** @internal */\n  readonly stripped!: boolean;\n\n  /**\n   * Returns `true` if input consumers should not include diagnostic metadata\n   * in generated output.\n   */\n  isStripped(): boolean {\n    return this.stripped;\n  }\n\n  /**\n   * Returns a copy of these settings with the given `stripped` flag.\n   */\n  asStripped(stripped: boolean): InputSettings {\n    return this.copy(stripped);\n  }\n\n  protected copy(stripped: boolean): InputSettings {\n    return InputSettings.create(stripped);\n  }\n\n  protected canEqual(that: unknown): boolean {\n    return that instanceof InputSettings;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InputSettings) {\n      return that.canEqual(this) && this.stripped === that.stripped;\n    }\n    return false;\n  }\n\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(InputSettings),\n        Booleans.hash(this.stripped)));\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"InputSettings\").write(46/*'.'*/);\n    if (!this.stripped) {\n      output = output.write(\"standard\");\n    } else {\n      output = output.write(\"stripped\");\n    }\n    output = output.write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  /**\n   * Returns `InputSettings` configured to include diagnostic metadata in\n   * generated output.\n   */\n  @Lazy\n  static standard(): InputSettings {\n    return new InputSettings(false);\n  }\n\n  /**\n   * Returns `InputSettings` configured to omit diagnostic metadata in\n   * generated output.\n   */\n  @Lazy\n  static stripped(): InputSettings {\n    return new InputSettings(true);\n  }\n\n  /**\n   * Returns `InputSettings` configured to not include diagnostic metadata in\n   * generated output, if `isStripped` is `true`.\n   */\n  static create(isStripped?: boolean): InputSettings {\n    if (isStripped) {\n      return InputSettings.stripped();\n    }\n    return InputSettings.standard();\n  }\n\n  /**\n   * Converts the loosely typed `settings` to an instance of `InputSettings`.\n   */\n  static fromLike(settings: InputSettingsLike | undefined): InputSettings {\n    if (settings instanceof InputSettings) {\n      return settings;\n    } else if (typeof settings === \"object\" && settings !== null) {\n       return InputSettings.create(settings.isStripped);\n    } else {\n      return InputSettings.standard();\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {InputEmpty} from \"../\"; // forward import\nimport {InputDone} from \"../\"; // forward import\nimport {InputError} from \"../\"; // forward import\n\n/**\n * Non-blocking token stream reader, with single token lookahead.\n * `Input` enables incremental, interruptible parsing of network protocols and\n * data formats.\n *\n * ### Input tokens\n * Input tokens are modeled as primitive numbers, commonly representing Unicode\n * code points, or raw octets; each `Input` implementation specifies the\n * semantic type of its tokens. The [[head]]  method peeks at the lookahead\n * token, without consuming it, and the [[step]] method advances the input to\n * the next token.\n *\n * ### Input states\n * An `Input` reader is always in one of three states: _cont_​inue, _empty_, or\n * _done_. The _cont_ state indicates that a lookahead token is immediately\n * available; the _empty_ state indicates that no additional tokens are\n * available at this time, but that the stream may logically resume at some\n * point in the future; and the _done_ state indicates that the stream has\n * terminated. [[isCont]] returns `true` when in the _cont_ state; [[isEmpty]]\n * returns `true` when in the _empty_ state; and [[isDone]] returns `true` when\n * in the _done_ state.\n *\n * ### Non-blocking behavior\n * `Input` readers never block. An `Input` reader that would otherwise block\n * awaiting additional input instead enters the _empty_ state, signaling the\n * input consumer to back off processing the input, but to remain prepared to\n * process additional input in the future. An `Input` reader enters the _done_\n * state when it encounters the final end of its input, signaling the input\n * consumer to stop processing. [[Input.empty]] returns an `Input` reader in\n * the _empty_ state. [[Input.done]] returns an `Input` reader in the _done_\n * state.\n *\n * ### Position tracking\n * The logical position of the lookahead token is made available via the\n * [[mark]] method, with optimized callouts for the byte [[offset]], one-based\n * [[line]] number, and one-based [[column]] in the current line. The [[id]]\n * method returns a diagnostic identifier for the token stream.\n *\n * ### Cloning\n * An `Input` reader may be [[clone cloned]] to provide an indepently mutable\n * position into a shared token stream. Not all `Input` implementations\n * support cloning.\n *\n * @see [[InputSettings]]\n * @see [[Parser]]\n * @public\n */\nexport abstract class Input {\n  /**\n   * Returns `true` when a [[head lookahead]] token is immediately available.\n   * i.e. this `Input` is in the _cont_ state.\n   */\n  abstract isCont(): boolean;\n\n  /**\n   * Returns `true` when no lookahead token is currently available, but\n   * additional input may be available at some point in the future, i.e. this\n   * `Input` is in the _empty_ state.\n   */\n  abstract isEmpty(): boolean;\n\n  /**\n   * Returns `true` when no lookahead token is currently available, and no\n   * additional input will ever become available, i.e. this `Input` is in\n   * the _done_ state.\n   */\n  abstract isDone(): boolean;\n\n  /**\n   * Returns `true` when no lookahead token is currently available due to an\n   * error with the token stream. i.e. this `Input` is in the `error` state.\n   * When `true`, `trap()` will return the input error\n   */\n  abstract isError(): boolean;\n\n  /**\n   * Returns `true` if this is a partial `Input` will that enter the _empty_\n   * state after it consumes the last available input token.\n   */\n  abstract isPart(): boolean;\n\n   /**\n    * Returns a partial `Input` equivalent to this `Input`, if `part` is `true`;\n    * returns a final `Input` equivalent to this `Input` if `part` is `false`.\n    * The caller's reference to this `Input` should be replaced by the returned\n    * `Input`\n    */\n  abstract asPart(part: boolean): Input;\n\n  /**\n   * Returns the current lookahead token, if this `Input` is in the\n   * _cont_ state.\n   *\n   * @throws [[InputException]] if this `Input` is not in the _cont_ state.\n   */\n  abstract head(): number;\n\n  /**\n   * Advances to the next token, if this `Input` is in the _cont_ state.\n   *\n   * @throws `Error` if this `Input` is not in the _cont_ state.\n   */\n  abstract step(): Input;\n\n  /**\n   * Sets the position of this `Input` to the given `mark`. Rewinds to the\n   * start of this `Input`, if `mark` is `undefined`.\n   *\n   * @throws [[InputException]] if this `Input` does not support seeking,\n   *         or is unable to reposition to the `mark`.\n   */\n  abstract seek(mark?: Mark): Input;\n\n  /**\n   * Returns the input error when in the _error_ state\n   *\n   * @throws InputException if the `Input` is not the _error_state\n   */\n  trap(): Error {\n    throw new InputException();\n  }\n\n  /**\n   * An informative identifier for this token stream, or `undefined` if this\n   * stream is unidentified.\n   */\n  abstract readonly id: string | undefined;\n\n  /**\n   * Returns an `Input` equivalent to this `Input`, but logically identified\n   * by the given–possibly `undefined`–`id`. The caller's reference to this\n   * `Input` should be replaced by the returned `Input`.\n   */\n  abstract withId(id: string | undefined): Input;\n\n  /**\n   * The position of the current lookahead token, relative to the start\n   * of the stream.\n   */\n  abstract readonly mark: Mark;\n\n  /**\n   * Returns an `Input` equivalent to this `Input`, but logically positioned\n   * at the given `mark`. The physical position in the input stream is not\n   * modified. The caller's reference to this `Input` should be replaced by\n   * the returned `Input`.\n   */\n  abstract withMark(mark: Mark): Input;\n\n  /**\n   * The byte offset of the current lookahead token, relative to the start\n   * of the stream.\n   */\n  abstract readonly offset: number;\n\n  /**\n   * The one-based line number of the current lookahead token, relative to\n   * the start of the stream.\n   */\n  abstract readonly line: number;\n\n  /**\n   * The one-based column number of the current lookahead token, relative to\n   * the current line in the stream.\n   */\n  abstract readonly column: number;\n\n  /**\n   * The `InputSettings` used to configure the behavior of input consumers\n   * that read from this `Input`.\n   */\n  abstract readonly settings: InputSettings;\n\n  /**\n   * Returns a clone of this `Input` with the given `settings`.\n   *\n   * @throws `Error` if this `Input` reader cannot be cloned.\n   */\n  abstract withSettings(settings: InputSettingsLike): Input;\n\n  /**\n   * Returns an independently positioned view into the token stream,\n   * initialized with identical state to this `Input`.\n   *\n   * @throws `Error` if this `Input` reader cannot be cloned.\n   */\n  abstract clone(): Input;\n\n  /**\n   * Returns an `Input` reader in the _empty_ state.\n   */\n  @Lazy\n  static empty(): Input {\n    return new InputEmpty(void 0, Mark.zero, InputSettings.standard());\n  }\n\n  /**\n   * Returns an `Input` reader in the _done_ state.\n   */\n  @Lazy\n  static done(): Input {\n    return new InputDone(void 0, Mark.zero, InputSettings.standard());\n  }\n\n  /**\n   * Returns an `Input` in the _error_ state that traps the given `error`.\n   */\n  static error(error: Error): Input {\n    return new InputError(error, void 0, Mark.zero, InputSettings.standard());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {Input} from \"./Input\";\n\n/** @internal */\nexport class InputError extends Input {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error, id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Input {\n    return this;\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(): Input {\n    const error = new InputException(\"error step\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override seek(mark?: Mark): Input {\n    const error = new InputException(\"error seek\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  override withId(id: string | undefined): Input {\n    return new InputError(this.error, id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): Input {\n    return new InputError(this.error, this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): Input {\n    settings = InputSettings.fromLike(settings);\n    return new InputError(this.error, this.id, this.mark, settings);\n  }\n\n  override clone(): Input {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Mark} from \"../source/Mark\";\nimport {InputException} from \"../input/InputException\";\nimport type {InputSettingsLike} from \"../input/InputSettings\";\nimport {InputSettings} from \"../input/InputSettings\";\nimport {Input} from \"../input/Input\";\nimport {InputError} from \"../input/InputError\";\n\n/** @internal */\nexport class StringInput extends Input {\n  constructor(string: string, id: string | undefined, offset: number,\n              line: number, column: number, settings: InputSettings,\n              index: number, part: boolean) {\n    super();\n    this.string = string;\n    this.index = index;\n    this.part = part;\n    this.id = id;\n    this.offset = offset;\n    this.line = line;\n    this.column = column;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly string: string;\n\n  /** @internal */\n  readonly index: number;\n\n  /** @internal */\n  readonly part: boolean;\n\n  override isCont(): boolean {\n    return this.index < this.string.length;\n  }\n\n  override isEmpty(): boolean {\n    return this.part && this.index >= this.string.length;\n  }\n\n  override isDone(): boolean {\n    return !this.part && this.index >= this.string.length;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return this.part;\n  }\n\n  override asPart(part: boolean): Input {\n    (this as Mutable<this>).part = part;\n    return this;\n  }\n\n  override head(): number {\n    const string = this.string;\n    const index = this.index;\n    if (index < string.length) {\n      const c = string.codePointAt(index);\n      if (c !== void 0) {\n        return c;\n      } else {\n        return string.charCodeAt(index);\n      }\n    }\n    throw new InputException();\n  }\n\n  override step(): Input {\n    const string = this.string;\n    const index = this.index;\n    if (index < string.length) {\n      const c = string.codePointAt(index);\n      (this as Mutable<this>).index = Strings.offsetByCodePoints(string, index, 1);\n      (this as Mutable<this>).offset += this.index - index;\n      if (c === 10/*'\\n'*/) {\n        (this as Mutable<this>).line += 1;\n        (this as Mutable<this>).column = 1;\n      } else {\n        (this as Mutable<this>).column += 1;\n      }\n      return this;\n    } else {\n      const error = new InputException(\"invalid step\");\n      return new InputError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override seek(mark?: Mark): Input {\n    if (mark !== void 0) {\n      const index = this.index + (mark.offset - this.offset);\n      if (0 <= index && index <= this.string.length) {\n        (this as Mutable<this>).index = index;\n        (this as Mutable<this>).offset = mark.offset;\n        (this as Mutable<this>).line = mark.line;\n        (this as Mutable<this>).column = mark.column;\n        return this;\n      } else {\n        const error = new InputException(\"invalid seek to \" + mark);\n        return new InputError(error, this.id, this.mark, this.settings);\n      }\n    } else {\n      (this as Mutable<this>).index = 0;\n      (this as Mutable<this>).offset = 0;\n      (this as Mutable<this>).line = 1;\n      (this as Mutable<this>).column = 1;\n      return this;\n    }\n  }\n\n  readonly id: string | undefined;\n\n  override withId(id: string | undefined): Input {\n    (this as Mutable<this>).id = id;\n    return this;\n  }\n\n  override get mark(): Mark {\n    return Mark.at(this.offset, this.line, this.column);\n  }\n\n  override withMark(mark: Mark): Input {\n    (this as Mutable<this>).offset = mark.offset;\n    (this as Mutable<this>).line = mark.line;\n    (this as Mutable<this>).column = mark.column;\n    return this;\n  }\n\n  override readonly offset: number;\n\n  override readonly line: number;\n\n  override readonly column: number;\n\n  override readonly settings: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): Input {\n    settings = InputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  override clone(): Input {\n    return new StringInput(this.string, this.id, this.offset, this.line,\n                           this.column, this.settings, this.index, this.part);\n  }\n\n  static create(string: string): Input {\n    return new StringInput(string, void 0, 0, 1, 1, InputSettings.standard(), 0, false);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Thrown when writing invalid [[Output]].\n * @public\n */\nexport class OutputException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, OutputException.prototype);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {OutputFull} from \"../\"; // forward import\nimport {OutputDone} from \"../\"; // forward import\nimport {OutputError} from \"../\"; // forward import\nimport {Format} from \"../\"; // forward import\n\n/**\n * Non-blocking token stream writer. `Output` enables incremental,\n * interruptible writing of network protocols and data formats.\n *\n * ### Output tokens\n * Output tokens are modeled as primitive numbers, commonly representing\n * Unicode code points, or raw octets; each `Output` implementation specifies\n * the semantic type of its tokens.\n *\n * ### Output states\n * An `Output` writer is always in one of three states: _cont_​inue, _full_,\n * or _done_. The _cont_ state indicates that the stream is ready to write a\n * single token; the _full_ state indicates that the stream is unable to write\n * additional tokens at this time, but that the stream may logically resume at\n * some point in the future; and the _done_ state indicates that the stream has\n * terminated, and that [[bind]] will return the output result. [[isCont]]\n * returns `true` when in the _cont_ state; [[isFull]] returns `true` when in\n * the _full_ state; and [[isDone]] returns `true` when in the _done_ state.\n *\n * ### Output results\n * An `Output` writer yields a value of type `T`, obtained via the [[bind]]\n * method, representing some implementation defined result of writing the\n * output. For example, an `Output<string>` implementation may–but is not\n * required to–yield a `string` containing all code points written to the\n * output.\n *\n * ### Non-blocking behavior\n * `Output` writers never block. An `Output` writer that would otherwise block\n * writing additional output instead enters the _full_ state, signaling the\n * output generator to back off producing the output, but to remain prepared to\n * produce additional output in the future. An `Output` writer enters the\n * _done_ state when it encounters the final end of its output, signaling to\n * the output generator to stop producing.\n *\n * ### Output settings\n * An output generator may alter the tokens it produces based on its `Output`\n * writer's [[settings]]. Uses include pretty printing and styling generated\n * output. [[OutputSettings]] subclasses can provide additional parameters\n * understood by specialized output producers.\n *\n * ### Cloning\n * An `Output` writer may be [[clone cloned]] to branch the token stream in an\n * implementation specified manner. Not all `Output` implementations support\n * cloning.\n *\n * @see [[OutputSettings]]\n * @see [[Writer]]\n * @public\n */\nexport abstract class Output<T = unknown> {\n  /**\n   * Returns `true` when the next [[write write(number)]] will succeed.\n   * i.e. this `Output` is in the _cont_ state.\n   */\n  abstract isCont(): boolean;\n\n  /**\n   * Returns `true` when an immediate `write` will fail, but writes may succeed\n   * at some point in the future, i.e. this `Output` is in the _full_ state.\n   */\n  abstract isFull(): boolean;\n\n  /**\n   * Returns `true` when no `write` will ever again succeed.\n   * i.e. this `Output` is in the _done_ state.\n   */\n  abstract isDone(): boolean;\n\n  /**\n   * Returns `true` when an immediate `write` will fail due to an\n   * error with the token stream. i.e. this `Output` is in the `error` state.\n   * When `true`, `trap()` will return the output error.\n   */\n  abstract isError(): boolean;\n\n  /**\n   * Returns `true` if this is a partial `Output` that will enter\n   * the `full` state when it is unable to write additional tokens.\n   */\n  abstract isPart(): boolean;\n\n  /**\n   * Returns a partial `Output` equivalent to this `Output`, if `part` is `true`;\n   * returns a final `Output` equivalent to this `Output` if `part` is `false`.\n   * The caller's reference to this `Output` should be replaced by the returned\n   * `Output`.\n   */\n  abstract asPart(part: boolean): Output<T>;\n\n  /**\n   * Writes a single `token` to the stream, if this `Output` is in the\n   * _cont_ state.\n   *\n   * @returns `this`\n   * @throws [[OutputException]] if this `Output` is not in the _cont_ state.\n   */\n  abstract write(token: number): Output<T>;\n\n  /**\n   * Writes the code points of the given `string`. Assumes this is a Unicode\n   * `Output` writer with sufficient capacity.\n   *\n   * @returns `this`\n   * @throws [[OutputException]] if this `Output` exits the _cont_ state before\n   *         the full `string` has been written.\n   */\n  abstract write(string: string): Output<T>;\n\n  /**\n   * Writes the code points of the given `string`, followed by the code points\n   * of the `settings`' [[OutputSettings.lineSeparator line separator].\n   * Assumes this is a Unicode `Output` writer with sufficient capacity.\n   *\n   * @returns `this`\n   * @throws [[OutputException]] if this `Output` exits the _cont_ state before\n   *         the full `string` and line separator has been written.\n   */\n  writeln(string?: string): Output<T> {\n    if (typeof string === \"string\") {\n      this.write(string);\n    }\n    return this.write(this.settings.lineSeparator);\n  }\n\n  /**\n   * Writes the code points of the human-readable [[Display]] string of the\n   * given `object`. Assumes this is a Unicode `Output` writer with sufficient\n   * capacity.\n   *\n   * @returns the continuation of the `output`.\n   * @throws [[OutputException]] if this `Output` exits the _cont_ state before\n   *         the full display string has been written.\n   */\n  display(object: unknown): Output<T> {\n    return Format.displayAny(this, object);\n  }\n\n  /**\n   * Writes the code points of the developer-readable [[Debug]] string of the\n   * given `object`. Assumes this is a Unicode `Output` writer with sufficient\n   * capacity.\n   *\n   * @returns the continuation of the `output`.\n   * @throws [[OutputException]] if this `Output` exits the _cont_ state before\n   *         the full debug string has been written.\n   */\n  debug(object: unknown): Output<T> {\n    return Format.debugAny(this, object);\n  }\n\n  /**\n   * Writes any internally buffered state to the underlying output stream.\n   */\n  flush(): Output<T> {\n    return this;\n  }\n\n  push(...tokens: number[]): void {\n    const n = tokens.length;\n    for (let i = 0; i < n; i += 1) {\n      this.write(tokens[i]!);\n    }\n  }\n\n  /**\n   * The `OutputSettings` used to configure the behavior of output producers\n   * that write to this `Output`.\n   */\n  abstract readonly settings: OutputSettings;\n\n  /**\n   * Updates the `settings` associated with this `Output`.\n   *\n   * @returns `this`\n   */\n  abstract withSettings(settings: OutputSettingsLike): Output<T>;\n\n  /**\n   * Returns the implementation-defined result of writing the output.\n   */\n  abstract bind(): T;\n\n  /**\n   * Returns the output error. Only guaranteed to return an error when in the\n   * _error_ state.\n   *\n   * @throws OutputException if this `Output` is not in the _error_ state.\n   */\n  trap(): Error {\n    throw new OutputException();\n  }\n\n  /**\n   * Returns an implementation-defined branch of the token stream.\n   *\n   * @throws `Error` if this `Output` writer cannot be cloned.\n   */\n  clone(): Output<T> {\n    throw new Error();\n  }\n\n  /**\n   * Return an `Output` in the _full_ state.\n   */\n  @Lazy\n  static full(): Output<never> {\n    return new OutputFull(OutputSettings.standard());\n  }\n\n  /**\n   * Returns an `Output` in the _done_ state.\n   */\n  @Lazy\n  static done(): Output<never> {\n    return new OutputDone(OutputSettings.standard());\n  }\n\n  /**\n   * Return an `Output` in the _error_ state that traps the given `error`.\n   */\n  static error(error: Error): Output<never> {\n    return new OutputError(error, OutputSettings.standard());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport {OutputSettings} from \"../output/OutputSettings\";\nimport {Output} from \"../output/Output\";\n\n/** @internal */\nexport class StringOutput extends Output<string> {\n  constructor(string: string, settings: OutputSettings) {\n    super();\n    this.string = string;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly string: string;\n\n  override isCont(): boolean {\n    return true;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<string> {\n    return this;\n  }\n\n  override write(token: number | string): Output<string> {\n    if (typeof token === \"number\") {\n      if ((token >= 0x0000 && token <= 0xd7ff)\n          || (token >= 0xe000 && token <= 0xffff)) { // U+0000..U+D7FF | U+E000..U+FFFF\n        token = String.fromCharCode(token);\n      } else if (token >= 0x10000 && token <= 0x10ffff) { // U+10000..U+10FFFF\n        const u = token - 0x10000;\n        token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));\n      } else { // invalid code point\n        token = \"\\ufffd\";\n      }\n    }\n    (this as Mutable<this>).string += token;\n    return this;\n  }\n\n  override writeln(string?: string): Output<string> {\n    if (string !== void 0) {\n      (this as Mutable<this>).string = this.string.concat(string);\n    }\n    (this as Mutable<this>).string = this.string.concat(this.settings.lineSeparator);\n    return this;\n  }\n\n  override readonly settings: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<string> {\n    settings = OutputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  override bind(): string {\n    return this.string;\n  }\n\n  override clone(): Output<string> {\n    return new StringOutput(this.string, this.settings);\n  }\n\n  override toString(): string {\n    return this.string;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/**\n * Thrown when a [[Writer]] attempts to write invalid syntax.\n * @public\n */\nexport class WriterException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, WriterException.prototype);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"./WriterException\";\nimport {WriterEnd} from \"../\"; // forward import\nimport {WriterDone} from \"../\"; // forward import\nimport {WriterError} from \"../\"; // forward import\nimport {WriterSequence} from \"../\"; // forward import\n\n/**\n * Continuation of how to write subsequent [[Output]] tokens to a stream.\n * `Writer` enables efficient, interruptible writing of network protocols and\n * data formats, without intermediate buffering.\n *\n * ### Output tokens\n * A `Writer` writes tokens to an `Output` writer. Output tokens are modeled\n * as primitive numbers, commonly representing Unicode code points, or raw\n * octets. Each `Writer` implementation specifies the semantic type of output\n * tokens it produces.\n *\n * ### Writer states\n * A `Writer` is always in one of three states: _cont_​inue, _done_, or _error_.\n * The _cont_ state indicates that [[pull]] is ready to produce `Output`; the\n * _done_ state indicates that writing terminated successfully, and that\n * [[bind]] will return the written result; the _error_ state indicates that\n * writing terminated in failure, and that [[trap]] will return the write error.\n * `Writer` subclasses default to the _cont_ state.\n *\n * ### Feeding input\n * The [[feed]] method returns a `Writer` that represents the continuation\n * of how to write the given input object to subsequent `Output` writers.\n * `feed` can be used to specify an initial object to write, or to change\n * the object to be written.\n *\n * ### Pulling output\n * The [[pull]] method incrementally writes as much `Output` as it can, before\n * returning another `Writer` that represents the continuation of how to write\n * additional `Output`. The `Output` passed to `pull` is only guaranteed to be\n * valid for the duration of the method call; references to the provided\n * `Output` instance must not be stored.\n *\n * ### Writer results\n * A `Writer` produces a written result of type `O`, obtained via the [[bind]]\n * method. `bind` is only guaranteed to return a result when in the _done_\n * state; though `bind` may optionally make available partial results in other\n * states. A failed `Writer` provides a write error via the [[trap]] method.\n * `trap` is only guaranteed to return an error when in the _error_ state.\n *\n * ### Continuations\n * A `Writer` instance represents a continuation of how to write remaining\n * `Output`. Rather than writing a complete output in one go, a `Writer` takes\n * an `Output` chunk and returns another `Writer` instance that knows how to\n * write subsequent `Output` chunks. This enables non-blocking, incremental\n * writing that can be interrupted whenever an `Output` writer runs out of\n * space. A `Writer` terminates by returning a continuation in either the\n * _done_ state, or the _error_ state. [[Writer.done]] returns a `Writer` in\n * the _done_ state. [[Writer.error]] returns a `Writer` in the _error_ state.\n *\n * ### Forking\n * The [[fork]] method passes an out-of-band condition to a `Writer`, yielding\n * a `Writer` continuation whose behavior may be altered by the given condition.\n * For example, a console `Writer` might support a `fork` condition that changes\n * the color and style of printed text. The types of conditions accepted by\n * `fork`, and their intended semantics, are implementation defined.\n *\n * @public\n */\nexport abstract class Writer<I = unknown, O = unknown> {\n  /**\n   * Returns `true` when [[pull]] is able to produce `Output`, i.e. this\n   * `Writer` is in the _cont_ state.\n   */\n  isCont(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns `true` when writing has terminated successfully, and [[bind]] will\n   * return the written result, i.e. this `Writer` is in the _done_ state.\n   */\n  isDone(): boolean {\n    return false;\n  }\n\n  /**\n   * Returns `true` when writing has terminated in failure, and [[trap]] will\n   * return the write error, i.e. this `Writer` is in the _error_ state.\n   */\n  isError(): boolean {\n    return false;\n  }\n\n  /**\n   * Returns a `Writer` that represents the continuation of how to write the\n   * given `input` object.\n   *\n   * @throws `WriterException` if this `Writer` does not know how to write the\n   *         given `input` object.\n   */\n  feed(input: I): Writer<I, O> {\n    throw new WriterException();\n  }\n\n  /**\n   * Incrementally writes as much `output` as possible, and returns another\n   * `Writer` that represents the continuation of how to write additional\n   * `Output`. If `output` enters the _done_ state, `pull` _must_ return a\n   * terminated `Writer`, i.e. a `Writer` in the _done_ state, or in the\n   * _error_ state. The given `output` is only guaranteed to be valid for the\n   * duration of the method call; references to `output` must not be stored.\n   */\n  abstract pull(output: Output): Writer<I, O>;\n\n  /**\n   * Returns a `Writer` continuation whose behavior may be altered by the given\n   * out-of-band `condition`.\n   */\n  fork(condition: unknown): Writer<I, O> {\n    return this;\n  }\n\n  /**\n   * Returns the written result. Only guaranteed to return a result when in\n   * the _done_ state.\n   *\n   * @throws `Error` if this `Writer` is not in the _done_ state.\n   */\n  bind(): O {\n    throw new WriterException();\n  }\n\n  /**\n   * Returns the write error. Only guaranteed to return an error when in the\n   * _error_ state.\n   *\n   * @throws `Error` if this `Writer` is not in the _error_ state.\n   */\n  trap(): Error {\n    throw new WriterException();\n  }\n\n  /**\n   * Casts a done `Writer` to a different input type. A `Writer` in the _done_\n   * state can have any input type.\n   *\n   * @throws `WriterException` if this `Writer` is not in the _done_ state.\n   */\n  asDone<I2>(): Writer<I2, O> {\n    throw new WriterException();\n  }\n\n  /**\n   * Casts an errored `Writer` to different input and output types. A `Writer`\n   * in the _error_ state can have any input type, and any output type.\n   *\n   * @throws `WriterException` if this `Writer` is not in the _error_ state.\n   */\n  asError<I2, O2>(): Writer<I2, O2> {\n    throw new WriterException();\n  }\n\n  /**\n   * Returns a `Writer` that continues writing `that` `Writer`, after it\n   * finishes writing this `Writer`.\n   */\n  andThen<O2>(that: Writer<unknown, O2>): Writer<never, O2> {\n    return new WriterSequence(this, that);\n  }\n\n  /**\n   * Returns a `Writer` in the _done_ state that never binds a value.\n   */\n  @Lazy\n  static end<I>(): Writer<I, never> {\n    return new WriterEnd();\n  }\n\n  /**\n   * Returns a `Writer` in the _done_ state that binds the given written `value`.\n   */\n  static done<I, O>(value: O): Writer<I, O> {\n    return new WriterDone(value);\n  }\n\n  /**\n   * Returns a `Writer` in the _error_ state that traps the given write `error`.\n   */\n  static error<I, O>(error: Error): Writer<I, O> {\n    return new WriterError(error);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"../writer/WriterException\";\nimport {Writer} from \"../writer/Writer\";\n\n/** @internal */\nexport class StringWriter extends Writer<unknown, unknown> {\n  /** @internal */\n  readonly value: unknown;\n  /** @internal */\n  readonly input: string;\n  /** @internal */\n  readonly index: number;\n\n  constructor(value: unknown, input: string, index: number = 0) {\n    super();\n    this.value = value;\n    this.input = input;\n    this.index = index;\n  }\n\n  override feed(input: unknown): Writer<unknown, unknown> {\n    return new StringWriter(input, \"\" + input);\n  }\n\n  override pull(output: Output): Writer<unknown, unknown> {\n    return StringWriter.write(output, this.value, this.input, this.index);\n  }\n\n  static write(output: Output, value: unknown, input: string, index: number = 0): Writer<unknown, unknown> {\n    const length = input.length;\n    while (index < length && output.isCont()) {\n      let c = input.codePointAt(index);\n      if (c === void 0) {\n        c = input.charCodeAt(index);\n      }\n      output = output.write(c);\n      index = Strings.offsetByCodePoints(input, index, 1);\n    }\n    if (index === length) {\n      return Writer.done(value);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new StringWriter(value, input, index);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Input} from \"../input/Input\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport {OutputSettings} from \"../output/OutputSettings\";\nimport type {Output} from \"../output/Output\";\nimport type {Writer} from \"../writer/Writer\";\nimport {StringInput} from \"./StringInput\";\nimport {StringOutput} from \"./StringOutput\";\nimport {StringWriter} from \"./StringWriter\";\n\n/**\n * Unicode code point [[Input]]/[[Output]]/[[Writer]] factory.\n *\n * The `Unicode.stringInput(...)` function returns an `Input` that reads the\n * Unicode code points of a `string`.\n *\n * The `Unicode.stringOutput(...)` function returns an `Output` that writes\n * Unicode code points to an internal buffer, and [[Output.bind binds]] a\n * `string` containing all written code points.\n * @public\n */\nexport const Unicode = (function () {\n  const Unicode = {} as {\n    stringInput(string: string): Input;\n\n    /**\n     * Returns a new `Output` that appends Unicode code points to the given\n     * `string`, using the given output `settings`. The returned `Output`\n     * accepts an unbounded number of code points, remaining permanently in the\n     * _cont_ state, and [[Output.bind binds]] a `string` containing the given\n     * `string`, and all appended code points.\n     */\n    stringOutput(string?: string, settings?: OutputSettingsLike): Output<string>;\n\n    /**\n     * Returns a new `Output` that buffers Unicode code points, using the given\n     * output `settings`. The returned `Output` accepts an unbounded number of\n     * code points, remaining permanently in the _cont_ state, and [[Output.bind\n     * binds]] a `string` containing all written code points.\n     */\n    stringOutput(settings?: OutputSettingsLike): Output<string>;\n\n    stringWriter<I>(): Writer<I, unknown>;\n\n    stringWriter<I, O>(input: O): Writer<I, O>;\n\n    writeString<I>(output: Output, input: unknown): Writer<I, unknown>;\n\n    /** @internal */\n    isAlpha(c: number): boolean;\n\n    /** @internal */\n    isDigit(c: number): boolean;\n\n    /** @internal */\n    isSpace(c: number): boolean;\n\n    /** @internal */\n    isNewline(c: number): boolean;\n\n    /** @internal */\n    isWhitespace(c: number): boolean;\n  };\n\n  Unicode.stringInput = function (string: string): Input {\n    return StringInput.create(string);\n  };\n\n  Unicode.stringOutput = function (string?: string | OutputSettingsLike, settings?: OutputSettingsLike): Output<string> {\n    if (settings === void 0 && typeof string !== \"string\") {\n      settings = string;\n      string = \"\";\n    } else if (typeof string !== \"string\") {\n      string = \"\";\n    }\n    settings = OutputSettings.fromLike(settings);\n    return new StringOutput(string, settings);\n  };\n\n  Unicode.stringWriter = function <I, O>(input?: O): Writer<I, unknown> {\n    if (input === void 0) {\n      return new StringWriter(void 0, \"\");\n    } else {\n      return new StringWriter(input, \"\" + input);\n    }\n  };\n\n  Unicode.writeString = function <I>(output: Output, input: unknown): Writer<I, unknown> {\n    return StringWriter.write(output, void 0, \"\" + input);\n  };\n\n  Unicode.isAlpha = function (c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/;\n  };\n\n  Unicode.isDigit = function (c: number): boolean {\n    return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n  };\n\n  Unicode.isSpace = function (c: number): boolean {\n    return c === 0x20 || c === 0x9;\n  };\n\n  Unicode.isNewline = function (c: number): boolean {\n    return c === 0xa || c === 0xd;\n  };\n\n  Unicode.isWhitespace = function (c: number): boolean {\n    return Unicode.isSpace(c) || Unicode.isNewline(c);\n  };\n\n  return Unicode;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport * as os from \"os\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport type {Output} from \"../output/Output\";\nimport type {Display} from \"./Display\";\nimport type {Debug} from \"./Debug\";\nimport {Unicode} from \"../unicode/Unicode\";\n\n/**\n * utility functions for formatting values.\n * @public\n */\nexport const Format = (function () {\n  const Format = {} as {\n    /**\n     * The operating system specific string used to separate lines of text.\n     */\n    readonly lineSeparator: string;\n\n    /**\n     * Returns the human-readable [[Display]] string for the given `object`,\n     * output using the given `settings`. Delegates to [[Display.display]],\n     * if `object` implements `Display`; otherwise returns the result of\n     * `Object.toString`.\n     */\n    display(object: unknown, settings?: OutputSettingsLike): string;\n\n    /**\n     * Returns the developer-readable [[Debug]] string for the given `object`,\n     * output using the given `settings`. Delegates to [[Debug.debug]], if\n     * `object` implements `Debug`; returns a JavaScript string literal, if\n     * `object` is a `string`, and returns a JavaScript number literal, if\n     * `object` is a `number`; otherwise returns the result of `Object.toString`.\n     */\n    debug(object: unknown, settings?: OutputSettingsLike): string;\n\n    /**\n     * Writes the code points of the human-readable [[Display]] string for the\n     * given `object` to `output`. Assumes `output` is a Unicode `Output` writer\n     * with sufficient capacity. Delegates to [[Display.display]], if `object`\n     * implements `Display`; otherwise writes the result of `Object.toString`.\n     *\n     * @returns the continuation of the `output`.\n     * @throws [[OutputException]] if the `output` exits the _cont_ state before\n     *         the full display string has been written.\n     */\n    displayAny<T>(output: Output<T>, object: unknown): Output<T>;\n\n    /**\n     * Writes the code points of the developer-readable [[Debug]] string for the\n     * given `object` to `output`. Assumes `output` is a Unicode `Output` writer\n     * with sufficient capacity. Delegates to [[Debug.debug]], if `object`\n     * implements `Debug`; writes a JavaScript string literal, if `object` is a\n     * `string`, and writes a JavaScript number literal, if `object` is a\n     * `number`; otherwise writes the result of `Object.toString`.\n     *\n     * @returns the continuation of the `output`.\n     * @throws [[OutputException]] if the `output` exits the _cont_ state before\n     *         the full debug string has been written.\n     */\n    debugAny<T>(output: Output<T>, object: unknown): Output<T>;\n\n    /**\n     * Writes the code points of the numeric string for the given `value`\n     * to `output`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    displayNumber<T>(output: Output<T>, value: number): Output<T>;\n\n    /**\n     * Writes the code points of the JavaScript numeric literal for the given\n     * `value` to `output`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    debugNumber<T>(output: Output<T>, value: number): Output<T>;\n\n    /**\n     * Writes the code points of the JavaScript character literal for the given\n     * `character` to `output`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    debugChar<T>(output: Output<T>, character: number): Output<T>;\n\n    /**\n     * Writes the code points of the JavaScript string literal for the given\n     * `string` to `output`.\n     *\n     * @returns the continuation of the `output`.\n     */\n    debugString<T>(output: Output<T>, string: string): Output<T>;\n\n    /** @internal */\n    encodeHex(x: number): number;\n\n    /**\n     * Returns a string representation of `value` scaled by its SI magnitude,\n     * keeping at most `precision` digits past the decimal place, appended with\n     * the appropriate SI prefix.\n     */\n    prefix(value: number, precision?: number): string;\n\n    decimal(value: number, precision?: number): string;\n\n    /** @internal */\n    trimTrailingZeros(s: string): string;\n\n    /**\n     * Returns a string representation of the duration represented by the given\n     * number of milliseconds.\n     */\n    duration(millis: number, separator?: string): string;\n  };\n\n  Object.defineProperty(Format, \"lineSeparator\", {\n    value: typeof os !== \"undefined\" && typeof os.EOL === \"string\" ? os.EOL : \"\\n\",\n    enumerable: true,\n    configurable: true,\n  });\n\n  Format.display = function (object: unknown, settings?: OutputSettingsLike): string {\n    if (object === void 0) {\n      return \"undefined\";\n    } else if (object === null) {\n      return \"null\";\n    } else if (typeof object === \"number\") {\n      return \"\" + object;\n    } else if (typeof object === \"string\") {\n      return object;\n    } else if (typeof (object as Display).display === \"function\") {\n      let output = Unicode.stringOutput(settings);\n      output = (object as Display).display(output);\n      return output.bind();\n    } else {\n      return \"\" + object;\n    }\n  };\n\n  Format.debug = function (object: unknown, settings?: OutputSettingsLike): string {\n    if (object === void 0) {\n      return \"undefined\";\n    } else if (object === null) {\n      return \"null\";\n    } else if (typeof object === \"number\") {\n      return \"\" + object;\n    } else if (typeof object === \"string\") {\n      let output = Unicode.stringOutput(settings);\n      output = Format.debugString(output, object);\n      return output.bind();\n    } else if (typeof (object as Debug).debug === \"function\") {\n      let output = Unicode.stringOutput(settings);\n      output = (object as Debug).debug(output);\n      return output.bind();\n    } else {\n      return \"\" + object;\n    }\n  };\n\n  Format.displayAny = function <T>(output: Output<T>, object: unknown): Output<T> {\n    if (object === void 0) {\n      output = output.write(\"undefined\");\n    } else if (object === null) {\n      output = output.write(\"null\");\n    } else if (typeof object === \"number\") {\n      output = Format.displayNumber(output, object);\n    } else if (typeof object === \"string\") {\n      output = output.write(object);\n    } else if (typeof (object as Display).display === \"function\") {\n      output = (object as Display).display(output);\n    } else {\n      output = output.write(\"\" + object);\n    }\n    return output;\n  };\n\n  Format.debugAny = function <T>(output: Output<T>, object: unknown): Output<T> {\n    if (object === void 0) {\n      output = output.write(\"undefined\");\n    } else if (object === null) {\n      output = output.write(\"null\");\n    } else if (typeof object === \"number\") {\n      output = Format.debugNumber(output, object);\n    } else if (typeof object === \"string\") {\n      output = Format.debugString(output, object);\n    } else if (typeof (object as Debug).debug === \"function\") {\n      output = (object as Debug).debug(output);\n    } else {\n      output = output.write(\"\" + object);\n    }\n    return output;\n  };\n\n  Format.displayNumber = function <T>(output: Output<T>, value: number): Output<T> {\n    if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {\n      if (value < 0) {\n        output = output.write(45/*'-'*/);\n      }\n      if (value > -10 && value < 10) {\n        output = output.write(48/*'0'*/ + Math.abs(value));\n      } else {\n        const digits = new Array<number>(19);\n        let x = value;\n        let i = 18;\n        while (x !== 0) {\n          digits[i] = Math.abs((x % 10) | 0);\n          x = (x / 10) | 0;\n          i -= 1;\n        }\n        i += 1;\n        while (i < 19) {\n          output = output.write(48/*'0'*/ + digits[i]!);\n          i += 1;\n        }\n      }\n    } else {\n      output = output.write(Format.decimal(value, output.settings.precision));\n    }\n    return output;\n  };\n\n  Format.debugNumber = function <T>(output: Output<T>, value: number): Output<T> {\n    return Format.displayNumber(output, value);\n  };\n\n  Format.debugChar = function <T>(output: Output<T>, value: number): Output<T> {\n    output = output.write(39/*'\\''*/);\n    switch (value) {\n      case 8/*'\\b'*/: output.write(92/*'\\\\'*/).write(98/*'b'*/); break;\n      case 9/*'\\t'*/: output.write(92/*'\\\\'*/).write(116/*'t'*/); break;\n      case 10/*'\\n'*/: output.write(92/*'\\\\'*/).write(110/*'n'*/); break;\n      case 12/*'\\f'*/: output.write(92/*'\\\\'*/).write(102/*'f'*/); break;\n      case 13/*'\\r'*/: output.write(92/*'\\\\'*/).write(114/*'r'*/); break;\n      case 34/*'\\\"'*/: output.write(92/*'\\\\'*/).write(34/*'\\\"'*/); break;\n      case 39/*'\\\"'*/: output.write(92/*'\\\\'*/).write(39/*'\\''*/); break;\n      case 92/*'\\\\'*/: output.write(92/*'\\\\'*/).write(92/*'\\\\'*/); break;\n      default:\n        if (value >= 0x0000 && value <= 0x001f || value >= 0x007f && value <= 0x009f) {\n          output = output.write(92/*'\\\\'*/).write(117/*'u'*/)\n                         .write(Format.encodeHex(value >>> 12 & 0xf))\n                         .write(Format.encodeHex(value >>>  8 & 0xf))\n                         .write(Format.encodeHex(value >>>  4 & 0xf))\n                         .write(Format.encodeHex(value        & 0xf));\n        } else {\n          output = output.write(value);\n        }\n    }\n    output = output.write(39/*'\\''*/);\n    return output;\n  };\n\n  Format.debugString = function <T>(output: Output<T>, string: string): Output<T> {\n    output = output.write(34/*'\\\"'*/);\n    let input = Unicode.stringInput(string);\n    while (input.isCont()) {\n      const c = input.head();\n      switch (c) {\n        case 8/*'\\b'*/: output.write(92/*'\\\\'*/).write(98/*'b'*/); break;\n        case 9/*'\\t'*/: output.write(92/*'\\\\'*/).write(116/*'t'*/); break;\n        case 10/*'\\n'*/: output.write(92/*'\\\\'*/).write(110/*'n'*/); break;\n        case 12/*'\\f'*/: output.write(92/*'\\\\'*/).write(102/*'f'*/); break;\n        case 13/*'\\r'*/: output.write(92/*'\\\\'*/).write(114/*'r'*/); break;\n        case 34/*'\\\"'*/: output.write(92/*'\\\\'*/).write(34/*'\\\"'*/); break;\n        case 92/*'\\\\'*/: output.write(92/*'\\\\'*/).write(92/*'\\\\'*/); break;\n        default:\n          if (c >= 0x0000 && c <= 0x001f || c >= 0x007f && c <= 0x009f) {\n            output = output.write(92/*'\\\\'*/).write(117/*'u'*/)\n                           .write(Format.encodeHex(c >>> 12 & 0xf))\n                           .write(Format.encodeHex(c >>>  8 & 0xf))\n                           .write(Format.encodeHex(c >>>  4 & 0xf))\n                           .write(Format.encodeHex(c        & 0xf));\n          } else {\n            output = output.write(c);\n          }\n      }\n      input = input.step();\n    }\n    output = output.write(34/*'\\\"'*/);\n    return output;\n  };\n\n  Format.encodeHex = function (x: number): number {\n    if (x < 10) {\n      return 48/*'0'*/ + x;\n    } else {\n      return 65/*'A'*/ + (x - 10);\n    }\n  };\n\n  Format.prefix = (function () {\n    const prefixes: readonly string[] = [\"y\", \"z\", \"a\", \"f\", \"p\", \"n\", String.fromCharCode(0x03BC/*'µ'*/), \"m\", \"\", \"k\", \"M\", \"G\", \"T\", \"P\", \"E\",\" Z\", \"Y\"];\n    return function (value: number, precision: number = 1): string {\n      if (isFinite(value)) {\n        const exponential = Math.abs(value).toExponential();\n        const exponentIndex = exponential.indexOf(\"e\");\n        const exponent = exponentIndex >= 0 ? +exponential.slice(exponentIndex + 1) : NaN;\n        const power = Math.min(Math.max(-8, Math.floor(exponent / 3)), 8) * 3;\n        const scaled = Math.pow(10, -power) * value;\n        let s = Format.trimTrailingZeros(Math.abs(scaled).toFixed(precision));\n        if (scaled < 0 && +s !== 0) {\n          s = \"-\" + s;\n        }\n        s += prefixes[8 + power / 3];\n        return s;\n      } else {\n        return \"\" + value;\n      }\n    };\n  })();\n\n  Format.decimal = function (value: number, precision: number = -1): string {\n    if (precision >= 0) {\n      let s = Format.trimTrailingZeros(Math.abs(value).toFixed(precision));\n      if (value < 0 && +s !== 0) {\n        s = \"-\" + s;\n      }\n      return s;\n    } else {\n      return \"\" + value;\n    }\n  };\n\n  Format.trimTrailingZeros = function (s: string): string {\n    let i0 = -1;\n    let i1: number | undefined;\n    for (let i = 1; i < s.length; i += 1) {\n      const c = s.charCodeAt(i);\n      if (c === 46/*'.'*/) {\n        i0 = i; // candidate start of trailing zeros\n        i1 = i; // candidate end of trailing zeros\n      } else if (c === 48/*'0'*/) {\n        if (i0 === 0) { // if after decimal\n          i0 = i; // new candidate start of trailing zeros\n        }\n        i1 = i; // new candidate end of trailing zeros\n      } else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n        if (i0 > 0) { // if non-zero digit after decimal\n          i0 = 0; // no candidate start of trailing zeros\n        }\n      } else if (i0 > 0) { // if non-numeric character after decimal\n        break; // accept current range of trailing zeros\n      }\n    }\n    if (i0 > 0) {\n      s = s.slice(0, i0) + s.slice(i1! + 1); // cut out trailing zeros\n    }\n    return s;\n  };\n\n  Format.duration = function (millis: number, separator: string = \" \"): string {\n    if (isFinite(millis)) {\n      const SECOND = 1000;\n      const MINUTE = 60 * SECOND;\n      const HOUR = 60 * MINUTE;\n      const DAY = 24 * HOUR;\n      const WEEK = 7 * DAY;\n      let weeks: number | undefined;\n      if (millis > WEEK) {\n        weeks = Math.floor(millis / WEEK);\n        millis %= WEEK;\n      }\n      let days: number | undefined;\n      if (millis > DAY) {\n        days = Math.floor(millis / DAY);\n        millis %= DAY;\n      }\n      let hours: number | undefined;\n      if (millis > HOUR) {\n        hours = Math.floor(millis / HOUR);\n        millis %= HOUR;\n      }\n      let minutes: number | undefined;\n      if (millis > MINUTE) {\n        minutes = Math.floor(millis / MINUTE);\n        millis %= MINUTE;\n      }\n      let seconds: number | undefined;\n      if (millis > SECOND) {\n        seconds = Math.floor(millis / SECOND);\n        millis %= SECOND;\n      }\n      let s = \"\";\n      if (weeks !== void 0) {\n        s += weeks + \"w\";\n      }\n      if (days !== void 0) {\n        s += (s.length !== 0 ? separator : \"\") + days + \"d\";\n      }\n      if (hours !== void 0) {\n        s += (s.length !== 0 ? separator : \"\") + hours + \"h\";\n      }\n      if (minutes !== void 0) {\n        s += (s.length !== 0 ? separator : \"\") + minutes + \"m\";\n      }\n      if (seconds !== void 0 || millis === 0) {\n        s += (s.length !== 0 ? separator : \"\") + (seconds !== void 0 ? seconds : 0) + \"s\";\n      }\n      if (millis !== 0 && s.length === 0) {\n        s += millis + \"ms\";\n      }\n      return s;\n    } else {\n      return \"\" + millis;\n    }\n  };\n\n  return Format;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Input} from \"../input/Input\";\nimport type {Output} from \"../output/Output\";\nimport type {Parser} from \"../parser/Parser\";\nimport type {Writer} from \"../writer/Writer\";\nimport {Format} from \"../format/Format\";\nimport {Unicode} from \"../unicode/Unicode\";\nimport {Base10NumberParser} from \"../\"; // forward import\nimport {Base10IntegerWriter} from \"../\"; // forward import\n\n/**\n * Base-10 (decimal) encoding [[Parser]]/[[Writer]] factory.\n * @public\n */\nexport const Base10 = (function () {\n  const Base10 = {} as {\n    /**\n     * Returns `true` if the Unicode code point `c` is a valid base-10 digit.\n     */\n    isDigit(c: number): boolean;\n\n    /**\n     * Returns the decimal quantity between `0` (inclusive) and `10` (exclusive)\n     * represented by the base-10 digit `c`.\n     *\n     * @throws `Error` if `c` is not a valid base-10 digit.\n     */\n    decodeDigit(c: number): number;\n\n    /**\n     * Returns the Unicode code point of the base-10 digit that encodes the given\n     * decimal quantity between `0` (inclusive) and `10` (exclusive).\n     */\n    encodeDigit(b: number): number;\n\n    /**\n     * Returns the number of whole decimal digits in the given absolute `value`.\n     */\n    countDigits(value: number): number;\n\n    integerParser(): Parser<number>;\n\n    parseInteger(input: Input): Parser<number>;\n\n    decimalParser(): Parser<number>;\n\n    parseDecimal(input: Input): Parser<number>;\n\n    numberParser(): Parser<number>;\n\n    parseNumber(input: Input): Parser<number>;\n\n    /**\n     * Returns a `Writer` that, when fed an input `number` value, returns a\n     * continuation that writes the base-10 (decimal) encoding of the input value.\n     */\n    integerWriter(): Writer<number, unknown>;\n\n    /**\n     * Returns a `Writer` continuation that writes the base-10 (decimal) encoding\n     * of the `input` value.\n     */\n    integerWriter(input: number): Writer<unknown, number>;\n\n    /**\n     * Writes the base-10 (decimal) encoding of the `input` value to the `output`,\n     * returning a `Writer` continuation that knows how to write any remaining\n     * output that couldn't be immediately generated.\n     */\n    writeInteger(output: Output, input: number): Writer;\n  };\n\n  Base10.isDigit = function (c: number): boolean {\n    return c >= 48/*'0'*/ && c <= 57/*'9'*/;\n  };\n\n  Base10.decodeDigit = function (c: number): number {\n    if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n      return c - 48/*'0'*/;\n    } else {\n      let message = Unicode.stringOutput();\n      message = message.write(\"Invalid base-10 digit: \");\n      message = Format.debugChar(message, c);\n      throw new Error(message.bind());\n    }\n  };\n\n  Base10.encodeDigit = function (b: number): number {\n    if (b >= 0 && b <= 9) {\n      return 48/*'0'*/ + b;\n    } else {\n      throw new Error(\"\" + b);\n    }\n  };\n\n  Base10.countDigits = function (value: number): number {\n    let size = 0;\n    do {\n      size += 1;\n      value = (value / 10) | 0;\n    } while (value !== 0);\n    return size;\n  };\n\n  Base10.integerParser = function (): Parser<number> {\n    return new Base10NumberParser(void 0, void 0, 0);\n  };\n\n  Base10.parseInteger = function (input: Input): Parser<number> {\n    return Base10NumberParser.parse(input, void 0, void 0, 0);\n  };\n\n  Base10.decimalParser = function (): Parser<number> {\n    return new Base10NumberParser(void 0, void 0, 1);\n  };\n\n  Base10.parseDecimal = function (input: Input): Parser<number> {\n    return Base10NumberParser.parse(input, void 0, void 0, 1);\n  };\n\n  Base10.numberParser = function (): Parser<number> {\n    return new Base10NumberParser();\n  };\n\n  Base10.parseNumber = function (input: Input): Parser<number> {\n    return Base10NumberParser.parse(input);\n  };\n\n  Base10.integerWriter = function (input?: number): Writer {\n    if (input === void 0) {\n      return new Base10IntegerWriter(void 0, 0);\n    } else {\n      return new Base10IntegerWriter(void 0, input);\n    }\n  } as typeof Base10.integerWriter;\n\n  Base10.writeInteger = function (output: Output, input: number): Writer {\n    return Base10IntegerWriter.write(output, void 0, input);\n  };\n\n  return Base10;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Values} from \"@swim/util\";\nimport {Severity} from \"@swim/util\";\nimport type {Tag} from \"./Tag\";\nimport type {Mark} from \"./Mark\";\nimport type {Input} from \"../input/Input\";\nimport type {OutputSettings} from \"../output/OutputSettings\";\nimport type {Output} from \"../output/Output\";\nimport type {Display} from \"../format/Display\";\nimport {OutputStyle} from \"../format/OutputStyle\";\nimport {Format} from \"../format/Format\";\nimport {Unicode} from \"../unicode/Unicode\";\nimport {Base10} from \"../number/Base10\";\n\n/**\n * Informational message attached to an input location.\n * @public\n */\nexport class Diagnostic implements Display {\n  constructor(input: Input, tag: Tag, severity: Severity, message: string | undefined,\n              note: string | undefined, cause: Diagnostic | null) {\n    this.input = input;\n    this.tag = tag;\n    this.severity = severity;\n    this.message = message;\n    this.note = note;\n    this.cause = cause;\n  }\n\n  /** @internal */\n  readonly input: Input;\n\n  /**\n   * The location in the `input` to which this diagnostic is attached.\n   */\n  readonly tag: Tag;\n\n  /**\n   * The level of importance of this diagnostic.\n   */\n  readonly severity: Severity;\n\n  /**\n   * The help message that describes this diagnostic.\n   */\n  readonly message: string | undefined;\n\n  /**\n   * An informative comment on the source context to which this diagnostic is attached.\n   */\n  readonly note: string | undefined;\n\n  /**\n   * The `Diagnostic` cause of this diagnostic, forming a linked chain of\n   * diagnostics, or `null` if this diagnostic has no cause.\n   */\n  readonly cause: Diagnostic | null;\n\n  private lineDigits(): number {\n    let digits = Base10.countDigits(this.tag.end.line);\n    if (this.cause !== null) {\n      digits = Math.max(digits, this.cause.lineDigits());\n    }\n    return digits;\n  }\n\n  display<T>(output: Output<T>): Output<T> {\n    const input = this.input.clone();\n    const start = this.tag.start;\n    const end = this.tag.end;\n    const severity = this.severity;\n    const message = this.message;\n    const note = this.note;\n    const cause = this.cause;\n    const contextLines = 2;\n    const lineDigits = this.lineDigits();\n    output = Diagnostic.display(output, input, start, end, severity, message,\n                                note, cause, contextLines, lineDigits);\n    return output;\n  }\n\n  private static display<T>(output: Output<T>, input: Input, start: Mark, end: Mark,\n                            severity: Severity, message: string | undefined,\n                            note: string | undefined, cause: Diagnostic | null,\n                            contextLines: number, lineDigits: number): Output<T> {\n    do {\n      if (message !== void 0) {\n        output = Diagnostic.displayMessage(output, severity, message);\n        output = output.writeln();\n      }\n      output = Diagnostic.displayAnchor(output, input, start, lineDigits);\n      output = output.writeln();\n      const cont = Diagnostic.displayContext(output, input, start, end, severity,\n                                             note, cause, contextLines, lineDigits);\n      const next = cont[0];\n      output = cont[1];\n      if (next !== null) {\n        output = output.writeln();\n        input = next.input.clone();\n        start = next.tag.start;\n        end = next.tag.end;\n        severity = next.severity;\n        message = next.message;\n        note = next.note;\n        cause = next.cause;\n      } else {\n        break;\n      }\n    } while (true);\n    return output;\n  }\n\n  /** @internal */\n  static displayMessage<T>(output: Output<T>, severity: Severity, message: string | undefined): Output<T> {\n    output = Diagnostic.formatSeverity(output, severity);\n    output = output.write(severity.label);\n    output = OutputStyle.reset(output);\n    output = OutputStyle.bold(output);\n    output = output.write(58/*':'*/);\n    if (message !== void 0) {\n      output = output.write(32/*' '*/).write(message);\n    }\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayAnchor<T>(output: Output<T>, input: Input,\n                                  start: Mark, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadArrow(output, lineDigits);\n    output = output.write(32/*' '*/);\n    const id = input.id;\n    if (id !== void 0) {\n      output = Format.displayAny(output, id);\n    }\n    output = output.write(58/*':'*/);\n    output = Format.displayNumber(output, start.line);\n    output = output.write(58/*':'*/);\n    output = Format.displayNumber(output, start.column);\n    output = output.writeln();\n\n    output = Diagnostic.displayLineLead(output, lineDigits);\n    return output;\n  }\n\n  private static displayContext<T>(output: Output<T>, input: Input, start: Mark, end: Mark,\n                                   severity: Severity, note: string | undefined,\n                                   cause: Diagnostic | null, contextLines: number,\n                                   lineDigits: number): [Diagnostic | null, Output<T>] {\n    let next = cause;\n    const sameCause = cause !== null && cause.message === void 0 && Values.equal(input.id, cause.input.id);\n    const causeOrder = sameCause ? (start.offset <= cause!.tag.start.offset ? -1 : 1) : 0;\n    if (causeOrder === 1) {\n      const cont = Diagnostic.displayContext(output, cause!.input.clone(), cause!.tag.start,\n                                             cause!.tag.end, cause!.severity, cause!.note,\n                                             cause!.cause, contextLines, lineDigits);\n      next = cont[0];\n      output = cont[1];\n      output = output.writeln();\n      output = Diagnostic.displayLineLeadEllipsis(output, lineDigits);\n      output = output.writeln();\n    }\n    output = Diagnostic.displayLines(output, input, start, end, severity, contextLines, lineDigits);\n    if (note !== void 0) {\n      output = Diagnostic.displayNote(output, note, lineDigits);\n    }\n    if (causeOrder === -1) {\n      output = output.writeln();\n      output = Diagnostic.displayLineLeadEllipsis(output, lineDigits);\n      output = output.writeln();\n      const cont = Diagnostic.displayContext(output, cause!.input.clone(), cause!.tag.start,\n                                             cause!.tag.end, cause!.severity, cause!.note,\n                                             cause!.cause, contextLines, lineDigits);\n      next = cont[0];\n      output = cont[1];\n    }\n    return [next, output];\n  }\n\n  private static displayLines<T>(output: Output<T>, input: Input, start: Mark, end: Mark,\n                                 severity: Severity, contextLines: number,\n                                 lineDigits: number): Output<T> {\n    const startLine = start.line;\n    const endLine = end.line;\n    let line = input.line;\n\n    while (line < startLine) {\n      Diagnostic.consumeLineText(input, line);\n      line += 1;\n    }\n\n    if (endLine - startLine > 2 * contextLines + 2) {\n      while (line <= startLine + contextLines) {\n        output = Diagnostic.displayLine(output, input, start, end, severity, line, lineDigits);\n        line += 1;\n      }\n      output = Diagnostic.displayLineLeadEllipsis(output, lineDigits);\n      output = output.write(32/*' '*/);\n      output = Diagnostic.formatSeverity(output, severity);\n      output = output.write(124/*'|'*/);\n      output = OutputStyle.reset(output);\n      output = output.writeln();\n      while (line < endLine - contextLines) {\n        Diagnostic.consumeLineText(input, line);\n        line += 1;\n      }\n    }\n\n    while (line <= endLine) {\n      output = Diagnostic.displayLine(output, input, start, end, severity, line, lineDigits);\n      line += 1;\n    }\n    return output;\n  }\n\n  private static displayNote<T>(output: Output<T>, note: string | undefined, lineDigits: number): Output<T> {\n    output = output.writeln();\n    output = Diagnostic.displayLineLead(output, lineDigits);\n    output = output.writeln();\n    output = Diagnostic.displayLineComment(output, 'note', note, lineDigits);\n    return output;\n  }\n\n  private static displayLine<T>(output: Output<T>, input: Input, start: Mark, end: Mark,\n                                severity: Severity, line: number, lineDigits: number): Output<T> {\n    if (start.line === line && end.line === line) {\n      output = Diagnostic.displaySingleLine(output, input, start, end, severity, line, lineDigits);\n    } else if (start.line === line) {\n      output = Diagnostic.displayStartLine(output, input, start, severity, line, lineDigits);\n    } else if (end.line === line) {\n      output = Diagnostic.displayEndLine(output, input, end, severity, line, lineDigits);\n    } else {\n      output = Diagnostic.displayMidLine(output, input, severity, line, lineDigits);\n    }\n    return output;\n  }\n\n  private static displaySingleLine<T>(output: Output<T>, input: Input, start: Mark, end: Mark,\n                                      severity: Severity, line: number, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadNumber(output, line, lineDigits);\n    output = output.write(32/*' '*/);\n    for (let i = 1; i < input.column; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = Diagnostic.displayLineText(output, input, line);\n\n    output = Diagnostic.displayLineLead(output, lineDigits);\n    output = output.write(32/*' '*/);\n    let i = 1;\n    while (i < start.column) {\n      output = output.write(32/*' '*/);\n      i += 1;\n    }\n    output = Diagnostic.formatSeverity(output, severity);\n    while (i <= end.column) {\n      output = output.write(94/*'^'*/);\n      i += 1;\n    }\n    if (end.note !== void 0) {\n      output = output.write(32/*' '*/).write(end.note);\n    }\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayStartLine<T>(output: Output<T>, input: Input, start: Mark,\n                                     severity: Severity, line: number, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadNumber(output, line, lineDigits);\n    output = output.write(32/*' '*/).write(32/*' '*/).write(32/*' '*/);\n    for (let i = 1; i < input.column; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = Diagnostic.displayLineText(output, input, line);\n\n    output = Diagnostic.displayLineLead(output, lineDigits);\n    output = output.write(32/*' '*/).write(32/*' '*/);\n    output = Diagnostic.formatSeverity(output, severity);\n    output = output.write(95/*'_'*/);\n    let i = 1;\n    while (i < start.column) {\n      output = output.write(95/*'_'*/);\n      i += 1;\n    }\n    output = output.write(94/*'^'*/);\n    if (start.note !== void 0) {\n      output = output.write(32/*' '*/).write(start.note);\n    }\n    output = OutputStyle.reset(output);\n    output = output.writeln();\n    return output;\n  }\n\n  private static displayEndLine<T>(output: Output<T>, input: Input, end: Mark,\n                                   severity: Severity, line: number, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadNumber(output, line, lineDigits);\n    output = output.write(32/*' '*/);\n    output = Diagnostic.formatSeverity(output, severity);\n    output = output.write(124/*'|'*/);\n    output = OutputStyle.reset(output);\n    output = output.write(32/*' '*/);\n    output = Diagnostic.displayLineText(output, input, line);\n\n    output = Diagnostic.displayLineLead(output, lineDigits);\n    output = output.write(32/*' '*/);\n    output = Diagnostic.formatSeverity(output, severity);\n    output = output.write(124/*'|'*/).write(95/*'_'*/);\n    let i = 1;\n    while (i < end.column) {\n      output = output.write(95/*'_'*/);\n      i += 1;\n    }\n    output = output.write(94/*'^'*/);\n    if (end.note !== void 0) {\n      output = output.write(32/*' '*/).write(end.note);\n    }\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayMidLine<T>(output: Output<T>, input: Input, severity: Severity,\n                                   line: number, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadNumber(output, line, lineDigits);\n    output = output.write(32/*' '*/);\n    output = Diagnostic.formatSeverity(output, severity);\n    output = output.write(124/*'|'*/);\n    output = OutputStyle.reset(output);\n    output = output.write(32/*' '*/);\n    output = Diagnostic.displayLineText(output, input, line);\n    return output;\n  }\n\n  private static displayLineComment<T>(output: Output<T>, label: string,\n                                       comment: string | undefined, lineDigits: number): Output<T> {\n    output = Diagnostic.displayLineLeadComment(output, lineDigits);\n    output = output.write(32/*' '*/);\n    output = OutputStyle.bold(output);\n    output = output.write(label).write(58/*':'*/);\n    output = OutputStyle.reset(output);\n    if (comment !== void 0) {\n      output = output.write(32/*' '*/).write(comment);\n    }\n    return output;\n  }\n\n  private static displayLineLead<T>(output: Output<T>, lineDigits: number): Output<T> {\n    output = OutputStyle.blueBold(output);\n    const padding = 1 + lineDigits;\n    for (let i = 0; i < padding; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = output.write(124/*'|'*/);\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayLineLeadComment<T>(output: Output<T>, lineDigits: number): Output<T> {\n    output = OutputStyle.blueBold(output);\n    const padding = 1 + lineDigits;\n    for (let i = 0; i < padding; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = output.write(61/*'='*/);\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayLineLeadArrow<T>(output: Output<T>, lineDigits: number): Output<T> {\n    for (let i = 0; i < lineDigits; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = OutputStyle.blueBold(output);\n    output = output.write(45/*'-'*/).write(45/*'-'*/).write(62/*'>'*/);\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayLineLeadEllipsis<T>(output: Output<T>, lineDigits: number): Output<T> {\n    output = OutputStyle.blueBold(output);\n    for (let i = 0; i < lineDigits; i += 1) {\n      output = output.write(46/*'.'*/);\n    }\n    output = OutputStyle.reset(output);\n    output = output.write(32/*' '*/).write(32/*' '*/);\n    return output;\n  }\n\n  private static displayLineLeadNumber<T>(output: Output<T>, line: number, lineDigits: number): Output<T> {\n    const padding = lineDigits - Base10.countDigits(line);\n    for (let i = 0; i < padding; i += 1) {\n      output = output.write(32/*' '*/);\n    }\n    output = OutputStyle.blueBold(output);\n    output = Format.displayNumber(output, line);\n    output = output.write(32/*' '*/).write(124/*'|'*/);\n    output = OutputStyle.reset(output);\n    return output;\n  }\n\n  private static displayLineText<T>(output: Output<T>, input: Input, line: number): Output<T> {\n    while (input.isCont() && input.line === line) {\n      output = output.write(input.head());\n      input = input.step();\n    }\n    if (input.line === line) {\n      output = output.writeln();\n    }\n    return output;\n  }\n\n  private static consumeLineText(input: Input, line: number): void {\n    while (input.isCont() && input.line === line) {\n      input = input.step();\n    }\n  }\n\n  private static formatSeverity<T>(output: Output<T>, severity: Severity): Output<T> {\n    switch (severity.level) {\n      case Severity.FatalLevel:\n      case Severity.AlertLevel:\n      case Severity.ErrorLevel:\n        output = OutputStyle.redBold(output);\n        break;\n      case Severity.WarningLevel:\n        output = OutputStyle.yellowBold(output);\n        break;\n      case Severity.NoteLevel:\n        output = OutputStyle.greenBold(output);\n        break;\n      case Severity.InfoLevel:\n        output = OutputStyle.cyanBold(output);\n        break;\n      case Severity.DebugLevel:\n      case Severity.TraceLevel:\n      default:\n        output = OutputStyle.magentaBold(output);\n    }\n    return output;\n  }\n\n  toString(settings?: OutputSettings): string {\n    return Format.display(this, settings);\n  }\n\n  static create(input: Input, tag: Tag, severity: Severity, cause?: Diagnostic | null): Diagnostic;\n  static create(input: Input, tag: Tag, severity: Severity, message: string | undefined,\n                cause?: Diagnostic | null): Diagnostic;\n  static create(input: Input, tag: Tag, severity: Severity, message: string | undefined,\n                note: string | undefined, cause?: Diagnostic | null): Diagnostic;\n  static create(input: Input, tag: Tag, severity: Severity, message?: Diagnostic | null | string | undefined,\n                note?: Diagnostic | null | string | undefined, cause?: Diagnostic | null): Diagnostic {\n    if (arguments.length === 3) { // (input, tag, severity)\n      cause = null;\n      note = void 0;\n      message = void 0;\n    } else if (arguments.length === 4) {\n      if (message === null || message instanceof Diagnostic) { // (input, tag, severity, cause)\n        cause = message;\n        message = void 0;\n      } else { // (input, tag, severity, message)\n        cause = null;\n      }\n    } else if (arguments.length === 5) {\n      if (note === null || note instanceof Diagnostic) { // (input, tag, severity, message, cause)\n        cause = note;\n        note = void 0;\n      } else { // (input, tag, severity, message, note)\n        cause = null;\n      }\n    } else { // (input, tag, severity, message, note, cause)\n      if (cause === void 0) {\n        cause = null;\n      }\n    }\n    return new Diagnostic(input.clone(), tag, severity, message as string | undefined, note as string | undefined, cause);\n  }\n\n  static message(message: string, input: Input, cause?: Diagnostic | null): Diagnostic;\n  static message(message: string, input: Input, note: string, cause?: Diagnostic | null): Diagnostic;\n  static message(message: string, input: Input, severity: Severity, cause?: Diagnostic | null): Diagnostic;\n  static message(message: string, input: Input, severity?: Severity, note?: string, cause?: Diagnostic | null): Diagnostic;\n  static message(message: string, input: Input, severity?: Diagnostic | null | Severity | string | undefined,\n                 note?: Diagnostic | null | string | undefined, cause?: Diagnostic | null): Diagnostic {\n    if (arguments.length === 2) { // (message, input)\n      cause = null;\n      note = void 0;\n      severity = Severity.error();\n    } else if (arguments.length === 3) {\n      if (severity === null || severity instanceof Diagnostic) { // (message, input, cause)\n        cause = severity;\n        severity = Severity.error();\n      } else if (typeof severity === \"string\") { // (message, input, note)\n        cause = null;\n        note = severity;\n        severity = Severity.error();\n      } else { // (message, input, severity)\n        cause = null;\n      }\n    } else if (arguments.length === 4) {\n      if (typeof severity === \"string\") { // (message, input, note, cause)\n        cause = note as Diagnostic | null;\n        note = severity;\n        severity = Severity.error();\n      } else if (note === null || note instanceof Diagnostic) { // (message, input, severity, cause)\n        cause = note;\n        note = void 0;\n      } else { // (message, input, severity, note)\n        cause = null;\n      }\n    } else { // (message, input, severity, note, cause)\n      if (cause === void 0) {\n        cause = null;\n      }\n    }\n\n    const mark = input.mark;\n    const source = input.clone();\n    source.seek();\n    return new Diagnostic(source, mark, severity as Severity, message, note as string | undefined, cause);\n  }\n\n  static unexpected(input: Input, cause?: Diagnostic | null): Diagnostic;\n  static unexpected(input: Input, note: string, cause?: Diagnostic | null): Diagnostic;\n  static unexpected(input: Input, severity: Severity, cause?: Diagnostic | null): Diagnostic;\n  static unexpected(input: Input, severity?: Severity, note?: string, cause?: Diagnostic | null): Diagnostic;\n  static unexpected(input: Input, severity?: Diagnostic | null | Severity | string | undefined,\n                    note?: Diagnostic | null | string | undefined, cause?: Diagnostic | null): Diagnostic {\n    if (arguments.length === 1) { // (input)\n      cause = null;\n      severity = Severity.error();\n    } else if (arguments.length === 2) {\n      if (severity === null || severity instanceof Diagnostic) { // (input, cause)\n        cause = severity;\n        severity = Severity.error();\n      } else if (typeof severity === \"string\") { // (input, note)\n        cause = null;\n        note = severity;\n        severity = Severity.error();\n      } else { // (input, severity)\n        cause = null;\n      }\n    } else if (arguments.length === 3) {\n      if (typeof severity === \"string\") { // (input, note, cause)\n        cause = note as Diagnostic | null;\n        note = severity;\n        severity = Severity.error();\n      } else if (note === null || note instanceof Diagnostic) { // (input, severity, cause)\n        cause = note;\n        note = void 0;\n      } else { // (input, severity, note)\n        cause = null;\n      }\n    } else { // (input, severity, note, cause)\n      if (cause === void 0) {\n        cause = null;\n      }\n    }\n\n    let message;\n    if (input.isCont()) {\n      let output = Unicode.stringOutput().write(\"unexpected\").write(32/*' '*/);\n      output = Format.debugChar(output, input.head());\n      message = output.bind();\n    } else {\n      message = \"unexpected end of input\";\n    }\n    const mark = input.mark;\n    const source = input.clone();\n    source.seek();\n    return new Diagnostic(source, mark, severity as Severity, message, note as string | undefined, cause);\n  }\n\n  static expected(expected: string | number, input: Input, cause?: Diagnostic | null): Diagnostic;\n  static expected(expected: string | number, input: Input, note: string, cause?: Diagnostic | null): Diagnostic;\n  static expected(expected: string | number, input: Input, severity: Severity, cause?: Diagnostic | null): Diagnostic;\n  static expected(expected: string | number, input: Input, severity?: Severity, note?: string, cause?: Diagnostic | null): Diagnostic;\n  static expected(expected: string | number, input: Input, severity?: Diagnostic | null | Severity | string | undefined,\n                  note?: Diagnostic | null | string | undefined, cause?: Diagnostic | null): Diagnostic {\n    if (arguments.length === 2) { // (excpected, input)\n      cause = null;\n      severity = Severity.error();\n    } else if (arguments.length === 3) {\n      if (severity === null || severity instanceof Diagnostic) { // (excpected, input, cause)\n        cause = severity;\n        severity = Severity.error();\n      } else if (typeof severity === \"string\") { // (excpected, input, note)\n        cause = null;\n        note = severity;\n        severity = Severity.error();\n      } else { // (expected, input, severity)\n        cause = null;\n      }\n    } else if (arguments.length === 4) {\n      if (typeof severity === \"string\") { // (excpected, input, note, cause)\n        cause = note as Diagnostic | null;\n        note = severity;\n        severity = Severity.error();\n      } else if (note === null || note instanceof Diagnostic) { // (excpected, input, severity, cause)\n        cause = note;\n        note = void 0;\n      } else { // (excpected, input, severity, note)\n        cause = null;\n      }\n    } else { // (excpected, input, severity, note, cause)\n      if (cause === void 0) {\n        cause = null;\n      }\n    }\n\n    let output = Unicode.stringOutput().write(\"expected\").write(32/*' '*/);\n    if (typeof expected === \"number\") {\n      output = Format.debugChar(output, expected);\n    } else {\n      output = output.write(expected);\n    }\n    output = output.write(44/*','*/).write(32/*' '*/).write(\"but found\").write(32/*' '*/);\n    if (input.isCont()) {\n      output = Format.debugChar(output, input.head());\n    } else {\n      output = output.write(\"end of input\");\n    }\n    const message = output.bind();\n    const mark = input.mark;\n    const source = input.clone();\n    source.seek();\n    return new Diagnostic(source, mark, severity as Severity, message, note as string | undefined, cause);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {Input} from \"./Input\";\nimport {InputDone} from \"../\"; // forward import\nimport {InputError} from \"../\"; // forward import\n\n/** @internal */\nexport class InputEmpty extends Input {\n  constructor(id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return true;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return true;\n  }\n\n  override asPart(part: boolean): Input {\n    return part ? this : new InputDone(this.id, this.mark, this.settings);\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(): Input {\n    const error = new InputException(\"empty step\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override seek(mark?: Mark): Input {\n    const error = new InputException(\"empty seek\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  override withId(id: string | undefined): Input {\n    return new InputEmpty(id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): Input {\n    return new InputEmpty(this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): Input {\n    settings = InputSettings.fromLike(settings);\n    return new InputEmpty(this.id, this.mark, settings);\n  }\n\n  override clone(): Input {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {Input} from \"./Input\";\nimport {InputEmpty} from \"../\"; // forward import\nimport {InputError} from \"../\"; // forward import\n\n/** @internal */\nexport class InputDone extends Input {\n  constructor(id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Input {\n    return part ? new InputEmpty(this.id, this.mark, this.settings) : this;\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(): Input {\n    const error = new InputException(\"done step\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override seek(mark?: Mark): Input {\n    const error = new InputException(\"empty seek\");\n    return new InputError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  override withId(id: string | undefined): Input {\n    return new InputDone(id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): Input {\n    return new InputDone(this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): Input {\n    settings = InputSettings.fromLike(settings);\n    return new InputDone(this.id, this.mark, settings);\n  }\n\n  override clone(): Input {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Mark} from \"../source/Mark\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {Input} from \"./Input\";\nimport {InputBufferEmpty} from \"../\"; // forward import\nimport {InputBufferDone} from \"../\"; // forward import\nimport {InputBufferError} from \"../\"; // forward import\n\n/**\n * Non-blocking token stream buffer.\n * @public\n */\nexport abstract class InputBuffer extends Input {\n  abstract override asPart(part: boolean): InputBuffer;\n\n  abstract readonly index: number;\n\n  abstract withIndex(index: number): InputBuffer;\n\n  abstract readonly limit: number;\n\n  abstract withLimit(limit: number): InputBuffer;\n\n  abstract readonly capacity: number;\n\n  abstract readonly remaining: number;\n\n  abstract has(index: number): boolean;\n\n  abstract get(index: number): number;\n\n  abstract set(index: number, token: number): void;\n\n  abstract override step(offset?: number): InputBuffer;\n\n  abstract override seek(mark: Mark): InputBuffer;\n\n  abstract override withId(id: string | undefined): InputBuffer;\n\n  abstract override withMark(mark: Mark): InputBuffer;\n\n  abstract override withSettings(settings: InputSettingsLike): InputBuffer;\n\n  abstract override clone(): InputBuffer;\n\n  /**\n   * Returns an `InputBuffer` in the _empty_ state.\n   */\n  @Lazy\n  static override empty(): InputBuffer {\n    return new InputBufferEmpty(void 0, Mark.zero, InputSettings.standard());\n  }\n\n  /**\n   * Returns an `InputBuffer` in the _done_ state.\n   */\n  @Lazy\n  static override done(): InputBuffer {\n    return new InputBufferDone(void 0, Mark.zero, InputSettings.standard());\n  }\n\n  /**\n   * Returns an `InputBuffer` in the _error_ state that traps the given `error`.\n   */\n  static override error(error: Error): InputBuffer {\n    return new InputBufferError(error, void 0, Mark.zero, InputSettings.standard());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {InputBuffer} from \"./InputBuffer\";\nimport {InputBufferDone} from \"../\"; // forward import\nimport {InputBufferError} from \"../\"; // forward import\n\n/** @internal */\nexport class InputBufferEmpty extends InputBuffer {\n  constructor(id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return true;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return true;\n  }\n\n  override asPart(part: boolean): InputBuffer {\n    return part ? this : new InputBufferDone(this.id, this.mark, this.settings);\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): InputBuffer {\n    if (index === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid index\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): InputBuffer {\n    if (limit === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid limit\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new InputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new InputException();\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(offset?: number): InputBuffer {\n    const error = new InputException(\"empty step\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override seek(mark: Mark): InputBuffer {\n    const error = new InputException(\"empty seek\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  override withId(id: string | undefined): InputBuffer {\n    return new InputBufferEmpty(id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): InputBuffer {\n    return new InputBufferEmpty(this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): InputBuffer {\n    settings = InputSettings.fromLike(settings);\n    return new InputBufferEmpty(this.id, this.mark, settings);\n  }\n\n  override clone(): InputBuffer {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {InputBuffer} from \"./InputBuffer\";\nimport {InputBufferEmpty} from \"../\"; // forward import\nimport {InputBufferError} from \"../\"; // forward import\n\n/** @internal */\nexport class InputBufferDone extends InputBuffer {\n  constructor(id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): InputBuffer {\n    return part ? new InputBufferEmpty(this.id, this.mark, this.settings) : this;\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): InputBuffer {\n    if (index === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid index\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): InputBuffer {\n    if (limit === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid limit\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new InputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new InputException();\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(offset?: number): InputBuffer {\n    const error = new InputException(\"done step\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override seek(mark: Mark): InputBuffer {\n    const error = new InputException(\"done seek\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  override withId(id: string | undefined): InputBuffer {\n    return new InputBufferDone(id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): InputBuffer {\n    return new InputBufferDone(this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): InputBuffer {\n    settings = InputSettings.fromLike(settings);\n    return new InputBufferDone(this.id, this.mark, settings);\n  }\n\n  override clone(): InputBuffer {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mark} from \"../source/Mark\";\nimport {InputException} from \"./InputException\";\nimport type {InputSettingsLike} from \"./InputSettings\";\nimport {InputSettings} from \"./InputSettings\";\nimport {InputBuffer} from \"./InputBuffer\";\n\n/** @internal */\nexport class InputBufferError extends InputBuffer {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error, id: string | undefined, mark: Mark, settings: InputSettings) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"id\", {\n      value: id,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"mark\", {\n      value: mark,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): InputBuffer {\n    return this;\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): InputBuffer {\n    if (index === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid index\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): InputBuffer {\n    if (limit === 0) {\n      return this;\n    } else {\n      const error = new InputException(\"invalid limit\");\n      return new InputBufferError(error, this.id, this.mark, this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new InputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new InputException();\n  }\n\n  override head(): number {\n    throw new InputException();\n  }\n\n  override step(offset?: number): InputBuffer {\n    const error = new InputException(\"error step\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override seek(mark: Mark): InputBuffer {\n    const error = new InputException(\"error seek\");\n    return new InputBufferError(error, this.id, this.mark, this.settings);\n  }\n\n  override readonly id!: string | undefined;\n\n  withId(id: string | undefined): InputBuffer {\n    return new InputBufferError(this.error, id, this.mark, this.settings);\n  }\n\n  override readonly mark!: Mark;\n\n  override withMark(mark: Mark): InputBuffer {\n    return new InputBufferError(this.error, this.id, mark, this.settings);\n  }\n\n  override get offset(): number {\n    return this.mark.offset;\n  }\n\n  override get line(): number {\n    return this.mark.line;\n  }\n\n  override get column(): number {\n    return this.mark.column;\n  }\n\n  override readonly settings!: InputSettings;\n\n  override withSettings(settings: InputSettingsLike): InputBuffer {\n    settings = InputSettings.fromLike(settings);\n    return new InputBufferError(this.error, this.id, this.mark, settings);\n  }\n\n  override clone(): InputBuffer {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {Output} from \"./Output\";\nimport {OutputDone} from \"../\"; // forward import\nimport {OutputError} from \"../\"; // forward import\n\n/** @internal */\nexport class OutputFull extends Output<never> {\n  constructor(settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return true;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return true;\n  }\n\n  override asPart(part: boolean): Output<never> {\n    return part ? this : new OutputDone(this.settings);\n  }\n\n  override write(token: number): Output<never>;\n  override write(string: string): Output<never>;\n  override write(tokenOrString: number | string): Output<never> {\n    return new OutputError(new OutputException(\"full\"), this.settings);\n  }\n\n  override writeln(string?: string): Output<never> {\n    return new OutputError(new OutputException(\"full\"), this.settings);\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputFull(settings);\n  }\n\n  override clone(): Output<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {Output} from \"./Output\";\nimport {OutputFull} from \"../\"; // forward import\nimport {OutputError} from \"../\"; // forward import\n\n/** @internal */\nexport class OutputDone extends Output<never> {\n  constructor(settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<never> {\n    return part ? new OutputFull(this.settings) : this;\n  }\n\n  override write(token: number): Output<never>;\n  override write(string: string): Output<never>;\n  override write(tokenOrString: number | string): Output<never> {\n    return new OutputError(new OutputException(\"done\"), this.settings);\n  }\n\n  override writeln(string?: string): Output<never> {\n    return new OutputError(new OutputException(\"done\"), this.settings);\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputDone(settings);\n  }\n\n  override clone(): Output<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {Output} from \"./Output\";\n\n/** @internal */\nexport class OutputError extends Output<never> {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error, settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<never> {\n    return this;\n  }\n\n  override write(token: number): Output<never>;\n  override write(string: string): Output<never>;\n  override write(tokenOrString: number | string): Output<never> {\n    return this;\n  }\n\n  override writeln(string?: string): Output<never> {\n    return this;\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputError(this.error, settings);\n  }\n\n  override clone(): Output<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {Output} from \"./Output\";\nimport {OutputBufferFull} from \"../\"; // forward import\nimport {OutputBufferDone} from \"../\"; // forward import\nimport {OutputBufferError} from \"../\"; // forward import\n\n/**\n * Non-blocking token stream buffer.\n * @public\n */\nexport abstract class OutputBuffer<T = unknown> extends Output<T> {\n  abstract override asPart(part: boolean): OutputBuffer<T>;\n\n  abstract readonly index: number;\n\n  abstract withIndex(index: number): OutputBuffer<T>;\n\n  abstract readonly limit: number;\n\n  abstract withLimit(limit: number): OutputBuffer<T>;\n\n  abstract readonly capacity: number;\n\n  abstract readonly remaining: number;\n\n  abstract has(index: number): boolean;\n\n  abstract get(index: number): number;\n\n  abstract set(index: number, token: number): void;\n\n  abstract override write(token: number): OutputBuffer<T>;\n  abstract override write(string: string): OutputBuffer<T>;\n\n  override writeln(string?: string): OutputBuffer<T> {\n    if (typeof string === \"string\") {\n      this.write(string);\n    }\n    return this.write(this.settings.lineSeparator);\n  }\n\n  abstract step(offset?: number): OutputBuffer<T>;\n\n  override flush(): OutputBuffer<T> {\n    return this;\n  }\n\n  abstract override withSettings(settings: OutputSettingsLike): Output<T>;\n\n  override clone(): OutputBuffer<T> {\n    throw new Error();\n  }\n\n  /**\n   * Returns an `OutputBuffer` in the _full_ state.\n   */\n  @Lazy\n  static override full(): OutputBuffer<never> {\n    return new OutputBufferFull(OutputSettings.standard());\n  }\n\n  /**\n   * Returns an `OutputBuffer` in the _done_ state.\n   */\n  @Lazy\n  static override done(): OutputBuffer<never> {\n    return new OutputBufferDone(OutputSettings.standard());\n  }\n\n  /**\n   * Returns an `OutputBuffer` in the _error_ state that traps the given `error`.\n   */\n  static override error(error: Error): OutputBuffer<never> {\n    return new OutputBufferError(error, OutputSettings.standard());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {OutputBuffer} from \"./OutputBuffer\";\nimport {OutputBufferDone} from \"../\"; // forward import\nimport {OutputBufferError} from \"../\"; // forward import\n\n/** @internal */\nexport class OutputBufferFull extends OutputBuffer<never> {\n  constructor(settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return true;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return true;\n  }\n\n  override asPart(part: boolean): OutputBuffer<never> {\n    return part ? this : new OutputBufferDone(this.settings);\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): OutputBuffer<never> {\n    if (index === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid index\"), this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): OutputBuffer<never> {\n    if (limit === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid limit\"), this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new OutputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new OutputException();\n  }\n\n  override write(token: number): OutputBuffer<never>;\n  override write(string: string): OutputBuffer<never>;\n  override write(tokenOrString: number | string): OutputBuffer<never> {\n    return new OutputBufferError(new OutputException(\"full\"), this.settings);\n  }\n\n  override writeln(string?: string): OutputBuffer<never> {\n    return new OutputBufferError(new OutputException(\"full\"), this.settings);\n  }\n\n  override step(offset: number = 1): OutputBuffer<never> {\n    if (offset === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid step\"), this.settings);\n    }\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): OutputBuffer<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputBufferFull(settings);\n  }\n\n  override clone(): OutputBuffer<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {OutputBuffer} from \"./OutputBuffer\";\nimport {OutputBufferFull} from \"../\"; // forward import\nimport {OutputBufferError} from \"../\"; // forward import\n\n/** @internal */\nexport class OutputBufferDone extends OutputBuffer<never> {\n  constructor(settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): OutputBuffer<never> {\n    return part ? new OutputBufferFull(this.settings) : this;\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): OutputBuffer<never> {\n    if (index === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid index\"), this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): OutputBuffer<never> {\n    if (limit === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid limit\"), this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new OutputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new OutputException();\n  }\n\n  override write(token: number): OutputBuffer<never>;\n  override write(string: string): OutputBuffer<never>;\n  override write(tokenOrString: number | string): OutputBuffer<never> {\n    return new OutputBufferError(new OutputException(\"done\"), this.settings);\n  }\n\n  override writeln(string?: string): OutputBuffer<never> {\n    return new OutputBufferError(new OutputException(\"done\"), this.settings);\n  }\n\n  override step(offset: number = 1): OutputBuffer<never> {\n    if (offset === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid step\"), this.settings);\n    }\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): OutputBuffer<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputBufferDone(settings);\n  }\n\n  override clone(): OutputBuffer<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {OutputException} from \"./OutputException\";\nimport type {OutputSettingsLike} from \"./OutputSettings\";\nimport {OutputSettings} from \"./OutputSettings\";\nimport {OutputBuffer} from \"./OutputBuffer\";\n\n/** @internal */\nexport class OutputBufferError extends OutputBuffer<never> {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error, settings: OutputSettings) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"settings\", {\n      value: settings,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): OutputBuffer<never> {\n    return this;\n  }\n\n  override get index(): number {\n    return 0;\n  }\n\n  override withIndex(index: number): OutputBuffer<never> {\n    if (index === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid index\"), this.settings);\n    }\n  }\n\n  override get limit(): number {\n    return 0;\n  }\n\n  override withLimit(limit: number): OutputBuffer<never> {\n    if (limit === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid limit\"), this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return 0;\n  }\n\n  override get remaining(): number {\n    return 0;\n  }\n\n  override has(index: number): boolean {\n    return false;\n  }\n\n  override get(index: number): number {\n    throw new OutputException();\n  }\n\n  override set(index: number, token: number): void {\n    throw new OutputException();\n  }\n\n  override write(token: number): OutputBuffer<never>;\n  override write(string: string): OutputBuffer<never>;\n  override write(tokenOrString: number | string): OutputBuffer<never> {\n    return this;\n  }\n\n  override writeln(string?: string): OutputBuffer<never> {\n    return this;\n  }\n\n  override step(offset: number = 1): OutputBuffer<never> {\n    if (offset === 0) {\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid step\"), this.settings);\n    }\n  }\n\n  override bind(): never {\n    throw new OutputException();\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): OutputBuffer<never> {\n    settings = OutputSettings.fromLike(settings);\n    return new OutputBufferError(this.error, settings);\n  }\n\n  override clone(): OutputBuffer<never> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"../source/Diagnostic\";\n\n/**\n * Thrown when a [[Parser]] parses invalid syntax.\n * @public\n */\nexport class ParserException extends Error {\n  constructor(message?: Diagnostic | string) {\n    super(message instanceof Diagnostic ? message.message : message);\n    Object.setPrototypeOf(this, ParserException.prototype);\n    this.diagnostic = message instanceof Diagnostic ? message : null;\n  }\n\n  readonly diagnostic: Diagnostic | null;\n\n  override toString(): string {\n    if (this.diagnostic !== null) {\n      return this.diagnostic.toString();\n    } else {\n      return super.toString();\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Diagnostic} from \"../source/Diagnostic\";\nimport type {Input} from \"../input/Input\";\nimport {ParserException} from \"./ParserException\";\nimport {ParserDone} from \"../\"; // forward import\nimport {ParserError} from \"../\"; // forward import\n\n/**\n * Continuation of how to parse subsequent [[Input]] tokens from a stream.\n * `Parser` enables efficient, interruptible parsing of network protocols and\n * data formats, without intermediate buffering.\n *\n * ### Input tokens\n * A `Parser` reads tokens from an `Input` reader. Input tokens are modeled as\n * primitive numbers, commonly representing Unicode code points, or raw octets.\n * Each `Parser` implementation specifies the semantic type of input tokens it\n * consumes.\n *\n * ### Parser states\n * A `Parser` is always in one of three states: _cont_​inue, _done_, or _error_.\n * The _cont_ state indicates that [[feed]] is ready to consume `Input`; the\n * _done_ state indicates that parsing terminated successfully, and that\n * [[bind]] will return the parsed result; the _error_ state indicates that\n * parsing terminated in failure, and that [[trap]] will return the parse error.\n * `Parser` subclasses default to the _cont_ state.\n *\n * ### Feeding input\n * The [[feed]] method incrementally parses as much `Input` as it can, before\n * returning another `Parser` that represents the continuation of how to parse\n * additional `Input`. The `Input` passed to `feed` is only guaranteed to be\n * valid for the duration of the method call; references to the provided `Input`\n * instance must not be stored.\n *\n * ### Parser results\n * A `Parser` produces a parsed result of type `O`, obtained via the [[bind]]\n * method. `bind` is only guaranteed to return a result when in the _done_\n * state; though `bind` may optionally make available partial results in other\n * states. A failed `Parser` provides a parse error via the [[trap]] method.\n * `trap` is only guaranteed to return an error when in the _error_ state.\n *\n * ### Continuations\n * A `Parser` instance represents a continuation of how to parse remaining\n * `Input`. Rather than parsing a complete input in one go, a `Parser` takes\n * an `Input` chunk and returns another `Parser` instance that knows how to\n * parse subsequent `Input` chunks. This enables non-blocking, incremental\n * parsing that can be interrupted whenever an `Input` reader runs out of\n * immediately available data. A `Parser` terminates by returning a\n * continuation in either the _done_ state, or the _error_ state.\n * [[Parser.done]] returns a `Parser` in the _done_ state. [[Parser.error]]\n * returns a `Parser` in the _error_ state.\n *\n * ### Iteratees\n * `Parser` is an [Iteratee](https://en.wikipedia.org/wiki/Iteratee). Though\n * unlike strictly functional iteratees, a `Parser` statefully iterates over\n * its `Input`, rather than allocating an object for each incremental input\n * continutaion. This internal mutability minimizes garbage collector memory\n * pressure, without violating the functional Iteratee abstraction, provided\n * that `feed` logically takes exclusive ownership of its `Input` when invoked,\n * and logically returns ownership of the `Input` in a state that's consistent\n * with the returned `Parser` continuation.\n *\n * ### Immutability\n * A `Parser` should be immutable. Specifically, an invocation of `feed`\n * should not alter the behavior of future calls to `feed` on the same `Parser`\n * instance. A `Parser` should only mutate its internal state if it's essential\n * to do so, such as for critical path performance reasons.\n *\n * ### Backtracking\n * `feed` can internally [[Input.clone clone]] its `Input`, if it might need to\n * backtrack. Keep in mind that, because `Input` is only valid for the duration\n * of a call to `feed`, input must be internally buffered if it needs to be\n * preserved between `feed` invocations.\n *\n * ### Forking\n * The [[fork]] method passes an out-of-band condition to a `Parser`, yielding\n * a `Parser` continuation whose behavior may be altered by the given condition.\n * For example, an HTML `Parser` might `fork` an inner text parser to directly\n * parse an embedded micro format out of an HTML element, based on some\n * out-of-band schema information. The types of conditions accepted by `fork`,\n * and their intended semantics, are implementation defined.\n *\n * @public\n */\nexport abstract class Parser<O> {\n  /**\n   * Returns `true` when [[feed]] is able to consume `Input`, i.e. this\n   * `Parser` is in the _cont_ state.\n   */\n  isCont(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns `true` when parsing has terminated successfully, and [[bind]] will\n   * return the parsed result, i.e. this `Parser` is in the _done_ state.\n   */\n  isDone(): boolean {\n    return false;\n  }\n\n  /**\n   * Returns `true` when parsing has terminated in failure, and [[trap]] will\n   * return the parse error, i.e. this `Parser` is in the _error_ state.\n   */\n  isError(): boolean {\n    return false;\n  }\n\n  /**\n   * Incrementally parses as much `input` as possible, and returns another\n   * `Parser` that represents the continuation of how to parse additional\n   * `Input`. If `input` enters the _done_ state, `feed` _must_ return a\n   * terminated `Parser`, i.e. a `Parser` in the _done_ state, or in the\n   * _error_ state. The given `input` is only guaranteed to be valid for the\n   * duration of the method call; references to `input` must not be stored.\n   */\n  abstract feed(input: Input): Parser<O>;\n\n  /**\n   * Returns a `Parser` continuation whose behavior may be altered by the\n   * given out-of-band `condition`.\n   */\n  fork(condition: unknown): Parser<O> {\n    return this;\n  }\n\n  /**\n   * Returns the parsed result. Only guaranteed to return a result when in the\n   * _done_ state.\n   *\n   * @throws `Error` if this `Parser` is not in the _done_ state.\n   */\n  bind(): O {\n    throw new ParserException();\n  }\n\n  /**\n   * Returns the parse error. Only guaranteed to return an error when in the\n   * _error_ state.\n   *\n   * @throws `Error` if this `Parser` is not in the _error_ state.\n   */\n  trap(): Error {\n    throw new ParserException();\n  }\n\n  /**\n   * Casts an errored `Parser` to a different output type. A `Parser` in the\n   * _error_ state can have any output type.\n   *\n   * @throws `ParserException` if this `Parser` is not in the _error_ state.\n   */\n  asError<O2>(): Parser<O2> {\n    throw new ParserException();\n  }\n\n  /**\n   * Returns a `Parser` in the _done_ state that binds the given parsed `value`.\n   */\n  static done<O>(value: O): Parser<O> {\n    return new ParserDone(value);\n  }\n\n  /**\n   * Returns a `Parser` in the _error_ state that `trap`s the given parse `error`.\n   */\n  static error<O>(error: Error | Diagnostic): Parser<O> {\n    if (error instanceof Error) {\n      return new ParserError(error);\n    } else {\n      return new ParserError(new ParserException(error));\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Input} from \"../input/Input\";\nimport {Parser} from \"./Parser\";\n\n/** @internal */\nexport class ParserDone<O> extends Parser<O> {\n  /** @internal */\n  readonly value!: O;\n\n  constructor(value: O) {\n    super();\n    Object.defineProperty(this, \"value\", {\n      value: value,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override feed(input: Input): Parser<O> {\n    return this;\n  }\n\n  override bind(): O {\n    return this.value;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Input} from \"../input/Input\";\nimport {Parser} from \"./Parser\";\n\n/** @internal */\nexport class ParserError extends Parser<never> {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override feed(input: Input): Parser<never> {\n    return this;\n  }\n\n  override bind(): never {\n    throw this.error;\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override asError<O2>(): Parser<O2> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"./WriterException\";\nimport {Writer} from \"./Writer\";\n\n/** @internal */\nexport class WriterEnd extends Writer<unknown, never> {\n  constructor() {\n    super();\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override pull(output: Output): Writer<unknown, never> {\n    return this;\n  }\n\n  override bind(): never {\n    throw new WriterException();\n  }\n\n  override asDone<I2>(): Writer<I2, never> {\n    return this;\n  }\n\n  override andThen<O2>(that: Writer<unknown, O2>): Writer<unknown, O2> {\n    return that;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {Writer} from \"./Writer\";\n\n/** @internal */\nexport class WriterDone<O> extends Writer<unknown, O> {\n  /** @internal */\n  readonly value!: O;\n\n  constructor(value: O) {\n    super();\n    Object.defineProperty(this, \"value\", {\n      value: value,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return true;\n  }\n\n  override pull(output: Output): Writer<unknown, O> {\n    return this;\n  }\n\n  override bind(): O {\n    return this.value;\n  }\n\n  override asDone<I2>(): Writer<I2, O> {\n    return this;\n  }\n\n  override andThen<O2>(that: Writer<unknown, O2>): Writer<unknown, O2> {\n    return that;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {Writer} from \"./Writer\";\n\n/** @internal */\nexport class WriterError extends Writer<never, never> {\n  /** @internal */\n  readonly error!: Error;\n\n  constructor(error: Error) {\n    super();\n    Object.defineProperty(this, \"error\", {\n      value: error,\n      enumerable: true,\n    });\n  }\n\n  override isCont(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return true;\n  }\n\n  override pull(output: Output): Writer<never, never> {\n    return this;\n  }\n\n  override bind(): never {\n    throw this.error;\n  }\n\n  override trap(): Error {\n    return this.error;\n  }\n\n  override asError<I2, O2>(): Writer<I2, O2> {\n    return this;\n  }\n\n  override andThen<O2>(that: Writer<never, O2>): Writer<never, O2> {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {Writer} from \"./Writer\";\n\n/** @internal */\nexport class WriterSequence<O> extends Writer<never, O> {\n  /** @internal */\n  readonly head: Writer<unknown, unknown>;\n  /** @internal */\n  readonly tail: Writer<unknown, O>;\n\n  constructor(head: Writer<unknown, unknown>, tail: Writer<unknown, O>) {\n    super();\n    this.head = head;\n    this.tail = tail;\n  }\n\n  override pull(output: Output): Writer<never, O> {\n    let head = this.head;\n    if (head.isCont()) {\n      head = head.pull(output);\n    }\n    if (head.isError()) {\n      return head.asError();\n    } else if (head.isDone()) {\n      return this.tail.pull(output);\n    } else {\n      return new WriterSequence(head, this.tail);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport {OutputSettings} from \"../output/OutputSettings\";\nimport {Output} from \"../output/Output\";\n\n/** @internal */\nexport abstract class ByteOutput<T> extends Output<T> {\n  constructor(array: Uint8Array | null, size: number, settings: OutputSettings) {\n    super();\n    this.array = array;\n    this.size = size;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly array: Uint8Array | null;\n\n  /** @internal */\n  readonly size: number;\n\n  override isCont(): boolean {\n    return true;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<T> {\n    return this;\n  }\n\n  override write(b: number | string): Output<T> {\n    if (typeof b === \"number\") {\n      const n = this.size;\n      const oldArray = this.array;\n      let newArray;\n      if (oldArray === null || n + 1 > oldArray.length) {\n        newArray = new Uint8Array(ByteOutput.expand(n + 1));\n        if (oldArray !== null) {\n          newArray.set(oldArray, 0);\n        }\n        (this as Mutable<this>).array = newArray;\n      } else {\n        newArray = oldArray;\n      }\n      newArray[n] = b;\n      (this as Mutable<this>).size = n + 1;\n      return this;\n    } else {\n      throw new TypeError(\"\" + b);\n    }\n  }\n\n  override writeln(string?: string): Output<T> {\n    throw new TypeError(\"\" + string);\n  }\n\n  toUint8Array(): Uint8Array {\n    const n = this.size;\n    const oldArray = this.array;\n    if (oldArray !== null && n === oldArray.length) {\n      return oldArray;\n    } else {\n      const newArray = new Uint8Array(n);\n      if (oldArray !== null) {\n        newArray.set(oldArray.slice(0, n), 0);\n      }\n      (this as Mutable<this>).array = newArray;\n      return newArray;\n    }\n  }\n\n  cloneArray(): Uint8Array | null {\n    const oldArray = this.array;\n    if (oldArray !== null) {\n      return oldArray.slice(0, this.size);\n    } else {\n      return null;\n    }\n  }\n\n  override readonly settings: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<T> {\n    settings = OutputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  /** @internal */\n  static expand(n: number): number {\n    n = Math.max(32, n) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8; n |= n >> 16;\n    return n + 1;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {OutputSettings} from \"../output/OutputSettings\";\nimport type {Output} from \"../output/Output\";\nimport {ByteOutput} from \"./ByteOutput\";\n\n/** @internal */\nexport class ByteOutputUint8Array extends ByteOutput<Uint8Array> {\n  constructor(array: Uint8Array | null, size: number, settings: OutputSettings) {\n    super(array, size, settings);\n  }\n\n  override bind(): Uint8Array {\n    return this.toUint8Array();\n  }\n\n  override clone(): Output<Uint8Array> {\n    return new ByteOutputUint8Array(this.cloneArray(), this.size, this.settings);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {OutputException} from \"../output/OutputException\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport {OutputSettings} from \"../output/OutputSettings\";\nimport {OutputBuffer} from \"../output/OutputBuffer\";\nimport {OutputBufferError} from \"../output/OutputBufferError\";\n\n/** @internal */\nexport class ByteOutputBuffer extends OutputBuffer<Uint8Array> {\n  constructor(array: Uint8Array, index: number, limit: number,\n              part: boolean, settings: OutputSettings) {\n    super();\n    this.array = array;\n    this.index = index;\n    this.limit = limit;\n    this.part = part;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly array: Uint8Array;\n\n  /** @internal */\n  readonly part: boolean;\n\n  override isCont(): boolean {\n    return this.index < this.limit;\n  }\n\n  override isFull(): boolean {\n    return this.part && this.index >= this.limit;\n  }\n\n  override isDone(): boolean {\n    return !this.part && this.index >= this.limit;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return this.part;\n  }\n\n  override asPart(part: boolean): OutputBuffer<Uint8Array> {\n    (this as Mutable<this>).part = part;\n    return this;\n  }\n\n  readonly index: number;\n\n  override withIndex(index: number): OutputBuffer<Uint8Array> {\n    if (0 <= index && index <= this.limit) {\n      (this as Mutable<this>).index = index;\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid index\"), this.settings);\n    }\n  }\n\n  readonly limit: number;\n\n  override withLimit(limit: number): OutputBuffer<Uint8Array> {\n    if (0 <= limit && limit <= this.array.length) {\n      (this as Mutable<this>).limit = limit;\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid limit\"), this.settings);\n    }\n  }\n\n  override get capacity(): number {\n    return this.array.length;\n  }\n\n  override get remaining(): number {\n    return this.limit - this.index;\n  }\n\n  override has(index: number): boolean {\n    return 0 <= index && index < this.limit;\n  }\n\n  override get(index: number): number {\n    if (0 <= index && index < this.limit) {\n      return this.array[index]!;\n    } else {\n      throw new OutputException();\n    }\n  }\n\n  override set(index: number, token: number): void {\n    if (0 <= index && index < this.limit) {\n      this.array[index] = token;\n    } else {\n      throw new OutputException();\n    }\n  }\n\n  override write(token: number | string): OutputBuffer<Uint8Array> {\n    if (typeof token === \"number\") {\n      const index = this.index;\n      if (index < this.limit) {\n        this.array[index] = token;\n        (this as Mutable<this>).index += 1;\n        return this;\n      } else {\n        return new OutputBufferError(new OutputException(\"full\"), this.settings);\n      }\n    } else {\n      return new OutputBufferError(new OutputException(\"binary output\"), this.settings);\n    }\n  }\n\n  override writeln(string?: string): OutputBuffer<Uint8Array> {\n    return new OutputBufferError(new OutputException(\"binary output\"), this.settings);\n  }\n\n  override step(offset: number): OutputBuffer<Uint8Array> {\n    const index = this.index + offset;\n    if (0 <= index && index <= this.limit) {\n      (this as Mutable<this>).index = index;\n      return this;\n    } else {\n      return new OutputBufferError(new OutputException(\"invalid step\"), this.settings);\n    }\n  }\n\n  override bind(): Uint8Array {\n    return new Uint8Array(this.array.buffer, 0, this.index);\n  }\n\n  override readonly settings: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): OutputBuffer<Uint8Array> {\n    settings = OutputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  override clone(): OutputBuffer<Uint8Array> {\n    return new ByteOutputBuffer(this.array, this.index, this.limit, this.part, this.settings);\n  }\n\n  static create(array: Uint8Array, offset?: number, length?: number): OutputBuffer<Uint8Array> {\n    if (offset === void 0) {\n      offset = 0;\n    }\n    if (length === void 0) {\n      length = array.length;\n    }\n    return new ByteOutputBuffer(array, offset, offset + length, false, OutputSettings.standard());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport {OutputSettings} from \"../output/OutputSettings\";\nimport type {Output} from \"../output/Output\";\nimport type {OutputBuffer} from \"../output/OutputBuffer\";\nimport {ByteOutputBuffer} from \"./ByteOutputBuffer\";\nimport {ByteOutputUint8Array} from \"./ByteOutputUint8Array\";\n\n/**\n * Byte [[Input]]/[[Output]] factory.\n *\n * The `Binary.outputBuffer(...)` function returns an `Output` that writes\n * bytes to a growable array, and [[Output.bind binds]] a `Uint8Array`\n * containing all written bytes.\n * @public\n */\nexport const Binary = (function () {\n  const Binary = {} as {\n    /**\n     * Returns a new `Output` that appends bytes to a growable array,\n     * pre-allocated with space for `initialCapacity` bytes, if `initialCapacity`\n     * is defined, using the given `settings`, if `settings` is defined. The\n     * returned `Output` accepts an unbounded number of bytes, remaining\n     * permanently in the _cont_ state, and can [[Output.bind bind]] a\n     * `Uint8Array` with the current output state at any time.\n     */\n    output(initialCapacity?: number, settings?: OutputSettingsLike): Output<Uint8Array>;\n\n    /**\n     * Returns a new `Output` that appends bytes to a growable array, using the\n     * given `settings`. The returned `Output` accepts an unbounded number of\n     * bytes, remaining permanently in the _cont_ state, and can [[Output.bind\n     * bind]] a `Uint8Array` array with the current output state at any time.\n     */\n    output(settings: OutputSettingsLike): Output<Uint8Array>;\n\n    outputBuffer(array: Uint8Array, offset?: number, length?: number): OutputBuffer<Uint8Array>;\n  };\n\n  Binary.output = function (initialCapacity?: number | OutputSettingsLike,\n                            settings?: OutputSettingsLike): Output<Uint8Array> {\n    if (settings === void 0 && typeof initialCapacity !== \"number\") {\n      settings = initialCapacity;\n      initialCapacity = void 0;\n    } else if (typeof initialCapacity !== \"number\") {\n      initialCapacity = void 0;\n    }\n    let array: Uint8Array | null;\n    if (typeof initialCapacity === \"number\") {\n      array = new Uint8Array(initialCapacity);\n    } else {\n      array = null;\n    }\n    settings = OutputSettings.fromLike(settings);\n    return new ByteOutputUint8Array(array, 0, settings);\n  };\n\n  Binary.outputBuffer = function (array: Uint8Array, offset?: number,\n                                  length?: number): OutputBuffer<Uint8Array> {\n    return ByteOutputBuffer.create(array, offset, length);\n  };\n\n  return Binary;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport type {Debug} from \"../format/Debug\";\nimport {Format} from \"../format/Format\";\nimport {UtfErrorModeFatal} from \"../\"; // forward import\nimport {UtfErrorModeReplacement} from \"../\"; // forward import\n\n/**\n * Unicode transformation format error handling mode.\n * @public\n */\nexport abstract class UtfErrorMode implements HashCode, Debug {\n  /**\n   * Returns `true` if a Unicode decoding should abort with an error when an\n   * invalid code unit sequence is encountered.\n   */\n  isFatal(): boolean {\n    return false;\n  }\n\n  /**\n   * Returns `true` if a Unicode decoding should substitute invalid code unit\n   * sequences with a replacement character.\n   */\n  isReplacement(): boolean {\n    return false;\n  }\n\n  /**\n   * The Unicode code point of the replacement character used to substitute\n   * for invalid code unit sequences.\n   */\n  abstract readonly replacementChar: number;\n\n  /**\n   * Returns `true` if Unicode decoding should abort with an error when a\n   * `NUL` byte is encountered.\n   */\n  abstract isNonZero(): boolean;\n\n  /**\n   * Returns a `UtfErrorMode` that, if `isNonZero` is `true`, aborts when\n   * Unicode decoding encounters a `NUL` byte.\n   */\n  abstract asNonZero(isNonZero: boolean): UtfErrorMode;\n\n  abstract equals(that: unknown): boolean;\n\n  abstract hashCode(): number;\n\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  /**\n   * Returns a `UtfErrorMode` that aborts Unicode decoding with an error when\n   * invalid code unit sequences are encountered.\n   */\n  @Lazy\n  static fatal(): UtfErrorMode {\n    return new UtfErrorModeFatal(false);\n  }\n\n  /**\n   * Returns a `UtfErrorMode` that aborts Unicode decoding with an error when\n   * invalid code unit sequences, and `NUL` bytes, are encountered.\n   */\n  @Lazy\n  static fatalNonZero(): UtfErrorMode {\n    return new UtfErrorModeFatal(true);\n  }\n\n  /**\n   * Returns a `UtfErrorMode` that substitutes invalid code unit sequences\n   * with the replacement character (`U+FFFD`).\n   */\n  @Lazy\n  static replacement(): UtfErrorMode {\n    return new UtfErrorModeReplacement(0xfffd, false);\n  }\n\n  /**\n   * Returns a `UtfErrorMode` that substitutes invalid code unit sequences\n   * with the replacement character (`U+FFFD`), and aborts decoding with an\n   * error when `NUL` bytes are encountered.\n   */\n  @Lazy\n  static replacementNonZero(): UtfErrorMode {\n    return new UtfErrorModeReplacement(0xfffd, true);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Booleans} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport {UtfErrorMode} from \"./UtfErrorMode\";\n\n/** @internal */\nexport class UtfErrorModeFatal extends UtfErrorMode {\n  constructor(nonZero: boolean) {\n    super();\n    Object.defineProperty(this, \"nonZero\", {\n      value: nonZero,\n      enumerable: true,\n    });\n  }\n\n  override isFatal(): boolean {\n    return true;\n  }\n\n  override get replacementChar(): number {\n    return 0xfffd;\n  }\n\n  /** @internal */\n  readonly nonZero!: boolean;\n\n  override isNonZero(): boolean {\n    return this.nonZero;\n  }\n\n  override asNonZero(nonZero: boolean): UtfErrorMode {\n    if (nonZero) {\n      return UtfErrorMode.fatalNonZero();\n    } else {\n      return UtfErrorMode.fatal();\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UtfErrorModeFatal) {\n      return this.nonZero === that.nonZero;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(UtfErrorModeFatal),\n        Booleans.hash(this.nonZero)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UtfErrorMode\").write(46/*'.'*/)\n                   .write(this.nonZero ? \"fatalNonZero\" : \"fatal\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Booleans} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport {UtfErrorMode} from \"./UtfErrorMode\";\n\n/** @internal */\nexport class UtfErrorModeReplacement extends UtfErrorMode {\n  constructor(replacementChar: number, nonZero: boolean) {\n    super();\n    Object.defineProperty(this, \"replacementChar\", {\n      value: replacementChar,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"nonZero\", {\n      value: nonZero,\n      enumerable: true,\n    });\n  }\n\n  override isReplacement(): boolean {\n    return true;\n  }\n\n  override readonly replacementChar!: number;\n\n  /** @internal */\n  readonly nonZero!: boolean;\n\n  override isNonZero(): boolean {\n    return this.nonZero;\n  }\n\n  override asNonZero(nonZero: boolean): UtfErrorMode {\n    if (this.replacementChar === 0xfffd) {\n      if (nonZero) {\n        return UtfErrorMode.replacementNonZero();\n      } else {\n        return UtfErrorMode.replacement();\n      }\n    } else {\n      return new UtfErrorModeReplacement(this.replacementChar, nonZero);\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UtfErrorModeReplacement) {\n      return this.replacementChar === that.replacementChar\n          && this.nonZero === that.nonZero;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(UtfErrorModeReplacement),\n        Numbers.hash(this.replacementChar)), Booleans.hash(this.nonZero)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UtfErrorMode\").write(46/*'.'*/)\n                   .write(this.nonZero ? \"replacementNonZero\" : \"replacement\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Input} from \"../input/Input\";\nimport type {Output} from \"../output/Output\";\nimport type {Parser} from \"../parser/Parser\";\nimport type {Writer} from \"../writer/Writer\";\nimport {Format} from \"../format/Format\";\nimport {Binary} from \"../binary/Binary\";\nimport {Unicode} from \"../unicode/Unicode\";\nimport {Base16Parser} from \"../\"; // forward import\nimport {Base16Writer} from \"../\"; // forward import\nimport {Base16IntegerWriter} from \"../\"; // forward import\n\n/**\n * Base-16 (hexadecimal) encoding [[Parser]]/[[Writer]] factory.\n * @public\n */\nexport class Base16 {\n  constructor(alphabet: string) {\n    Object.defineProperty(this, \"alphabet\", {\n      value: alphabet,\n      enumerable: true,\n    });\n  }\n\n  /**\n   * Returns a 16 character string, where the character at index `i` is the\n   * encoding of the base-16 digit `i`.\n   */\n  readonly alphabet!: string;\n\n  /**\n   * Returns the Unicode code point of the base-16 digit that encodes the given\n   * 4-bit quantity.\n   */\n  encodeDigit(b: number): number {\n    return this.alphabet.charCodeAt(b);\n  }\n\n  /**\n   * Returns a `Writer` that, when fed an input `Uint8Array`, returns a\n   * continuation that writes the base-16 (hexadecimal) encoding of the input\n   * byte array.\n   */\n  uint8ArrayWriter(): Writer<Uint8Array, unknown>;\n  /**\n   * Returns a `Writer` continuation that writes the base-16 (hexadecimal)\n   * encoding of the `input` `Uint8Array`.\n   */\n  uint8ArrayWriter(input: Uint8Array): Writer<unknown, Uint8Array>;\n  uint8ArrayWriter(input?: Uint8Array): Writer<unknown, unknown> {\n    if (input === void 0) {\n      return new Base16Writer(this, void 0, null);\n    } else {\n      return new Base16Writer(this, input, input);\n    }\n  }\n\n  /**\n   * Writes the base-16 (hexadecimal) encoding of the `input` `Uint8Array` to\n   * the `output`, returning a `Writer` continuation that knows how to write any\n   * remaining output that couldn't be immediately generated.\n   */\n  writeUint8Array(output: Output, input: Uint8Array): Writer<unknown, unknown> {\n    return Base16Writer.write(output, this, void 0, input);\n  }\n\n  writeInteger(output: Output, input: number, width: number = 0): Writer<unknown, unknown> {\n    return Base16IntegerWriter.write(output, this, void 0, input, width);\n  }\n\n  writeIntegerLiteral(output: Output, input: number, width: number = 0): Writer<unknown, unknown> {\n    return Base16IntegerWriter.writeLiteral(output, this, void 0, input, width);\n  }\n\n  /**\n   * Returns the `Base16` encoding with lowercase alphanumeric digits.\n   */\n  @Lazy\n  static get lowercase(): Base16 {\n    return new Base16(\"0123456789abcdef\");\n  }\n\n  /**\n   * Returns the `Base16` encoding with uppercase alphanumeric digits.\n   */\n  @Lazy\n  static get uppercase(): Base16 {\n    return new Base16(\"0123456789ABCDEF\");\n  }\n\n  /**\n   * Returns `true` if the Unicode code point `c` is a valid base-16 digit.\n   */\n  static isDigit(c: number): boolean {\n    return c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 70/*'F'*/\n        || c >= 97/*'a'*/ && c <= 102/*'f'*/;\n  }\n\n  /**\n   * Returns the 4-bit quantity represented by the base-16 digit `c`.\n   *\n   * @throws `Error` if `c` is not a valid base-16 digit.\n   */\n  static decodeDigit(c: number): number {\n    if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n      return c - 48/*'0'*/;\n    } else if (c >= 65/*'A'*/ && c <= 70/*'F'*/) {\n      return 10 + (c - 65/*'A'*/);\n    } else if (c >= 97/*'a'*/ && c <= 102/*'f'*/) {\n      return 10 + (c - 97/*'a'*/);\n    } else {\n      let message = Unicode.stringOutput();\n      message = message.write(\"Invalid base-16 digit: \");\n      message = Format.debugChar(message, c);\n      throw new Error(message.bind());\n    }\n  }\n\n  /**\n   * Decodes the base-16 digits `c1` and `c2`, and writes the 8-bit  quantity\n   * they represent to the given `output`.\n   *\n   * @returns the continuation of the `output`.\n   */\n  static writeQuantum<T>(output: Output<T>, c1: number, c2: number): Output<T> {\n    const x = Base16.decodeDigit(c1);\n    const y = Base16.decodeDigit(c2);\n    output = output.write(x << 4 | y);\n    return output;\n  }\n\n  /**\n   * Returns a `Parser` that decodes base-16 (hexadecimal) encoded input, and\n   * writes the decoded bytes to `output`.\n   */\n  static parser<O>(output: Output<O>): Parser<O> {\n    return new Base16Parser<O>(output);\n  }\n\n  /**\n   * Parses the base-16 (hexadecimal) encoded `input`, and writes the decoded\n   * bytes to `output`, returning a `Parser` continuation that knows how to\n   * parse any additional input.\n   */\n  static parse<O>(input: Input, output: Output<O>): Parser<O> {\n    return Base16Parser.parse(input, output);\n  }\n\n  /**\n   * Parses the base-16 (hexadecimal) encoded `input`, and writes the decoded\n   * bytes to a growable array, returning a `Parser` continuation that knows\n   * how to parse any additional input. The returned `Parser` [[Parser.bind\n   * binds]] a `Uint8Array` array containing all parsed base-16 data.\n   */\n  static parseUint8Array(input: Input): Parser<Uint8Array> {\n    return Base16Parser.parse(input, Binary.output());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {OutputException} from \"../output/OutputException\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport type {OutputSettings} from \"../output/OutputSettings\";\nimport {Output} from \"../output/Output\";\nimport {Unicode} from \"./Unicode\";\nimport {UtfErrorMode} from \"./UtfErrorMode\";\nimport {Base16} from \"../number/Base16\";\n\n/** @internal */\nexport class Utf8DecodedOutput<T> extends Output<T> {\n  /** @internal */\n  readonly output: Output<T>;\n  /** @internal */\n  readonly errorMode: UtfErrorMode;\n  /** @internal */\n  c1: number;\n  /** @internal */\n  c2: number;\n  /** @internal */\n  c3: number;\n  /** @internal */\n  have: number;\n\n  constructor(output: Output<T>, errorMode: UtfErrorMode,\n              c1: number, c2: number, c3: number, have: number) {\n    super();\n    this.output = output;\n    this.errorMode = errorMode;\n    this.c1 = c1;\n    this.c2 = c2;\n    this.c3 = c3;\n    this.have = have;\n  }\n\n  override isCont(): boolean {\n    return this.output.isCont();\n  }\n\n  override isFull(): boolean {\n    return this.output.isFull();\n  }\n\n  override isDone(): boolean {\n    return this.output.isDone();\n  }\n\n  override isError(): boolean {\n    return this.output.isError();\n  }\n\n  override isPart(): boolean {\n    return this.output.isPart();\n  }\n\n  override asPart(part: boolean): Output<T> {\n    (this as Mutable<this>).output = this.output.asPart(part);\n    return this;\n  }\n\n  override write(token: number | string): Output<T> {\n    if (typeof token === \"number\") {\n      let c1 = this.c1;\n      let c2 = this.c2;\n      let c3 = this.c3;\n      let c4 = -1;\n      let have = this.have;\n\n      if (token >= 0) {\n        switch (have) {\n          case 0:\n            c1 = token & 0xff;\n            have = 1;\n            break;\n          case 1:\n            c2 = token & 0xff;\n            have = 2;\n            break;\n          case 2:\n            c3 = token & 0xff;\n            have = 3;\n            break;\n          case 3:\n            c4 = token & 0xff;\n            have = 4;\n            break;\n          default:\n            throw new Error(\"unreachable\");\n        }\n      }\n\n      if (c1 === 0 && this.errorMode.isNonZero()) { // invalid NUL byte\n        return Output.error(new OutputException(\"unexpected NUL byte\"));\n      } else if (c1 >= 0 && c1 <= 0x7f) { // U+0000..U+007F\n        (this as Mutable<this>).output = this.output.write(c1);\n        this.have = 0;\n      } else if (c1 >= 0xc2 && c1 <= 0xf4) {\n        if (c1 >= 0xc2 && c1 <= 0xdf && c2 >= 0x80 && c2 <= 0xbf) { // U+0080..U+07FF\n          (this as Mutable<this>).output = this.output.write((c1 & 0x1f) << 6 | c2 & 0x3f);\n          this.c1 = -1;\n          this.have = 0;\n        } else if (c1 === 0xe0 && c2 >= 0xa0 && c2 <= 0xbf // U+0800..U+0FFF\n                || c1 >= 0xe1 && c1 <= 0xec && c2 >= 0x80 && c2 <= 0xbf // U+1000..U+CFFF\n                || c1 === 0xed && c2 >= 0x80 && c2 <= 0x9f // U+D000..U+D7FF\n                || c1 >= 0xee && c1 <= 0xef && c2 >= 0x80 && c2 <= 0xbf) { // U+E000..U+FFFF\n          if (c3 >= 0x80 && c3 <= 0xbf) {\n            (this as Mutable<this>).output = this.output.write((c1 & 0x0f) << 12 | (c2 & 0x3f) << 6 | c3 & 0x3f);\n            this.c1 = -1;\n            this.c2 = -1;\n            this.have = 0;\n          } else if (c3 >= 0) { // invalid c3\n            if (this.errorMode.isFatal()) {\n              return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));\n            }\n            (this as Mutable<this>).output = this.output.write(this.errorMode.replacementChar);\n            this.c1 = c3;\n            this.c2 = -1;\n            this.have = 1;\n          } else if (token < 0 || this.output.isDone()) { // incomplete c3\n            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));\n          } else { // awaiting c3\n            this.c2 = c2;\n            this.have = 2;\n          }\n        } else if (c1 === 0xf0 && c2 >= 0x90 && c2 <= 0xbf // U+10000..U+3FFFF\n                || c1 >= 0xf1 && c1 <= 0xf3 && c2 >= 0x80 && c2 <= 0xbf // U+40000..U+FFFFF\n                || c1 === 0xf4 && c2 >= 0x80 && c2 <= 0x8f) { // U+100000..U+10FFFF\n          if (c3 >= 0x80 && c3 <= 0xbf) {\n            if (c4 >= 0x80 && c4 <= 0xbf) {\n              this.have = 4;\n              (this as Mutable<this>).output = this.output.write((c1 & 0x07) << 18 | (c2 & 0x3f) << 12 | (c3 & 0x3f) << 6 | c4 & 0x3f);\n              this.c1 = -1;\n              this.c2 = -1;\n              this.c3 = -1;\n              this.have = 0;\n            } else if (c4 >= 0) { // invalid c4\n              if (this.errorMode.isFatal()) {\n                return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3, c4)));\n              }\n              (this as Mutable<this>).output = this.output.write(this.errorMode.replacementChar);\n              this.c1 = c4;\n              this.c2 = -1;\n              this.c3 = -1;\n              this.have = 1;\n            } else if (token < 0 || this.output.isDone()) { // incomplete c4\n              return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));\n            } else { // awaiting c4\n              this.c3 = c3;\n              this.have = 3;\n            }\n          } else if (c3 >= 0) { // invalid c3\n            if (this.errorMode.isFatal()) {\n              return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2, c3)));\n            }\n            (this as Mutable<this>).output = this.output.write(this.errorMode.replacementChar);\n            this.c1 = c3;\n            this.c2 = -1;\n            this.have = 1;\n          } else if (token < 0 || this.output.isDone()) { // incomplete c3\n            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));\n          } else { // awaiting c3\n            this.c2 = c2;\n            this.have = 2;\n          }\n        } else if (c2 >= 0) { // invalid c2\n          if (this.errorMode.isFatal()) {\n            return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1, c2)));\n          }\n          (this as Mutable<this>).output = this.output.write(this.errorMode.replacementChar);\n          this.c1 = c2;\n          this.have = 1;\n        } else if (token < 0 || this.output.isDone()) { // incomplete c2\n          return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));\n        } else { // awaiting c2\n          this.c1 = c1;\n          this.have = 1;\n        }\n      } else if (c1 >= 0) { // invalid c1\n        if (this.errorMode.isFatal()) {\n          return Output.error(new OutputException(Utf8DecodedOutput.invalid(c1)));\n        }\n        (this as Mutable<this>).output = this.output.write(this.errorMode.replacementChar);\n        this.have = 0;\n      }\n      if (this.output.isError()) {\n        return this.output;\n      }\n      return this;\n    } else if (typeof token === \"string\") {\n      (this as Mutable<this>).output = this.output.write(token);\n      return this;\n    } else {\n      throw new TypeError(\"\" + token);\n    }\n  }\n\n  private static invalid(c1: number, c2?: number, c3?: number, c4?: number): string {\n    let output = Unicode.stringOutput();\n    output = output.write(\"invalid UTF-8 code unit sequence: \");\n    const base16 = Base16.uppercase;\n    base16.writeIntegerLiteral(output, c1, 2);\n    if (c2 !== void 0) {\n      output = output.write(' ');\n      base16.writeIntegerLiteral(output, c2, 2);\n      if (c3 !== void 0) {\n        output = output.write(' ');\n        base16.writeIntegerLiteral(output, c3, 2);\n        if (c4 !== void 0) {\n          output = output.write(' ');\n          base16.writeIntegerLiteral(output, c4, 2);\n        }\n      }\n    }\n    return output.bind();\n  }\n\n  override get settings(): OutputSettings {\n    return this.output.settings;\n  }\n\n  override withSettings(settings: OutputSettingsLike): Output<T> {\n    (this as Mutable<this>).output = this.output.withSettings(settings);\n    return this;\n  }\n\n  override bind(): T {\n    if (this.have === 0) {\n      return this.output.bind();\n    } else {\n      return this.write(-1).bind();\n    }\n  }\n\n  override trap(): Error {\n    return this.output.trap();\n  }\n\n  override clone(): Output<T> {\n    return new Utf8DecodedOutput(this.output.clone(), this.errorMode,\n                                 this.c1, this.c2, this.c3, this.have);\n  }\n\n  static create<T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T> {\n    if (errorMode === void 0) {\n      errorMode = UtfErrorMode.fatal();\n    }\n    return new Utf8DecodedOutput(output, errorMode, -1, -1, -1, 0);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {OutputException} from \"../output/OutputException\";\nimport type {OutputSettingsLike} from \"../output/OutputSettings\";\nimport type {OutputSettings} from \"../output/OutputSettings\";\nimport {Output} from \"../output/Output\";\nimport {UtfErrorMode} from \"./UtfErrorMode\";\n\n/** @internal */\nexport class Utf8EncodedOutput<T> extends Output<T> {\n  /** @internal */\n  readonly output: Output<T>;\n  /** @internal */\n  readonly errorMode: UtfErrorMode;\n  /** @internal */\n  c2: number;\n  /** @internal */\n  c3: number;\n  /** @internal */\n  c4: number;\n  /** @internal */\n  index: number;\n\n  constructor(output: Output<T>, errorMode: UtfErrorMode, c2: number,\n              c3: number, c4: number, index: number) {\n    super();\n    this.output = output;\n    this.errorMode = errorMode;\n    this.c2 = c2;\n    this.c3 = c3;\n    this.c4 = c4;\n    this.index = index;\n  }\n\n  override isCont(): boolean {\n    return this.output.isCont();\n  }\n\n  override isFull(): boolean {\n    return this.output.isFull();\n  }\n\n  override isDone(): boolean {\n    return this.output.isDone();\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return this.output.isPart();\n  }\n\n  override asPart(part: boolean): Output<T> {\n    (this as Mutable<this>).output = this.output.asPart(part);\n    return this;\n  }\n\n  override write(token: number | string): Output<T> {\n    if (typeof token === \"number\") {\n      let c1 = 0;\n      let c2 = this.c2;\n      let c3 = this.c3;\n      let c4 = this.c4;\n      let output = this.output;\n      let index = this.index;\n      while (index < 4) {\n        if (output.isCont()) {\n          switch (index) {\n            case 1: output = output.write(c2); this.c2 = 0; break;\n            case 2: output = output.write(c3); this.c3 = 0; break;\n            case 3: output = output.write(c4); this.c4 = 0; break;\n            default: throw new Error(\"unreachable\");\n          }\n          index += 1;\n        } else {\n          return Output.error(new OutputException(\"unable to flush buffered code units\"));\n        }\n      }\n      if (token >= 0 && token <= 0x7f) { // U+0000..U+007F\n        c4 = token;\n        index = 3;\n      } else if (token >= 0x80 && token <= 0x7ff) { // U+0080..U+07FF\n        c3 = 0xc0 | (token >>> 6);\n        c4 = 0x80 | (token & 0x3f);\n        index = 2;\n      } else if (token >= 0x0800 && token <= 0xffff || // U+0800..U+D7FF\n                 token >= 0xe000 && token <= 0xffff) { // U+E000..U+FFFF\n        c2 = 0xe0 | (token  >>> 12);\n        c3 = 0x80 | ((token >>>  6) & 0x3f);\n        c4 = 0x80 | (token & 0x3f);\n        index = 1;\n      } else if (token >= 0x10000 && token <= 0x10ffff) { // U+10000..U+10FFFF\n        c1 = 0xf0 | (token  >>> 18);\n        c2 = 0x80 | ((token >>> 12) & 0x3f);\n        c3 = 0x80 | ((token >>>  6) & 0x3f);\n        c4 = 0x80 | (token & 0x3f);\n        index = 0;\n      } else { // surrogate or invalid code point\n        if (this.errorMode.isFatal()) {\n          return Output.error(new OutputException(\"invalid code point: \" + token));\n        } else {\n          return this.write(this.errorMode.replacementChar);\n        }\n      }\n      do {\n        switch (index) {\n          case 0: output = output.write(c1); break;\n          case 1: output = output.write(c2); this.c2 = 0; break;\n          case 2: output = output.write(c3); this.c3 = 0; break;\n          case 3: output = output.write(c4); this.c4 = 0; break;\n          default: throw new Error(\"unreachable\");\n        }\n        (this as Mutable<this>).output = output;\n        index += 1;\n      } while (index < 4 && output.isCont());\n      if (index < 4) {\n        if (index < 3) {\n          if (index < 2) {\n            this.c2 = c2;\n          }\n          this.c3 = c3;\n        }\n        this.c4 = c4;\n      }\n      (this as Mutable<this>).output = output;\n      this.index = index;\n      return this;\n    } else if (typeof token === \"string\") {\n      (this as Mutable<this>).output = this.output.write(token);\n      return this;\n    } else {\n      throw new TypeError(\"\" + token);\n    }\n  }\n\n  override flush(): Output<T> {\n    let output = this.output;\n    let index = this.index;\n    while (index < 4) {\n      if (output.isCont()) {\n        switch (index) {\n          case 1: output = output.write(this.c2); this.c2 = 0; break;\n          case 2: output = output.write(this.c3); this.c3 = 0; break;\n          case 3: output = output.write(this.c4); this.c4 = 0; break;\n          default: throw new Error(\"unreachable\");\n        }\n        index += 1;\n      } else {\n        return Output.error(new OutputException(\"unable to flush buffered code units\"));\n      }\n    }\n    (this as Mutable<this>).output = output;\n    this.index = index;\n    return this;\n  }\n\n  override get settings(): OutputSettings {\n    return this.output.settings;\n  }\n\n  override withSettings(settings: OutputSettingsLike): Output<T> {\n    (this as Mutable<this>).output = this.output.withSettings(settings);\n    return this;\n  }\n\n  override bind(): T {\n    return this.output.bind();\n  }\n\n  override clone(): Output<T> {\n    return new Utf8EncodedOutput(this.output.clone(), this.errorMode,\n                                 this.c2, this.c3, this.c4, this.index);\n  }\n\n  static create<T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T> {\n    if (errorMode === void 0) {\n      errorMode = UtfErrorMode.fatal();\n    }\n    return new Utf8EncodedOutput(output, errorMode, 0, 0, 0, 4);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"../output/Output\";\nimport {Unicode} from \"./Unicode\";\nimport type {UtfErrorMode} from \"./UtfErrorMode\";\nimport {Utf8DecodedOutput} from \"./Utf8DecodedOutput\";\nimport {Utf8EncodedOutput} from \"./Utf8EncodedOutput\";\n\n/**\n * UTF-8 [[Input]]/[[Output]] factory.\n * @public\n */\nexport const Utf8 = (function () {\n  const Utf8 = {} as {\n    /**\n     * Returns the number of bytes in the UTF-8 encoding of the Unicode code\n     * point `c`, handling invalid code unit sequences according to the\n     * `errorMode` policy. Returns the size of the\n     * [[UtfErrorMode.replacementChar]] for surrogates and invalid code points,\n     * if [[UtfErrorMode.isReplacement]] is `true`; otherwise returns `0` for\n     * surrogates and invalid code points. Uses the two byte modified UTF-8\n     * encoding of the NUL character (`U+0000`), if [[UtfErrorMode.isNonZero]]\n     * is `true`.\n     */\n    sizeOf(c: number | undefined, errorMode?: UtfErrorMode): number;\n\n    /**\n     * Returns the number of bytes in the UTF-8 encoding of the Unicode code\n     * point `c`; returns the size of the Unicode replacement character (`U+FFFD`)\n     * for surrogates and invalid code points.\n     */\n    sizeOf(c: number | undefined): number;\n\n    /**\n     * Returns the number of bytes in the UTF-8 encoding the given `string`,\n     * handling invalid code unit sequences according to the `errorMode` policy.\n     */\n    sizeOf(string: string, errorMode?: UtfErrorMode): number;\n\n    /**\n     * Returns the number of bytes in the UTF-8 encoding the given `string`,\n     * assuming the Unicode replacement character (`U+FFFD`) replaces unpaired\n     * surrogates and invalid code points.\n     */\n    sizeOf(string: string): number;\n\n    /**\n     * Returns a new `Output` that accepts UTF-8 code unit sequences, and writes\n     * writes decoded Unicode code points to the composed `output`, handling\n     * invalid code unit sequences according to the `errorMode` policy.\n     */\n    decodedOutput<T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T>;\n\n    /**\n     * Returns a new `Output` that accepts Unicode code points, and writes\n     * encoded UTF-8 code unit sequences to the composed `output`, handling\n     * invalid code unit sequences according to the `errorMode` policy.\n     */\n    encodedOutput<T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T>;\n\n    /**\n     * Returns a new `Output` that accepts UTF-8 code unit sequences, and writes\n     * decoded Unicode code points to a growable `string`, handling invalid code\n     * unit sequences according to the [[UtfErrorMode.fatal]] policy. The\n     * returned `Output` accepts an unbounded number of UTF-8 code units,\n     * remaining permanently in the _cont_ state, and [[Output.bind binds]] a\n     * `string` containing all decoded code points.\n     */\n    decodedString(): Output<string>;\n  };\n\n  Utf8.sizeOf = function (u: string | number | undefined, errorMode?: UtfErrorMode): number {\n    if (typeof u === \"number\" || u === void 0) {\n      if (typeof u === \"number\") {\n        if (u === 0x0000 && errorMode !== void 0 && errorMode.isNonZero()) { // Modified UTF-8\n          return 2; // U+0000 encoded as 0xC0, 0x80\n        } else if (u >= 0x0000 && u <= 0x007F) { // U+0000..U+007F\n          return 1;\n        } else if (u >= 0x0080 && u <= 0x07FF) { // U+0080..U+07FF\n          return 2;\n        } else if (u >= 0x0800 && u <= 0xFFFF || // U+0800..U+D7FF\n                   u >= 0xE000 && u <= 0xFFFF) { // U+E000..U+FFFF\n          return 3;\n        } else if (u >= 0x10000 && u <= 0x10FFFF) { // U+10000..U+10FFFF\n          return 4;\n        }\n      }\n      // surrogate or invalid code point\n      if (errorMode === void 0) {\n        return 3;\n      } else if (errorMode.isReplacement()) {\n        return Utf8.sizeOf(errorMode.replacementChar);\n      } else {\n        return 0;\n      }\n    } else if (typeof u === \"string\") {\n      let size = 0;\n      for (let i = 0; i < u.length; i = Strings.offsetByCodePoints(u, i, 1)) {\n        size += Utf8.sizeOf(u.charCodeAt(i), errorMode);\n      }\n      return size;\n    } else {\n      throw new TypeError(\"\" + u);\n    }\n  };\n\n  Utf8.decodedOutput = function <T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T> {\n    return Utf8DecodedOutput.create(output, errorMode);\n  };\n\n  Utf8.encodedOutput = function <T>(output: Output<T>, errorMode?: UtfErrorMode): Output<T> {\n    return Utf8EncodedOutput.create(output, errorMode);\n  };\n\n  Utf8.decodedString = function (): Output<string> {\n    return Utf8.decodedOutput(Unicode.stringOutput());\n  };\n\n  return Utf8;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"../source/Diagnostic\";\nimport type {Input} from \"../input/Input\";\nimport type {Output} from \"../output/Output\";\nimport {Parser} from \"../parser/Parser\";\nimport {Unicode} from \"../unicode/Unicode\";\n\n/** @internal */\nexport class Base10NumberParser extends Parser<number> {\n  /** @internal */\n  readonly sign: number;\n  /** @internal */\n  readonly value: number;\n  /** @internal */\n  readonly mode: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(sign: number = 1, value: number = 0, mode: number = 2, step: number = 1) {\n    super();\n    this.sign = sign;\n    this.value = value;\n    this.mode = mode;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<number> {\n    return Base10NumberParser.parse(input, this.sign, this.value, this.mode, this.step);\n  }\n\n  static parse(input: Input, sign: number = 1, value: number = 0,\n               mode: number = 2, step: number = 1): Parser<number> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 45/*'-'*/) {\n          input = input.step();\n          sign = -1;\n        } else if (c === 43/*'+'*/) {\n          input = input.step();\n          sign = 1;\n        }\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"number\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 48/*'0'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          value = sign * (c - 48/*'0'*/);\n          step = 3;\n        } else if (mode > 0 && c === 46/*'.'*/) {\n          let output = Unicode.stringOutput();\n          if (sign < 0) {\n            output = output.write(45/*'-'*/);\n          }\n          return Base10DecimalParser.parse(input, output, mode);\n        } else {\n          return Parser.error(Diagnostic.expected(\"number\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"number\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          const newValue = 10 * value + sign * (c - 48/*'0'*/);\n          if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {\n            value = newValue;\n            input = input.step();\n          } else {\n            return Parser.error(Diagnostic.message(\"integer overflow\", input));\n          }\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        step = 4;\n      } else if (input.isDone()) {\n        return Parser.done(value);\n      }\n    }\n    if (step === 4) {\n      if (input.isCont()) {\n        c = input.head();\n        if (mode > 0 && c === 46/*'.'*/ || mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          let output = Unicode.stringOutput();\n          if (sign < 0 && value === 0) {\n            output = output.write(45/*'-'*/).write(48/*'0'*/);\n          } else {\n            output = output.write(\"\" + value);\n          }\n          return Base10DecimalParser.parse(input, output, mode);\n        } else {\n          return Parser.done(value);\n        }\n      } else if (input.isDone()) {\n        return Parser.done(value);\n      }\n    }\n    return new Base10NumberParser(sign, value, mode, step);\n  }\n}\n\n/** @internal */\nclass Base10DecimalParser extends Parser<number> {\n  /** @internal */\n  readonly output: Output<string>;\n  /** @internal */\n  readonly mode: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(output: Output<string>, mode: number = 2, step: number = 1) {\n    super();\n    this.output = output;\n    this.mode = mode;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<number> {\n    return Base10DecimalParser.parse(input, this.output, this.mode, this.step);\n  }\n\n  static parse(input: Input, output: Output<string>, mode: number = 2,\n               step: number = 1): Parser<number> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 46/*'.'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 2;\n        } else if (mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          input = input.step();\n          output = output.write(c);\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 3;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        if (mode > 1) {\n          step = 4;\n        } else {\n          return Parser.done(+output.bind());\n        }\n      } else if (input.isDone()) {\n        return Parser.done(+output.bind());\n      }\n    }\n    if (step === 4) {\n      c = input.head();\n      if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input = input.step();\n        output = output.write(c);\n        step = 5;\n      } else {\n        return Parser.done(+output.bind());\n      }\n    }\n    if (step === 5) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n          input = input.step();\n          output = output.write(c);\n        }\n        step = 6;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 6) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 7;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 7) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(+output.bind());\n      }\n    }\n    return new Base10DecimalParser(output, mode, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"../writer/WriterException\";\nimport {Writer} from \"../writer/Writer\";\nimport {Base10} from \"./Base10\";\n\n/** @internal */\nexport class Base10IntegerWriter extends Writer {\n  /** @internal */\n  readonly value: unknown;\n  /** @internal */\n  readonly input: number;\n  /** @internal */\n  readonly index: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(value: unknown, input: number, index: number = 0, step: number = 1) {\n    super();\n    this.value = value;\n    this.input = input;\n    this.index = index;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return Base10IntegerWriter.write(output, this.value, this.input, this.index, this.step);\n  }\n\n  static write(output: Output, value: unknown, input: number, index: number = 0,\n               step: number = 1): Writer {\n    if (step === 0) {\n      return Writer.end();\n    }\n    if (step === 1) {\n      if (input < 0) {\n        if (output.isCont()) {\n          output = output.write(45/*'-'*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (input > -10 && input < 10) {\n        if (output.isCont()) {\n          output = output.write(Base10.encodeDigit(Math.abs(input | 0)));\n          return Writer.done(value);\n        }\n      } else {\n        const digits = new Array<number>(19);\n        let x = input;\n        let i = 18;\n        while (x !== 0) {\n          digits[i] = Math.abs((x % 10) | 0);\n          x = (x / 10) | 0;\n          i -= 1;\n        }\n        i += 1 + index;\n        while (i < 19 && output.isCont()) {\n          output = output.write(Base10.encodeDigit(digits[i]!));\n          index += 1;\n          i += 1;\n        }\n        if (i === 19) {\n          return Writer.done(value);\n        }\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new Base10IntegerWriter(value, input, index, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"../source/Diagnostic\";\nimport type {Input} from \"../input/Input\";\nimport type {Output} from \"../output/Output\";\nimport {Parser} from \"../parser/Parser\";\nimport {Base16} from \"./Base16\";\n\n/** @internal */\nexport class Base16Parser<O> extends Parser<O> {\n  /** @internal */\n  readonly output: Output<O>;\n  /** @internal */\n  readonly p: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(output: Output<O>, p: number = 0, step: number = 1) {\n    super();\n    this.output = output;\n    this.p = p;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<O> {\n    return Base16Parser.parse(input, this.output.clone(), this.p, this.step);\n  }\n\n  static parse<O>(input: Input, output: Output<O>, p: number = 0, step: number = 1): Parser<O> {\n    let c = 0;\n    while (!input.isEmpty()) {\n      if (step === 1) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          p = c;\n          step = 2;\n        } else if (!input.isEmpty()) {\n          return Parser.done(output.bind());\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          output = Base16.writeQuantum(output, p, c);\n          p = 0;\n          step = 1;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"base16 digit\", input));\n        }\n      }\n    }\n    return new Base16Parser<O>(output, p, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"../writer/WriterException\";\nimport {Writer} from \"../writer/Writer\";\nimport type {Base16} from \"./Base16\";\n\n/** @internal */\nexport class Base16Writer extends Writer {\n  /** @internal */\n  readonly base16: Base16;\n  /** @internal */\n  readonly value: unknown;\n  /** @internal */\n  readonly input: Uint8Array | null;\n  /** @internal */\n  readonly index: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(base16: Base16, value: unknown, input: Uint8Array | null,\n              index: number = 0, step: number = 1) {\n    super();\n    this.base16 = base16;\n    this.value = value;\n    this.input = input;\n    this.index = index;\n    this.step = step;\n  }\n\n  override feed(value: unknown): Writer {\n    if (value instanceof Uint8Array) {\n      return new Base16Writer(this.base16, void 0, value);\n    } else {\n      throw new TypeError(\"\" + value);\n    }\n  }\n\n  override pull(output: Output): Writer {\n    if (this.input === null) {\n      throw new WriterException();\n    }\n    return Base16Writer.write(output, this.base16, this.value, this.input,\n                              this.index, this.step);\n  }\n\n  static write(output: Output, base16: Base16, value: unknown, input: Uint8Array,\n               index: number = 0, step: number = 1): Writer {\n    while (index < input.length) {\n      const x = input[index]!;\n      if (step === 1 && output.isCont()) {\n        output = output.write(base16.encodeDigit(x >>> 4));\n        step = 2;\n      }\n      if (step === 2 && output.isCont()) {\n        output = output.write(base16.encodeDigit(x & 0x0f));\n        index += 1;\n        step = 1;\n      }\n    }\n    if (index === input.length) {\n      return Writer.done(value);\n    } else if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new Base16Writer(base16, value, input, index, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"../writer/WriterException\";\nimport {Writer} from \"../writer/Writer\";\nimport type {Base16} from \"./Base16\";\n\n/** @internal */\nexport class Base16IntegerWriter extends Writer {\n  /** @internal */\n  readonly base16: Base16;\n  /** @internal */\n  readonly value: unknown;\n  /** @internal */\n  readonly input: number;\n  /** @internal */\n  readonly width: number;\n  /** @internal */\n  readonly index: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(base16: Base16, value: unknown, input: number,\n              width: number, index: number = 0, step: number = 3) {\n    super();\n    this.base16 = base16;\n    this.value = value;\n    this.input = input;\n    this.width = width;\n    this.index = index;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return Base16IntegerWriter.write(output, this.base16, this.value, this.input,\n                                     this.width, this.index, this.step);\n  }\n\n  static write(output: Output, base16: Base16, value: unknown, input: number,\n               width: number, index: number = 0, step: number = 3): Writer {\n    if (step <= 0) {\n      return Writer.end();\n    }\n    if (step === 1 && output.isCont()) {\n      output = output.write(48/*'0'*/);\n      step = 2;\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(120/*'x'*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (input >= 0 && input < 16 && width <= 1) {\n        if (output.isCont()) {\n          output = output.write(base16.encodeDigit(input));\n          return Writer.done(value);\n        }\n      } else {\n        let i = 15;\n        const digits = new Array<number>(16);\n        let x = input;\n        while (x !== 0 || i >= 16 - width) {\n          digits[i] = x & 0xf;\n          x >>>= 4;\n          i -= 1;\n        }\n        i += 1 + index;\n        while (i < 16 && output.isCont()) {\n          output = output.write(base16.encodeDigit(digits[i]!));\n          index += 1;\n          i += 1;\n        }\n        if (i === 16) {\n          return Writer.done(value);\n        }\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new Base16IntegerWriter(base16, value, input, width, index, step);\n  }\n\n  static writeLiteral(output: Output, base16: Base16, value: unknown,\n                      input: number, width: number): Writer {\n    return Base16IntegerWriter.write(output, base16, value, input, width, 0, 1);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Input} from \"../input/Input\";\nimport {Output} from \"../output/Output\";\nimport type {Parser} from \"../parser/Parser\";\nimport type {Writer} from \"../writer/Writer\";\nimport {Format} from \"../format/Format\";\nimport {Binary} from \"../binary/Binary\";\nimport {Unicode} from \"../unicode/Unicode\";\nimport {Base64Parser} from \"../\"; // forward import\nimport {Base64Writer} from \"../\"; // forward import\n\n/**\n * Base-64 (7-bit ASCII) encoding [[Parser]]/[[Writer]] factory.\n * @public\n */\nexport abstract class Base64 {\n  /**\n   * The 64 character string, where the character at index `i` is the encoding\n   * of the base-64 digit `i`.\n   */\n  abstract readonly alphabet: string;\n\n  /**\n   * Returns `true` if this base-64 encoding requires padding.\n   */\n  abstract isPadded(): boolean;\n\n  /**\n   * Returns this `Base64` encoding with required padding, if `padded` is `true`.\n   */\n  abstract asPadded(padded: boolean): Base64;\n\n  /**\n   * Returns `true` if the Unicode code point `c` is a valid base-64 digit.\n   */\n  abstract isDigit(c: number): boolean;\n\n  /**\n   * Returns the 7-bit quantity represented by the base-64 digit `c`.\n   *\n   * @throws `Error` if `c` is not a valid base-64 digit.\n   */\n  decodeDigit(c: number): number {\n    if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) {\n      return c - 65/*'A'*/;\n    } else if (c >= 97/*'a'*/ && c <= 122/*'z'*/) {\n      return c + (26 - 97/*'a'*/);\n    } else if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n      return c + (52 - 48/*'0'*/);\n    } else if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n      return 62;\n    } else if (c === 47/*'/'*/ || c === 95/*'_'*/) {\n      return 63;\n    } else {\n      let message = Unicode.stringOutput();\n      message = message.write(\"Invalid base-64 digit: \");\n      message = Format.debugChar(message, c);\n      throw new Error(message.bind());\n    }\n  }\n\n  /**\n   * Returns the Unicode code point of the base-64 digit that encodes the given\n   * 7-bit quantity.\n   */\n  encodeDigit(b: number): number {\n    return this.alphabet.charCodeAt(b);\n  }\n\n  /**\n   * Decodes the base-64 digits `c1`, `c2`, `c3`, and `c4`, and writes the 8 to\n   * 24 bit quantity they represent to the given `output`.\n   *\n   * @returns the continuation of the `output`.\n   */\n  writeQuantum<T>(output: Output<T>, c1: number, c2: number, c3: number, c4: number): Output<T> {\n    const x = this.decodeDigit(c1);\n    const y = this.decodeDigit(c2);\n    if (c3 !== 61/*'='*/) {\n      const z = this.decodeDigit(c3);\n      if (c4 !== 61/*'='*/) {\n        const w = this.decodeDigit(c4);\n        output = output.write((x << 2) | (y >>> 4));\n        output = output.write((y << 4) | (z >>> 2));\n        output = output.write((z << 6) | w);\n      } else {\n        output = output.write((x << 2) | (y >>> 4));\n        output = output.write((y << 4) | (z >>> 2));\n      }\n    } else {\n      if (c4 !== 61/*'='*/) {\n        return Output.error(new Error(\"Improperly padded base-64\"));\n      }\n      output = output.write((x << 2) | (y >>> 4));\n    }\n    return output;\n  }\n\n  /**\n   * Returns a `Parser` that decodes base-64 (7-bit ASCII) encoded input, and\n   * writes the decoded bytes to `output`.\n   */\n  parser<O>(output: Output<O>): Parser<O> {\n    return new Base64Parser<O>(this, output);\n  }\n\n  /**\n   * Parses the base-64 (7-bit ASCII) encoded `input`, and writes the decoded\n   * bytes to `output`, returning a `Parser` continuation that knows how to\n   * parse any additional input.\n   */\n  parse<O>(input: Input, output: Output<O>): Parser<O> {\n    return Base64Parser.parse(input, this, output);\n  }\n\n  /**\n   * Parses the base-64 (7-bit ASCII) encoded `input`, and writes the decoded\n   * bytes to a growable array, returning a `Parser` continuation that knows\n   * how to parse any additional input. The returned `Parser` [[Parser.bind\n   * binds]] a `Uint8Array` array containing all parsed base-64 data.\n   */\n  parseUint8Array(input: Input): Parser<Uint8Array> {\n    return Base64Parser.parse(input, this, Binary.output());\n  }\n\n  /**\n   * Returns a `Writer` that, when fed an input `Uint8Array`, returns a\n   * continuation that writes the base-64 (7-bit ASCII) encoding of the input\n   * `Uint8Array`.\n   */\n  uint8ArrayWriter(): Writer<Uint8Array, unknown>;\n  /**\n   * Returns a `Writer` continuation that writes the base-64 (7-bit ASCII)\n   * encoding of the `input` byte array.\n   */\n  uint8ArrayWriter(input: Uint8Array): Writer<unknown, Uint8Array>;\n  uint8ArrayWriter(input?: Uint8Array): Writer {\n    if (input === void 0) {\n      return new Base64Writer(this, void 0, null);\n    } else {\n      return new Base64Writer(this, input, input);\n    }\n  }\n\n  /**\n   * Writes the base-64 (7-bit ASCII) encoding of the `input` `Uint8Array` to\n   * the `output`, returning a `Writer` continuation that knows how to write\n   * any remaining output that couldn't be immediately generated.\n   */\n  writeUint8Array(output: Output, input: Uint8Array): Writer {\n    return Base64Writer.write(output, this, void 0, input);\n  }\n\n  /** @internal */\n  @Lazy\n  static get standardPadded(): Base64 {\n    return new Base64Standard(true);\n  }\n\n  /** @internal */\n  @Lazy\n  static get standardUnpadded(): Base64 {\n    return new Base64Standard(false);\n  }\n\n  /**\n   * Returns the `Base64` encoding with the standard alphabet, and required\n   * padding, if `isPadding` is `true`.\n   */\n  static standard(padded: boolean = true): Base64 {\n    if (padded) {\n      return Base64.standardPadded;\n    } else {\n      return Base64.standardUnpadded;\n    }\n  }\n\n  /** @internal */\n  @Lazy\n  static get urlPadded(): Base64 {\n    return new Base64Url(true);\n  }\n\n  /** @internal */\n  @Lazy\n  static get urlUnpadded(): Base64 {\n    return new Base64Url(false);\n  }\n\n  /**\n   * Returns the `Base64` encoding with the url and filename safe alphabet,\n   * and required padding, if `padded` is `true`.\n   */\n  static url(padded: boolean = true): Base64 {\n    if (padded) {\n      return Base64.urlPadded;\n    } else {\n      return Base64.urlUnpadded;\n    }\n  }\n}\n\n/** @internal */\nclass Base64Standard extends Base64 {\n  constructor(padded: boolean) {\n    super();\n    Object.defineProperty(this, \"padded\", {\n      value: padded,\n      enumerable: true,\n    });\n  }\n\n  get alphabet(): string {\n    return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n  }\n\n  /** @internal */\n  readonly padded!: boolean;\n\n  isPadded(): boolean {\n    return this.padded;\n  }\n\n  asPadded(padded: boolean): Base64 {\n    if (padded === this.padded) {\n      return this;\n    } else {\n      return Base64.standard(padded);\n    }\n  }\n\n  isDigit(c: number): boolean {\n    return c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c === 43/*'+'*/ || c === 47/*'/'*/;\n  }\n}\n\n/** @internal */\nclass Base64Url extends Base64 {\n  constructor(padded: boolean) {\n    super();\n    Object.defineProperty(this, \"padded\", {\n      value: padded,\n      enumerable: true,\n    });\n  }\n\n  get alphabet(): string {\n    return \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_\";\n  }\n\n  /** @internal */\n  readonly padded!: boolean;\n\n  isPadded(): boolean {\n    return this.padded;\n  }\n\n  asPadded(padded: boolean): Base64 {\n    if (padded === this.padded) {\n      return this;\n    } else {\n      return Base64.url(padded);\n    }\n  }\n\n  isDigit(c: number): boolean {\n    return c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c === 45/*'-'*/ || c === 95/*'_'*/;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"../source/Diagnostic\";\nimport type {Input} from \"../input/Input\";\nimport type {Output} from \"../output/Output\";\nimport {Parser} from \"../parser/Parser\";\nimport type {Base64} from \"./Base64\";\n\n/** @internal */\nexport class Base64Parser<O> extends Parser<O> {\n  /** @internal */\n  readonly base64: Base64;\n  /** @internal */\n  readonly output: Output<O>;\n  /** @internal */\n  readonly p: number;\n  /** @internal */\n  readonly q: number;\n  /** @internal */\n  readonly r: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(base64: Base64, output: Output<O>, p: number = 0, q: number = 0,\n              r: number = 0, step: number = 1) {\n    super();\n    this.base64 = base64;\n    this.output = output;\n    this.p = p;\n    this.q = q;\n    this.r = r;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<O> {\n    return Base64Parser.parse(input, this.base64, this.output.clone(),\n                              this.p, this.q, this.r, this.step);\n  }\n\n  static parse<O>(input: Input, base64: Base64, output: Output<O>, p: number = 0,\n                  q: number = 0, r: number = 0, step: number = 1): Parser<O> {\n    let c = 0;\n    while (!input.isEmpty()) {\n      if (step === 1) {\n        if (input.isCont() && (c = input.head(), base64.isDigit(c))) {\n          input = input.step();\n          p = c;\n          step = 2;\n        } else if (!input.isEmpty()) {\n          return Parser.done(output.bind());\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), base64.isDigit(c))) {\n          input = input.step();\n          q = c;\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"base64 digit\", input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61/*'='*/)) {\n          input = input.step();\n          r = c;\n          if (c !== 61/*'='*/) {\n            step = 4;\n          } else {\n            step = 5;\n          }\n        } else if (!input.isEmpty()) {\n          if (!base64.isPadded()) {\n            output = base64.writeQuantum(output, p, q, 61/*'='*/, 61/*'='*/);\n            return Parser.done(output.bind());\n          } else {\n            return Parser.error(Diagnostic.unexpected(input));\n          }\n        }\n      }\n      if (step === 4) {\n        if (input.isCont() && (c = input.head(), base64.isDigit(c) || c === 61/*'='*/)) {\n          input = input.step();\n          output = base64.writeQuantum(output, p, q, r, c);\n          r = 0;\n          q = 0;\n          p = 0;\n          if (c !== 61/*'='*/) {\n            step = 1;\n          } else {\n            return Parser.done(output.bind());\n          }\n        } else if (!input.isEmpty()) {\n          if (!base64.isPadded()) {\n            output = base64.writeQuantum(output, p, q, r, 61/*'='*/);\n            return Parser.done(output.bind());\n          } else {\n            return Parser.error(Diagnostic.unexpected(input));\n          }\n        }\n      } else if (step === 5) {\n        if (input.isCont() && (c = input.head(), c === 61/*'='*/)) {\n          input = input.step();\n          output = base64.writeQuantum(output, p, q, r, c);\n          r = 0;\n          q = 0;\n          p = 0;\n          return Parser.done(output.bind());\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(61/*'='*/, input));\n        }\n      }\n    }\n    return new Base64Parser<O>(base64, output, p, q, r, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"../output/Output\";\nimport {WriterException} from \"../writer/WriterException\";\nimport {Writer} from \"../writer/Writer\";\nimport type {Base64} from \"./Base64\";\n\n/** @internal */\nexport class Base64Writer extends Writer {\n  /** @internal */\n  readonly base64: Base64;\n  /** @internal */\n  readonly value: unknown;\n  /** @internal */\n  readonly input: Uint8Array | null;\n  /** @internal */\n  readonly index: number;\n  /** @internal */\n  readonly step: number;\n\n  constructor(base64: Base64, value: unknown, input: Uint8Array | null,\n              index: number = 0, step: number = 1) {\n    super();\n    this.base64 = base64;\n    this.value = value;\n    this.input = input;\n    this.index = index;\n    this.step = step;\n  }\n\n  override feed(value: unknown): Writer {\n    if (value instanceof Uint8Array) {\n      return new Base64Writer(this.base64, null, value);\n    } else {\n      throw new TypeError(\"\" + value);\n    }\n  }\n\n  override pull(output: Output): Writer {\n    if (this.input === null) {\n      throw new WriterException();\n    }\n    return Base64Writer.write(output, this.base64, this.value, this.input,\n                              this.index, this.step);\n  }\n\n  static write(output: Output, base64: Base64, value: unknown, input: Uint8Array,\n               index: number = 0, step: number = 1): Writer {\n    while (index + 2 < input.length && output.isCont()) {\n      const x = input[index]!;\n      const y = input[index + 1]!;\n      const z = input[index + 2]!;\n      if (step === 1 && output.isCont()) {\n        output = output.write(base64.encodeDigit(x >>> 2));\n        step = 2;\n      }\n      if (step === 2 && output.isCont()) {\n        output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));\n        step = 3;\n      }\n      if (step === 3 && output.isCont()) {\n        output = output.write(base64.encodeDigit(((y << 2) | (z >>> 6)) & 0x3f));\n        step = 4;\n      }\n      if (step === 4 && output.isCont()) {\n        output = output.write(base64.encodeDigit(z & 0x3f));\n        index += 3;\n        step = 1;\n      }\n    }\n    if (index + 1 < input.length && output.isCont()) {\n      const x = input[index]!;\n      const y = input[index + 1]!;\n      if (step === 1 && output.isCont()) {\n        output = output.write(base64.encodeDigit(x >>> 2));\n        step = 2;\n      }\n      if (step === 2 && output.isCont()) {\n        output = output.write(base64.encodeDigit(((x << 4) | (y >>> 4)) & 0x3f));\n        step = 3;\n      }\n      if (step === 3 && output.isCont()) {\n        output = output.write(base64.encodeDigit((y << 2) & 0x3f));\n        step = 4;\n      }\n      if (step === 4) {\n        if (!base64.isPadded()) {\n          index += 2;\n        } else if (output.isCont()) {\n          output = output.write(61/*'='*/);\n          index += 2;\n        }\n      }\n    } else if (index < input.length && output.isCont()) {\n      const x = input[index]!;\n      if (step === 1 && output.isCont()) {\n        output = output.write(base64.encodeDigit(x >>> 2));\n        step = 2;\n      }\n      if (step === 2 && output.isCont()) {\n        output = output.write(base64.encodeDigit((x << 4) & 0x3f));\n        step = 3;\n      }\n      if (step === 3) {\n        if (!base64.isPadded()) {\n          index += 1;\n        } else if (output.isCont()) {\n          output = output.write(61/*'='*/);\n          step = 4;\n        }\n      }\n      if (step === 4 && output.isCont()) {\n        output = output.write(61/*'='*/);\n        index += 1;\n      }\n    }\n    if (index === input.length) {\n      return Writer.done(value);\n    } else if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new Base64Writer(base64, value, input, index, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport type Affinity = 0 | 1 | 2 | 3 | 4;\n\n/** @public */\nexport const Affinity: {\n  readonly Transient: 0;\n  readonly Inherited: 1;\n  readonly Intrinsic: 2;\n  readonly Extrinsic: 3;\n\n  readonly Reflexive: 4;\n\n  /** @internal */\n  readonly Shift: number;\n  /** @internal */\n  readonly Mask: number;\n} = Object.freeze({\n  Transient: 0,\n  Inherited: 1,\n  Intrinsic: 2,\n  Extrinsic: 3,\n\n  Reflexive: 4,\n\n  Shift: 2,\n  Mask: (1 << 2) - 1,\n});\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Proto} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport type {FastenerTemplate} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport type {Fastener} from \"./Fastener\";\n\n/** @public */\nexport interface FastenerContext {\n  getFastener?<F extends Fastener<any, any, any>>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null;\n\n  getParentFastener?<F extends Fastener<any, any, any>>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null;\n\n  attachFastener?(fastener: Fastener<any, any, any>): void;\n\n  decohereFastener?(fastener: Fastener<any, any, any>): void;\n\n  requireUpdate?(updateFlags: number): void;\n\n  getTransition?(fastener: Fastener<any, any, any>): Timing | null;\n}\n\n/** @public */\nexport class FastenerContextMetaclass<R> {\n  constructor() {\n    this.classMap = {};\n    this.slotMap = {};\n    this.slots = [];\n  }\n\n  /** @internal */\n  readonly classMap: {[fastenerName: PropertyKey]: FastenerClass<any> | undefined};\n\n  /** @internal */\n  readonly slotMap: {[fastenerName: PropertyKey]: keyof R | undefined};\n\n  /** @internal */\n  readonly slots: (keyof R)[];\n\n  /** @internal */\n  initFastenerClass<F extends Fastener<R, any, any>>(baseClass: FastenerClass<any>, template: FastenerTemplate<F>,\n                                                     fastenerName: keyof R, fastenerSlot: keyof R,\n                                                     fastenerClass: FastenerClass<F> | null): FastenerClass<F> {\n    const fastenerSuperclass = this.classMap[fastenerName];\n    if (fastenerClass === null) {\n      fastenerClass = baseClass.define(fastenerName, template, fastenerSuperclass);\n    }\n    if (fastenerSuperclass !== fastenerClass) {\n      this.classMap[fastenerName] = fastenerClass;\n      this.slotMap[fastenerName] = fastenerSlot;\n      if (fastenerSuperclass === void 0) {\n        this.slots.push(fastenerSlot);\n      }\n    }\n    return fastenerClass;\n  }\n\n  getFastenerClass<K extends keyof R>(fastenerName: K): R[K] extends Fastener<any, any, any> ? FastenerClass<R[K]> | null : null {\n    const fastenerClass = this.classMap[fastenerName];\n    return (fastenerClass !== void 0 ? fastenerClass : null) as R[K] extends Fastener<any, any, any> ? FastenerClass<R[K]> | null : null;\n  }\n\n  getFastenerSlot(fastenerName: PropertyKey): keyof R | undefined {\n    return this.slotMap[fastenerName];\n  }\n\n  tryFastener<K extends keyof R, F extends R[K]>(owner: R, fastenerName: K): (F extends Fastener<any, any, any> ? F | null : never) | null {\n    const fastenerSlot = this.slotMap[fastenerName];\n    const fastener = fastenerSlot !== void 0 ? owner[fastenerSlot] : void 0;\n    return (fastener !== void 0 ? fastener : null) as (F extends Fastener<any, any, any> ? F | null : never) | null;\n  }\n\n  /** @internal */\n  static metaclasses: WeakMap<Proto<any>, FastenerContextMetaclass<any>> = new WeakMap();\n\n  static get<R>(context: R): FastenerContextMetaclass<R> | null {\n    const contextClass = (context as object).constructor;\n    const contextMetaclass = this.metaclasses.get(contextClass);\n    return contextMetaclass !== void 0 ? contextMetaclass : null;\n  }\n\n  /** @internal */\n  static getOrCreate<R>(context: R): FastenerContextMetaclass<R> {\n    const contextClass = (context as object).constructor;\n    let contextMetaclass = this.metaclasses.get(contextClass);\n    if (contextMetaclass === void 0) {\n      contextMetaclass = new FastenerContextMetaclass<R>();\n      this.metaclasses.set(contextClass, contextMetaclass);\n    }\n    return contextMetaclass;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {__esDecorate} from \"tslib\";\nimport {__runInitializers} from \"tslib\";\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Identifiers} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport type {FastenerContext} from \"./FastenerContext\";\nimport {FastenerContextMetaclass} from \"./FastenerContext\";\n\n/** @public */\nexport type FastenerFlags = number;\n\n/** @public */\nexport interface FastenerDescriptor<R> {\n  name?: PropertyKey;\n  extends?: Proto<Fastener<any, any, any>> | boolean | null;\n  affinity?: Affinity;\n  inherits?: PropertyKey | boolean;\n}\n\n/** @public */\nexport interface FastenerDecorator<F extends Fastener<any, any, any>> {\n  <T>(target: any, context: ClassFieldDecoratorContext<T, F>): (this: T, value?: F) => F;\n  <T>(target: (this: T) => F, context: ClassGetterDecoratorContext<T, F>): (this: T) => F;\n}\n\n/** @public */\nexport type FastenerTemplate<F extends Fastener<any, any, any>> =\n  F extends {readonly descriptorType?: Proto<infer D>}\n          ? ThisType<F> & D & Partial<Omit<F, keyof D>> & (F extends Fastener<infer R, any, any> ? {readonly inletKeys?: readonly (keyof R)[]} : {})\n          : never;\n\n/** @public */\nexport type FastenerClassTemplate<C extends FastenerClass<any>> =\n  ThisType<C> & Partial<C>;\n\n/** @public */\nexport interface FastenerClass<F extends Fastener<any, any, any> = Fastener<any, any, any>> {\n  /** @internal */\n  prototype: F;\n\n  <F2 extends F>(template: FastenerTemplate<F2>): FastenerDecorator<F2>;\n\n  create(owner: F extends Fastener<infer R, any, any> ? R : never): F;\n\n  /** @protected */\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F;\n\n  /** @internal */\n  declare<F2 extends F, C extends FastenerClass<any> = FastenerClass<F2>>(className: PropertyKey): C;\n\n  /** @internal */\n  implement<F2 extends F, C extends FastenerClass<any> = FastenerClass<F2>>(fastenerClass: C, template: FastenerTemplate<F2>, classTemplate?: FastenerClassTemplate<C>): void;\n\n  specialize(template: F extends {readonly descriptorType?: Proto<infer D>} ? D : never): FastenerClass<F>;\n\n  refine(fastenerClass: FastenerClass<Fastener<any, any, any>>): void;\n\n  extend<F2 extends F, C extends FastenerClass<any> = FastenerClass<F2>>(className: PropertyKey, template: FastenerTemplate<F2>, classTemplate?: FastenerClassTemplate<C>): C;\n\n  define<F2 extends F>(className: PropertyKey, template: FastenerTemplate<F2>, extendsClass?: FastenerClass<F>): FastenerClass<F2>;\n\n  /**\n   * Dummy getter function that always throws an exception. Used as a stand-in\n   * for decorated fastener getters, whose implementation is injected by the\n   * decorator.\n   */\n  getter<F2 extends F>(): F2;\n\n  /** @internal */\n  decorate<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: undefined, context: ClassFieldDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never, value?: F2) => F2;\n  /** @internal */\n  decorate<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: (this: F2 extends Fastener<infer R, any, any> ? R : never) => F2, context: ClassGetterDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never) => F2;\n\n  /** @internal */\n  decorateField<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: undefined, context: ClassFieldDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never, value?: F2) => F2;\n\n  /** @internal */\n  decorateGetter<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: (this: F2 extends Fastener<infer R, any, any> ? R : never) => F2, context: ClassGetterDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never) => F2;\n\n  /** @internal */\n  defineField<F2 extends F, K extends keyof F2>(name: K, decorators: F2[K] extends Fastener<any, any, any> ? FastenerDecorator<F2[K]>[] : never): void;\n\n  /** @internal */\n  defineGetter<F2 extends F, K extends keyof F2>(name: K, decorators: F2[K] extends Fastener<any, any, any> ? FastenerDecorator<F2[K]>[] : never): void;\n\n  /** @internal */\n  readonly fieldInitializers?: {[name: PropertyKey]: Function[]};\n  /** @internal */\n  readonly instanceInitializers?: Function[];\n\n  /** @internal */\n  readonly MountedFlag: FastenerFlags;\n  /** @internal */\n  readonly InheritsFlag: FastenerFlags;\n  /** @internal */\n  readonly DerivedFlag: FastenerFlags;\n  /** @internal */\n  readonly DecoherentFlag: FastenerFlags;\n\n  /** @internal */\n  readonly FlagShift: number;\n  /** @internal */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface Fastener<R = any, O = any, I extends any[] = [O]> extends FastenerContext {\n  get descriptorType(): Proto<FastenerDescriptor<R>>;\n\n  get fastenerType(): Proto<Fastener<any, any, any>>;\n\n  readonly owner: R;\n\n  readonly name: PropertyKey;\n\n  get binds(): boolean;\n\n  /** @protected */\n  init(): void;\n\n  /** @internal */\n  get flagsInit(): FastenerFlags;\n\n  /** @internal */\n  readonly flags: FastenerFlags;\n\n  /** @internal */\n  setFlags(flags: FastenerFlags): void;\n\n  readonly coherentTime: number;\n\n  /** @protected */\n  setCoherentTime(coherentTime: number): void;\n\n  readonly version: number;\n\n  /** @protected */\n  incrementVersion(): void;\n\n  get parentType(): Proto<any> | null | undefined;\n\n  get parent(): Fastener<any, any, any> | null;\n\n  readonly inletVersion: readonly number[] | number;\n\n  readonly inlet: readonly Fastener<any, any, any>[] | Fastener<any, any, any> | null;\n\n  /** @internal */\n  inheritInlet(): void;\n\n  bindInlet<K extends keyof I, IK extends I[K]>(inlet: Fastener<any, IK, any>, key: IK): void;\n  bindInlet<I0 extends I[0]>(inlet: Fastener<any, I0, any>): void;\n\n  /** @protected */\n  willBindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @protected */\n  onBindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @protected */\n  didBindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @internal */\n  uninheritInlet(): void;\n\n  unbindInlet(inlet?: Fastener<any, any, any>): void;\n\n  /** @protected */\n  willUnbindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @protected */\n  onUnbindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @protected */\n  didUnbindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @internal */\n  attachOutlet(outlet: Fastener<any, any, any>): void;\n\n  /** @internal */\n  detachOutlet(outlet: Fastener<any, any, any>): void;\n\n  get inheritName(): PropertyKey | undefined;\n\n  get inherits(): boolean;\n\n  setInherits(inherits: PropertyKey | boolean): void;\n\n  /** @protected */\n  willSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void;\n\n  /** @protected */\n  onSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void;\n\n  /** @protected */\n  didSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void;\n\n  get derived(): boolean;\n\n  /** @internal */\n  setDerived(derived: boolean): void;\n\n  get affinity(): Affinity;\n\n  hasAffinity(affinity: Affinity): boolean;\n\n  /** @internal */\n  initAffinity(affinity: Affinity): void;\n\n  /** @internal */\n  minAffinity(affinity: Affinity): boolean;\n\n  setAffinity(affinity: Affinity): void;\n\n  /** @protected */\n  willSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void;\n\n  /** @protected */\n  onSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void;\n\n  /** @protected */\n  didSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void;\n\n  get(): O;\n\n  get coherent(): boolean;\n\n  /** @protected */\n  setCoherent(coherent: boolean): void;\n\n  decohere(inlet?: Fastener<any, any, any>): void;\n\n  requireRecohere(): void;\n\n  recohere(t: number): void;\n\n  /** @protected */\n  get inletKeys(): readonly PropertyKey[] | undefined;\n\n  resolveInlets(): readonly Fastener<any, any, any>[] | null;\n\n  /** @protected */\n  attachInlets(): void;\n\n  /** @protected */\n  detachInlets(): void;\n\n  /** @override */\n  getFastener<F extends Fastener>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null;\n\n  /** @override */\n  getParentFastener<F extends Fastener>(fastenerName: string, fastenerType?: Proto<F>, contextType?: Proto<any>): F | null;\n\n  /** @override */\n  attachFastener(fastener: Fastener<any, any, any>): void;\n\n  /** @override */\n  decohereFastener(fastener: Fastener<any, any, any>): void;\n\n  /** @override */\n  requireUpdate(updateFlags: number): void;\n\n  /** @override */\n  getTransition?(fastener: Fastener<any, any, any>): Timing | null;\n\n  /** @internal @protected */\n  initFasteners(fastenerClass: FastenerClass<any>): void;\n\n  /** @internal @protected */\n  mountFasteners(): void;\n\n  /** @internal @protected */\n  unmountFasteners(): void;\n\n  get mounted(): boolean;\n\n  /** @internal */\n  mount(): void;\n\n  /** @protected */\n  willMount(): void;\n\n  /** @protected */\n  onMount(): void;\n\n  /** @protected */\n  didMount(): void;\n\n  /** @internal */\n  unmount(): void;\n\n  /** @protected */\n  willUnmount(): void;\n\n  /** @protected */\n  onUnmount(): void;\n\n  /** @protected */\n  didUnmount(): void;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const Fastener = (<R, O, I extends any[], F extends Fastener<any, any, any>>() => (function (template: FastenerTemplate<Fastener<R, O, I>>, classTemplate: FastenerClassTemplate<FastenerClass<F>>): FastenerClass<F> {\n  const Fastener = function (template: FastenerTemplate<F>): FastenerDecorator<F> {\n    return Fastener.decorate.bind(Fastener, Fastener, template) as unknown as FastenerDecorator<F>;\n  } as FastenerClass<F>;\n  Object.setPrototypeOf(template, Object.prototype);\n  Fastener.prototype = template as F;\n  Fastener.prototype.constructor = Fastener;\n  Object.setPrototypeOf(classTemplate, Fastener.prototype);\n  Object.setPrototypeOf(Fastener, classTemplate);\n  return Fastener;\n})({\n  get fastenerType(): Proto<Fastener<any, any, any>> {\n    return Fastener;\n  },\n\n  get name(): string {\n    return \"Fastener\";\n  },\n\n  init(): void {\n    // hook\n  },\n\n  binds: false,\n\n  flagsInit: 0,\n\n  setFlags(flags: FastenerFlags): void {\n    (this as Mutable<typeof this>).flags = flags;\n  },\n\n  incrementVersion(): void {\n    (this as Mutable<typeof this>).version += 1;\n  },\n\n  setCoherentTime(coherentTime: number): void {\n    (this as Mutable<typeof this>).coherentTime = coherentTime;\n  },\n\n  get parentType(): Proto<any> | null | undefined {\n    return void 0;\n  },\n\n  get parent(): Fastener<any, any, any> | null {\n    const inheritName = this.inheritName;\n    if (inheritName === void 0 || !Objects.hasAllKeys<FastenerContext>(this.owner, \"getParentFastener\")) {\n      return null;\n    }\n    return this.owner.getParentFastener!(inheritName, this.fastenerType, this.parentType);\n  },\n\n  inheritInlet(): void {\n    let inlet: Fastener | null;\n    if ((this.flags & Fastener.InheritsFlag) === 0 || (inlet = this.parent) === null) {\n      return;\n    }\n    this.willBindInlet(inlet);\n    inlet.attachOutlet(this);\n    (this as Mutable<typeof this>).inletVersion = -1;\n    (this as Mutable<typeof this>).inlet = inlet;\n    this.onBindInlet(inlet);\n    this.didBindInlet(inlet);\n  },\n\n  bindInlet<K extends keyof I, IK extends I[K]>(inlet: Fastener<any, IK, any>, key?: IK): void {\n    this.setInherits(false);\n    this.willBindInlet(inlet);\n    inlet.attachOutlet(this);\n    (this as Mutable<typeof this>).inletVersion = -1;\n    (this as Mutable<typeof this>).inlet = inlet;\n    this.onBindInlet(inlet);\n    this.didBindInlet(inlet);\n  },\n\n  willBindInlet(inlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  onBindInlet(inlet: Fastener<any, any, any>): void {\n    this.recohere(performance.now());\n  },\n\n  didBindInlet(inlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  uninheritInlet(): void {\n    if ((this.flags & Fastener.InheritsFlag) === 0) {\n      return;\n    }\n    const inlet = this.inlet;\n    if (!(inlet instanceof Fastener)) {\n      return;\n    }\n    this.willUnbindInlet(inlet);\n    inlet.detachOutlet(this);\n    (this as Mutable<typeof this>).inletVersion = -1;\n    (this as Mutable<typeof this>).inlet = null;\n    this.onUnbindInlet(inlet);\n    this.didUnbindInlet(inlet);\n  },\n\n  unbindInlet(inlet?: Fastener<any, any, any>): void {\n    if (inlet === void 0 && this.inlet instanceof Fastener) {\n      inlet = this.inlet;\n    }\n    if (inlet instanceof Fastener && inlet === this.inlet) {\n      this.willUnbindInlet(inlet);\n      inlet.detachOutlet(this);\n      (this as Mutable<typeof this>).inletVersion = -1;\n      (this as Mutable<typeof this>).inlet = null;\n      this.onUnbindInlet(inlet);\n      this.didUnbindInlet(inlet);\n    } else if (inlet === void 0) {\n      (this as Mutable<typeof this>).inletVersion = -1;\n      (this as Mutable<typeof this>).inlet = null;\n    }\n  },\n\n  willUnbindInlet(inlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  onUnbindInlet(inlet: Fastener<any, any, any>): void {\n    this.setDerived(false);\n  },\n\n  didUnbindInlet(inlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  attachOutlet(outlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  detachOutlet(outlet: Fastener<any, any, any>): void {\n    // hook\n  },\n\n  get inheritName(): PropertyKey | undefined {\n    return (this.flags & Fastener.InheritsFlag) !== 0 ? this.name : void 0;\n  },\n\n  get inherits(): boolean {\n    return (this.flags & Fastener.InheritsFlag) !== 0;\n  },\n\n  setInherits(inherits: PropertyKey | boolean): void {\n    let inheritName: PropertyKey | undefined;\n    if (typeof inherits === \"string\" || typeof inherits === \"number\" || typeof inherits === \"symbol\") {\n      if (inherits !== this.name) {\n        inheritName = inherits;\n      }\n      inherits = true;\n    }\n    if (inherits && ((this.flags & Fastener.InheritsFlag) === 0 || (inheritName !== void 0 && inheritName !== this.name))) {\n      this.unbindInlet();\n      this.willSetInherits(true, inheritName);\n      if (inheritName !== void 0) {\n        Object.defineProperty(this, \"name\", {\n          value: inheritName,\n          enumerable: true,\n          configurable: true,\n        });\n      }\n      this.setFlags(this.flags | Fastener.InheritsFlag);\n      this.onSetInherits(true, inheritName);\n      this.didSetInherits(true, inheritName);\n      this.inheritInlet();\n    } else if (!inherits && (this.flags & Fastener.InheritsFlag) !== 0) {\n      this.unbindInlet();\n      this.willSetInherits(false, inheritName);\n      this.setFlags(this.flags & ~Fastener.InheritsFlag);\n      this.onSetInherits(false, inheritName);\n      this.didSetInherits(false, inheritName);\n    }\n  },\n\n  willSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void {\n    // hook\n  },\n\n  onSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void {\n    // hook\n  },\n\n  didSetInherits(inherits: boolean, inheritName: PropertyKey | undefined): void {\n    // hook\n  },\n\n  get derived(): boolean {\n    return (this.flags & Fastener.DerivedFlag) !== 0;\n  },\n\n  setDerived(derived: boolean): void {\n    if (derived) {\n      this.setFlags(this.flags | Fastener.DerivedFlag);\n    } else {\n      this.setFlags(this.flags & ~Fastener.DerivedFlag);\n    }\n  },\n\n  get affinity(): Affinity {\n    return (this.flags & Affinity.Mask) as Affinity;\n  },\n\n  hasAffinity(affinity: Affinity): boolean {\n    return affinity >= (this.flags & Affinity.Mask);\n  },\n\n  initAffinity(affinity: Affinity): void {\n    (this as Mutable<typeof this>).flags = this.flags & ~Affinity.Mask | affinity & Affinity.Mask;\n  },\n\n  minAffinity(newAffinity: Affinity): boolean {\n    const oldAffinity = (this.flags & Affinity.Mask) as Affinity;\n    if (newAffinity === Affinity.Reflexive) {\n      newAffinity = oldAffinity;\n    } else if ((newAffinity & ~Affinity.Mask) !== 0) {\n      throw new Error(\"invalid affinity: \" + newAffinity);\n    }\n    if (newAffinity > oldAffinity) {\n      this.willSetAffinity(newAffinity, oldAffinity);\n      this.setFlags(this.flags & ~Affinity.Mask | newAffinity);\n      this.onSetAffinity(newAffinity, oldAffinity);\n      this.didSetAffinity(newAffinity, oldAffinity);\n    }\n    return newAffinity >= oldAffinity;\n  },\n\n  setAffinity(newAffinity: Affinity): void {\n    if ((newAffinity & ~Affinity.Mask) !== 0) {\n      throw new Error(\"invalid affinity: \" + newAffinity);\n    }\n    const oldAffinity = (this.flags & Affinity.Mask) as Affinity;\n    if (newAffinity === oldAffinity) {\n      return;\n    }\n    this.willSetAffinity(newAffinity, oldAffinity);\n    this.setFlags(this.flags & ~Affinity.Mask | newAffinity);\n    this.onSetAffinity(newAffinity, oldAffinity);\n    this.didSetAffinity(newAffinity, oldAffinity);\n  },\n\n  willSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void {\n    // hook\n  },\n\n  onSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void {\n    if (newAffinity > oldAffinity && (this.flags & Fastener.DerivedFlag) !== 0) {\n      const inlet = this.inlet;\n      if (inlet instanceof Fastener && Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic) < newAffinity) {\n        this.setDerived(false);\n      }\n    } else if (newAffinity < oldAffinity && (this.flags & Fastener.InheritsFlag) !== 0) {\n      const inlet = this.inlet;\n      if (inlet instanceof Fastener && Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic) >= newAffinity) {\n        this.decohere(inlet);\n      }\n    }\n  },\n\n  didSetAffinity(newAffinity: Affinity, oldAffinity: Affinity): void {\n    // hook\n  },\n\n  get(): O {\n    return void 0 as O;\n  },\n\n  get coherent(): boolean {\n    return (this.flags & Fastener.DecoherentFlag) === 0;\n  },\n\n  setCoherent(coherent: boolean): void {\n    if (coherent) {\n      this.setFlags(this.flags & ~Fastener.DecoherentFlag);\n    } else {\n      this.setFlags(this.flags | Fastener.DecoherentFlag);\n    }\n  },\n\n  decohere(inlet?: Fastener<any, any, any>): void {\n    if (inlet === void 0 || inlet !== this.inlet || (this.flags & Fastener.DerivedFlag) !== 0) {\n      if ((this.flags & Fastener.DecoherentFlag) === 0) {\n        this.requireRecohere();\n      }\n    } else {\n      this.recohere(performance.now());\n    }\n  },\n\n  requireRecohere(): void {\n    this.setCoherent(false);\n    if (Objects.hasAllKeys<FastenerContext>(this.owner, \"decohereFastener\")) {\n      this.owner.decohereFastener!(this);\n    }\n  },\n\n  recohere(t: number): void {\n    this.setCoherentTime(t);\n    const inlet = this.inlet;\n    if (inlet instanceof Fastener) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n    } else if (Array.isArray(inlet)) {\n      this.setDerived(true);\n    } else {\n      this.setDerived(false);\n    }\n    this.setCoherent(true);\n  },\n\n  inletKeys: void 0,\n\n  resolveInlets(): readonly Fastener<any, any, any>[] | null {\n    const inletKeys = this.inletKeys;\n    if (inletKeys === void 0 || !Objects.hasAllKeys<FastenerContext>(this.owner, \"getFastener\")) {\n      return null;\n    }\n    const inlets = new Array<Fastener<any, any, any>>(inletKeys.length);\n    for (let i = 0; i < inletKeys.length; i += 1) {\n      const inletKey = inletKeys[i]!;\n      const inlet = this.owner.getFastener!(inletKey);\n      if (inlet === null) {\n        return null;\n      }\n      inlets[i] = inlet;\n    }\n    return inlets;\n  },\n\n  attachInlets(): void {\n    const inlets = this.resolveInlets();\n    if (inlets !== null) {\n      this.setInherits(false);\n      this.setFlags(this.flags | Fastener.DerivedFlag);\n      const inletVersions = new Array<number>(inlets.length);\n      for (let i = 0; i < inlets.length; i += 1) {\n        inletVersions[i] = -1;\n      }\n      (this as Mutable<typeof this>).inletVersion = inletVersions;\n      (this as Mutable<typeof this>).inlet = inlets;\n      for (let i = 0; i < inlets.length; i += 1) {\n        inlets[i]!.attachOutlet(this);\n      }\n    } else {\n      this.inheritInlet();\n    }\n  },\n\n  detachInlets(): void {\n    const inlet = this.inlet;\n    if (Array.isArray(inlet)) {\n      for (let i = 0; i < inlet.length; i += 1) {\n        (inlet[i] as Fastener).detachOutlet(this);\n      }\n      (this as Mutable<typeof this>).inletVersion = -1;\n      (this as Mutable<typeof this>).inlet = null;\n      this.setFlags(this.flags & ~Fastener.DerivedFlag);\n    } else {\n      this.uninheritInlet();\n    }\n  },\n\n  getFastener<F extends Fastener>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null {\n    if (contextType !== void 0 && contextType !== null && !(this instanceof contextType)) {\n      return null;\n    }\n    const fastener = (this as any)[fastenerName] as F | null | undefined;\n    if (fastener === void 0 || (fastenerType !== void 0 && fastenerType !== null && !(fastener instanceof fastenerType))) {\n      return null;\n    }\n    return fastener;\n  },\n\n  getParentFastener<F extends Fastener>(fastenerName: string, fastenerType?: Proto<F>, contextType?: Proto<any>): F | null {\n    return null;\n  },\n\n  attachFastener(fastener: Fastener): void {\n    if (this.mounted) {\n      fastener.mount();\n    }\n  },\n\n  decohereFastener(fastener: Fastener<any, any, any>): void {\n    if (Objects.hasAllKeys<FastenerContext>(this.owner, \"decohereFastener\")) {\n      this.owner.decohereFastener!(fastener);\n    }\n  },\n\n  requireUpdate(updateFlags: number): void {\n    if (Objects.hasAllKeys<FastenerContext>(this.owner, \"requireUpdate\")) {\n      this.owner.requireUpdate!(updateFlags);\n    }\n  },\n\n  getTransition(fastener: Fastener<any, any, any>): Timing | null {\n    if (Objects.hasAllKeys<FastenerContext>(this.owner, \"getTransition\")) {\n      return this.owner.getTransition!(fastener);\n    }\n    return null;\n  },\n\n  initFasteners(fastenerClass: FastenerClass<any>): void {\n    if (!Object.hasOwnProperty.call(fastenerClass, \"fieldInitializers\")\n        || !Object.hasOwnProperty.call(fastenerClass, \"instanceInitializers\")) {\n      return;\n    }\n    __runInitializers(this, fastenerClass.instanceInitializers!);\n    for (const key in fastenerClass.fieldInitializers!) {\n      (this as any)[key] = __runInitializers(this, fastenerClass.fieldInitializers[key]!, void 0);\n    }\n  },\n\n  mountFasteners(): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        fastener.mount();\n      }\n    }\n  },\n\n  unmountFasteners(): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        fastener.unmount();\n      }\n    }\n  },\n\n  get mounted(): boolean {\n    return (this.flags & Fastener.MountedFlag) !== 0;\n  },\n\n  mount(): void {\n    if ((this.flags & Fastener.MountedFlag) !== 0) {\n      return;\n    }\n    this.willMount();\n    this.setFlags(this.flags | Fastener.MountedFlag);\n    this.onMount();\n    this.didMount();\n  },\n\n  willMount(): void {\n    // hook\n  },\n\n  onMount(): void {\n    this.attachInlets();\n  },\n\n  didMount(): void {\n    this.mountFasteners();\n  },\n\n  unmount(): void {\n    if ((this.flags & Fastener.MountedFlag) === 0) {\n      return;\n    }\n    this.willUnmount();\n    this.setFlags(this.flags & ~Fastener.MountedFlag);\n    this.onUnmount();\n    this.didUnmount();\n  },\n\n  willUnmount(): void {\n    this.unmountFasteners();\n  },\n\n  onUnmount(): void {\n    this.detachInlets();\n  },\n\n  didUnmount(): void {\n    // hook\n  },\n\n  toString(): string {\n    return this.name.toString();\n  },\n},\n{\n  create(owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    const fastener = this.construct(null, owner);\n    fastener.init();\n    return fastener;\n  },\n\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    if (fastener === null) {\n      fastener = Object.create(this.prototype) as F;\n    }\n    (fastener as Mutable<typeof fastener>).owner = owner;\n    (fastener as Mutable<typeof fastener>).flags = fastener.flagsInit;\n    (fastener as Mutable<typeof fastener>).coherentTime = 0;\n    (fastener as Mutable<typeof fastener>).version = 0;\n    (fastener as Mutable<typeof fastener>).inletVersion = -1;\n    (fastener as Mutable<typeof fastener>).inlet = null;\n    return fastener;\n  },\n\n  declare<F2 extends F, C extends FastenerClass<any>>(className: PropertyKey): C {\n    if (typeof className === \"string\" && Identifiers.isValid(className) && className !== \"Fastener\" && className !== \"template\") {\n      return new Function(\"Fastener\",\n        \"return function \" + className + \"(template) { return Fastener.decorate.bind(Fastener, \" + className + \", template); }\"\n      )(Fastener) as C;\n    }\n\n    const fastenerClass = function <F extends Fastener<any, any, any>>(template: FastenerTemplate<F>): FastenerDecorator<F> {\n      return Fastener.decorate.bind(Fastener, Fastener, template) as unknown as FastenerDecorator<F>;\n    } as C;\n    Object.defineProperty(fastenerClass, \"name\", {\n      value: className,\n      enumerable: true,\n      configurable: true,\n    });\n    // Ensure each fastener class has its own decorator initializer fields.\n    return fastenerClass;\n  },\n\n  implement<F2 extends F, C extends FastenerClass<any>>(fastenerClass: C, template: FastenerTemplate<F2>, classTemplate?: FastenerClassTemplate<C>): void {\n    Object.defineProperty(template, \"name\", {\n      value: fastenerClass.name,\n      enumerable: true,\n      configurable: true,\n    });\n    if (\"extends\" in template) {\n      delete template.extends;\n    }\n\n    // Directly insert the template object into the prototype chain\n    // to ensure that super works correctly.\n    Object.setPrototypeOf(template, this.prototype);\n    fastenerClass.prototype = template as unknown as F2;\n    fastenerClass.prototype.constructor = fastenerClass;\n    if (classTemplate !== void 0) {\n      Object.setPrototypeOf(fastenerClass, classTemplate);\n      Object.setPrototypeOf(classTemplate, this);\n    } else {\n      Object.setPrototypeOf(fastenerClass, this);\n    }\n  },\n\n  specialize(template: F extends {readonly descriptorType?: Proto<infer D>} ? D : never): FastenerClass<F> {\n    let baseClass = template.extends as FastenerClass<F> | null | undefined;\n    if (baseClass === void 0 || baseClass === null) {\n      baseClass = this;\n    }\n    return baseClass;\n  },\n\n  refine(fastenerClass: FastenerClass<Fastener<any, any, any>>): void {\n    const fastenerPrototype = fastenerClass.prototype;\n\n    let flagsInit = fastenerPrototype.flagsInit;\n    if (Object.prototype.hasOwnProperty.call(fastenerPrototype, \"affinity\")) {\n      flagsInit = flagsInit & ~Affinity.Mask | fastenerPrototype.affinity & Affinity.Mask;\n      delete (fastenerPrototype as FastenerDescriptor<any>).affinity;\n    }\n    if (Object.prototype.hasOwnProperty.call(fastenerPrototype, \"inherits\")) {\n      let inherits = fastenerPrototype.inherits as PropertyKey | boolean;\n      if (typeof inherits === \"string\" || typeof inherits === \"number\" || typeof inherits === \"symbol\") {\n        Object.defineProperty(fastenerPrototype, \"name\", {\n          value: inherits,\n          enumerable: true,\n          configurable: true,\n        });\n        inherits = true;\n      }\n      if (inherits) {\n        flagsInit |= Fastener.InheritsFlag;\n      } else {\n        flagsInit &= ~Fastener.InheritsFlag;\n      }\n      delete (fastenerPrototype as FastenerDescriptor<any>).inherits;\n    }\n    Object.defineProperty(fastenerPrototype, \"flagsInit\", {\n      value: flagsInit,\n      enumerable: true,\n      configurable: true,\n    });\n  },\n\n  extend<F2 extends F, C extends FastenerClass<any>>(className: PropertyKey, template: FastenerTemplate<F2>, classTemplate?: FastenerClassTemplate<C>): any {\n    if (template.name !== void 0) {\n      className = template.name;\n    }\n    const fastenerClass = this.declare<F2, C>(className);\n    this.implement(fastenerClass, template, classTemplate);\n    this.refine(fastenerClass);\n    return fastenerClass;\n  },\n\n  define<F2 extends F>(className: PropertyKey, template: FastenerTemplate<F2>, extendsClass?: FastenerClass<F>): FastenerClass<F2> {\n    if (typeof template.extends === \"boolean\") {\n      if (template.extends === true) {\n        Object.defineProperty(template, \"extends\", {\n          value: extendsClass,\n          enumerable: true,\n          configurable: true,\n        });\n      } else if (template.extends === false) {\n        Object.defineProperty(template, \"extends\", {\n          value: null,\n          enumerable: true,\n          configurable: true,\n        });\n      }\n    }\n    const baseClass = this.specialize(template);\n    return baseClass.extend(className, template);\n  },\n\n  getter<F2 extends F>(): F2 {\n    throw new Error(\"missing decorator\");\n  },\n\n  decorate<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: ((this: F2 extends Fastener<infer R, any, any> ? R : never) => F2) | undefined, context: ClassFieldDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2> | ClassGetterDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never, value?: F2) => F2 {\n    if (context.kind === \"field\") {\n      return Fastener.decorateField(baseClass, template, target as undefined, context);\n    } else if (context.kind === \"getter\") {\n      return Fastener.decorateGetter(baseClass, template, target!, context);\n    }\n    throw new Error(\"unsupported \" + (context as ClassMemberDecoratorContext).kind + \" decorator\");\n  },\n\n  decorateField<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: undefined, context: ClassFieldDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never, value?: F2) => F2 {\n    const fastenerName = context.name;\n    let fastenerClass: FastenerClass<F2> | null = null;\n    context.addInitializer(function (this: F2 extends Fastener<infer R, any, any> ? R : never): void {\n      const metaclass = FastenerContextMetaclass.getOrCreate(this);\n      fastenerClass = metaclass.initFastenerClass(baseClass, template, fastenerName, fastenerName, fastenerClass);\n    });\n    return function (this: F2 extends Fastener<infer R, any, any> ? R : never, value?: F2): F2 {\n      if (value === void 0) {\n        value = context.access.get(this);\n      }\n      if (!(value instanceof fastenerClass!)) {\n        value = fastenerClass!.create(this);\n      }\n      return value;\n    };\n  },\n\n  decorateGetter<F2 extends F>(baseClass: FastenerClass<any>, template: FastenerTemplate<F2>, target: F2 extends Fastener<infer R, any, any> ? (this: R) => F2 : never, context: ClassGetterDecoratorContext<F2 extends Fastener<infer R, any, any> ? R : never, F2>): (this: F2 extends Fastener<infer R, any, any> ? R : never) => F2 {\n    const fastenerName = context.name;\n    let fastenerSlot: PropertyKey | undefined;\n    let fastenerClass: FastenerClass<F2> | null = null;\n    context.addInitializer(function (this: F2 extends Fastener<infer R, any, any> ? R : never): void {\n      const metaclass = FastenerContextMetaclass.getOrCreate(this);\n      if (fastenerSlot === void 0) {\n        fastenerSlot = metaclass.slotMap[fastenerName];\n      }\n      if (fastenerSlot === void 0) {\n        fastenerSlot = Symbol(fastenerName.toString());\n      }\n      fastenerClass = metaclass.initFastenerClass(baseClass, template, fastenerName, fastenerSlot, fastenerClass);\n      this[fastenerSlot] = void 0;\n    });\n    return function (this: F2 extends Fastener<infer R, any, any> ? R : never): F2 {\n      let fastener = this[fastenerSlot!] as F2 | undefined;\n      if (fastener === void 0) {\n        fastener = fastenerClass!.create(this);\n        this[fastenerSlot!] = fastener;\n        if (this.attachFastener !== void 0) {\n          (this as FastenerContext).attachFastener!(fastener);\n        }\n      }\n      return fastener;\n    };\n  },\n\n  defineField<F2 extends F, K extends keyof F2>(name: K, decorators: F2[K] extends Fastener<any, any, any> ? FastenerDecorator<F2[K]>[] : never): void {\n    // Ensure each fastener class has its own decorator initializer fields.\n    if (!Object.hasOwnProperty.call(this, \"fieldInitializers\")) {\n      Object.defineProperty(this, \"fieldInitializers\", {\n        value: {},\n        enumerable: true,\n        configurable: true,\n      });\n    }\n    if (!Object.hasOwnProperty.call(this, \"instanceInitializers\")) {\n      Object.defineProperty(this, \"instanceInitializers\", {\n        value: [],\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    __esDecorate(null, null, decorators as Function[], {\n      kind: \"field\",\n      name,\n      static: false,\n      private: false,\n      access: {\n        has(obj: F2): boolean {\n          return name in obj;\n        },\n        get(obj: F2): F2[K] {\n          return obj[name];\n        },\n        set(obj: F2, value: F2[K]): void {\n          obj[name] = value;\n        },\n      },\n    }, this.fieldInitializers![name] = [], this.instanceInitializers!);\n  },\n\n  defineGetter<F2 extends F, K extends keyof F2>(name: K, decorators: F2[K] extends Fastener<any, any, any> ? FastenerDecorator<F2[K]>[] : never): void {\n    // Ensure each fastener class has its own decorator initializer fields.\n    if (!Object.hasOwnProperty.call(this, \"fieldInitializers\")) {\n      Object.defineProperty(this, \"fieldInitializers\", {\n        value: {},\n        enumerable: true,\n        configurable: true,\n      });\n    }\n    if (!Object.hasOwnProperty.call(this, \"instanceInitializers\")) {\n      Object.defineProperty(this, \"instanceInitializers\", {\n        value: [],\n        enumerable: true,\n        configurable: true,\n      });\n    }\n\n    Object.defineProperty(this.prototype, name, {\n      get: Fastener.getter,\n      enumerable: true,\n      configurable: true,\n    });\n    __esDecorate(this, null, decorators as Function[], {\n      kind: \"getter\",\n      name,\n      static: false,\n      private: false,\n      access: {\n        has(obj: F2): boolean {\n          return name in obj;\n        },\n        get(obj: F2): F2[K] {\n          return obj[name];\n        },\n        set(obj: F2, value: F2[K]): void {\n          obj[name] = value;\n        },\n      },\n    }, null, this.instanceInitializers!);\n  },\n\n  MountedFlag: 1 << (Affinity.Shift + 0),\n  InheritsFlag: 1 << (Affinity.Shift + 1),\n  DerivedFlag: 1 << (Affinity.Shift + 2),\n  DecoherentFlag: 1 << (Affinity.Shift + 3),\n\n  FlagShift: Affinity.Shift + 4,\n  FlagMask: (1 << (Affinity.Shift + 4)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Equals} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {FromLike} from \"@swim/util\";\nimport type {Timing} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport type {FastenerContext} from \"./FastenerContext\";\nimport {FastenerContextMetaclass} from \"./FastenerContext\";\nimport type {FastenerDescriptor} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\n\n/** @public */\nexport interface PropertyDescriptor<R, T> extends FastenerDescriptor<R> {\n  extends?: Proto<Property<any, any, any>> | boolean | null;\n  valueType?: unknown;\n  value?: T | LikeType<T>;\n  updateFlags?: number;\n}\n\n/** @public */\nexport interface PropertyClass<P extends Property<any, any, any> = Property<any, any, any>> extends FastenerClass<P> {\n  tryValue<R, K extends keyof R, F extends R[K] = R[K]>(owner: R, fastenerName: K): F extends {readonly value: infer T} ? T : undefined;\n\n  tryValueOr<R, K extends keyof R, E, F extends R[K] = R[K]>(owner: R, fastenerName: K, elseValue: E): F extends {readonly value: infer T} ? NonNullable<T> | E : E;\n}\n\n/** @public */\nexport interface Property<R = any, T = any, I extends any[] = [T]> extends Fastener<R, T, I> {\n  /** @override */\n  get descriptorType(): Proto<PropertyDescriptor<R, T>>;\n\n  /** @override */\n  get fastenerType(): Proto<Property<any, any, any>>;\n\n  /** @override */\n  get parent(): Property<any, I[0], any> | null;\n\n  get inletValue(): I[0] | undefined;\n\n  getInletValue(): NonNullable<I[0]>;\n\n  getInletValueOr<E>(elseValue: E): NonNullable<I[0]> | E;\n\n  /** @internal */\n  readonly outlets: ReadonlySet<Fastener<any, any, any>> | null;\n\n  /** @internal @override */\n  attachOutlet(outlet: Fastener<any, any, any>): void;\n\n  /** @internal @override */\n  detachOutlet(outlet: Fastener<any, any, any>): void;\n\n  /** @internal @protected */\n  decohereOutlets(): void;\n\n  getOutletValue(outlet: Fastener<any, any, any>): T;\n\n  get(): T;\n\n  set(newValue: T | LikeType<T> | Fastener<any, I[0], any>): R;\n\n  setIntrinsic(newValue: T | LikeType<T> | Fastener<any, I[0], any>): R;\n\n  get valueType(): unknown | undefined;\n\n  initValue(): T;\n\n  readonly value: T;\n\n  getValue(): NonNullable<T>;\n\n  getValueOr<E>(elseValue: E): NonNullable<T> | E;\n\n  transformValue(value: T): T;\n\n  setValue(newValue: T | LikeType<T>, affinity?: Affinity): void;\n\n  /** @protected */\n  willSetValue(newValue: T, oldValue: T): void;\n\n  /** @protected */\n  onSetValue(newValue: T, oldValue: T): void;\n\n  /** @protected */\n  didSetValue(newValue: T, oldValue: T): void;\n\n  get transition(): Timing | boolean | null;\n\n  get updateFlags(): number | undefined;\n\n  deriveValue(...inletValues: I): T;\n\n  /** @override */\n  recohere(t: number): void;\n\n  definedValue(value: T): boolean;\n\n  equalValues(newValue: T, oldValue: T | undefined): boolean;\n\n  fromLike(value: T | LikeType<T>): T;\n}\n\n/** @public */\nexport const Property = (<R, T, I extends any[], P extends Property<any, any, any>>() => Fastener.extend<Property<R, T, I>, PropertyClass<P>>(\"Property\", {\n  get fastenerType(): Proto<Property<any, any, any>> {\n    return Property;\n  },\n\n  get inletValue(): I[0] | undefined {\n    const inlet = this.inlet;\n    return inlet instanceof Property ? inlet.getOutletValue(this) : void 0;\n  },\n\n  getInletValue(): NonNullable<I[0]> {\n    const inletValue = this.inletValue;\n    if (inletValue === void 0 || inletValue === null) {\n      let message = inletValue + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"inlet value\";\n      throw new TypeError(message);\n    }\n    return inletValue;\n  },\n\n  getInletValueOr<E>(elseValue: E): NonNullable<I[0]> | E {\n    const inletValue: I[0] | E | undefined = this.inletValue;\n    if (inletValue === void 0 || inletValue === null) {\n      return elseValue;\n    }\n    return inletValue;\n  },\n\n  attachOutlet(outlet: Property<any, any, any>): void {\n    let outlets = this.outlets as Set<Property<any, any, any>> | null;\n    if (outlets === null) {\n      outlets = new Set<Property<any, any, any>>();\n      (this as Mutable<typeof this>).outlets = outlets;\n    }\n    outlets.add(outlet);\n  },\n\n  detachOutlet(outlet: Property<any, any, any>): void {\n    const outlets = this.outlets as Set<Property<any, any, any>> | null;\n    if (outlets !== null) {\n      outlets.delete(outlet);\n    }\n  },\n\n  decohereOutlets(): void {\n    const outlets = this.outlets;\n    if (outlets !== null) {\n      for (const outlet of outlets) {\n        outlet.decohere(this);\n      }\n    }\n  },\n\n  getOutletValue(outlet: Property<any, any, any>): T {\n    return this.value;\n  },\n\n  get(): T {\n    return this.value;\n  },\n\n  set(newValue: T | LikeType<T> | Fastener<any, I[0], any>): R {\n    if (newValue instanceof Fastener) {\n      this.bindInlet(newValue);\n    } else {\n      this.setValue(newValue, Affinity.Extrinsic);\n    }\n    return this.owner;\n  },\n\n  setIntrinsic(newValue: T | LikeType<T> | Fastener<any, I[0], any>): R {\n    if (newValue instanceof Fastener) {\n      this.bindInlet(newValue);\n    } else {\n      this.setValue(newValue, Affinity.Intrinsic);\n    }\n    return this.owner;\n  },\n\n  valueType: void 0,\n\n  initValue(): T {\n    return (Object.getPrototypeOf(this) as Property<any, T, any>).value;\n  },\n\n  getValue(): NonNullable<T> {\n    const value = this.value;\n    if (value === void 0 || value === null) {\n      let message = value + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"value\";\n      throw new TypeError(message);\n    }\n    return value;\n  },\n\n  getValueOr<E>(elseValue: E): NonNullable<T> | E {\n    const value: T | E = this.value;\n    if (value === void 0 || value === null) {\n      return elseValue;\n    }\n    return value;\n  },\n\n  transformValue(value: T): T {\n    return value;\n  },\n\n  setValue(newValue: T | LikeType<T>, affinity?: Affinity): void {\n    if (affinity === void 0) {\n      affinity = Affinity.Extrinsic;\n    }\n    if (!this.minAffinity(affinity)) {\n      return;\n    }\n    newValue = this.fromLike(newValue);\n    newValue = this.transformValue(newValue);\n    const oldValue = this.value;\n    if (this.equalValues(newValue, oldValue)) {\n      this.setCoherent(true);\n      return;\n    }\n    this.willSetValue(newValue, oldValue);\n    this.incrementVersion();\n    (this as Mutable<typeof this>).value = newValue;\n    this.onSetValue(newValue, oldValue);\n    this.didSetValue(newValue, oldValue);\n    this.setCoherent(true);\n    this.decohereOutlets();\n  },\n\n  willSetValue(newValue: T, oldValue: T): void {\n    // hook\n  },\n\n  onSetValue(newValue: T, oldValue: T): void {\n    const updateFlags = this.updateFlags;\n    if (updateFlags !== void 0 && Objects.hasAllKeys<FastenerContext>(this.owner, \"requireUpdate\")) {\n      this.owner.requireUpdate!(updateFlags);\n    }\n  },\n\n  didSetValue(newValue: T, oldValue: T): void {\n    // hook\n  },\n\n  get transition(): Timing | boolean | null {\n    if (this.derived && this.inlet instanceof Property) {\n      return this.inlet.transition;\n    }\n    return null;\n  },\n\n  updateFlags: void 0,\n\n  deriveValue(...inletValues: any[]): T {\n    return inletValues[0] as T;\n  },\n\n  recohere(t: number): void {\n    this.setCoherentTime(t);\n    const inlet = this.inlet;\n    if (inlet instanceof Property) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n      if ((this.flags & Fastener.DerivedFlag) !== 0) {\n        (this as Mutable<typeof this>).inletVersion = inlet.version;\n        const derivedValue = (this as unknown as Property<R, T, [unknown]>).deriveValue(inlet.getOutletValue(this));\n        this.setValue(derivedValue, Affinity.Reflexive);\n      } else {\n        this.setCoherent(true);\n      }\n    } else if (Array.isArray(inlet)) {\n      this.setDerived(true);\n      const inletVersions = this.inletVersion as number[];\n      const inletValues = new Array<unknown>(inlet.length);\n      for (let i = 0; i < inlet.length; i += 1) {\n        if (inlet[i] instanceof Property) {\n          inletVersions[i] = (inlet[i] as Property).version;\n          inletValues[i] = (inlet[i] as Property).getOutletValue(this);\n        } else {\n          this.setDerived(false);\n          this.setCoherent(true);\n          return;\n        }\n      }\n      const derivedValue = this.deriveValue(...(inletValues as I));\n      this.setValue(derivedValue, Affinity.Reflexive);\n    } else {\n      this.setDerived(false);\n      this.setCoherent(true);\n    }\n  },\n\n  definedValue(value: T): boolean {\n    return value !== void 0 && value !== null;\n  },\n\n  equalValues(newValue: T, oldValue: T | undefined): boolean {\n    return Equals(newValue, oldValue);\n  },\n\n  fromLike(value: T | LikeType<T>): T {\n    return FromLike(this.valueType, value);\n  },\n},\n{\n  tryValue<R, K extends keyof R, F extends R[K]>(owner: R, fastenerName: K): F extends {readonly value: infer T} ? T : undefined {\n    const metaclass = FastenerContextMetaclass.get(owner);\n    if (metaclass === null) {\n      return void 0 as any;\n    }\n    const property = metaclass.tryFastener(owner, fastenerName);\n    if (!(property instanceof Property)) {\n      const propertyClass = metaclass.getFastenerClass(fastenerName) as PropertyClass | null;\n      if (propertyClass === null) {\n        return void 0 as any;\n      }\n      return propertyClass.prototype.value;\n    }\n    return property.value;\n  },\n\n  tryValueOr<R, K extends keyof R, E, F extends R[K] = R[K]>(owner: R, fastenerName: K, elseValue: E): F extends {readonly value: infer T} ? NonNullable<T> | E : E {\n    let value: (F extends {readonly value: infer T} ? T : undefined) | E = this.tryValue(owner, fastenerName);\n    if (value === void 0 || value === null) {\n      value = elseValue;\n    }\n    return value as F extends {readonly value: infer T} ? NonNullable<T> | E : E;\n  },\n\n  construct(property: P | null, owner: P extends Fastener<infer R, any, any> ? R : never): P {\n    property = super.construct(property, owner) as P;\n    (property as Mutable<typeof property>).outlets = null;\n    (property as Mutable<typeof property>).value = property.initValue();\n    return property;\n  },\n\n  refine(propertyClass: FastenerClass<Property<any, any, any>>): void {\n    super.refine(propertyClass);\n    const propertyPrototype = propertyClass.prototype;\n\n    const valueDescriptor = Object.getOwnPropertyDescriptor(propertyPrototype, \"value\");\n    if (valueDescriptor !== void 0 && \"value\" in valueDescriptor) {\n      valueDescriptor.value = propertyPrototype.fromLike(valueDescriptor.value);\n      Object.defineProperty(propertyPrototype, \"value\", valueDescriptor);\n    }\n  },\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Timing} from \"@swim/util\";\nimport {Easing} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport type {FastenerContext} from \"./FastenerContext\";\nimport type {FastenerFlags} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {PropertyDescriptor} from \"./Property\";\nimport type {PropertyClass} from \"./Property\";\nimport {Property} from \"./Property\";\n\n/** @public */\nexport interface AnimatorDescriptor<R, T> extends PropertyDescriptor<R, T> {\n  extends?: Proto<Animator<any, any, any>> | boolean | null;\n  transition?: TimingLike | boolean | null;\n}\n\n/** @public */\nexport interface AnimatorClass<A extends Animator<any, any, any> = Animator<any, any, any>> extends PropertyClass<A> {\n  /** @internal */\n  readonly TweeningFlag: FastenerFlags;\n  /** @internal */\n  readonly DivergedFlag: FastenerFlags;\n  /** @internal */\n  readonly InterruptFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface Animator<R = any, T = any, I extends any[] = [T]> extends Property<R, T, I> {\n  /** @override */\n  get descriptorType(): Proto<AnimatorDescriptor<R, T>>;\n\n  get inletState(): I[0] | undefined;\n\n  getInletState(): NonNullable<I[0]>;\n\n  getInletStateOr<E>(elseState: E): NonNullable<I[0]> | E;\n\n  getOutletState(outlet: Fastener<any, any, any>): T;\n\n  /** @override */\n  set(newValue: T | LikeType<T> | Fastener<any, I[0], any>, timing?: TimingLike | boolean | null): R;\n\n  /** @override */\n  setIntrinsic(newValue: T | LikeType<T> | Fastener<any, I[0], any>, timing?: TimingLike | boolean | null): R;\n\n  /** @override */\n  setValue(newValue: T | LikeType<T>, affinity?: Affinity): void;\n\n  readonly state: T;\n\n  getState(): NonNullable<T>;\n\n  getStateOr<E>(elseState: E): NonNullable<T> | E;\n\n  transformState(state: T): T;\n\n  setState(newState: T | LikeType<T>, timingOrAffinity: Affinity | TimingLike | boolean | null | undefined): void;\n  setState(newState: T | LikeType<T>, timing?: TimingLike | boolean | null, affinity?: Affinity): void;\n\n  /** @protected */\n  willSetState(newState: T, oldState: T): void;\n\n  /** @protected */\n  onSetState(newState: T, oldState: T): void;\n\n  /** @protected */\n  didSetState(newState: T, oldState: T): void;\n\n  readonly timing: Timing | null;\n\n  readonly interpolator: Interpolator<T> | null;\n\n  setInterpolatedValue(newValue: T, newState?: T): void;\n\n  /** @override */\n  decohere(inlet?: Fastener<any, any, any>): void;\n\n  /** @override */\n  recohere(t: number): void;\n\n  /** @internal @protected */\n  tween(t: number): void;\n\n  /** @internal @protected */\n  tweenInherited(t: number): void;\n\n  /**\n   * Returns `true` if this animator is actively transitioning to a new `state`.\n   */\n  get tweening(): boolean;\n\n  /** @internal */\n  startTweening(): void;\n\n  /** @protected */\n  willStartTweening(): void;\n\n  /** @protected */\n  onStartTweening(): void;\n\n  /** @protected */\n  didStartTweening(): void;\n\n  /** @internal */\n  stopTweening(): void;\n\n  /** @protected */\n  willStopTweening(): void;\n\n  /** @protected */\n  onStopTweening(): void;\n\n  /** @protected */\n  didStopTweening(): void;\n\n  /** @protected */\n  willTransition(oldValue: T): void;\n\n  /** @protected */\n  didTransition(newValue: T): void;\n\n  /** @protected */\n  didInterrupt(value: T): void;\n}\n\n/** @public */\nexport const Animator = (<R, T, I extends any[], A extends Animator<any, any, any>>() => Property.extend<Animator<R, T, I>, AnimatorClass<A>>(\"Animator\", {\n  get inletState(): I[0] | undefined {\n    const inlet = this.inlet;\n    return inlet instanceof Animator ? inlet.getOutletState(this) : void 0;\n  },\n\n  getInletState(): NonNullable<I[0]> {\n    const inletState = this.inletState;\n    if (inletState === void 0 || inletState === null) {\n      let message = inletState + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"inlet state\";\n      throw new TypeError(message);\n    }\n    return inletState;\n  },\n\n  getInletStateOr<E>(elseState: E): NonNullable<I[0]> | E {\n    const inletState: I[0] | E | undefined = this.inletState;\n    if (inletState === void 0 || inletState === null) {\n      return elseState;\n    }\n    return inletState;\n  },\n\n  getOutletState(outlet: Fastener<any, any, any>): T {\n    return this.state;\n  },\n\n  set(newValue: T | LikeType<T> | Fastener<any, I[0], any>, timing?: TimingLike | boolean | null): R {\n    if (newValue instanceof Fastener) {\n      this.bindInlet(newValue);\n    } else {\n      this.setState(newValue, timing, Affinity.Extrinsic);\n    }\n    return this.owner;\n  },\n\n  setIntrinsic(newValue: T | LikeType<T> | Fastener<any, I[0], any>, timing?: TimingLike | boolean | null): R {\n    if (newValue instanceof Fastener) {\n      this.bindInlet(newValue);\n    } else {\n      this.setState(newValue, timing, Affinity.Intrinsic);\n    }\n    return this.owner;\n  },\n\n  setValue(newValue: T | LikeType<T>, affinity?: Affinity): void {\n    if (affinity === void 0) {\n      affinity = Affinity.Extrinsic;\n    }\n    if (!this.minAffinity(affinity)) {\n      return;\n    }\n    newValue = this.fromLike(newValue);\n    newValue = this.transformValue(newValue);\n    const oldValue = this.value;\n    if (this.equalValues(newValue, oldValue)) {\n      return;\n    }\n    this.willSetValue(newValue, oldValue);\n    this.incrementVersion();\n    (this as Mutable<typeof this>).value = newValue;\n    this.onSetValue(newValue, oldValue);\n    this.didSetValue(newValue, oldValue);\n    this.decohereOutlets();\n  },\n\n  getState(): NonNullable<T> {\n    const state = this.state;\n    if (state === void 0 || state === null) {\n      let message = state + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"state\";\n      throw new TypeError(message);\n    }\n    return state;\n  },\n\n  getStateOr<E>(elseState: E): NonNullable<T> | E {\n    const state: T | E = this.state;\n    if (state === void 0 || state === null) {\n      return elseState;\n    }\n    return state;\n  },\n\n  transformState(state: T): T {\n    return state;\n  },\n\n  setState(newState: T | LikeType<T>, timing?: Affinity | TimingLike | boolean | null, affinity?: Affinity): void {\n    if (typeof timing === \"number\") {\n      affinity = timing;\n      timing = void 0;\n    }\n    if (affinity === void 0) {\n      affinity = Affinity.Extrinsic;\n    }\n    if (!this.minAffinity(affinity)) {\n      return;\n    }\n\n    newState = this.fromLike(newState);\n    newState = this.transformState(newState);\n    const oldState = this.state;\n    if (timing === void 0 && this.equalValues(newState, oldState)) {\n      return;\n    }\n\n    if (timing === void 0) {\n      timing = this.transition;\n    } else {\n      timing = Timing.fromLike(timing);\n    }\n    if (timing === true) {\n      if (Objects.hasAllKeys<FastenerContext>(this.owner, \"getTransition\")) {\n        timing = this.owner.getTransition!(this);\n      } else {\n        timing = this.timing;\n      }\n    } else if (timing === false) {\n      timing = null;\n    }\n\n    const tweened = timing !== null && this.definedValue(oldState);\n\n    this.willSetState(newState, oldState);\n\n    (this as Mutable<typeof this>).state = newState;\n\n    if (tweened) {\n      (this as Mutable<typeof this>).timing = timing;\n      (this as Mutable<typeof this>).interpolator = Interpolator(this.value, newState);\n      if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.setFlags(this.flags | (Animator.DivergedFlag | Animator.InterruptFlag));\n      } else {\n        this.setFlags(this.flags | Animator.DivergedFlag);\n      }\n    } else {\n      (this as Mutable<typeof this>).timing = null;\n      (this as Mutable<typeof this>).interpolator = null;\n    }\n\n    this.onSetState(newState, oldState);\n\n    if (!tweened) {\n      this.setValue(newState, Affinity.Reflexive);\n    }\n\n    this.didSetState(newState, oldState);\n\n    if (tweened) {\n      this.startTweening();\n    } else if ((this.flags & Animator.TweeningFlag) !== 0) {\n      this.didInterrupt(this.value);\n      this.stopTweening();\n    }\n  },\n\n  willSetState(newState: T, oldState: T): void {\n    // hook\n  },\n\n  onSetState(newState: T, oldState: T): void {\n    // hook\n  },\n\n  didSetState(newState: T, oldState: T): void {\n    // hook\n  },\n\n  setInterpolatedValue(this: Animator<unknown, T>, newValue: T, newState?: T): void {\n    const oldState = arguments.length > 1 ? this.state : void 0;\n    const stateChanged = arguments.length > 1 && !this.equalValues(newState!, oldState);\n    if (stateChanged) {\n      this.willSetState(newState!, oldState!);\n      (this as Mutable<typeof this>).state = newState!;\n      (this as Mutable<typeof this>).timing = null;\n      (this as Mutable<typeof this>).interpolator = null;\n      this.onSetState(newState!, oldState!);\n    }\n\n    this.setValue(newValue, Affinity.Reflexive);\n\n    if (stateChanged) {\n      this.didSetState(newState!, oldState!);\n      if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.didInterrupt(this.value);\n        this.stopTweening();\n      }\n    }\n  },\n\n  decohere(inlet?: Fastener<any, any, any>): void {\n    if (inlet === void 0 || inlet !== this.inlet || (this.flags & Fastener.DerivedFlag) !== 0) {\n      if (inlet instanceof Animator && (inlet.flags & Animator.TweeningFlag) !== 0) {\n        this.startTweening();\n      }\n      if ((this.flags & Fastener.DecoherentFlag) === 0) {\n        this.requireRecohere();\n      }\n    } else {\n      this.recohere(performance.now());\n    }\n  },\n\n  recohere(t: number): void {\n    this.setCoherentTime(t);\n    const inlet = this.inlet;\n    if (inlet instanceof Animator) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n      if ((this.flags & Fastener.DerivedFlag) !== 0) {\n        this.tweenInherited(t);\n      } else if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.tween(t);\n      } else {\n        this.setCoherent(true);\n      }\n    } else if (inlet instanceof Property) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n      if ((this.flags & Fastener.DerivedFlag) !== 0 && this.inletVersion !== inlet.version) {\n        (this as Mutable<typeof this>).inletVersion = inlet.version;\n        const derivedValue = (this as unknown as Property<R, T, [unknown]>).deriveValue(inlet.getOutletValue(this));\n        this.setState(derivedValue, Affinity.Reflexive);\n        if ((this.flags & Animator.TweeningFlag) !== 0) {\n          this.tween(t);\n        } else {\n          this.setCoherent(true);\n        }\n      } else if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.tween(t);\n      } else {\n        this.setCoherent(true);\n      }\n    } else if (Array.isArray(inlet)) {\n      this.setDerived(true);\n      const inletVersions = this.inletVersion as number[];\n      const inletValues = new Array<unknown>(inlet.length);\n      for (let i = 0; i < inlet.length; i += 1) {\n        if (inlet[i] instanceof Property) {\n          inletVersions[i] = (inlet[i] as Property).version;\n          inletValues[i] = (inlet[i] as Property).getOutletValue(this);\n        } else {\n          this.setDerived(false);\n          this.setCoherent(true);\n          return;\n        }\n      }\n      const derivedValue = this.deriveValue(...(inletValues as I));\n      this.setState(derivedValue, Affinity.Reflexive);\n      if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.tween(t);\n      } else {\n        this.setCoherent(true);\n      }\n    } else {\n      this.setDerived(false);\n      if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.tween(t);\n      } else {\n        this.setCoherent(true);\n      }\n    }\n  },\n\n  tween(t: number): void {\n    const oldValue = this.value;\n\n    let timing = this.timing;\n    if (timing === null) {\n      timing = Easing.linear.withDomain(t, t);\n      (this as Mutable<typeof this>).timing = timing;\n    }\n\n    let interpolator = this.interpolator;\n    if (interpolator === null) {\n      interpolator = Interpolator(oldValue, this.state);\n      (this as Mutable<typeof this>).interpolator = interpolator;\n    }\n\n    if ((this.flags & Animator.InterruptFlag) !== 0) {\n      this.setFlags(this.flags & ~Animator.InterruptFlag);\n      this.didInterrupt(oldValue);\n    }\n\n    if ((this.flags & Animator.DivergedFlag) !== 0) {\n      this.setFlags(this.flags & ~Animator.DivergedFlag);\n      if (!this.equalValues(this.state, oldValue)) {\n        timing = timing.withDomain(t, t + timing.duration);\n      } else {\n        timing = timing.withDomain(t - timing.duration, t);\n      }\n      (this as Mutable<typeof this>).timing = timing;\n      this.willTransition(oldValue);\n    }\n\n    const u = timing(t);\n    const newValue = interpolator(u);\n    this.setValue(newValue, Affinity.Reflexive);\n\n    if (u < 1) {\n      this.requireRecohere();\n    } else if ((this.flags & Animator.TweeningFlag) !== 0) {\n      this.stopTweening();\n      (this as Mutable<typeof this>).interpolator = null;\n      this.didTransition(this.value);\n    } else {\n      this.setCoherent(true);\n    }\n  },\n\n  tweenInherited(t: number): void {\n    const inlet = this.inlet;\n    if (!(inlet instanceof Animator)) {\n      this.stopTweening();\n      return;\n    }\n    (this as Mutable<typeof this>).inletVersion = inlet.version;\n    const newValue = (this as unknown as Animator<R, T, [unknown]>).deriveValue(inlet.getOutletValue(this));\n    const newState = (this as unknown as Animator<R, T, [unknown]>).deriveValue(inlet.getOutletState(this));\n    const oldState = this.state;\n    const stateChanged = !this.equalValues(newState, oldState);\n    if (stateChanged) {\n      this.willSetState(newState, oldState);\n      (this as Mutable<typeof this>).state = newState!;\n      (this as Mutable<typeof this>).timing = null;\n      (this as Mutable<typeof this>).interpolator = null;\n      this.onSetState(newState, oldState);\n    }\n\n    this.setValue(newValue, Affinity.Reflexive);\n\n    if (stateChanged) {\n      this.didSetState(newState, oldState!);\n      if ((this.flags & Animator.TweeningFlag) !== 0) {\n        this.didInterrupt(this.value);\n      }\n      this.willTransition(this.value);\n    }\n\n    if ((inlet.flags & Animator.TweeningFlag) !== 0) {\n      this.requireRecohere();\n    } else if ((this.flags & Animator.TweeningFlag) !== 0) {\n      this.stopTweening();\n      this.didTransition(this.value);\n    } else {\n      this.setCoherent(true);\n    }\n  },\n\n  get tweening(): boolean {\n    return (this.flags & Animator.TweeningFlag) !== 0;\n  },\n\n  startTweening(): void {\n    if ((this.flags & Animator.TweeningFlag) !== 0) {\n      return;\n    }\n    this.willStartTweening();\n    this.setFlags(this.flags | Animator.TweeningFlag);\n    this.onStartTweening();\n    this.didStartTweening();\n  },\n\n  willStartTweening(): void {\n    // hook\n  },\n\n  onStartTweening(): void {\n    this.decohere();\n    this.decohereOutlets();\n  },\n\n  didStartTweening(): void {\n    // hook\n  },\n\n  stopTweening(): void {\n    if ((this.flags & Animator.TweeningFlag) === 0) {\n      return;\n    }\n    this.willStopTweening();\n    this.setFlags(this.flags & ~Animator.TweeningFlag);\n    this.onStopTweening();\n    this.didStopTweening();\n  },\n\n  willStopTweening(): void {\n    // hook\n  },\n\n  onStopTweening(): void {\n    this.setCoherent(true);\n  },\n\n  didStopTweening(): void {\n    // hook\n  },\n\n  willTransition(oldValue: T): void {\n    // hook\n  },\n\n  didTransition(newValue: T): void {\n    // hook\n  },\n\n  didInterrupt(value: T): void {\n    // hook\n  },\n},\n{\n  construct(animator: A | null, owner: A extends Fastener<infer R, any, any> ? R : never): A {\n    animator = super.construct(animator, owner) as A;\n    (animator as Mutable<typeof animator>).state = animator.value;\n    (animator as Mutable<typeof animator>).timing = null;\n    (animator as Mutable<typeof animator>).interpolator = null;\n    return animator;\n  },\n\n  refine(animatorClass: FastenerClass<Animator<any, any, any>>): void {\n    super.refine(animatorClass);\n    const animatorPrototype = animatorClass.prototype;\n\n    const transitionDescriptor = Object.getOwnPropertyDescriptor(animatorPrototype, \"transition\");\n    if (transitionDescriptor !== void 0 && \"value\" in transitionDescriptor) {\n      transitionDescriptor.value = Timing.fromLike(transitionDescriptor.value);\n      Object.defineProperty(animatorPrototype, \"transition\", transitionDescriptor);\n    }\n  },\n\n  TweeningFlag: 1 << (Property.FlagShift + 0),\n  DivergedFlag: 1 << (Property.FlagShift + 1),\n  InterruptFlag: 1 << (Property.FlagShift + 2),\n\n  FlagShift: Property.FlagShift + 3,\n  FlagMask: (1 << (Property.FlagShift + 3)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {FastenerDescriptor} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\n\n/** @public */\nexport interface TimerDescriptor<R> extends FastenerDescriptor<R> {\n  extends?: Proto<Timer<any>> | boolean | null;\n}\n\n/** @public */\nexport interface TimerClass<F extends Timer<any> = Timer<any>> extends FastenerClass<F> {\n}\n\n/** @public */\nexport interface Timer<R = any> extends Fastener<R> {\n  (): void;\n\n  /** @override */\n  get descriptorType(): Proto<TimerDescriptor<R>>;\n\n  /** @override */\n  get fastenerType(): Proto<Timer<any>>;\n\n  /** @protected */\n  fire(): void;\n\n  initDelay(): number;\n\n  readonly delay: number;\n\n  setDelay(delay: number): void;\n\n  readonly deadline: number | undefined;\n\n  get elapsed(): number | undefined;\n\n  get remaining(): number | undefined;\n\n  get scheduled(): boolean;\n\n  schedule(delay?: number): void;\n\n  throttle(delay?: number): void;\n\n  debounce(delay?: number): void;\n\n  /** @protected */\n  willSchedule(delay: number): void;\n\n  /** @protected */\n  onSchedule(delay: number): void;\n\n  /** @protected */\n  didSchedule(delay: number): void;\n\n  cancel(): void;\n\n  /** @protected */\n  willCancel(): void;\n\n  /** @protected */\n  onCancel(): void;\n\n  /** @protected */\n  didCancel(): void;\n\n  /** @internal @protected */\n  expire(): void;\n\n  /** @protected */\n  willExpire(): void;\n\n  /** @protected */\n  onExpire(): void;\n\n  /** @protected */\n  didExpire(): void;\n\n  /** @internal */\n  readonly timeout: unknown | undefined;\n\n  /** @protected */\n  setTimeout(callback: () => void, delay: number): unknown;\n\n  /** @protected */\n  clearTimeout(timeoutId: unknown): void;\n\n  /** @override @protected */\n  onUnmount(): void;\n}\n\n/** @public */\nexport const Timer = (<R, F extends Timer<any>>() => Fastener.extend<Timer<R>, TimerClass<F>>(\"Timer\", {\n  get fastenerType(): Proto<Timer<any>> {\n    return Timer;\n  },\n\n  fire(): void {\n    // hook\n  },\n\n  delay: 0,\n\n  initDelay(): number {\n    const delay = (Object.getPrototypeOf(this) as Timer<any>).delay;\n    return Math.max(0, delay);\n  },\n\n  setDelay(delay: number): void {\n    (this as Mutable<typeof this>).delay = Math.max(0, delay);\n  },\n\n  get elapsed(): number | undefined {\n    const deadline = this.deadline;\n    if (deadline === void 0) {\n      return void 0;\n    }\n    return Math.max(0, performance.now() - (deadline - this.delay));\n  },\n\n  get remaining(): number | undefined {\n    const deadline = this.deadline;\n    if (deadline === void 0) {\n      return void 0;\n    }\n    return Math.max(0, deadline - performance.now());\n  },\n\n  get scheduled(): boolean {\n    return this.timeout !== void 0;\n  },\n\n  schedule(delay?: number): void {\n    if (this.timeout !== void 0) {\n      throw new Error(\"timer already scheduled; call throttle or debounce to reschedule\");\n    } else if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(delay);\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(delay);\n    this.didSchedule(delay);\n  },\n\n  throttle(delay?: number): void {\n    if (this.timeout !== void 0) {\n      return;\n    } else if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(delay);\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(delay);\n    this.didSchedule(delay);\n  },\n\n  debounce(delay?: number): void {\n    const timeout = this.timeout;\n    if (timeout !== void 0) {\n      this.willCancel();\n      (this as Mutable<typeof this>).timeout = void 0;\n      (this as Mutable<typeof this>).deadline = void 0;\n      this.clearTimeout(timeout);\n      this.onCancel();\n      this.didCancel();\n    }\n    if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(delay);\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(delay);\n    this.didSchedule(delay);\n  },\n\n  willSchedule(delay: number): void {\n    // hook\n  },\n\n  onSchedule(delay: number): void {\n    // hook\n  },\n\n  didSchedule(delay: number): void {\n    // hook\n  },\n\n  cancel(): void {\n    const timeout = this.timeout;\n    if (timeout === void 0) {\n      return;\n    }\n    this.willCancel();\n    (this as Mutable<typeof this>).timeout = void 0;\n    (this as Mutable<typeof this>).deadline = void 0;\n    this.clearTimeout(timeout);\n    this.onCancel();\n    this.didCancel();\n  },\n\n  willCancel(): void {\n    // hook\n  },\n\n  onCancel(): void {\n    // hook\n  },\n\n  didCancel(): void {\n    // hook\n  },\n\n  expire(): void {\n    (this as Mutable<typeof this>).timeout = void 0;\n    (this as Mutable<typeof this>).deadline = void 0;\n    this.willExpire();\n    this.fire();\n    this.onExpire();\n    this.didExpire();\n  },\n\n  willExpire(): void {\n    // hook\n  },\n\n  onExpire(): void {\n    // hook\n  },\n\n  didExpire(): void {\n    // hook\n  },\n\n  setTimeout(callback: () => void, delay: number): unknown {\n    return setTimeout(callback, delay);\n  },\n\n  clearTimeout(timeout: unknown): void {\n    clearTimeout(timeout as any);\n  },\n\n  onUnmount(): void {\n    super.onUnmount();\n    this.cancel();\n  },\n},\n{\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    if (fastener === null) {\n      fastener = function (): void {\n        fastener!.expire();\n      } as F;\n      Object.defineProperty(fastener, \"name\", {\n        value: this.prototype.name,\n        enumerable: true,\n        configurable: true,\n      });\n      Object.setPrototypeOf(fastener, this.prototype);\n    }\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).delay = fastener.initDelay();\n    (fastener as Mutable<typeof fastener>).deadline = 0;\n    (fastener as Mutable<typeof fastener>).timeout = void 0;\n    return fastener;\n  },\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {FastenerFlags} from \"./Fastener\";\nimport type {FastenerDescriptor} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {Component} from \"./Component\";\n\n/** @public */\nexport interface EventHandlerDescriptor<R, T> extends FastenerDescriptor<R> {\n  extends?: Proto<EventHandler<any, any>> | boolean | null;\n  enabled?: boolean;\n}\n\n/** @public */\nexport interface EventHandlerClass<F extends EventHandler<any, any> = EventHandler<any, any>> extends FastenerClass<F> {\n  /** @internal */\n  readonly EnabledFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface EventHandler<R = any, T = EventTarget> extends Fastener<R>, EventListener {\n  /** @override */\n  (event: Event): void;\n\n  /** @override */\n  get descriptorType(): Proto<EventHandlerDescriptor<R, T>>;\n\n  /** @override */\n  get fastenerType(): Proto<EventHandler<any, any>>;\n\n  get bindsOwner(): boolean;\n\n  initEventType(): string | readonly string[] | undefined;\n\n  readonly eventType: string | readonly string[] | undefined;\n\n  initTarget(): T | null;\n\n  readonly target: T | null;\n\n  getTarget(): T;\n\n  setTarget(target: T | null): T | null;\n\n  /** @protected */\n  willAttachTarget(target: T): void;\n\n  /** @protected */\n  onAttachTarget(target: T): void;\n\n  /** @protected */\n  didAttachTarget(target: T): void;\n\n  /** @protected */\n  willDetachTarget(target: T): void;\n\n  /** @protected */\n  onDetachTarget(target: T): void;\n\n  /** @protected */\n  didDetachTarget(target: T): void;\n\n  get options(): AddEventListenerOptions | undefined;\n\n  /** @protected */\n  attachEvents(target: T): void;\n\n  /** @protected */\n  attachEvent(target: T, eventType: string): void;\n\n  /** @protected */\n  detachEvents(target: T): void;\n\n  /** @protected */\n  detachEvent(target: T, eventType: string): void;\n\n  /** @protected */\n  handle(event: Event): void;\n\n  get enabled(): boolean;\n\n  set enabled(enabled: boolean);\n\n  /** @protected */\n  willEnable(): void;\n\n  /** @protected */\n  onEnable(): void;\n\n  /** @protected */\n  didEnable(): void;\n\n  /** @protected */\n  willDisable(): void;\n\n  /** @protected */\n  onDisable(): void;\n\n  /** @protected */\n  didDisable(): void;\n\n  /** @internal */\n  bindComponent(component: Component<any>, target?: Component<any> | null): void;\n\n  /** @internal */\n  unbindComponent(component: Component<any>): void;\n\n  detectComponent(component: Component<any>): T | null;\n\n  /** @protected @override */\n  onMount(): void;\n\n  /** @protected @override */\n  onUnmount(): void;\n}\n\n/** @public */\nexport const EventHandler = (<R, T, F extends EventHandler<any, any>>() => Fastener.extend<EventHandler<R, T>, EventHandlerClass<F>>(\"EventHandler\", {\n  get fastenerType(): Proto<EventHandler<any, any>> {\n    return EventHandler;\n  },\n\n  bindsOwner: false,\n\n  eventType: void 0,\n\n  initEventType(): string | readonly string[] | undefined {\n    return (Object.getPrototypeOf(this) as EventHandler<R, T>).eventType;\n  },\n\n  target: null,\n\n  initTarget(): T | null {\n    let target = (Object.getPrototypeOf(this) as EventHandler<R, T>).target;\n    if (target === null && this.bindsOwner === true) {\n      target = this.owner as unknown as T;\n    }\n    return target;\n  },\n\n  getTarget(): T {\n    const target = this.target;\n    if (target === null) {\n      let message = target + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"event target\";\n      throw new TypeError(message);\n    }\n    return target;\n  },\n\n  setTarget(newTarget: T | null): T | null {\n    const oldTarget = this.target;\n    if (oldTarget === newTarget) {\n      return oldTarget;\n    } else if (oldTarget !== null) {\n      (this as Mutable<typeof this>).target = null;\n      this.willDetachTarget(oldTarget);\n      this.onDetachTarget(oldTarget);\n      this.didDetachTarget(oldTarget);\n    }\n    if (newTarget !== null) {\n      (this as Mutable<typeof this>).target = newTarget;\n      this.willAttachTarget(newTarget);\n      this.onAttachTarget(newTarget);\n      this.didAttachTarget(newTarget);\n    }\n    return oldTarget;\n  },\n\n  willAttachTarget(target: T): void {\n    // hook\n  },\n\n  onAttachTarget(target: T): void {\n    if ((this.flags & (Fastener.MountedFlag | EventHandler.EnabledFlag)) === (Fastener.MountedFlag | EventHandler.EnabledFlag)) {\n      this.attachEvents(target);\n    }\n  },\n\n  didAttachTarget(target: T): void {\n    // hook\n  },\n\n  willDetachTarget(target: T): void {\n    // hook\n  },\n\n  onDetachTarget(target: T): void {\n    if ((this.flags & (Fastener.MountedFlag | EventHandler.EnabledFlag)) === (Fastener.MountedFlag | EventHandler.EnabledFlag)) {\n      this.detachEvents(target);\n    }\n  },\n\n  didDetachTarget(target: T): void {\n    // hook\n  },\n\n  options: void 0,\n\n  attachEvents(target: T): void {\n    const eventType = this.eventType;\n    if (typeof eventType === \"string\") {\n      this.attachEvent(target, eventType);\n    } else if (eventType !== void 0) {\n      for (let i = 0; i < eventType.length; i += 1) {\n        this.attachEvent(target, eventType[i]!);\n      }\n    }\n  },\n\n  attachEvent(target: T, eventType: string): void {\n    if (Objects.hasAllKeys<EventTarget>(target, \"addEventListener\", \"removeEventListener\")) {\n      target.addEventListener(eventType, this, this.options);\n    }\n  },\n\n  detachEvents(target: T): void {\n    const eventType = this.eventType;\n    if (typeof eventType === \"string\") {\n      this.detachEvent(target, eventType);\n    } else if (eventType !== void 0) {\n      for (let i = 0; i < eventType.length; i += 1) {\n        this.detachEvent(target, eventType[i]!);\n      }\n    }\n  },\n\n  detachEvent(target: T, eventType: string): void {\n    if (Objects.hasAllKeys<EventTarget>(target, \"addEventListener\", \"removeEventListener\")) {\n      target.removeEventListener(eventType, this, this.options);\n    }\n  },\n\n  handle(event: Event): void {\n    // hook\n  },\n\n  flagsInit: 1 << (Fastener.FlagShift + 0), // EnabledFlag\n\n  get enabled(): boolean {\n    return (this.flags & EventHandler.EnabledFlag) !== 0;\n  },\n\n  set enabled(enabled: boolean) {\n    if (enabled && ((this.flags & EventHandler.EnabledFlag) === 0)) {\n      this.willEnable();\n      this.setFlags(this.flags | EventHandler.EnabledFlag);\n      this.onEnable();\n      this.didEnable();\n    } else if (!enabled && ((this.flags & EventHandler.EnabledFlag) !== 0)) {\n      this.willDisable();\n      this.setFlags(this.flags & ~EventHandler.EnabledFlag);\n      this.onDisable();\n      this.didDisable();\n    }\n  },\n\n  willEnable(): void {\n    // hook\n  },\n\n  onEnable(): void {\n    const target = this.target;\n    if (target !== null && (this.flags & Fastener.MountedFlag) !== 0) {\n      this.attachEvents(target);\n    }\n  },\n\n  didEnable(): void {\n    // hook\n  },\n\n  willDisable(): void {\n    // hook\n  },\n\n  onDisable(): void {\n    const target = this.target;\n    if (target !== null && (this.flags & Fastener.MountedFlag) !== 0) {\n      this.detachEvents(target);\n    }\n  },\n\n  didDisable(): void {\n    // hook\n  },\n\n  bindComponent(component: Component<any>): void {\n    if (!this.binds || this.target !== null) {\n      return;\n    }\n    const target = this.detectComponent(component);\n    if (target !== null) {\n      this.setTarget(target);\n    }\n  },\n\n  unbindComponent(component: Component<any>): void {\n    if (!this.binds) {\n      return;\n    }\n    const target = this.detectComponent(component);\n    if (target !== null && target === this.target) {\n      this.setTarget(null);\n    }\n  },\n\n  detectComponent(component: Component<any>): T | null {\n    return null;\n  },\n\n  onMount(): void {\n    super.onMount();\n    const target = this.target;\n    if (target !== null && (this.flags & EventHandler.EnabledFlag) !== 0) {\n      this.attachEvents(target);\n    }\n  },\n\n  onUnmount(): void {\n    super.onUnmount();\n    const target = this.target;\n    if (target !== null && (this.flags & EventHandler.EnabledFlag) !== 0) {\n      this.detachEvents(target);\n    }\n  },\n},\n{\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    if (fastener === null) {\n      fastener = function (event: Event): void {\n        fastener!.handle(event);\n      } as F;\n      Object.defineProperty(fastener, \"name\", {\n        value: this.prototype.name,\n        enumerable: true,\n        configurable: true,\n      });\n      Object.setPrototypeOf(fastener, this.prototype);\n    }\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).eventType = fastener.initEventType();\n    (fastener as Mutable<typeof fastener>).target = fastener.initTarget();\n    return fastener;\n  },\n\n  refine(fastenerClass: FastenerClass<EventHandler<any, any>>): void {\n    super.refine(fastenerClass);\n    const fastenerPrototype = fastenerClass.prototype;\n\n    let flagsInit = fastenerPrototype.flagsInit;\n    if (Object.prototype.hasOwnProperty.call(fastenerPrototype, \"enabled\")) {\n      if (fastenerPrototype.enabled) {\n        flagsInit |= EventHandler.EnabledFlag;\n      } else {\n        flagsInit &= ~EventHandler.EnabledFlag;\n      }\n      delete (fastenerPrototype as EventHandlerDescriptor<any, any>).enabled;\n    }\n    Object.defineProperty(fastenerPrototype, \"flagsInit\", {\n      value: flagsInit,\n      enumerable: true,\n      configurable: true,\n    });\n\n    const targetDescriptor = Object.getOwnPropertyDescriptor(fastenerPrototype, \"target\");\n    if (targetDescriptor !== void 0 && \"value\" in targetDescriptor) {\n      if (targetDescriptor.value === void 0) {\n        targetDescriptor.value = null;\n      }\n      Object.defineProperty(fastenerPrototype, \"target\", targetDescriptor);\n    }\n  },\n\n  EnabledFlag: 1 << (Fastener.FlagShift + 0),\n\n  FlagShift: Fastener.FlagShift + 1,\n  FlagMask: (1 << (Fastener.FlagShift + 1)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {Fastener} from \"./Fastener\";\nimport type {EventHandlerDescriptor} from \"./EventHandler\";\nimport type {EventHandlerClass} from \"./EventHandler\";\nimport {EventHandler} from \"./EventHandler\";\n\n/** @public */\nexport interface EventTimerDescriptor<R, T> extends EventHandlerDescriptor<R, T> {\n  extends?: Proto<EventTimer<any, any>> | boolean | null;\n}\n\n/** @public */\nexport interface EventTimerClass<F extends EventTimer<any, any> = EventTimer<any, any>> extends EventHandlerClass<F> {\n}\n\n/** @public */\nexport interface EventTimer<R = any, T = EventTarget> extends EventHandler<R, T> {\n  /** @override */\n  (event: Event): void;\n  (): void;\n\n  /** @override */\n  get descriptorType(): Proto<EventTimerDescriptor<R, T>>;\n\n  /** @protected */\n  readonly event: Event | null;\n\n  /** @protected */\n  defer(event: Event): void;\n\n  initDelay(): number;\n\n  readonly delay: number;\n\n  setDelay(delay: number): void;\n\n  readonly deadline: number | undefined;\n\n  get elapsed(): number | undefined;\n\n  get remaining(): number | undefined;\n\n  get scheduled(): boolean;\n\n  schedule(event: Event | null, delay?: number): void;\n\n  throttle(event: Event | null, delay?: number): void;\n\n  debounce(event: Event | null, delay?: number): void;\n\n  /** @protected */\n  willSchedule(event: Event | null, delay: number): void;\n\n  /** @protected */\n  onSchedule(event: Event | null, delay: number): void;\n\n  /** @protected */\n  didSchedule(event: Event | null, delay: number): void;\n\n  cancel(): void;\n\n  /** @protected */\n  willCancel(event: Event | null): void;\n\n  /** @protected */\n  onCancel(event: Event | null): void;\n\n  /** @protected */\n  didCancel(event: Event | null): void;\n\n  /** @internal @protected */\n  expire(): void;\n\n  /** @protected */\n  willExpire(event: Event | null): void;\n\n  /** @protected */\n  onExpire(event: Event | null): void;\n\n  /** @protected */\n  didExpire(event: Event | null): void;\n\n  /** @internal */\n  readonly timeout: unknown | undefined;\n\n  /** @protected */\n  setTimeout(callback: () => void, delay: number): unknown;\n\n  /** @protected */\n  clearTimeout(timeoutId: unknown): void;\n\n  /** @override @protected */\n  onUnmount(): void;\n}\n\n/** @public */\nexport const EventTimer = (<R, T, F extends EventTimer<any, any>>() => EventHandler.extend<EventTimer<R, T>, EventTimerClass<F>>(\"EventTimer\", {\n  defer(event: Event): void {\n    this.throttle(event);\n  },\n\n  delay: 0,\n\n  initDelay(): number {\n    const delay = (Object.getPrototypeOf(this) as EventTimer<any, any>).delay;\n    return Math.max(0, delay);\n  },\n\n  setDelay(delay: number): void {\n    (this as Mutable<typeof this>).delay = Math.max(0, delay);\n  },\n\n  get elapsed(): number | undefined {\n    const deadline = this.deadline;\n    if (deadline === void 0) {\n      return void 0;\n    }\n    return Math.max(0, performance.now() - (deadline - this.delay));\n  },\n\n  get remaining(): number | undefined {\n    const deadline = this.deadline;\n    if (deadline === void 0) {\n      return void 0;\n    }\n    return Math.max(0, deadline - performance.now());\n  },\n\n  get scheduled(): boolean {\n    return this.timeout !== void 0;\n  },\n\n  schedule(event: Event | null, delay?: number): void {\n    if (this.timeout !== void 0) {\n      throw new Error(\"timer already scheduled; call throttle or debounce to reschedule\");\n    } else if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(event, delay);\n    (this as Mutable<typeof this>).event = event;\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(event, delay);\n    this.didSchedule(event, delay);\n  },\n\n  throttle(event: Event | null, delay?: number): void {\n    if (this.timeout !== void 0) {\n      return;\n    } else if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(event, delay);\n    (this as Mutable<typeof this>).event = event;\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(event, delay);\n    this.didSchedule(event, delay);\n  },\n\n  debounce(event: Event | null, delay?: number): void {\n    const timeout = this.timeout;\n    if (timeout !== void 0) {\n      const event = this.event;\n      this.willCancel(event);\n      (this as Mutable<typeof this>).event = null;\n      (this as Mutable<typeof this>).timeout = void 0;\n      (this as Mutable<typeof this>).deadline = void 0;\n      this.clearTimeout(timeout);\n      this.onCancel(event);\n      this.didCancel(event);\n    }\n    if (delay === void 0) {\n      delay = this.delay;\n    } else {\n      this.setDelay(delay);\n    }\n    this.willSchedule(event, delay);\n    (this as Mutable<typeof this>).event = event;\n    (this as Mutable<typeof this>).deadline = performance.now() + delay;\n    (this as Mutable<typeof this>).timeout = this.setTimeout(this, delay);\n    this.onSchedule(event, delay);\n    this.didSchedule(event, delay);\n  },\n\n  willSchedule(event: Event | null, delay: number): void {\n    // hook\n  },\n\n  onSchedule(event: Event | null, delay: number): void {\n    // hook\n  },\n\n  didSchedule(event: Event | null, delay: number): void {\n    // hook\n  },\n\n  cancel(): void {\n    const timeout = this.timeout;\n    if (timeout === void 0) {\n      return;\n    }\n    const event = this.event;\n    this.willCancel(event);\n    (this as Mutable<typeof this>).event = null;\n    (this as Mutable<typeof this>).timeout = void 0;\n    (this as Mutable<typeof this>).deadline = void 0;\n    this.clearTimeout(timeout);\n    this.onCancel(event);\n    this.didCancel(event);\n  },\n\n  willCancel(event: Event | null): void {\n    // hook\n  },\n\n  onCancel(event: Event | null): void {\n    // hook\n  },\n\n  didCancel(event: Event | null): void {\n    // hook\n  },\n\n  expire(): void {\n    const event = this.event;\n    (this as Mutable<typeof this>).event = null;\n    (this as Mutable<typeof this>).timeout = void 0;\n    (this as Mutable<typeof this>).deadline = void 0;\n    this.willExpire(event);\n    if (event !== null) {\n      this.handle(event);\n    }\n    this.onExpire(event);\n    this.didExpire(event);\n  },\n\n  willExpire(event: Event | null): void {\n    // hook\n  },\n\n  onExpire(event: Event | null): void {\n    // hook\n  },\n\n  didExpire(event: Event | null): void {\n    // hook\n  },\n\n  setTimeout(callback: () => void, delay: number): unknown {\n    return setTimeout(callback, delay);\n  },\n\n  clearTimeout(timeout: unknown): void {\n    clearTimeout(timeout as any);\n  },\n\n  onUnmount(): void {\n    super.onUnmount();\n    this.cancel();\n  },\n},\n{\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    if (fastener === null) {\n      fastener = function (event?: Event): void {\n        if (event !== void 0) { // event callback\n          fastener!.defer(event);\n        } else { // timer callback\n          fastener!.expire();\n        }\n      } as F;\n      Object.defineProperty(fastener, \"name\", {\n        value: this.prototype.name,\n        enumerable: true,\n        configurable: true,\n      });\n      Object.setPrototypeOf(fastener, this.prototype);\n    }\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).event = null;\n    (fastener as Mutable<typeof fastener>).delay = fastener.initDelay();\n    (fastener as Mutable<typeof fastener>).deadline = 0;\n    (fastener as Mutable<typeof fastener>).timeout = void 0;\n    return fastener;\n  },\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport {FastenerContextMetaclass} from \"./FastenerContext\";\nimport type {FastenerFlags} from \"./Fastener\";\nimport type {FastenerDescriptor} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {ServiceFactory} from \"./Service\";\nimport {Service} from \"./\"; // forward import\n\n/** @public */\nexport interface ProviderDescriptor<R, S extends Service> extends FastenerDescriptor<R> {\n  extends?: Proto<Provider<any, any>> | boolean | null;\n  serviceKey?: string | boolean;\n}\n\n/** @public */\nexport interface ProviderClass<P extends Provider<any, any> = Provider<any, any>> extends FastenerClass<P> {\n  tryService<R, K extends keyof R, F extends R[K] = R[K]>(owner: R, fastenerName: K): (F extends {readonly service: infer S | null} ? S | null : never) | null;\n\n  /** @internal */\n  readonly ManagedFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface Provider<R = any, S extends Service = any> extends Fastener<R> {\n  /** @override */\n  get descriptorType(): Proto<ProviderDescriptor<R, S>>;\n\n  /** @override */\n  get fastenerType(): Proto<Provider<any, any>>;\n\n  get serviceType(): ServiceFactory<S> | null;\n\n  get observes(): boolean;\n\n  get creates(): boolean;\n\n  /** @protected @override */\n  onBindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @protected @override */\n  onUnbindInlet(inlet: Fastener<any, any, any>): void;\n\n  /** @override */\n  get parent(): Provider<any, S> | null;\n\n  get inletService(): S | null;\n\n  getInletService(): S;\n\n  get serviceKey(): string | undefined;\n\n  readonly service: S | null;\n\n  getService(): NonNullable<S>;\n\n  setService(service: S | null, target?: Service | null, key?: string): S | null;\n\n  /** @protected */\n  initService(service: S): void;\n\n  /** @protected */\n  willAttachService(service: S, target: Service | null): void;\n\n  /** @protected */\n  onAttachService(service: S, target: Service | null): void;\n\n  /** @protected */\n  didAttachService(service: S, target: Service | null): void;\n\n  /** @protected */\n  deinitService(service: S): void;\n\n  /** @protected */\n  willDetachService(service: S): void;\n\n  /** @protected */\n  onDetachService(service: S): void;\n\n  /** @protected */\n  didDetachService(service: S): void;\n\n  /** @protected */\n  get parentService(): Service | null;\n\n  /** @protected */\n  insertChild(parent: Service, child: S, target: Service | null, key: string | undefined): void;\n\n  createService(): S;\n\n  /** @protected */\n  mountService(service: S, target: Service | null, key: string | undefined): void;\n\n  /** @protected */\n  unmountService(service: S): void;\n\n  /** @protected */\n  mountRootService(service: S): void;\n\n  /** @protected */\n  unmountRootService(service: S): void;\n\n  /** @protected @override */\n  onMount(): void;\n\n  /** @protected @override */\n  onUnmount(): void;\n}\n\n/** @public */\nexport const Provider = (<R, S extends Service, P extends Provider<any, any>>() => Fastener.extend<Provider<R, S>, ProviderClass<P>>(\"Provider\", {\n  get fastenerType(): Proto<Provider<any, any>> {\n    return Provider;\n  },\n\n  serviceType: null,\n\n  observes: false,\n\n  creates: true,\n\n  inherits: true,\n\n  affinity: Affinity.Inherited,\n\n  onBindInlet(inlet: Fastener<any, any, any>): void {\n    if ((this.flags & Fastener.InheritsFlag) !== 0 && (this.flags & Affinity.Mask) === Affinity.Inherited) {\n      this.initAffinity(Affinity.Transient);\n    }\n    if (inlet instanceof Provider) {\n      this.setDerived(true);\n      this.setService(inlet.service);\n    }\n  },\n\n  onUnbindInlet(inlet: Fastener<any, any, any>): void {\n    super.onUnbindInlet(inlet);\n    if ((this.flags & Fastener.InheritsFlag) !== 0 && (this.flags & Affinity.Mask) === Affinity.Transient) {\n      this.initAffinity(Affinity.Inherited);\n    }\n  },\n\n  get inletService(): S | null {\n    const inlet = this.inlet;\n    return inlet instanceof Provider ? inlet.service : null;\n  },\n\n  getInletService(): S {\n    const inletService = this.inletService;\n    if (inletService === void 0 || inletService === null) {\n      let message = inletService + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"inlet service\";\n      throw new TypeError(message);\n    }\n    return inletService;\n  },\n\n  serviceKey: void 0,\n\n  getService(): NonNullable<S> {\n    const service = this.service;\n    if (service === void 0 || service === null) {\n      let message = service + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"service\";\n      throw new TypeError(message);\n    }\n    return service;\n  },\n\n  setService(newService: S | null, target?: Service | null, key?: string): S | null {\n    const oldService = this.service;\n    if (oldService === newService) {\n      this.setCoherent(true);\n      return oldService;\n    }\n    if (target === void 0) {\n      target = null;\n    }\n    if (oldService !== null) {\n      (this as Mutable<typeof this>).service = null;\n      this.willDetachService(oldService);\n      if ((this.flags & Fastener.MountedFlag) !== 0) {\n        this.unmountService(oldService);\n      }\n      this.onDetachService(oldService);\n      this.deinitService(oldService);\n      this.didDetachService(oldService);\n    }\n    if (newService !== null) {\n      (this as Mutable<typeof this>).service = newService;\n      this.willAttachService(newService, target);\n      if ((this.flags & Fastener.MountedFlag) !== 0) {\n        this.mountService(newService, target, key);\n      }\n      this.onAttachService(newService, target);\n      this.initService(newService);\n      this.didAttachService(newService, target);\n    }\n    this.setCoherent(true);\n    return oldService;\n  },\n\n  initService(service: S): void {\n    // hook\n  },\n\n  willAttachService(service: S, target: Service | null): void {\n    // hook\n  },\n\n  onAttachService(service: S, target: Service | null): void {\n    if (this.observes && (this.flags & Fastener.MountedFlag) !== 0) {\n      service.observe(this as Observes<S>);\n    }\n  },\n\n  didAttachService(service: S, target: Service | null): void {\n    // hook\n  },\n\n  deinitService(service: S): void {\n    // hook\n  },\n\n  willDetachService(service: S): void {\n    // hook\n  },\n\n  onDetachService(service: S): void {\n    if (this.observes && (this.flags & Fastener.MountedFlag) !== 0) {\n      service.unobserve(this as Observes<S>);\n    }\n  },\n\n  didDetachService(service: S): void {\n    // hook\n  },\n\n  get parentService(): S | null {\n    const parentProvider = this.parent;\n    return parentProvider !== null ? parentProvider.service : null;\n  },\n\n  insertChild(parent: Service, child: S, target: Service | null, key: string | undefined): void {\n    parent.insertChild(child, target, key);\n  },\n\n  createService(): S {\n    let service: S | undefined;\n    const serviceType = this.serviceType;\n    if (serviceType !== null) {\n      service = serviceType.global();\n    }\n    if (service === void 0 || service === null) {\n      let message = \"unable to create \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"service\";\n      throw new Error(message);\n    }\n    return service;\n  },\n\n  mountService(service: S, target: Service | null, key: string | undefined): void {\n    if (service.parent === null && !service.mounted) {\n      let parent = this.parentService;\n      if (parent === null) {\n        parent = Service.global();\n        target = null;\n        key = void 0;\n      } else if (key === void 0) {\n        key = this.serviceKey;\n      }\n      this.insertChild(parent, service, target, key);\n      this.setFlags(this.flags | Provider.ManagedFlag);\n    }\n    if (!this.derived) {\n      this.mountRootService(service);\n    }\n  },\n\n  unmountService(service: S): void {\n    if (!this.derived) {\n      this.unmountRootService(service);\n    }\n    if ((this.flags & Provider.ManagedFlag) !== 0) {\n      this.setFlags(this.flags & ~Provider.ManagedFlag);\n      service.remove();\n    }\n  },\n\n  mountRootService(service: S): void {\n    // hook\n  },\n\n  unmountRootService(service: S): void {\n    // hook\n  },\n\n  onMount(): void {\n    super.onMount();\n    let service = this.service;\n    if (service !== null) {\n      this.mountService(service, null, void 0);\n      if (this.observes) {\n        service.observe(this as Observes<S>);\n      }\n    } else if (this.creates) {\n      service = this.createService();\n      this.setService(service);\n    }\n  },\n\n  onUnmount(): void {\n    const service = this.service;\n    if (service !== null) {\n      if (this.observes) {\n        service.unobserve(this as Observes<S>);\n      }\n      this.unmountService(service);\n    }\n    super.onUnmount();\n  },\n},\n{\n  tryService<R, K extends keyof R, F extends R[K]>(owner: R, fastenerName: K): (F extends {readonly service: infer S | null} ? S | null : never) | null {\n    const metaclass = FastenerContextMetaclass.get(owner);\n    const provider = metaclass !== null ? metaclass.tryFastener(owner, fastenerName) : null;\n    return provider instanceof Provider ? provider.service : null;\n  },\n\n  create(owner: P extends Fastener<infer R, any, any> ? R : never): P {\n    const provider = super.create(owner) as P;\n    if (provider.service === null && provider.creates) {\n      const service = provider.createService();\n      provider.setService(service);\n    }\n    return provider;\n  },\n\n  construct(provider: P | null, owner: P extends Fastener<infer R, any, any> ? R : never): P {\n    provider = super.construct(provider, owner) as P;\n    (provider as Mutable<typeof provider>).service = null;\n    return provider;\n  },\n\n  refine(providerClass: FastenerClass<Provider<any, any>>): void {\n    super.refine(providerClass);\n    const providerPrototype = providerClass.prototype;\n\n    const serviceKeyDescriptor = Object.getOwnPropertyDescriptor(providerPrototype, \"serviceKey\");\n    if (serviceKeyDescriptor !== void 0 && \"value\" in serviceKeyDescriptor) {\n      if (serviceKeyDescriptor.value === true) {\n        serviceKeyDescriptor.value = providerClass.name;\n        Object.defineProperty(providerPrototype, \"serviceKey\", serviceKeyDescriptor);\n      } else if (serviceKeyDescriptor.value === false) {\n        serviceKeyDescriptor.value = void 0;\n        Object.defineProperty(providerPrototype, \"serviceKey\", serviceKeyDescriptor);\n      }\n    }\n  },\n\n  ManagedFlag: 1 << (Fastener.FlagShift + 0),\n\n  FlagShift: Fastener.FlagShift + 1,\n  FlagMask: (1 << (Fastener.FlagShift + 1)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {Class} from \"@swim/util\";\nimport type {Instance} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Comparator} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport type {FromLike} from \"@swim/util\";\nimport type {Dictionary} from \"@swim/util\";\nimport type {MutableDictionary} from \"@swim/util\";\nimport type {TimingLike} from \"@swim/util\";\nimport {Creatable} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {Observable} from \"@swim/util\";\nimport type {ObserverMethods} from \"@swim/util\";\nimport type {ObserverParameters} from \"@swim/util\";\nimport type {Observer} from \"@swim/util\";\nimport type {FastenerContext} from \"./FastenerContext\";\nimport {FastenerContextMetaclass} from \"./FastenerContext\";\nimport {Fastener} from \"./Fastener\";\nimport {Animator} from \"./Animator\";\nimport {EventHandler} from \"./EventHandler\";\nimport {ComponentRelation} from \"./\"; // forward import\n\n/** @public */\nexport type ComponentFlags = number;\n\n/** @public */\nexport interface ComponentFactory<C extends Component<any> = Component> extends Creatable<C>, FromLike<C> {\n}\n\n/** @public */\nexport interface ComponentClass<C extends Component<any> = Component> extends Function, ComponentFactory<C> {\n  readonly prototype: C;\n}\n\n/** @public */\nexport interface ComponentConstructor<C extends Component<any> = Component> extends ComponentClass<C> {\n  new(): C;\n}\n\n/** @public */\nexport interface ComponentObserver<C extends Component<any> = Component> extends Observer<C> {\n}\n\n/** @public */\nexport class Component<C extends Component<C> = Component<any>> implements HashCode, FastenerContext, Observable {\n  constructor() {\n    this.uid = (this.constructor as typeof Component).uid();\n    this.key = void 0;\n    this.flags = 0;\n    this.parent = null;\n    this.nextSibling = null;\n    this.previousSibling = null;\n    this.firstChild = null;\n    this.lastChild = null;\n    this.childMap = null;\n    this.coherentTime = 0;\n    this.decoherent = null;\n    this.recohering = null;\n    this.observers = null;\n  }\n\n  likeType?(like: {create?(): C}): void;\n\n  /** @override */\n  declare readonly observerType?: Class<ComponentObserver>;\n\n  get componentType(): Class<Component> {\n    return Component;\n  }\n\n  /** @internal */\n  readonly uid: string;\n\n  readonly key: string | undefined;\n\n  /** @internal */\n  setKey(key: string | undefined): void {\n    (this as Mutable<this>).key = key;\n  }\n\n  /** @internal */\n  readonly flags: ComponentFlags;\n\n  /** @internal */\n  setFlags(flags: ComponentFlags): void {\n    (this as Mutable<this>).flags = flags;\n  }\n\n  readonly parent: C | null;\n\n  /** @internal */\n  attachParent(parent: C, nextSibling: C | null): void;\n  attachParent(this: C, parent: C, nextSibling: C | null): void {\n    // assert(this.parent === null);\n    this.willAttachParent(parent);\n    (this as Mutable<typeof this>).parent = parent;\n    let previousSibling: C | null;\n    if (nextSibling !== null) {\n      previousSibling = nextSibling.previousSibling;\n      this.setNextSibling(nextSibling);\n      nextSibling.setPreviousSibling(this);\n    } else {\n      previousSibling = parent.lastChild;\n      parent.setLastChild(this);\n    }\n    if (previousSibling !== null) {\n      previousSibling.setNextSibling(this);\n      this.setPreviousSibling(previousSibling);\n    } else {\n      parent.setFirstChild(this);\n    }\n    if (parent.mounted) {\n      this.cascadeMount();\n    }\n    this.onAttachParent(parent);\n    this.didAttachParent(parent);\n  }\n\n  protected willAttachParent(parent: C): void {\n    // hook\n  }\n\n  protected onAttachParent(parent: C): void {\n    // hook\n  }\n\n  protected didAttachParent(parent: C): void {\n    // hook\n  }\n\n  /** @internal */\n  detachParent(parent: C): void {\n    // assert(this.parent === parent);\n    this.willDetachParent(parent);\n    if (this.mounted) {\n      this.cascadeUnmount();\n    }\n    this.onDetachParent(parent);\n    const nextSibling = this.nextSibling;\n    const previousSibling = this.previousSibling;\n    if (nextSibling !== null) {\n      this.setNextSibling(null);\n      nextSibling.setPreviousSibling(previousSibling);\n    } else {\n      parent.setLastChild(previousSibling);\n    }\n    if (previousSibling !== null) {\n      previousSibling.setNextSibling(nextSibling);\n      this.setPreviousSibling(null);\n    } else {\n      parent.setFirstChild(nextSibling);\n    }\n    (this as Mutable<this>).parent = null;\n    this.didDetachParent(parent);\n  }\n\n  protected willDetachParent(parent: C): void {\n    // hook\n  }\n\n  protected onDetachParent(parent: C): void {\n    // hook\n  }\n\n  protected didDetachParent(parent: C): void {\n    // hook\n  }\n\n  /** @internal */\n  reattachParent(newNextSibling: C | null): void;\n  reattachParent(this: C, newNextSibling: C | null): void {\n    const parent = this.parent!;\n    // assert(parent !== null);\n\n    this.willDetachParent(parent);\n    this.onDetachParent(parent);\n    const oldNextSibling = this.nextSibling;\n    const oldPreviousSibling = this.previousSibling;\n    if (oldNextSibling !== null) {\n      this.setNextSibling(null);\n      oldNextSibling.setPreviousSibling(oldPreviousSibling);\n    } else {\n      parent.setLastChild(oldPreviousSibling);\n    }\n    if (oldPreviousSibling !== null) {\n      oldPreviousSibling.setNextSibling(oldNextSibling);\n      this.setPreviousSibling(null);\n    } else {\n      parent.setFirstChild(oldNextSibling);\n    }\n    this.didDetachParent(parent);\n\n    this.willAttachParent(parent);\n    let newPreviousSibling: C | null;\n    if (newNextSibling !== null) {\n      newPreviousSibling = newNextSibling.previousSibling;\n      this.setNextSibling(newNextSibling);\n      newNextSibling.setPreviousSibling(this);\n    } else {\n      newPreviousSibling = parent.lastChild;\n      parent.setLastChild(this);\n    }\n    if (newPreviousSibling !== null) {\n      newPreviousSibling.setNextSibling(this);\n      this.setPreviousSibling(newPreviousSibling);\n    } else {\n      parent.setFirstChild(this);\n    }\n    this.onAttachParent(parent);\n    this.didAttachParent(parent);\n  }\n\n  readonly nextSibling: C | null;\n\n  getNextSibling<F extends Class<C>>(siblingType: F): InstanceType<F> | null;\n  getNextSibling(siblingType: Class<C>): C | null;\n  getNextSibling(siblingType: Class<C>): C | null {\n    let nextSibling = this.nextSibling;\n    do {\n      if (nextSibling === null) {\n        return null;\n      } else if (nextSibling instanceof siblingType) {\n        return nextSibling;\n      }\n      nextSibling = nextSibling.nextSibling;\n    } while (true);\n  }\n\n  /** @internal */\n  setNextSibling(nextSibling: C | null): void {\n    (this as Mutable<this>).nextSibling = nextSibling;\n  }\n\n  readonly previousSibling: C | null;\n\n  getPreviousSibling<F extends Class<C>>(siblingType: F): InstanceType<F> | null;\n  getPreviousSibling(siblingType: Class<C>): C | null;\n  getPreviousSibling(siblingType: Class<C>): C | null {\n    let previousSibling = this.previousSibling;\n    do {\n      if (previousSibling === null) {\n        return null;\n      } else if (previousSibling instanceof siblingType) {\n        return previousSibling;\n      }\n      previousSibling = previousSibling.previousSibling;\n    } while (true);\n  }\n\n  /** @internal */\n  setPreviousSibling(previousSibling: C | null): void {\n    (this as Mutable<this>).previousSibling = previousSibling;\n  }\n\n  readonly firstChild: C | null;\n\n  getFirstChild<F extends Class<C>>(childType: F): InstanceType<F> | null;\n  getFirstChild(childType: Class<C>): C | null;\n  getFirstChild(childType: Class<C>): C | null {\n    let child = this.firstChild;\n    do {\n      if (child === null) {\n        return null;\n      } else if (child instanceof childType) {\n        return child;\n      }\n      child = child.nextSibling;\n    } while (true);\n  }\n\n  /** @internal */\n  setFirstChild(firstChild: C | null): void {\n    (this as Mutable<this>).firstChild = firstChild;\n  }\n\n  readonly lastChild: C | null;\n\n  getLastChild<F extends Class<C>>(childType: F): InstanceType<F> | null;\n  getLastChild(childType: Class<C>): C | null;\n  getLastChild(childType: Class<C>): C | null {\n    let child = this.lastChild;\n    do {\n      if (child === null) {\n        return null;\n      } else if (child instanceof childType) {\n        return child;\n      }\n      child = child.previousSibling;\n    } while (true);\n  }\n\n  /** @internal */\n  setLastChild(lastChild: C | null): void {\n    (this as Mutable<this>).lastChild = lastChild;\n  }\n\n  forEachChild<T>(callback: (child: C) => T | void): T | undefined;\n  forEachChild<T, S>(callback: (this: S, child: C) => T | void, thisArg: S): T | undefined;\n  forEachChild<T, S>(this: C, callback: (this: S | undefined, child: C) => T | void, thisArg?: S): T | undefined {\n    let result: T | undefined;\n    let child = this.firstChild;\n    while (child !== null) {\n      const next = child.nextSibling;\n      const result = callback.call(thisArg, child);\n      if (result !== void 0) {\n        break;\n      }\n      child = next !== null && next.parent === this ? next : null;\n    }\n    return result;\n  }\n\n  /** @internal */\n  readonly childMap: Dictionary<C> | null;\n\n  /** @internal */\n  protected insertChildMap(child: C): void {\n    const key = child.key;\n    if (key === void 0) {\n      return;\n    }\n    let childMap = this.childMap as MutableDictionary<C>;\n    if (childMap === null) {\n      childMap = {};\n      (this as Mutable<this>).childMap = childMap;\n    }\n    childMap[key] = child;\n  }\n\n  /** @internal */\n  protected removeChildMap(child: C): void {\n    const key = child.key;\n    if (key === void 0) {\n      return;\n    }\n    const childMap = this.childMap as MutableDictionary<C>;\n    if (childMap !== null) {\n      delete childMap[key];\n    }\n  }\n\n  getChild<F extends Class<C>>(key: string, childType: F): InstanceType<F> | null;\n  getChild(key: string, childType?: Class<C>): C | null;\n  getChild(key: string, childType?: Class<C>): C | null {\n    const childMap = this.childMap;\n    if (childMap === null) {\n      return null;\n    }\n    const child = childMap[key];\n    if (child === void 0 || (childType !== void 0 && !(child instanceof childType))) {\n      return null;\n    }\n    return child;\n  }\n\n  setChild<F extends Class<Instance<F, C>> & Creatable<Instance<F, C>>>(key: string, newChildFactory: F): C | null;\n  setChild(key: string, newChild: C | LikeType<C> | null): C | null;\n  setChild(this: C, key: string, newChild: C | LikeType<C> | null): C | null {\n    if (newChild !== null) {\n      newChild = (this.componentType as unknown as FromLike<C>).fromLike(newChild);\n    }\n\n    const oldChild = this.getChild(key);\n    let target: C | null;\n\n    if (oldChild !== null && newChild !== null && oldChild !== newChild) { // replace\n      newChild.remove();\n      target = oldChild.nextSibling;\n\n      if ((oldChild.flags & Component.RemovingFlag) === 0) {\n        oldChild.setFlags(oldChild.flags | Component.RemovingFlag);\n        this.willRemoveChild(oldChild);\n        oldChild.detachParent(this);\n        this.removeChildMap(oldChild);\n        this.onRemoveChild(oldChild);\n        this.didRemoveChild(oldChild);\n        oldChild.setKey(void 0);\n        oldChild.setFlags(oldChild.flags & ~Component.RemovingFlag);\n      }\n\n      newChild.setFlags(newChild.flags | Component.InsertingFlag);\n      newChild.setKey(oldChild.key);\n      this.willInsertChild(newChild, target);\n      this.insertChildMap(newChild);\n      newChild.attachParent(this, target);\n      this.onInsertChild(newChild, target);\n      this.didInsertChild(newChild, target);\n      newChild.cascadeInsert();\n      newChild.setFlags(newChild.flags & ~Component.InsertingFlag);\n    } else if (newChild !== oldChild || newChild !== null && newChild.key !== key) {\n      if (oldChild !== null) { // remove\n        target = oldChild.nextSibling;\n        if ((oldChild.flags & Component.RemovingFlag) === 0) {\n          oldChild.setFlags(oldChild.flags | Component.RemovingFlag);\n          this.willRemoveChild(oldChild);\n          oldChild.detachParent(this);\n          this.removeChildMap(oldChild);\n          this.onRemoveChild(oldChild);\n          this.didRemoveChild(oldChild);\n          oldChild.setKey(void 0);\n          oldChild.setFlags(oldChild.flags & ~Component.RemovingFlag);\n        }\n      } else {\n        target = null;\n      }\n\n      if (newChild !== null) { // insert\n        newChild.remove();\n\n        newChild.setFlags(newChild.flags | Component.InsertingFlag);\n        newChild.setKey(key);\n        this.willInsertChild(newChild, target);\n        this.insertChildMap(newChild);\n        newChild.attachParent(this, target);\n        this.onInsertChild(newChild, target);\n        this.didInsertChild(newChild, target);\n        newChild.cascadeInsert();\n        newChild.setFlags(newChild.flags & ~Component.InsertingFlag);\n      }\n    }\n\n    return oldChild;\n  }\n\n  appendChild<F extends Class<Instance<F, C>> & Creatable<Instance<F, C>>>(childFactory: F, key?: string): InstanceType<F>;\n  appendChild<Child extends C>(child: Child | LikeType<Child>, key?: string): Child;\n  appendChild(child: C | LikeType<C>, key?: string): C;\n  appendChild(this: C, child: C | LikeType<C>, key?: string): C {\n    child = (this.componentType as unknown as FromLike<C>).fromLike(child);\n\n    child.remove();\n    if (key !== void 0) {\n      this.removeChild(key);\n    }\n\n    child.setFlags(child.flags | Component.InsertingFlag);\n    child.setKey(key);\n    this.willInsertChild(child, null);\n    this.insertChildMap(child);\n    child.attachParent(this, null);\n    this.onInsertChild(child, null);\n    this.didInsertChild(child, null);\n    child.cascadeInsert();\n    child.setFlags(child.flags & ~Component.InsertingFlag);\n\n    return child;\n  }\n\n  prependChild<F extends Class<Instance<F, C>> & Creatable<Instance<F, C>>>(childFactory: F, key?: string): InstanceType<F>;\n  prependChild<Child extends C>(child: Child | LikeType<Child>, key?: string): Child;\n  prependChild(child: C | LikeType<C>, key?: string): C;\n  prependChild(this: C, child: C | LikeType<C>, key?: string): C {\n    child = (this.componentType as unknown as FromLike<C>).fromLike(child);\n\n    child.remove();\n    if (key !== void 0) {\n      this.removeChild(key);\n    }\n    const target = this.firstChild;\n\n    child.setFlags(child.flags | Component.InsertingFlag);\n    child.setKey(key);\n    this.willInsertChild(child, target);\n    this.insertChildMap(child);\n    child.attachParent(this, target);\n    this.onInsertChild(child, target);\n    this.didInsertChild(child, target);\n    child.cascadeInsert();\n    child.setFlags(child.flags & ~Component.InsertingFlag);\n\n    return child;\n  }\n\n  insertChild<F extends Class<Instance<F, C>> & Creatable<Instance<F, C>>>(childFactory: F, target: C | null, key?: string): InstanceType<F>;\n  insertChild<Child extends C>(child: Child | LikeType<Child>, target: C | null, key?: string): Child;\n  insertChild(child: C | LikeType<C>, target: C | null, key?: string): C;\n  insertChild(this: C, child: C | LikeType<C>, target: C | null, key?: string): C {\n    child = (this.componentType as unknown as FromLike<C>).fromLike(child);\n\n    if (target !== null && target.parent !== this) {\n      target = null;\n    }\n\n    child.remove();\n    if (key !== void 0) {\n      this.removeChild(key);\n    }\n\n    child.setFlags(child.flags | Component.InsertingFlag);\n    child.setKey(key);\n    this.willInsertChild(child, target);\n    this.insertChildMap(child);\n    child.attachParent(this, target);\n    this.onInsertChild(child, target);\n    this.didInsertChild(child, target);\n    child.cascadeInsert();\n    child.setFlags(child.flags & ~Component.InsertingFlag);\n\n    return child;\n  }\n\n  replaceChild<F extends Class<Instance<F, C>> & Creatable<Instance<F, C>>>(newChildFactory: F, oldChild: C): C;\n  replaceChild<Child extends C>(newChild: C | LikeType<C>, oldChild: Child): Child;\n  replaceChild(newChild: C | LikeType<C>, oldChild: C): C;\n  replaceChild(this: C, newChild: C | LikeType<C>, oldChild: C): C {\n    if (oldChild.parent !== this) {\n      throw new Error(\"replacement target is not a child\");\n    }\n\n    newChild = (this.componentType as unknown as FromLike<C>).fromLike(newChild);\n\n    if (newChild === oldChild) {\n      return oldChild;\n    }\n\n    newChild.remove();\n    const target = oldChild.nextSibling;\n\n    if ((oldChild.flags & Component.RemovingFlag) === 0) {\n      oldChild.setFlags(oldChild.flags | Component.RemovingFlag);\n      this.willRemoveChild(oldChild);\n      oldChild.detachParent(this);\n      this.removeChildMap(oldChild);\n      this.onRemoveChild(oldChild);\n      this.didRemoveChild(oldChild);\n      oldChild.setKey(void 0);\n      oldChild.setFlags(oldChild.flags & ~Component.RemovingFlag);\n    }\n\n    newChild.setFlags(newChild.flags | Component.InsertingFlag);\n    newChild.setKey(oldChild.key);\n    this.willInsertChild(newChild, target);\n    this.insertChildMap(newChild);\n    newChild.attachParent(this, target);\n    this.onInsertChild(newChild, target);\n    this.didInsertChild(newChild, target);\n    newChild.cascadeInsert();\n    newChild.setFlags(newChild.flags & ~Component.InsertingFlag);\n\n    return oldChild;\n  }\n\n  get insertChildFlags(): ComponentFlags {\n    return (this.constructor as typeof Component).InsertChildFlags;\n  }\n\n  get inserting(): boolean {\n    return (this.flags & Component.InsertingFlag) !== 0;\n  }\n\n  protected willInsertChild(child: C, target: C | null): void {\n    // hook\n  }\n\n  protected onInsertChild(child: C, target: C | null): void {\n    this.requireUpdate(this.insertChildFlags);\n    this.bindChildFasteners(child, target);\n  }\n\n  protected didInsertChild(child: C, target: C | null): void {\n    // hook\n  }\n\n  /** @internal */\n  cascadeInsert(): void {\n    // hook\n  }\n\n  removeChild<Child extends C>(child: Child): Child;\n  removeChild(child: C): C;\n  removeChild(key: string | C): C | null;\n  removeChild(this: C, key: string | C): C | null {\n    let child: C | null;\n    if (typeof key === \"string\") {\n      child = this.getChild(key);\n      if (child === null) {\n        return null;\n      }\n    } else {\n      child = key;\n      if (child.parent !== this) {\n        throw new Error(\"not a child\");\n      }\n    }\n\n    if ((child.flags & Component.RemovingFlag) === 0) {\n      child.setFlags(child.flags | Component.RemovingFlag);\n      this.willRemoveChild(child);\n      child.detachParent(this);\n      this.removeChildMap(child);\n      this.onRemoveChild(child);\n      this.didRemoveChild(child);\n      child.setKey(void 0);\n      child.setFlags(child.flags & ~Component.RemovingFlag);\n    }\n\n    return child;\n  }\n\n  get removeChildFlags(): ComponentFlags {\n    return (this.constructor as typeof Component).RemoveChildFlags;\n  }\n\n  get removing(): boolean {\n    return (this.flags & Component.RemovingFlag) !== 0;\n  }\n\n  protected willRemoveChild(child: C): void {\n    // hook\n  }\n\n  protected onRemoveChild(child: C): void {\n    this.requireUpdate(this.removeChildFlags);\n    this.unbindChildFasteners(child);\n  }\n\n  protected didRemoveChild(child: C): void {\n    // hook\n  }\n\n  removeChildren(): void\n  removeChildren(this: C): void {\n    let child: C | null;\n    while (child = this.lastChild, child !== null) {\n      if ((child.flags & Component.RemovingFlag) !== 0) {\n        throw new Error(\"inconsistent removeChildren\");\n      }\n      this.willRemoveChild(child);\n      child.detachParent(this);\n      this.removeChildMap(child);\n      this.onRemoveChild(child);\n      this.didRemoveChild(child);\n      child.setKey(void 0);\n      child.setFlags(child.flags & ~Component.RemovingFlag);\n    }\n  }\n\n  remove(): void;\n  remove(this: C): void {\n    const parent = this.parent;\n    if (parent !== null) {\n      parent.removeChild(this);\n    } else if (this.mounted) {\n      this.unmount();\n    }\n  }\n\n  get reinsertChildFlags(): ComponentFlags {\n    return (this.constructor as typeof Component).ReinsertChildFlags;\n  }\n\n  reinsertChild(child: C, target: C | null): void;\n  reinsertChild(this: C, child: C, target: C | null): void {\n    if (child.parent !== this) {\n      throw new Error(\"not a child\");\n    } else if (target !== null && target.parent !== this) {\n      throw new Error(\"reinsert target is not a child\");\n    } else if (child.nextSibling === target) {\n      return;\n    }\n\n    this.willReinsertChild(child, target);\n    child.reattachParent(target);\n    this.onReinsertChild(child, target);\n    this.didReinsertChild(child, target);\n  }\n\n  protected willReinsertChild(child: C, target: C | null): void {\n    // hook\n  }\n\n  protected onReinsertChild(child: C, target: C | null): void {\n    this.requireUpdate(this.reinsertChildFlags);\n  }\n\n  protected didReinsertChild(child: C, target: C | null): void {\n    // hook\n  }\n\n  sortChildren(comparator: Comparator<C>): void {\n    let child = this.firstChild;\n    if (child === null) {\n      return;\n    }\n\n    const children: C[] = [];\n    do {\n      children.push(child);\n      child = child.nextSibling;\n    } while (child !== null);\n    children.sort(comparator);\n\n    child = children[0]!;\n    this.setFirstChild(child);\n    child.setPreviousSibling(null);\n    for (let i = 1; i < children.length; i += 1) {\n      const next = children[i]!;\n      child.setNextSibling(next);\n      next.setPreviousSibling(child);\n      child = next;\n    }\n    child.setNextSibling(null);\n    this.setLastChild(child);\n  }\n\n  getTargetChild(child: C, comparator: Comparator<C>): C | null {\n    let target = this.lastChild;\n    while (target !== null) {\n      if (target !== child && comparator(child, target) >= 0) {\n        target = target.nextSibling;\n        if (target === child) {\n          target = target.nextSibling;\n        }\n        return target;\n      }\n      target = target.previousSibling;\n    }\n    target = this.firstChild;\n    if (target === child) {\n      target = target.nextSibling;\n    }\n    return target;\n  }\n\n  getAncestor<F extends Class<C>>(ancestorType: F): InstanceType<F> | null;\n  getAncestor(ancestorType: Class<C>): C | null;\n  getAncestor(ancestorType: Class<C>): C | null {\n    let ancestor = this.parent;\n    while (ancestor !== null) {\n      if (ancestor instanceof ancestorType) {\n        return ancestor;\n      }\n      ancestor = ancestor.parent;\n    }\n    return null;\n  }\n\n  getRoot<F extends Class<C>>(rootType: F): InstanceType<F> | null;\n  getRoot(rootType: Class<C>): C | null;\n  getRoot(rootType: Class<C>): C | null {\n    let base: C | null = null;\n    let ancestor = this.parent;\n    while (ancestor !== null) {\n      if (ancestor instanceof rootType) {\n        base = ancestor;\n      }\n      ancestor = ancestor.parent;\n    }\n    return base;\n  }\n\n  isAncestorOf(descendant: C | null): boolean;\n  isAncestorOf(this: C, descendant: C | null): boolean {\n    while (descendant !== null) {\n      if (descendant === this) {\n        return true;\n      }\n      descendant = descendant.parent;\n    }\n    return false;\n  }\n\n  commonAncestor(relative: C | null): C | null;\n  commonAncestor(this: C, relative: C | null): C | null {\n    while (relative !== null) {\n      if (relative.isAncestorOf(this)) {\n        return relative;\n      }\n      relative = relative.parent;\n    }\n    return null;\n  }\n\n  get mounted(): boolean {\n    return (this.flags & Component.MountedFlag) !== 0;\n  }\n\n  get mountFlags(): ComponentFlags {\n    return (this.constructor as typeof Component).MountFlags;\n  }\n\n  mount(): void {\n    if (this.mounted || this.parent !== null) {\n      return;\n    }\n    this.setFlags(this.flags | Component.InsertingFlag);\n    this.cascadeMount();\n    this.cascadeInsert();\n    this.setFlags(this.flags & ~Component.InsertingFlag);\n  }\n\n  /** @internal */\n  cascadeMount(): void {\n    if ((this.flags & Component.MountedFlag) !== 0) {\n      throw new Error(\"already mounted\");\n    }\n    this.willMount();\n    this.setFlags(this.flags | Component.MountedFlag);\n    this.onMount();\n    this.mountChildren();\n    this.didMount();\n  }\n\n  protected willMount(): void {\n    // hook\n  }\n\n  protected onMount(): void {\n    // hook\n  }\n\n  protected didMount(): void {\n    this.requireUpdate(this.mountFlags);\n    this.mountFasteners();\n  }\n\n  /** @internal */\n  protected mountChildren(): void;\n  protected mountChildren(this: C): void {\n    let child = this.firstChild;\n    while (child !== null) {\n      const next = child.nextSibling;\n      child.cascadeMount();\n      if (next !== null && next.parent !== this) {\n        throw new Error(\"inconsistent mount\");\n      }\n      child = next;\n    }\n  }\n\n  unmount(): void {\n    if (!this.mounted || this.parent !== null) {\n      return;\n    }\n    this.cascadeUnmount();\n  }\n\n  /** @internal */\n  cascadeUnmount(): void {\n    if ((this.flags & Component.MountedFlag) === 0) {\n      throw new Error(\"already unmounted\");\n    }\n    this.willUnmount();\n    this.setFlags(this.flags & ~Component.MountedFlag);\n    this.unmountChildren();\n    this.onUnmount();\n    this.didUnmount();\n  }\n\n  protected willUnmount(): void {\n    this.unmountFasteners();\n  }\n\n  protected onUnmount(): void {\n    // hook\n  }\n\n  protected didUnmount(): void {\n    // hook\n  }\n\n  /** @internal */\n  protected unmountChildren(): void;\n  protected unmountChildren(this: C): void {\n    let child = this.lastChild;\n    while (child !== null) {\n      const prev = child.previousSibling;\n      child.cascadeUnmount();\n      if (prev !== null && prev.parent !== this) {\n        throw new Error(\"inconsistent unmount\");\n      }\n      child = prev;\n    }\n  }\n\n  requireUpdate(updateFlags: ComponentFlags, immediate?: boolean): void {\n    // hook\n  }\n\n  tryFastener<K extends keyof this, F extends this[K] = this[K]>(fastenerName: K): (F extends Fastener<any, any, any> ? F | null : never) | null {\n    const metaclass = FastenerContextMetaclass.get(this);\n    return metaclass !== null ? metaclass.tryFastener(this, fastenerName) : null;\n  }\n\n  getFastener<F extends Fastener<any, any, any>>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null {\n    if (contextType !== void 0 && contextType !== null && !(this instanceof contextType)) {\n      return null;\n    }\n    const fastener = (this as any)[fastenerName] as F | null | undefined;\n    if (fastener === void 0 || (fastenerType !== void 0 && fastenerType !== null && !(fastener instanceof fastenerType))) {\n      return null;\n    }\n    return fastener;\n  }\n\n  /** @override */\n  getParentFastener<F extends Fastener<any, any, any>>(fastenerName: PropertyKey, fastenerType?: Proto<F>, contextType?: Proto<any> | null): F | null {\n    let parent = this.parent;\n    while (parent !== null) {\n      const fastener = parent.getFastener(fastenerName, fastenerType, contextType);\n      if (fastener !== null) {\n        return fastener;\n      }\n      parent = parent.parent;\n    }\n    return null;\n  }\n\n  /** @override */\n  attachFastener(fastener: Fastener<any, any, any>): void {\n    if (this.mounted) {\n      fastener.mount();\n    }\n    this.bindFastener(fastener);\n  }\n\n  /** @internal */\n  protected mountFasteners(): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        fastener.mount();\n      }\n    }\n  }\n\n  /** @internal */\n  protected unmountFasteners(): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        fastener.unmount();\n      }\n    }\n  }\n\n  protected bindFastener(fastener: Fastener<any, any, any>): void;\n  protected bindFastener(this: C, fastener: Fastener<any, any, any>): void {\n    if (!fastener.binds) {\n      return;\n    }\n    let child = this.firstChild;\n    while (child !== null) {\n      const next = child.nextSibling;\n      this.bindChildFastener(fastener, child, next);\n      child = next !== null && next.parent === this ? next : null;\n    }\n  }\n\n  /** @internal */\n  protected bindChildFasteners(child: C, target: C | null): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        this.bindChildFastener(fastener, child, target);\n      }\n    }\n  }\n\n  /** @internal */\n  protected bindChildFastener(fastener: Fastener<any, any, any>, child: C, target: C | null): void {\n    if (fastener instanceof ComponentRelation || fastener instanceof EventHandler) {\n      fastener.bindComponent(child, target);\n    }\n  }\n\n  /** @internal */\n  protected unbindChildFasteners(child: C): void {\n    const metaclass = FastenerContextMetaclass.get(this);\n    if (metaclass === null) {\n      return;\n    }\n    const fastenerSlots = metaclass.slots;\n    for (let i = 0; i < fastenerSlots.length; i += 1) {\n      const fastener = this[fastenerSlots[i]!];\n      if (fastener instanceof Fastener) {\n        this.unbindChildFastener(fastener, child);\n      }\n    }\n  }\n\n  /** @internal */\n  protected unbindChildFastener(fastener: Fastener<any, any, any>, child: C): void {\n    if (fastener instanceof ComponentRelation || fastener instanceof EventHandler) {\n      fastener.unbindComponent(child);\n    }\n  }\n\n  set<S>(this: S, properties: {[K in keyof S as S[K] extends {set(value: any): any} ? K : never]?: S[K] extends {set(value: infer T): any} ? T : never}, timing?: TimingLike | boolean | null): this;\n  set(properties: {[K in keyof this as this[K] extends {set(value: any): any} ? K : never]?: this[K] extends {set(value: infer T): any} ? T : never}, timing?: TimingLike | boolean | null): this {\n    for (const key in properties) {\n      const value = properties[key];\n      const property = (this as any)[key] as {set?(value: any): any} | undefined;\n      if (property === void 0 || property === null) {\n        throw new Error(\"unknown property \" + key);\n      } else if (property.set === void 0) {\n        throw new Error(\"unsettable property \" + key);\n      } else if (property instanceof Animator) {\n        property.set(value, timing);\n      } else {\n        property.set(value);\n      }\n    }\n    return this;\n  }\n\n  setIntrinsic<S>(this: S, properties: {[K in keyof S as S[K] extends {setIntrinsic(value: any): any} ? K : never]?: S[K] extends {setIntrinsic(value: infer T): any} ? T : never}, timing?: TimingLike | boolean | null): this;\n  setIntrinsic(properties: {[K in keyof this as this[K] extends {setIntrinsic(value: any): any} ? K : never]?: this[K] extends {setIntrinsic(value: infer T): any} ? T : never}, timing?: TimingLike | boolean | null): this {\n    for (const key in properties) {\n      const value = properties[key];\n      const property = (this as any)[key] as {setIntrinsic?(value: any): any} | undefined;\n      if (property === void 0 || property === null) {\n        throw new Error(\"unknown property \" + key);\n      } else if (property.setIntrinsic === void 0) {\n        throw new Error(\"unsettable property \" + key);\n      } else if (property instanceof Animator) {\n        property.setIntrinsic(value, timing);\n      } else {\n        property.setIntrinsic(value);\n      }\n    }\n    return this;\n  }\n\n  /** @internal */\n  readonly coherentTime: number;\n\n  /** @internal */\n  readonly decoherent: readonly Fastener<any, any, any>[] | null;\n\n  /** @internal */\n  readonly recohering: readonly Fastener<any, any, any>[] | null;\n\n  /** @override */\n  decohereFastener(fastener: Fastener<any, any, any>): void {\n    const recohering = this.recohering as Fastener<any, any, any>[] | null;\n    if (recohering !== null && fastener.coherentTime !== this.coherentTime) {\n      recohering.push(fastener);\n      return;\n    }\n    this.enqueueFastener(fastener);\n  }\n\n  protected enqueueFastener(fastener: Fastener<any, any, any>): void {\n    let decoherent = this.decoherent as Fastener<any, any, any>[] | null;\n    if (decoherent === null) {\n      decoherent = [];\n      (this as Mutable<this>).decoherent = decoherent;\n    }\n    decoherent.push(fastener);\n  }\n\n  recohereFasteners(t?: number): void {\n    const decoherent = this.decoherent;\n    if (decoherent === null || decoherent.length === 0) {\n      return;\n    } else if (t === void 0) {\n      t = performance.now();\n    }\n    (this as Mutable<this>).coherentTime = t;\n    (this as Mutable<this>).decoherent = null;\n    (this as Mutable<this>).recohering = decoherent;\n    try {\n      for (let i = 0; i < decoherent.length; i += 1) {\n        const fastener = decoherent[i]!;\n        fastener.recohere(t);\n      }\n    } finally {\n      (this as Mutable<this>).recohering = null;\n    }\n  }\n\n  /** @internal */\n  readonly observers: ReadonlySet<Observes<this>> | null;\n\n  /** @override */\n  observe(observer: Observes<this>): void {\n    let observers = this.observers as Set<Observes<this>> | null;\n    if (observers === null) {\n      observers = new Set<Observes<this>>();\n      (this as Mutable<this>).observers = observers;\n    } else if (observers.has(observer)) {\n      return;\n    }\n    this.willObserve(observer);\n    observers.add(observer);\n    this.onObserve(observer);\n    this.didObserve(observer);\n  }\n\n  protected willObserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  protected onObserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  protected didObserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  /** @override */\n  unobserve(observer: Observes<this>): void {\n    const observers = this.observers as Set<Observes<this>> | null;\n    if (observers === null || !observers.has(observer)) {\n      return;\n    }\n    this.willUnobserve(observer);\n    observers.delete(observer);\n    this.onUnobserve(observer);\n    this.didUnobserve(observer);\n  }\n\n  protected willUnobserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  protected onUnobserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  protected didUnobserve(observer: Observes<this>): void {\n    // hook\n  }\n\n  callObservers<O, K extends keyof ObserverMethods<O>>(this: {readonly observerType?: Class<O>}, key: K, ...args: ObserverParameters<O, K>): void {\n    const observers = (this as Component).observers as ReadonlySet<ObserverMethods<O>> | null;\n    if (observers === null) {\n      return;\n    }\n    for (const observer of observers) {\n      const method = observer[key];\n      if (typeof method === \"function\") {\n        method.call(observer, ...args);\n      }\n    }\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    return this === that;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mixString(0, this.uid));\n  }\n\n  static create<S extends new () => InstanceType<S>>(this: S): InstanceType<S> {\n    return new this();\n  }\n\n  static fromLike<S extends Class<Instance<S, Component>>>(this: S, value: InstanceType<S> | LikeType<InstanceType<S>>): InstanceType<S> {\n    if (value === void 0 || value === null) {\n      return value as InstanceType<S>;\n    } else if (value instanceof Component) {\n      if (!(value instanceof this)) {\n        throw new TypeError(value + \" not an instance of \" + this);\n      }\n      return value;\n    } else if (Creatable[Symbol.hasInstance](value)) {\n      return (value as Creatable<InstanceType<S>>).create();\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  /** @internal */\n  static uid: () => string = (function () {\n    let nextId = 1;\n    return function uid(): string {\n      const id = ~~nextId;\n      nextId += 1;\n      return \"component\" + id;\n    };\n  })();\n\n  /** @internal */\n  static readonly MountedFlag: ComponentFlags = 1 << 0;\n  /** @internal */\n  static readonly InsertingFlag: ComponentFlags = 1 << 1;\n  /** @internal */\n  static readonly RemovingFlag: ComponentFlags = 1 << 2;\n\n  /** @internal */\n  static readonly FlagShift: number = 3;\n  /** @internal */\n  static readonly FlagMask: ComponentFlags = (1 << this.FlagShift) - 1;\n\n  static readonly MountFlags: ComponentFlags = 0;\n  static readonly InsertChildFlags: ComponentFlags = 0;\n  static readonly RemoveChildFlags: ComponentFlags = 0;\n  static readonly ReinsertChildFlags: ComponentFlags = 0;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport type {Observes} from \"@swim/util\";\nimport type {FastenerDescriptor} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {ComponentFactory} from \"./Component\";\nimport {Component} from \"./Component\";\n\n/** @public */\nexport interface ComponentRelationDescriptor<R, C extends Component<any>> extends FastenerDescriptor<R> {\n  extends?: Proto<ComponentRelation<any, any, any>> | boolean | null;\n}\n\n/** @public */\nexport interface ComponentRelationClass<F extends ComponentRelation<any, any, any> = ComponentRelation> extends FastenerClass<F> {\n}\n\n/** @public */\nexport interface ComponentRelation<R = any, C extends Component<any> = Component, I extends any[] = [C | null]> extends Fastener<R, C | null, I> {\n  /** @override */\n  get descriptorType(): Proto<ComponentRelationDescriptor<R, C>>;\n\n  /** @override */\n  get fastenerType(): Proto<ComponentRelation<any, any, any>>;\n\n  get componentType(): ComponentFactory<C> | null;\n\n  get observes(): boolean;\n\n  /** @override */\n  get parent(): ComponentRelation<any, C, any> | null;\n\n  /** @internal */\n  readonly outlets: ReadonlySet<Fastener<any, any, any>> | null;\n\n  /** @internal @override */\n  attachOutlet(outlet: Fastener<any, any, any>): void;\n\n  /** @internal @override */\n  detachOutlet(outlet: Fastener<any, any, any>): void;\n\n  /** @internal @protected */\n  decohereOutlets(): void;\n\n  /** @protected */\n  initComponent(component: C): void;\n\n  /** @protected */\n  willAttachComponent(component: C, target: Component<any> | null): void;\n\n  /** @protected */\n  onAttachComponent(component: C, target: Component<any> | null): void;\n\n  /** @protected */\n  didAttachComponent(component: C, target: Component<any> | null): void;\n\n  /** @protected */\n  deinitComponent(component: C): void;\n\n  /** @protected */\n  willDetachComponent(component: C): void;\n\n  /** @protected */\n  onDetachComponent(component: C): void;\n\n  /** @protected */\n  didDetachComponent(component: C): void;\n\n  /** @protected */\n  get parentComponent(): Component<any> | null;\n\n  /** @protected */\n  insertChild(parent: Component<any>, child: C, target: Component<any> | null, key: string | undefined): void;\n\n  /** @internal */\n  bindComponent(component: Component<any>, target: Component<any> | null): void;\n\n  /** @internal */\n  unbindComponent(component: Component<any>): void;\n\n  detectComponent(component: Component<any>): C | null;\n\n  createComponent(): C;\n\n  fromLike(value: C | LikeType<C>): C;\n}\n\n/** @public */\nexport const ComponentRelation = (<R, C extends Component<any>, I extends any[], F extends ComponentRelation<any, any, any>>() => Fastener.extend<ComponentRelation<R, C, I>, ComponentRelationClass<F>>(\"ComponentRelation\", {\n  get fastenerType(): Proto<ComponentRelation<any, any, any>> {\n    return ComponentRelation;\n  },\n\n  componentType: null,\n\n  observes: false,\n\n  attachOutlet(outlet: Fastener<any, any, any>): void {\n    let outlets = this.outlets as Set<Fastener<any, any, any>> | null;\n    if (outlets === null) {\n      outlets = new Set<Fastener<any, any, any>>();\n      (this as Mutable<typeof this>).outlets = outlets;\n    }\n    outlets.add(outlet);\n  },\n\n  detachOutlet(outlet: Fastener<any, any, any>): void {\n    const outlets = this.outlets as Set<Fastener<any, any, any>> | null;\n    if (outlets !== null) {\n      outlets.delete(outlet);\n    }\n  },\n\n  decohereOutlets(): void {\n    const outlets = this.outlets;\n    if (outlets !== null) {\n      for (const outlet of outlets) {\n        outlet.decohere(this);\n      }\n    }\n  },\n\n  initComponent(component: C): void {\n    // hook\n  },\n\n  willAttachComponent(component: C, target: Component<any> | null): void {\n    // hook\n  },\n\n  onAttachComponent(component: C, target: Component<any> | null): void {\n    if (this.observes) {\n      component.observe(this as Observes<C>);\n    }\n  },\n\n  didAttachComponent(component: C, target: Component<any> | null): void {\n    // hook\n  },\n\n  deinitComponent(component: C): void {\n    // hook\n  },\n\n  willDetachComponent(component: C): void {\n    // hook\n  },\n\n  onDetachComponent(component: C): void {\n    if (this.observes) {\n      component.unobserve(this as Observes<C>);\n    }\n  },\n\n  didDetachComponent(component: C): void {\n    // hook\n  },\n\n  get parentComponent(): Component<any> | null {\n    const owner = this.owner;\n    return owner instanceof Component ? owner : null;\n  },\n\n  insertChild(parent: Component<any>, child: C, target: Component<any> | null, key: string | undefined): void {\n    parent.insertChild(child, target, key);\n  },\n\n  bindComponent(component: Component<any>, target: Component<any> | null): void {\n    // hook\n  },\n\n  unbindComponent(component: Component<any>): void {\n    // hook\n  },\n\n  detectComponent(component: Component<any>): C | null {\n    return null;\n  },\n\n  createComponent(): C {\n    let component: C | undefined;\n    const componentType = this.componentType;\n    if (componentType !== null) {\n      component = componentType.create();\n    }\n    if (component === void 0 || component === null) {\n      let message = \"unable to create \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"component\";\n      throw new Error(message);\n    }\n    return component;\n  },\n\n  fromLike(value: C | LikeType<C>): C {\n    const componentType = this.componentType;\n    if (componentType !== null) {\n      return componentType.fromLike(value);\n    }\n    return Component.fromLike(value) as C;\n  },\n},\n{\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).outlets = null;\n    return fastener;\n  },\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport {FastenerContextMetaclass} from \"./FastenerContext\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {Component} from \"./Component\";\nimport type {ComponentRelationDescriptor} from \"./ComponentRelation\";\nimport type {ComponentRelationClass} from \"./ComponentRelation\";\nimport {ComponentRelation} from \"./ComponentRelation\";\n\n/** @public */\nexport interface ComponentRefDescriptor<R, C extends Component<any>> extends ComponentRelationDescriptor<R, C> {\n  extends?: Proto<ComponentRef<any, any, any>> | boolean | null;\n  componentKey?: string | boolean;\n}\n\n/** @public */\nexport interface ComponentRefClass<F extends ComponentRef<any, any, any> = ComponentRef> extends ComponentRelationClass<F> {\n  tryComponent<R, K extends keyof R, F extends R[K] = R[K]>(owner: R, fastenerName: K): (F extends {readonly component: infer C | null} ? C | null : never) | null;\n}\n\n/** @public */\nexport interface ComponentRef<R = any, C extends Component<any> = Component, I extends any[] = [C | null]> extends ComponentRelation<R, C, I> {\n  /** @override */\n  get descriptorType(): Proto<ComponentRefDescriptor<R, C>>;\n\n  /** @override */\n  get fastenerType(): Proto<ComponentRef<any, any, any>>;\n\n  /** @override */\n  get parent(): ComponentRef<any, C, any> | null;\n\n  get inletComponent(): C | null;\n\n  getInletComponent(): C;\n\n  get(): C | null;\n\n  set(component: C | LikeType<C> | Fastener<any, I[0], any> | null): R;\n\n  setIntrinsic(component: C | LikeType<C> | Fastener<any, I[0], any> | null): R;\n\n  get componentKey(): string | undefined;\n\n  readonly component: C | null;\n\n  getComponent(): C;\n\n  setComponent(component: C | LikeType<C> | null, target?: Component<any> | null, key?: string): C | null;\n\n  attachComponent(component?: C | LikeType<C> | null, target?: Component<any> | null): C;\n\n  detachComponent(): C | null;\n\n  insertComponent(parent?: Component<any> | null, component?: C | LikeType<C>, target?: Component<any> | null, key?: string): C;\n\n  removeComponent(): C | null;\n\n  deleteComponent(): C | null;\n\n  /** @internal @override */\n  bindComponent(component: Component<any>, target: Component<any> | null): void;\n\n  /** @internal @override */\n  unbindComponent(component: Component<any>): void;\n\n  /** @override */\n  detectComponent(component: Component<any>): C | null;\n\n  /** @override */\n  recohere(t: number): void;\n}\n\n/** @public */\nexport const ComponentRef = (<R, C extends Component<any>, I extends any[], F extends ComponentRef<any, any, any>>() => ComponentRelation.extend<ComponentRef<R, C, I>, ComponentRefClass<F>>(\"ComponentRef\", {\n  get fastenerType(): Proto<ComponentRef<any, any, any>> {\n    return ComponentRef;\n  },\n\n  get inletComponent(): C | null {\n    const inlet = this.inlet;\n    return inlet instanceof ComponentRef ? inlet.component : null;\n  },\n\n  getInletComponent(): C {\n    const inletComponent = this.inletComponent;\n    if (inletComponent === void 0 || inletComponent === null) {\n      let message = inletComponent + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"inlet component\";\n      throw new TypeError(message);\n    }\n    return inletComponent;\n  },\n\n  get(): C | null {\n    return this.component;\n  },\n\n  set(component: C | LikeType<C> | Fastener<any, I[0], any> | null): R {\n    if (component instanceof Fastener) {\n      this.bindInlet(component);\n    } else {\n      this.setComponent(component);\n    }\n    return this.owner;\n  },\n\n  setIntrinsic(component: C | LikeType<C> | Fastener<any, I[0], any> | null): R {\n    if (component instanceof Fastener) {\n      this.bindInlet(component);\n    } else {\n      this.setComponent(component);\n    }\n    return this.owner;\n  },\n\n  componentKey: void 0,\n\n  getComponent(): C {\n    const component = this.component;\n    if (component === null) {\n      let message = component + \" \";\n      const name = this.name.toString();\n      if (name.length !== 0) {\n        message += name + \" \";\n      }\n      message += \"component\";\n      throw new TypeError(message);\n    }\n    return component;\n  },\n\n  setComponent(newComponent: C  | null, target?: Component<any> | null, key?: string): C | null {\n    if (newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    }\n    let oldComponent = this.component;\n    if (oldComponent === newComponent) {\n      this.setCoherent(true);\n      return oldComponent;\n    } else if (target === void 0) {\n      target = null;\n    }\n    let parent: Component<any> | null;\n    if (this.binds && (parent = this.parentComponent, parent !== null)) {\n      if (oldComponent !== null && oldComponent.parent === parent) {\n        if (target === null) {\n          target = oldComponent.nextSibling as Component<any> | null;\n        }\n        oldComponent.remove();\n      }\n      if (newComponent !== null) {\n        if (key === void 0) {\n          key = this.componentKey;\n        }\n        this.insertChild(parent, newComponent, target, key);\n      }\n      oldComponent = this.component;\n      if (oldComponent === newComponent) {\n        return oldComponent;\n      }\n    }\n    if (oldComponent !== null) {\n      (this as Mutable<typeof this>).component = null;\n      this.willDetachComponent(oldComponent);\n      this.onDetachComponent(oldComponent);\n      this.deinitComponent(oldComponent);\n      this.didDetachComponent(oldComponent);\n    }\n    if (newComponent !== null) {\n      (this as Mutable<typeof this>).component = newComponent;\n      this.willAttachComponent(newComponent, target);\n      this.onAttachComponent(newComponent, target);\n      this.initComponent(newComponent);\n      this.didAttachComponent(newComponent, target);\n    }\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return oldComponent;\n  },\n\n  attachComponent(newComponent?: C | LikeType<C>, target?: Component<any> | null): C {\n    const oldComponent = this.component;\n    if (newComponent !== void 0 && newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    } else if (oldComponent === null) {\n      newComponent = this.createComponent();\n    } else {\n      newComponent = oldComponent;\n    }\n    if (target === void 0) {\n      target = null;\n    }\n    if (oldComponent === newComponent) {\n      return newComponent;\n    } else if (oldComponent !== null) {\n      (this as Mutable<typeof this>).component = null;\n      this.willDetachComponent(oldComponent);\n      this.onDetachComponent(oldComponent);\n      this.deinitComponent(oldComponent);\n      this.didDetachComponent(oldComponent);\n    }\n    (this as Mutable<typeof this>).component = newComponent;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return newComponent;\n  },\n\n  detachComponent(): C | null {\n    const oldComponent = this.component;\n    if (oldComponent === null) {\n      return null;\n    }\n    (this as Mutable<typeof this>).component = null;\n    this.willDetachComponent(oldComponent);\n    this.onDetachComponent(oldComponent);\n    this.deinitComponent(oldComponent);\n    this.didDetachComponent(oldComponent);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return oldComponent;\n  },\n\n  insertComponent(parent?: Component<any> | null, newComponent?: C | LikeType<C>, target?: Component<any> | null, key?: string): C {\n    let oldComponent = this.component;\n    if (newComponent !== void 0 && newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    } else if (oldComponent === null) {\n      newComponent = this.createComponent();\n    } else {\n      newComponent = oldComponent;\n    }\n    if (parent === void 0) {\n      parent = null;\n    }\n    if (!this.binds && oldComponent === newComponent && newComponent.parent !== null && parent === null && key === void 0) {\n      return newComponent;\n    }\n    if (parent === null) {\n      parent = this.parentComponent;\n    }\n    if (target === void 0) {\n      target = null;\n    }\n    if (key === void 0) {\n      key = this.componentKey;\n    }\n    if (parent !== null && (newComponent.parent !== parent || newComponent.key !== key)) {\n      this.insertChild(parent, newComponent, target, key);\n    }\n    oldComponent = this.component;\n    if (oldComponent === newComponent) {\n      return newComponent;\n    } else if (oldComponent !== null) {\n      (this as Mutable<typeof this>).component = null;\n      this.willDetachComponent(oldComponent);\n      this.onDetachComponent(oldComponent);\n      this.deinitComponent(oldComponent);\n      this.didDetachComponent(oldComponent);\n      if (this.binds && parent !== null && oldComponent.parent === parent) {\n        oldComponent.remove();\n      }\n    }\n    (this as Mutable<typeof this>).component = newComponent;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return newComponent;\n  },\n\n  removeComponent(): C | null {\n    const component = this.component;\n    if (component === null) {\n      return null;\n    }\n    component.remove();\n    return component;\n  },\n\n  deleteComponent(): C | null {\n    const component = this.detachComponent();\n    if (component === null) {\n      return null;\n    }\n    component.remove();\n    return component;\n  },\n\n  bindComponent(component: Component<any>, target: Component<any> | null): void {\n    if (!this.binds || this.component !== null) {\n      return;\n    }\n    const newComponent = this.detectComponent(component);\n    if (newComponent === null) {\n      return;\n    }\n    (this as Mutable<typeof this>).component = newComponent;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n  },\n\n  unbindComponent(component: Component<any>): void {\n    if (!this.binds) {\n      return;\n    }\n    const oldComponent = this.detectComponent(component);\n    if (oldComponent === null || this.component !== oldComponent) {\n      return;\n    }\n    (this as Mutable<typeof this>).component = null;\n    this.willDetachComponent(oldComponent);\n    this.onDetachComponent(oldComponent);\n    this.deinitComponent(oldComponent);\n    this.didDetachComponent(oldComponent);\n    this.setCoherent(true);\n    this.decohereOutlets();\n  },\n\n  detectComponent(component: Component<any>): C | null {\n    const key = this.componentKey;\n    if (key !== void 0 && key === component.key) {\n      return component as C;\n    }\n    return null;\n  },\n\n  recohere(t: number): void {\n    this.setCoherentTime(t);\n    const inlet = this.inlet;\n    if (inlet instanceof ComponentRef) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n      if ((this.flags & Fastener.DerivedFlag) !== 0) {\n        this.setComponent(inlet.component);\n      }\n    } else {\n      this.setDerived(false);\n    }\n  },\n},\n{\n  tryComponent<R, K extends keyof R, F extends R[K]>(owner: R, fastenerName: K): (F extends {readonly component: infer C | null} ? C | null : never) | null {\n    const metaclass = FastenerContextMetaclass.get(owner);\n    const componentRef = metaclass !== null ? metaclass.tryFastener(owner, fastenerName) : null;\n    return componentRef instanceof ComponentRef ? componentRef.component : null;\n  },\n\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).component = null;\n    return fastener;\n  },\n\n  refine(fastenerClass: FastenerClass<ComponentRef<any, any, any>>): void {\n    super.refine(fastenerClass);\n    const fastenerPrototype = fastenerClass.prototype;\n\n    const componentKeyDescriptor = Object.getOwnPropertyDescriptor(fastenerPrototype, \"componentKey\");\n    if (componentKeyDescriptor !== void 0 && \"value\" in componentKeyDescriptor) {\n      if (componentKeyDescriptor.value === true) {\n        componentKeyDescriptor.value = fastenerClass.name;\n        Object.defineProperty(fastenerPrototype, \"componentKey\", componentKeyDescriptor);\n      } else if (componentKeyDescriptor.value === false) {\n        componentKeyDescriptor.value = void 0;\n        Object.defineProperty(fastenerPrototype, \"componentKey\", componentKeyDescriptor);\n      }\n    }\n  },\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport type {Comparator} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {LikeType} from \"@swim/util\";\nimport {Affinity} from \"./Affinity\";\nimport type {FastenerFlags} from \"./Fastener\";\nimport type {FastenerClass} from \"./Fastener\";\nimport {Fastener} from \"./Fastener\";\nimport type {Component} from \"./Component\";\nimport type {ComponentRelationDescriptor} from \"./ComponentRelation\";\nimport type {ComponentRelationClass} from \"./ComponentRelation\";\nimport {ComponentRelation} from \"./ComponentRelation\";\n\n/** @public */\nexport interface ComponentSetDescriptor<R, C extends Component<any>> extends ComponentRelationDescriptor<R, C> {\n  extends?: Proto<ComponentSet<any, any, any>> | boolean | null;\n  ordered?: boolean;\n  sorted?: boolean;\n}\n\n/** @public */\nexport interface ComponentSetClass<F extends ComponentSet<any, any, any> = ComponentSet> extends ComponentRelationClass<F> {\n  /** @internal */\n  readonly OrderedFlag: FastenerFlags;\n  /** @internal */\n  readonly SortedFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface ComponentSet<R = any, C extends Component<any> = Component, I extends any[] = [C | null]> extends ComponentRelation<R, C, I> {\n  /** @override */\n  get descriptorType(): Proto<ComponentSetDescriptor<R, C>>;\n\n  /** @override */\n  get fastenerType(): Proto<ComponentSet<any, any, any>>;\n\n  /** @override */\n  get parent(): ComponentSet<any, C, any> | null;\n\n  /** @protected */\n  componentKey(component: C): string | undefined;\n\n  /** @internal */\n  readonly components: {readonly [componentId: string]: C | undefined};\n\n  readonly componentCount: number;\n\n  /** @internal */\n  insertComponentMap(newComponent: C, target: Component<any> | null): void;\n\n  /** @internal */\n  removeComponentMap(oldComponent: C): void;\n\n  hasComponent(component: Component<any>): boolean;\n\n  addComponent(component?: C | LikeType<C>, target?: Component<any> | null, key?: string): C;\n\n  addComponents(components: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void;\n\n  setComponents(components: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void;\n\n  attachComponent(component?: C | LikeType<C> | null, target?: Component<any> | null): C;\n\n  attachComponents(components: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void;\n\n  detachComponent(component: C): C | null;\n\n  detachComponents(components?: {readonly [componentId: string]: C | undefined}): void;\n\n  insertComponent(parent?: Component<any> | null, component?: C | LikeType<C>, target?: Component<any> | null, key?: string): C;\n\n  insertComponents(parent: Component<any> | null, components: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void;\n\n  removeComponent(component: C): C | null;\n\n  removeComponents(components?: {readonly [componentId: string]: C | undefined}): void;\n\n  deleteComponent(component: C): C | null;\n\n  deleteComponents(components?: {readonly [componentId: string]: C | undefined}): void;\n\n  reinsertComponent(component: C, target?: Component<any> | null): void;\n\n  /** @internal @override */\n  bindComponent(component: Component<any>, target: Component<any> | null): void;\n\n  /** @internal @override */\n  unbindComponent(component: Component<any>): void;\n\n  /** @override */\n  detectComponent(component: Component<any>): C | null;\n\n  /** @override */\n  recohere(t: number): void;\n\n  get ordered(): boolean;\n\n  order(ordered?: boolean): this;\n\n  get sorted(): boolean;\n\n  sort(sorted?: boolean): this;\n\n  /** @protected */\n  willSort(parent: Component<any> | null): void;\n\n  /** @protected */\n  onSort(parent: Component<any> | null): void;\n\n  /** @protected */\n  didSort(parent: Component<any> | null): void;\n\n  /** @internal */\n  sortChildren(parent: Component<any>, comparator?: Comparator<C>): void;\n\n  /** @internal */\n  getTargetChild(parent: Component<any>, child: C): Component<any> | null;\n\n  /** @internal */\n  compareChildren(a: Component<any>, b: Component<any>): number;\n\n  /** @internal */\n  compareTargetChild(a: Component<any>, b: Component<any>): number;\n\n  /** @protected */\n  compare(a: C, b: C): number;\n}\n\n/** @public */\nexport const ComponentSet = (<R, C extends Component<any>, I extends any[], F extends ComponentSet<any, any, any>>() => ComponentRelation.extend<ComponentSet<R, C, I>, ComponentSetClass<F>>(\"ComponentSet\", {\n  get fastenerType(): Proto<ComponentSet<any, any, any>> {\n    return ComponentSet;\n  },\n\n  componentKey(component: C): string | undefined {\n    return void 0;\n  },\n\n  insertComponentMap(newComponent: C, target: Component<any> | null): void {\n    const components = this.components as {[componentId: string]: C | undefined};\n    if (target !== null && (this.flags & ComponentSet.OrderedFlag) !== 0) {\n      (this as Mutable<typeof this>).components = Objects.inserted(components, newComponent.uid, newComponent, target);\n    } else {\n      components[newComponent.uid] = newComponent;\n    }\n  },\n\n  removeComponentMap(oldComponent: C): void {\n    const components = this.components as {[componentId: string]: C | undefined};\n    delete components[oldComponent.uid];\n  },\n\n  hasComponent(component: Component<any>): boolean {\n    return this.components[component.uid] !== void 0;\n  },\n\n  addComponent(newComponent?: C | LikeType<C>, target?: Component<any> | null, key?: string): C {\n    if (newComponent !== void 0 && newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    } else {\n      newComponent = this.createComponent();\n    }\n    if (target === void 0) {\n      target = null;\n    }\n    let parent: Component<any> | null;\n    if (this.binds && (parent = this.parentComponent, parent !== null)) {\n      if (target === null) {\n        if (newComponent.parent === parent) {\n          target = newComponent.nextSibling as Component<any> | null;\n        } else {\n          target = this.getTargetChild(parent, newComponent);\n        }\n      }\n      if (key === void 0) {\n        key = this.componentKey(newComponent);\n      }\n      if (newComponent.parent !== parent || newComponent.nextSibling !== target || newComponent.key !== key) {\n        this.insertChild(parent, newComponent, target, key);\n      }\n    }\n    if (this.components[newComponent.uid] !== void 0) {\n      return newComponent;\n    }\n    this.insertComponentMap(newComponent, target);\n    (this as Mutable<typeof this>).componentCount += 1;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return newComponent;\n  },\n\n  addComponents(newComponents: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void {\n    for (const componentId in newComponents) {\n      this.addComponent(newComponents[componentId]!, target);\n    }\n  },\n\n  setComponents(newComponents: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void {\n    const binds = this.binds;\n    const parent = binds ? this.parentComponent : null;\n    const components = this.components;\n    for (const componentId in components) {\n      if (newComponents[componentId] === void 0) {\n        const oldComponent = this.detachComponent(components[componentId]!);\n        if (oldComponent !== null && binds && parent !== null && oldComponent.parent === parent) {\n          oldComponent.remove();\n        }\n      }\n    }\n    if ((this.flags & ComponentSet.OrderedFlag) !== 0) {\n      const orderedComponents = new Array<C>();\n      for (const componentId in newComponents) {\n        orderedComponents.push(newComponents[componentId]!);\n      }\n      for (let i = 0, n = orderedComponents.length; i < n; i += 1) {\n        const newComponent = orderedComponents[i]!;\n        if (components[newComponent.uid] === void 0) {\n          const targetComponent = i < n + 1 ? orderedComponents[i + 1] : target;\n          this.addComponent(newComponent, targetComponent);\n        }\n      }\n    } else {\n      for (const componentId in newComponents) {\n        if (components[componentId] === void 0) {\n          this.addComponent(newComponents[componentId]!, target);\n        }\n      }\n    }\n  },\n\n  attachComponent(newComponent?: C | LikeType<C> | null, target?: Component<any> | null): C {\n    if (newComponent !== void 0 && newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    } else {\n      newComponent = this.createComponent();\n    }\n    if (this.components[newComponent.uid] !== void 0) {\n      return newComponent;\n    } else if (target === void 0) {\n      target = null;\n    }\n    this.insertComponentMap(newComponent, target);\n    (this as Mutable<typeof this>).componentCount += 1;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return newComponent;\n  },\n\n  attachComponents(newComponents: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void {\n    for (const componentId in newComponents) {\n      this.attachComponent(newComponents[componentId]!, target);\n    }\n  },\n\n  detachComponent(oldComponent: C): C | null {\n    if (this.components[oldComponent.uid] === void 0) {\n      return null;\n    }\n    (this as Mutable<typeof this>).componentCount -= 1;\n    this.removeComponentMap(oldComponent);\n    this.willDetachComponent(oldComponent);\n    this.onDetachComponent(oldComponent);\n    this.deinitComponent(oldComponent);\n    this.didDetachComponent(oldComponent);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return oldComponent;\n  },\n\n  detachComponents(components?: {readonly [componentId: string]: C | undefined}): void {\n    if (components === void 0) {\n      components = this.components;\n    }\n    for (const componentId in components) {\n      this.detachComponent(components[componentId]!);\n    }\n  },\n\n  insertComponent(parent?: Component<any> | null, newComponent?: C | LikeType<C>, target?: Component<any> | null, key?: string): C {\n    if (newComponent !== void 0 && newComponent !== null) {\n      newComponent = this.fromLike(newComponent);\n    } else {\n      newComponent = this.createComponent();\n    }\n    if (parent === void 0) {\n      parent = null;\n    }\n    if (!this.binds && this.components[newComponent.uid] !== void 0 && newComponent.parent !== null && parent === null && key === void 0) {\n      return newComponent;\n    }\n    if (parent === null) {\n      parent = this.parentComponent;\n    }\n    if (target === void 0) {\n      target = null;\n    }\n    if (key === void 0) {\n      key = this.componentKey(newComponent);\n    }\n    if (parent !== null && (newComponent.parent !== parent || newComponent.key !== key)) {\n      if (target === null) {\n        target = this.getTargetChild(parent, newComponent);\n      }\n      this.insertChild(parent, newComponent, target, key);\n    }\n    if (this.components[newComponent.uid] !== void 0) {\n      return newComponent;\n    }\n    this.insertComponentMap(newComponent, target);\n    (this as Mutable<typeof this>).componentCount += 1;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n    return newComponent;\n  },\n\n  insertComponents(parent: Component<any> | null, newComponents: {readonly [componentId: string]: C | undefined}, target?: Component<any> | null): void {\n    for (const componentId in newComponents) {\n      this.insertComponent(parent, newComponents[componentId]!, target);\n    }\n  },\n\n  removeComponent(component: C): C | null {\n    if (!this.hasComponent(component)) {\n      return null;\n    }\n    component.remove();\n    return component;\n  },\n\n  removeComponents(components?: {readonly [componentId: string]: C | undefined}): void {\n    if (components === void 0) {\n      components = this.components;\n    }\n    for (const componentId in components) {\n      this.removeComponent(components[componentId]!);\n    }\n  },\n\n  deleteComponent(component: C): C | null {\n    const oldComponent = this.detachComponent(component);\n    if (oldComponent === null) {\n      return null;\n    }\n    oldComponent.remove();\n    return oldComponent;\n  },\n\n  deleteComponents(components?: {readonly [componentId: string]: C | undefined}): void {\n    if (components === void 0) {\n      components = this.components;\n    }\n    for (const componentId in components) {\n      this.deleteComponent(components[componentId]!);\n    }\n  },\n\n  reinsertComponent(component: C, target?: Component<any> | null): void {\n    if (this.components[component.uid] === void 0 || (target === void 0 && (this.flags & ComponentSet.SortedFlag) === 0)) {\n      return;\n    }\n    const parent = component.parent;\n    if (parent === null) {\n      return;\n    } else if (target === void 0) {\n      target = this.getTargetChild(parent, component);\n    }\n    parent.reinsertChild(component, target);\n  },\n\n  bindComponent(component: Component<any>, target: Component<any> | null): void {\n    if (!this.binds) {\n      return;\n    }\n    const newComponent = this.detectComponent(component);\n    if (newComponent === null || this.components[newComponent.uid] !== void 0) {\n      return;\n    }\n    this.insertComponentMap(newComponent, target);\n    (this as Mutable<typeof this>).componentCount += 1;\n    this.willAttachComponent(newComponent, target);\n    this.onAttachComponent(newComponent, target);\n    this.initComponent(newComponent);\n    this.didAttachComponent(newComponent, target);\n    this.setCoherent(true);\n    this.decohereOutlets();\n  },\n\n  unbindComponent(component: Component<any>): void {\n    if (!this.binds) {\n      return;\n    }\n    const oldComponent = this.detectComponent(component);\n    if (oldComponent === null || this.components[oldComponent.uid] === void 0) {\n      return;\n    }\n    (this as Mutable<typeof this>).componentCount -= 1;\n    this.removeComponentMap(oldComponent);\n    this.willDetachComponent(oldComponent);\n    this.onDetachComponent(oldComponent);\n    this.deinitComponent(oldComponent);\n    this.didDetachComponent(oldComponent);\n    this.setCoherent(true);\n    this.decohereOutlets();\n  },\n\n  detectComponent(component: Component<any>): C | null {\n    if (typeof this.componentType === \"function\" && component instanceof this.componentType) {\n      return component as C;\n    }\n    return null;\n  },\n\n  recohere(t: number): void {\n    this.setCoherentTime(t);\n    const inlet = this.inlet;\n    if (inlet instanceof ComponentSet) {\n      this.setDerived((this.flags & Affinity.Mask) <= Math.min(inlet.flags & Affinity.Mask, Affinity.Intrinsic));\n      if ((this.flags & Fastener.DerivedFlag) !== 0) {\n        this.setComponents(inlet.components);\n      }\n    } else {\n      this.setDerived(false);\n    }\n  },\n\n  get ordered(): boolean {\n    return (this.flags & ComponentSet.OrderedFlag) !== 0;\n  },\n\n  order(ordered?: boolean): typeof this {\n    if (ordered === void 0) {\n      ordered = true;\n    }\n    if (ordered) {\n      this.setFlags(this.flags | ComponentSet.OrderedFlag);\n    } else {\n      this.setFlags(this.flags & ~ComponentSet.OrderedFlag);\n    }\n    return this;\n  },\n\n  get sorted(): boolean {\n    return (this.flags & ComponentSet.SortedFlag) !== 0;\n  },\n\n  sort(sorted?: boolean): typeof this {\n    if (sorted === void 0) {\n      sorted = true;\n    }\n    if (sorted) {\n      const parent = this.parentComponent;\n      this.willSort(parent);\n      this.setFlags(this.flags | ComponentSet.SortedFlag);\n      this.onSort(parent);\n      this.didSort(parent);\n    } else {\n      this.setFlags(this.flags & ~ComponentSet.SortedFlag);\n    }\n    return this;\n  },\n\n  willSort(parent: Component<any> | null): void {\n    // hook\n  },\n\n  onSort(parent: Component<any> | null): void {\n    if (parent !== null) {\n      this.sortChildren(parent);\n    }\n  },\n\n  didSort(parent: Component<any> | null): void {\n    // hook\n  },\n\n  sortChildren(parent: Component<any>, comparator?: Comparator<C>): void {\n    parent.sortChildren(this.compareChildren.bind(this));\n  },\n\n  getTargetChild(parent: Component<any>, child: C): Component<any> | null {\n    if ((this.flags & ComponentSet.SortedFlag) !== 0) {\n      return parent.getTargetChild(child, this.compareTargetChild.bind(this));\n    }\n    return null;\n  },\n\n  compareChildren(a: Component<any>, b: Component<any>): number {\n    const components = this.components;\n    const x = components[a.uid];\n    const y = components[b.uid];\n    if (x !== void 0 && y !== void 0) {\n      return this.compare(x, y);\n    }\n    return x !== void 0 ? 1 : y !== void 0 ? -1 : 0;\n  },\n\n  compareTargetChild(a: C, b: Component<any>): number {\n    const components = this.components;\n    const y = components[b.uid];\n    if (y !== void 0) {\n      return this.compare(a, y);\n    }\n    return y !== void 0 ? -1 : 0;\n  },\n\n  compare(a: C, b: C): number {\n    return a.uid < b.uid ? -1 : a.uid > b.uid ? 1 : 0;\n  },\n},\n{\n  construct(fastener: F | null, owner: F extends Fastener<infer R, any, any> ? R : never): F {\n    fastener = super.construct(fastener, owner) as F;\n    (fastener as Mutable<typeof fastener>).components = {};\n    (fastener as Mutable<typeof fastener>).componentCount = 0;\n    return fastener;\n  },\n\n  refine(fastenerClass: FastenerClass<ComponentSet<any, any, any>>): void {\n    super.refine(fastenerClass);\n    const fastenerPrototype = fastenerClass.prototype;\n\n    let flagsInit = fastenerPrototype.flagsInit;\n    if (Object.prototype.hasOwnProperty.call(fastenerPrototype, \"ordered\")) {\n      if (fastenerPrototype.ordered) {\n        flagsInit |= ComponentSet.OrderedFlag;\n      } else {\n        flagsInit &= ~ComponentSet.OrderedFlag;\n      }\n      delete (fastenerPrototype as ComponentSetDescriptor<any, any>).ordered;\n    }\n    if (Object.prototype.hasOwnProperty.call(fastenerPrototype, \"sorted\")) {\n      if (fastenerPrototype.sorted) {\n        flagsInit |= ComponentSet.SortedFlag;\n      } else {\n        flagsInit &= ~ComponentSet.SortedFlag;\n      }\n      delete (fastenerPrototype as ComponentSetDescriptor<any, any>).sorted;\n    }\n    Object.defineProperty(fastenerPrototype, \"flagsInit\", {\n      value: flagsInit,\n      enumerable: true,\n      configurable: true,\n    });\n  },\n\n  OrderedFlag: 1 << (ComponentRelation.FlagShift + 0),\n  SortedFlag: 1 << (ComponentRelation.FlagShift + 1),\n\n  FlagShift: ComponentRelation.FlagShift + 2,\n  FlagMask: (1 << (ComponentRelation.FlagShift + 2)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Class} from \"@swim/util\";\nimport type {Creatable} from \"@swim/util\";\nimport type {ComponentObserver} from \"./Component\";\nimport {Component} from \"./Component\";\n\n/** @public */\nexport interface ServiceFactory<S extends Service = Service> extends Creatable<S> {\n  global(): S;\n}\n\n/** @public */\nexport interface ServiceClass<S extends Service = Service> extends Function, ServiceFactory<S> {\n  readonly prototype: S;\n}\n\n/** @public */\nexport interface ServiceConstructor<S extends Service = Service> extends ServiceClass<S> {\n  new(): S;\n}\n\n/** @public */\nexport interface ServiceObserver<S extends Service = Service> extends ComponentObserver<S> {\n  serviceWillAttachParent?(parent: Service, service: S): void;\n\n  serviceDidAttachParent?(parent: Service, service: S): void;\n\n  serviceWillDetachParent?(parent: Service, service: S): void;\n\n  serviceDidDetachParent?(parent: Service, service: S): void;\n\n  serviceWillInsertChild?(child: Service, target: Service | null, service: S): void;\n\n  serviceDidInsertChild?(child: Service, target: Service | null, service: S): void;\n\n  serviceWillRemoveChild?(child: Service, service: S): void;\n\n  serviceDidRemoveChild?(child: Service, service: S): void;\n\n  serviceWillReinsertChild?(child: Service, target: Service | null, service: S): void;\n\n  serviceDidReinsertChild?(child: Service, target: Service | null, service: S): void;\n\n  serviceWillMount?(service: S): void;\n\n  serviceDidMount?(service: S): void;\n\n  serviceWillUnmount?(service: S): void;\n\n  serviceDidUnmount?(service: S): void;\n}\n\n/** @public */\nexport class Service extends Component<Service> {\n  override get componentType(): Class<Service> {\n    return Service;\n  }\n\n  declare readonly observerType?: Class<ServiceObserver>;\n\n  protected override willAttachParent(parent: Service): void {\n    this.callObservers(\"serviceWillAttachParent\", parent, this);\n  }\n\n  protected override onAttachParent(parent: Service): void {\n    // hook\n  }\n\n  protected override didAttachParent(parent: Service): void {\n    this.callObservers(\"serviceDidAttachParent\", parent, this);\n  }\n\n  protected override willDetachParent(parent: Service): void {\n    this.callObservers(\"serviceWillDetachParent\", parent, this);\n  }\n\n  protected override onDetachParent(parent: Service): void {\n    // hook\n  }\n\n  protected override didDetachParent(parent: Service): void {\n    this.callObservers(\"serviceDidDetachParent\", parent, this);\n  }\n\n  protected override willInsertChild(child: Service, target: Service | null): void {\n    super.willInsertChild(child, target);\n    this.callObservers(\"serviceWillInsertChild\", child, target, this);\n  }\n\n  protected override didInsertChild(child: Service, target: Service | null): void {\n    this.callObservers(\"serviceDidInsertChild\", child, target, this);\n    super.didInsertChild(child, target);\n  }\n\n  protected override willRemoveChild(child: Service): void {\n    super.willRemoveChild(child);\n    this.callObservers(\"serviceWillRemoveChild\", child, this);\n  }\n\n  protected override didRemoveChild(child: Service): void {\n    this.callObservers(\"serviceDidRemoveChild\", child, this);\n    super.didRemoveChild(child);\n  }\n\n  protected override willReinsertChild(child: Service, target: Service | null): void {\n    super.willReinsertChild(child, target);\n    this.callObservers(\"serviceWillReinsertChild\", child, target, this);\n  }\n\n  protected override didReinsertChild(child: Service, target: Service | null): void {\n    this.callObservers(\"serviceDidReinsertChild\", child, target, this);\n    super.didReinsertChild(child, target);\n  }\n\n  protected override willMount(): void {\n    super.willMount();\n    this.callObservers(\"serviceWillMount\", this);\n  }\n\n  protected override didMount(): void {\n    this.callObservers(\"serviceDidMount\", this);\n    super.didMount();\n  }\n\n  protected override willUnmount(): void {\n    super.willUnmount();\n    this.callObservers(\"serviceWillUnmount\", this);\n  }\n\n  protected override didUnmount(): void {\n    this.callObservers(\"serviceDidUnmount\", this);\n    super.didUnmount();\n  }\n\n  static override create<S extends new () => InstanceType<S>>(this: S): InstanceType<S> {\n    return new this();\n  }\n\n  /** @internal */\n  static Global?: Service;\n  static global<S extends new () => InstanceType<S>>(this: S): InstanceType<S> {\n    let service: InstanceType<S> | undefined;\n    if (Object.hasOwnProperty.call(this, \"Global\")) {\n      service = (this as unknown as typeof Service).Global as InstanceType<S> | undefined;\n    }\n    if (service === void 0) {\n      service = (this as unknown as Creatable<InstanceType<S>>).create();\n      Object.defineProperty(this, \"Global\", {\n        value: service,\n        configurable: true,\n      });\n      if (this.prototype instanceof Service) {\n        const serviceClass = Object.getPrototypeOf(this) as typeof Service;\n        const rootService = serviceClass.global();\n        rootService.appendChild(service as Service);\n      } else { // mount root service\n        (service as Service).mount();\n      }\n    }\n    return service;\n  }\n\n  /** @internal */\n  static override uid: () => string = (function () {\n    let nextId = 1;\n    return function uid(): string {\n      const id = ~~nextId;\n      nextId += 1;\n      return \"service\" + id;\n    };\n  })();\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\n\n/** @internal */\nexport abstract class NodeCursor<T, P> extends Cursor<T> {\n  constructor(pages: readonly P[], index: number,\n              childIndex: number, childCursor: Cursor<T> | null) {\n    super();\n    this.pages = pages;\n    this.index = index;\n    this.childIndex = childIndex;\n    this.childCursor = childCursor;\n  }\n\n  /** @internal */\n  readonly pages: readonly P[];\n\n  /** @internal */\n  index: number;\n\n  /** @internal */\n  childIndex: number;\n\n  /** @internal */\n  childCursor: Cursor<T> | null;\n\n  protected abstract pageSize(page: P): number;\n\n  protected abstract pageCursor(page: P): Cursor<T>;\n\n  protected abstract reversePageCursor(page: P): Cursor<T>;\n\n  override isEmpty(): boolean {\n    do {\n      if (this.childCursor !== null) {\n        if (!this.childCursor.isEmpty()) {\n          return false;\n        }\n        this.childCursor = null;\n      } else if (this.childIndex < this.pages.length) {\n        this.childCursor = this.pageCursor(this.pages[this.childIndex]!);\n        this.childIndex += 1;\n      } else {\n        this.childIndex = this.pages.length;\n        return true;\n      }\n    } while (true);\n  }\n\n  override head(): T {\n    do {\n      if (this.childCursor !== null) {\n        if (!this.childCursor.isEmpty()) {\n          return this.childCursor.head();\n        }\n        this.childCursor = null;\n      } else if (this.childIndex < this.pages.length) {\n        this.childCursor = this.pageCursor(this.pages[this.childIndex]!);\n        this.childIndex += 1;\n      } else {\n        this.childIndex = this.pages.length;\n        throw new Error(\"empty\");\n      }\n    } while (true);\n  }\n\n  override step(): void {\n    do {\n      if (this.childCursor !== null) {\n        if (!this.childCursor.isEmpty()) {\n          this.index += 1;\n          return;\n        }\n        this.childCursor = null;\n      } else if (this.childIndex < this.pages.length) {\n        this.childCursor = this.pageCursor(this.pages[this.childIndex]!);\n        this.childIndex += 1;\n      } else {\n        this.childIndex = this.pages.length;\n        throw new Error(\"empty\");\n      }\n    } while (true);\n  }\n\n  override skip(count: number): void {\n    while (count > 0) {\n      if (this.childCursor !== null) {\n        if (this.childCursor.hasNext()) {\n          this.index += 1;\n          count -= 1;\n          this.childCursor.next();\n        } else {\n          this.childCursor = null;\n        }\n      } else if (this.childIndex < this.pages.length) {\n        const page = this.pages[this.childIndex]!;\n        const pageSize = this.pageSize(page);\n        this.childIndex += 1;\n        if (pageSize < count) {\n          this.childCursor = this.pageCursor(page);\n          if (count > 0) {\n            this.index += count;\n            this.childCursor!.skip(count);\n            count = 0;\n          }\n          break;\n        }\n        this.index += pageSize;\n        count -= pageSize;\n      } else {\n        break;\n      }\n    }\n  }\n\n  override hasNext(): boolean {\n    do {\n      if (this.childCursor !== null) {\n        if (this.childCursor.hasNext()) {\n          return true;\n        }\n        this.childCursor = null;\n      } else if (this.childIndex < this.pages.length) {\n        this.childCursor = this.pageCursor(this.pages[this.childIndex]!);\n        this.childIndex += 1;\n      } else {\n        this.childIndex = this.pages.length;\n        return false;\n      }\n    } while (true);\n  }\n\n  override nextIndex(): number {\n    return this.index;\n  }\n\n  override next(): IteratorResult<T> {\n    do {\n      if (this.childCursor !== null) {\n        if (this.childCursor.hasNext()) {\n          this.index += 1;\n          return this.childCursor.next();\n        }\n        this.childCursor = null;\n      } else if (this.childIndex < this.pages.length) {\n        this.childCursor = this.pageCursor(this.pages[this.childIndex]!);\n        this.childIndex += 1;\n      } else {\n        this.childIndex = this.pages.length;\n        return {done: true, value: void 0};\n      }\n    } while (true);\n  }\n\n  override hasPrevious(): boolean {\n    do {\n      if (this.childCursor !== null) {\n        if (this.childCursor.hasPrevious()) {\n          return true;\n        }\n        this.childCursor = null;\n      } else if (this.childIndex > 0) {\n        this.childCursor = this.reversePageCursor(this.pages[this.childIndex - 1]!);\n        this.childIndex -= 1;\n      } else {\n        this.childIndex = 0;\n        return false;\n      }\n    } while (true);\n  }\n\n  override previousIndex(): number {\n    return this.index - 1;\n  }\n\n  override previous(): IteratorResult<T> {\n    do {\n      if (this.childCursor !== null) {\n        if (this.childCursor.hasPrevious()) {\n          this.index -= 1;\n          return this.childCursor.previous();\n        }\n        this.childCursor = null;\n      } else if (this.childIndex > 0) {\n        this.childCursor = this.reversePageCursor(this.pages[this.childIndex - 1]!);\n        this.childIndex -= 1;\n      } else {\n        this.childIndex = 0;\n        return {done: true, value: void 0};\n      }\n    } while (true);\n  }\n\n  override set(newValue: T): void {\n    this.childCursor!.set(newValue);\n  }\n\n  override delete(): void {\n    this.childCursor!.delete();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Values} from \"@swim/util\";\nimport type {BTreePage} from \"./BTreePage\";\n\n/** @public */\nexport abstract class BTreeContext<K, V> {\n  pageSplitSize: number = 32;\n\n  compare(x: K, y: K): number {\n    return Values.compare(x, y);\n  }\n\n  /** @internal */\n  pageShouldSplit(page: BTreePage<K, V, unknown>): boolean {\n    return page.arity > this.pageSplitSize;\n  }\n\n  /** @internal */\n  pageShouldMerge(page: BTreePage<K, V, unknown>): boolean {\n    return page.arity < this.pageSplitSize >>> 1;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport type {ReducedMap} from \"@swim/util\";\nimport {BTreeContext} from \"./BTreeContext\";\nimport {BTreePage} from \"./\"; // forward import\n\n/** @public */\nexport class BTree<K = unknown, V = unknown, U = never> extends BTreeContext<K, V> implements ReducedMap<K, V, U> {\n  /** @internal */\n  root: BTreePage<K, V, U>;\n\n  constructor();\n  /** @internal */\n  constructor(root: BTreePage<K, V, U>);\n  constructor(root?: BTreePage<K, V, U>) {\n    super();\n    if (root === void 0) {\n      root = BTreePage.empty();\n    }\n    this.root = root;\n  }\n\n  get size(): number {\n    return this.root.size;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  has(key: K): boolean {\n    return this.root.has(key, this);\n  }\n\n  get(key: K): V | undefined {\n    return this.root.get(key, this);\n  }\n\n  getEntry(index: number): [K, V] | undefined {\n    return this.root.getEntry(index);\n  }\n\n  firstKey(): K | undefined {\n    const entry = this.root.firstEntry();\n    return entry !== void 0 ? entry[0] : void 0;\n  }\n\n  firstValue(): V | undefined {\n    const entry = this.root.firstEntry();\n    return entry !== void 0 ? entry[1] : void 0;\n  }\n\n  firstEntry(): [K, V] | undefined {\n    return this.root.firstEntry();\n  }\n\n  lastKey(): K | undefined {\n    const entry = this.root.lastEntry();\n    return entry !== void 0 ? entry[0] : void 0;\n  }\n\n  lastValue(): V | undefined {\n    const entry = this.root.lastEntry();\n    return entry !== void 0 ? entry[1] : void 0;\n  }\n\n  lastEntry(): [K, V] | undefined {\n    return this.root.lastEntry();\n  }\n\n  nextKey(key: K): K | undefined {\n    const entry = this.root.nextEntry(key, this);\n    return entry !== void 0 ? entry[0] : void 0;\n  }\n\n  nextValue(key: K): V | undefined {\n    const entry = this.root.nextEntry(key, this);\n    return entry !== void 0 ? entry[1] : void 0;\n  }\n\n  nextEntry(key: K): [K, V] | undefined {\n    return this.root.nextEntry(key, this);\n  }\n\n  previousKey(key: K): K | undefined {\n    const entry = this.root.previousEntry(key, this);\n    return entry !== void 0 ? entry[0] : void 0;\n  }\n\n  previousValue(key: K): V | undefined {\n    const entry = this.root.previousEntry(key, this);\n    return entry !== void 0 ? entry[1] : void 0;\n  }\n\n  previousEntry(key: K): [K, V] | undefined {\n    return this.root.previousEntry(key, this);\n  }\n\n  set(key: K, newValue: V): this {\n    const oldRoot = this.root;\n    let newRoot = this.root.updated(key, newValue, this);\n    if (oldRoot === newRoot) {\n      return this;\n    } else if (newRoot.size > oldRoot.size) {\n      newRoot = newRoot.balanced(this);\n    }\n    this.root = newRoot;\n    return this;\n  }\n\n  delete(key: K): boolean {\n    const oldRoot = this.root;\n    const newRoot = this.root.removed(key, this);\n    if (oldRoot === newRoot) {\n      return false;\n    }\n    this.root = newRoot;\n    return true;\n  }\n\n  drop(lower: number): this {\n    if (lower > 0 && this.root.size !== 0) {\n      if (lower >= this.root.size) {\n        this.root = BTreePage.empty();\n      } else {\n        this.root = this.root.drop(lower, this);\n      }\n    }\n    return this;\n  }\n\n  take(upper: number): this {\n    if (upper < this.root.size && this.root.size !== 0) {\n      if (upper <= 0) {\n        this.root = BTreePage.empty();\n      } else {\n        this.root = this.root.take(upper, this);\n      }\n    }\n    return this;\n  }\n\n  clear(): void {\n    this.root = BTreePage.empty();\n  }\n\n  updated(key: K, newValue: V): BTree<K, V, U> {\n    const oldRoot = this.root;\n    let newRoot = oldRoot.updated(key, newValue, this);\n    if (oldRoot === newRoot) {\n      return this;\n    } else if (newRoot.size > oldRoot.size) {\n      newRoot = newRoot.balanced(this);\n    }\n    return this.copy(newRoot);\n  }\n\n  removed(key: K): BTree<K, V, U> {\n    const oldRoot = this.root;\n    const newRoot = oldRoot.removed(key, this);\n    if (oldRoot === newRoot) {\n      return this;\n    }\n    return this.copy(newRoot);\n  }\n\n  cleared(): BTree<K, V, U> {\n    if (this.root.isEmpty()) {\n      return this;\n    }\n    return this.copy(BTreePage.empty());\n  }\n\n  reduced(identity: U, accumulator: (result: U, element: V) => U, combiner: (result: U, result2: U) => U): U {\n    const oldRoot = this.root;\n    const newRoot = oldRoot.reduced(identity, accumulator, combiner);\n    if (oldRoot !== newRoot) {\n      this.root = newRoot;\n    }\n    return newRoot.fold!;\n  }\n\n  forEach<T>(callback: (value: V, key: K, tree: BTree<K, V, U>) => T | void): T | undefined;\n  forEach<T, S>(callback: (this: S, value: V, key: K, tree: BTree<K, V, U>) => T | void, thisArg?: S): T | undefined;\n  forEach<T, S>(callback: (this: S | undefined, value: V, key: K, tree: BTree<K, V, U>) => T | void, thisArg?: S): T | undefined {\n    return this.root.forEach(callback, thisArg, this);\n  }\n\n  forEachKey<T>(callback: (key: K, tree: BTree<K, V, U>) => T | void): T | undefined;\n  forEachKey<T, S>(callback: (this: S, key: K, tree: BTree<K, V, U>) => T | void, thisArg: S): T | undefined;\n  forEachKey<T, S>(callback: (this: S | undefined, key: K, tree: BTree<K, V, U>) => T | void, thisArg?: S): T | undefined {\n    return this.root.forEachKey(callback, thisArg, this);\n  }\n\n  forEachValue<T>(callback: (value: V, tree: BTree<K, V, U>) => T | void): T | undefined;\n  forEachValue<T, S>(callback: (this: S, value: V, tree: BTree<K, V, U>) => T | void, thisArg: S): T | undefined;\n  forEachValue<T, S>(callback: (this: S | undefined, value: V, tree: BTree<K, V, U>) => T | void, thisArg?: S): T | undefined {\n    return this.root.forEachValue(callback, thisArg, this);\n  }\n\n  [Symbol.iterator](): Cursor<[K, V]> {\n    return this.root.entries();\n  }\n\n  keys(): Cursor<K> {\n    return this.root.keys();\n  }\n\n  values(): Cursor<V> {\n    return this.root.values();\n  }\n\n  entries(): Cursor<[K, V]> {\n    return this.root.entries();\n  }\n\n  reverseKeys(): Cursor<K> {\n    return this.root.reverseKeys();\n  }\n\n  reverseValues(): Cursor<V> {\n    return this.root.reverseValues();\n  }\n\n  reverseEntries(): Cursor<[K, V]> {\n    return this.root.reverseEntries();\n  }\n\n  clone(): BTree<K, V, U> {\n    return this.copy(this.root);\n  }\n\n  /** @internal */\n  protected copy(root: BTreePage<K, V, U>): BTree<K, V, U> {\n    const tree = new BTree(root);\n    if (tree.pageSplitSize !== this.pageSplitSize) {\n      tree.pageSplitSize = this.pageSplitSize;\n    }\n    if (tree.compare !== this.compare) {\n      tree.compare = this.compare;\n    }\n    return tree;\n  }\n\n  get [Symbol.toStringTag](): string {\n    return \"BTree\";\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Cursor} from \"@swim/util\";\nimport type {BTreeContext} from \"./BTreeContext\";\nimport type {BTree} from \"./BTree\";\nimport {BTreeLeaf} from \"./\"; // forward import\n\n/** @internal */\nexport abstract class BTreePage<K, V, U> {\n  abstract readonly arity: number;\n\n  abstract readonly size: number;\n\n  abstract isEmpty(): boolean;\n\n  abstract readonly fold: U | undefined;\n\n  abstract minKey(): K;\n\n  abstract maxKey(): K;\n\n  abstract has(key: K, tree: BTreeContext<K, V>): boolean;\n\n  abstract get(key: K, tree: BTreeContext<K, V>): V | undefined;\n\n  abstract getEntry(index: number): [K, V] | undefined;\n\n  abstract firstEntry(): [K, V] | undefined;\n\n  abstract lastEntry(): [K, V] | undefined;\n\n  abstract nextEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined;\n\n  abstract previousEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined;\n\n  abstract updated(key: K, newValue: V, tree: BTreeContext<K, V>): BTreePage<K, V, U>;\n\n  abstract removed(key: K, tree: BTreeContext<K, V>): BTreePage<K, V, U>;\n\n  abstract drop(lower: number, tree: BTreeContext<K, V>): BTreePage<K, V, U>;\n\n  abstract take(upper: number, tree: BTreeContext<K, V>): BTreePage<K, V, U>;\n\n  abstract balanced(tree: BTreeContext<K, V>): BTreePage<K, V, U>;\n\n  abstract split(index: number): BTreePage<K, V, U>;\n\n  abstract splitLeft(index: number): BTreePage<K, V, U>;\n\n  abstract splitRight(index: number): BTreePage<K, V, U>;\n\n  abstract reduced(identity: U, accumulator: (result: U, element: V) => U,\n                   combiner: (result: U, result2: U) => U): BTreePage<K, V, U>;\n\n  abstract forEach<T, S>(callback: (this: S, value: V, key: K, tree: BTree<K, V, U>) => T | void,\n                         thisArg: S, tree: BTree<K, V, U>): T | undefined;\n\n  abstract forEachKey<T, S>(callback: (this: S, key: K, tree: BTree<K, V, U>) => T | void,\n                            thisArg: S, tree: BTree<K, V, U>): T | undefined;\n\n  abstract forEachValue<T, S>(callback: (this: S, value: V, tree: BTree<K, V, U>) => T | void,\n                              thisArg: S, tree: BTree<K, V, U>): T | undefined;\n\n  keys(): Cursor<K> {\n    return Cursor.keys(this.entries());\n  }\n\n  values(): Cursor<V> {\n    return Cursor.values(this.entries());\n  }\n\n  abstract entries(): Cursor<[K, V]>;\n\n  reverseKeys(): Cursor<K> {\n    return Cursor.keys(this.reverseEntries());\n  }\n\n  reverseValues(): Cursor<V> {\n    return Cursor.values(this.reverseEntries());\n  }\n\n  abstract reverseEntries(): Cursor<[K, V]>;\n\n  @Lazy\n  static empty<K, V, U>(): BTreeLeaf<K, V, U> {\n    return new BTreeLeaf<K, V, U>([], void 0);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport type {BTreeContext} from \"./BTreeContext\";\nimport type {BTree} from \"./BTree\";\nimport {BTreePage} from \"./BTreePage\";\nimport {BTreeNode} from \"./\"; // forward import\n\n/** @internal */\nexport class BTreeLeaf<K, V, U> extends BTreePage<K, V, U> {\n  constructor(slots: readonly [K, V][], fold: U | undefined) {\n    super();\n    this.slots = slots;\n    this.fold = fold;\n  }\n\n  /** @internal */\n  readonly slots: readonly [K, V][];\n\n  override get arity(): number {\n    return this.slots.length;\n  }\n\n  override get size(): number {\n    return this.slots.length;\n  }\n\n  override isEmpty(): boolean {\n    return this.slots.length === 0;\n  }\n\n  override readonly fold: U | undefined;\n\n  override minKey(): K {\n    return this.slots[0]![0];\n  }\n\n  override maxKey(): K {\n    return this.slots[this.slots.length - 1]![0];\n  }\n\n  override has(key: K, tree: BTreeContext<K, V>): boolean {\n    return this.lookup(key, tree) >= 0;\n  }\n\n  override get(key: K, tree: BTreeContext<K, V>): V | undefined {\n    const x = this.lookup(key, tree);\n    if (x < 0) {\n      return void 0;\n    }\n    return this.slots[x]![1];\n  }\n\n  override getEntry(index: number): [K, V] | undefined {\n    return this.slots[index];\n  }\n\n  override firstEntry(): [K, V] | undefined {\n    const slots = this.slots;\n    if (slots.length === 0) {\n      return void 0;\n    }\n    return slots[0];\n  }\n\n  override lastEntry(): [K, V] | undefined {\n    const slots = this.slots;\n    if (slots.length === 0) {\n      return void 0;\n    }\n    return slots[slots.length - 1];\n  }\n\n  override nextEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    return this.slots[x];\n  }\n\n  override previousEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x -= 1;\n    } else {\n      x = -(x + 2);\n    }\n    return this.slots[x];\n  }\n\n  override updated(key: K, newValue: V, tree: BTreeContext<K, V>): BTreeLeaf<K, V, U> {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      return this.updatedSlot(x, key, newValue);\n    }\n    x = -(x + 1);\n    return this.insertedSlot(x, key, newValue);\n  }\n\n  /** @internal */\n  updatedSlot(x: number, key: K, newValue: V): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    if (newValue === oldSlots[x]![1]) {\n      return this;\n    }\n    const newSlots = oldSlots.slice(0);\n    newSlots[x] = [key, newValue];\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  /** @internal */\n  insertedSlot(x: number, key: K, newValue: V): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    const n = oldSlots.length + 1;\n    const newSlots = new Array<[K, V]>(n);\n    for (let i = 0; i < x; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    newSlots[x] = [key, newValue];\n    for (let i = x; i < n - 1; i += 1) {\n      newSlots[i + 1] = oldSlots[i]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override removed(key: K, tree: BTreeContext<K, V>): BTreeLeaf<K, V, U> {\n    const x = this.lookup(key, tree);\n    if (x < 0) {\n      return this;\n    } else if (this.slots.length <= 1) {\n      return BTreePage.empty();\n    }\n    return this.removedSlot(x);\n  }\n\n  /** @internal */\n  removedSlot(x: number): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    const newSlots = new Array<[K, V]>(oldSlots.length - 1);\n    for (let i = 0; i < x; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    for (let i = x; i < newSlots.length; i += 1) {\n      newSlots[i] = oldSlots[i + 1]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override drop(lower: number, tree: BTreeContext<K, V>): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    if (lower <= 0) {\n      return this;\n    } else if (lower >= oldSlots.length) {\n      return BTreePage.empty();\n    }\n    const size = oldSlots.length - lower;\n    const newSlots = new Array<[K, V]>(size);\n    for (let i = 0; i < size; i += 1) {\n      newSlots[i] = oldSlots[i + lower]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override take(upper: number, tree: BTreeContext<K, V>): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    if (upper >= oldSlots.length) {\n      return this;\n    } else if (upper <= 0) {\n      return BTreePage.empty();\n    }\n    const newSlots = new Array<[K, V]>(upper);\n    for (let i = 0; i < upper; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override balanced(tree: BTreeContext<K, V>): BTreePage<K, V, U> {\n    const n = this.slots.length;\n    if (n <= 1 || !tree.pageShouldSplit(this)) {\n      return this;\n    }\n    return this.split(n >>> 1);\n  }\n\n  override split(x: number): BTreeNode<K, V, U> {\n    const newPages = new Array<BTreePage<K, V, U>>(2);\n    const newLeftPage = this.splitLeft(x);\n    const newRightPage = this.splitRight(x);\n    newPages[0] = newLeftPage;\n    newPages[1] = newRightPage;\n\n    const newKnots = new Array<K>(1);\n    newKnots[0] = newRightPage.minKey();\n\n    return new BTreeNode(newPages, newKnots, void 0, this.slots.length);\n  }\n\n  override splitLeft(x: number): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    const newSlots = new Array<[K, V]>(x);\n    for (let i = 0; i < x; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override splitRight(x: number): BTreeLeaf<K, V, U> {\n    const oldSlots = this.slots;\n    const y = oldSlots.length - x;\n    const newSlots = new Array<[K, V]>(y);\n    for (let i = 0; i < y; i += 1) {\n      newSlots[i] = oldSlots[i + x]!;\n    }\n    return new BTreeLeaf<K, V, U>(newSlots, void 0);\n  }\n\n  override reduced(identity: U, accumulator: (result: U, element: V) => U,\n                   combiner: (result: U, result2: U) => U): BTreeLeaf<K, V, U> {\n    if (this.fold !== void 0) {\n      return this;\n    }\n    const slots = this.slots;\n    let fold = identity;\n    for (let i = 0; i < slots.length; i += 1) {\n      fold = accumulator(fold, slots[i]![1]);\n    }\n    return new BTreeLeaf<K, V, U>(slots, fold);\n  }\n\n  override forEach<T, S>(callback: (this: S, value: V, key: K, tree: BTree<K, V, U>) => T | void,\n                         thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const slots = this.slots;\n    for (let i = 0; i < slots.length; i += 1) {\n      const slot = slots[i]!;\n      const result = callback.call(thisArg, slot[1], slot[0], tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override forEachKey<T, S>(callback: (this: S, key: K, tree: BTree<K, V, U>) => T | void,\n                            thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const slots = this.slots;\n    for (let i = 0; i < slots.length; i += 1) {\n      const slot = slots[i]!;\n      const result = callback.call(thisArg, slot[0], tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override forEachValue<T, S>(callback: (this: S, value: V, tree: BTree<K, V, U>) => T | void,\n                              thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const slots = this.slots;\n    for (let i = 0; i < slots.length; i += 1) {\n      const slot = slots[i]!;\n      const result = callback.call(thisArg, slot[1], tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override entries(): Cursor<[K, V]> {\n    return Cursor.array(this.slots);\n  }\n\n  override reverseEntries(): Cursor<[K, V]> {\n    return Cursor.array(this.slots, this.slots.length);\n  }\n\n  /** @internal */\n  lookup(key: K, tree: BTreeContext<K, V>): number {\n    let lo = 0;\n    let hi = this.slots.length - 1;\n    while (lo <= hi) {\n      const mid = (lo + hi) >>> 1;\n      const order = tree.compare(key, this.slots[mid]![0]);\n      if (order > 0) {\n        lo = mid + 1;\n      } else if (order < 0) {\n        hi = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -(lo + 1);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport {NodeCursor} from \"./NodeCursor\";\nimport type {BTreeContext} from \"./BTreeContext\";\nimport type {BTree} from \"./BTree\";\nimport {BTreePage} from \"./BTreePage\";\n\n/** @internal */\nexport class BTreeNode<K, V, U> extends BTreePage<K, V, U> {\n  constructor(pages: readonly BTreePage<K, V, U>[], knots: readonly K[],\n              fold: U | undefined, size: number) {\n    super();\n    this.pages = pages;\n    this.knots = knots;\n    this.fold = fold;\n    this.size = size;\n  }\n\n  /** @internal */\n  readonly pages: readonly BTreePage<K, V, U>[];\n\n  /** @internal */\n  readonly knots: readonly K[];\n\n  override get arity(): number {\n    return this.pages.length;\n  }\n\n  override readonly size: number;\n\n  override isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  override readonly fold: U | undefined;\n\n  override minKey(): K {\n    return this.pages[0]!.minKey();\n  }\n\n  override maxKey(): K {\n    return this.pages[this.pages.length - 1]!.maxKey();\n  }\n\n  override has(key: K, tree: BTreeContext<K, V>): boolean {\n    let x = this.lookup(key, tree);\n    if (x === 0) {\n      return true;\n    } else if (x > 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    return this.pages[x]!.has(key, tree);\n  }\n\n  override get(key: K, tree: BTreeContext<K, V>): V | undefined {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    return this.pages[x]!.get(key, tree);\n  }\n\n  override getEntry(x: number): [K, V] | undefined {\n    const pages = this.pages;\n    for (let i = 0; i < pages.length; i += 1) {\n      const page = pages[i]!;\n      if (x < page.size) {\n        return page.getEntry(x);\n      }\n      x -= page.size;\n    }\n    return void 0;\n  }\n\n  override firstEntry(): [K, V] | undefined {\n    const pages = this.pages;\n    if (pages.length === 0) {\n      return void 0;\n    }\n    return pages[0]!.firstEntry();\n  }\n\n  override lastEntry(): [K, V] | undefined {\n    const pages = this.pages;\n    if (pages.length === 0) {\n      return void 0;\n    }\n    return pages[pages.length - 1]!.lastEntry();\n  }\n\n  override nextEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const pages = this.pages;\n    let entry = pages[x]!.nextEntry(key, tree);\n    if (entry === void 0 && x + 1 < pages.length) {\n      entry = pages[x + 1]!.nextEntry(key, tree);\n    }\n    return entry;\n  }\n\n  override previousEntry(key: K, tree: BTreeContext<K, V>): [K, V] | undefined {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const pages = this.pages;\n    let entry = pages[x]!.previousEntry(key, tree);\n    if (entry === void 0 && x > 0) {\n      entry = pages[x - 1]!.previousEntry(key, tree);\n    }\n    return entry;\n  }\n\n  override updated(key: K, newValue: V, tree: BTreeContext<K, V>): BTreeNode<K, V, U> {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const oldPage = this.pages[x]!;\n    const newPage = oldPage.updated(key, newValue, tree);\n    if (oldPage === newPage) {\n      return this;\n    } else if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {\n      return this.updatedPageSplit(x, newPage, oldPage);\n    }\n    return this.updatedPage(x, newPage, oldPage);\n  }\n\n  /** @internal */\n  updatedPage(x: number, newPage: BTreePage<K, V, U>, oldPage: BTreePage<K, V, U>): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const newPages = oldPages.slice(0);\n    newPages[x] = newPage;\n\n    const oldKnots = this.knots;\n    let newKnots: K[];\n    if (oldKnots.length === 0) {\n      newKnots = [];\n    } else {\n      newKnots = oldKnots.slice(0);\n      if (x > 0) {\n        newKnots[x - 1] = newPage.minKey();\n      }\n    }\n\n    const newSize = this.size - oldPage.size + newPage.size;\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  /** @internal */\n  updatedPageSplit(x: number, newPage: BTreePage<K, V, U>, oldPage: BTreePage<K, V, U>): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const newPages = new Array<BTreePage<K, V, U>>(oldPages.length + 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n\n    const newLeftPage = newPage.splitLeft(newPage.arity >>> 1);\n    const newRightPage = newPage.splitRight(newPage.arity >>> 1);\n    newPages[x] = newLeftPage;\n    newPages[x + 1] = newRightPage;\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i + 1] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<K>(oldPages.length);\n    if (x <= 0) {\n      newKnots[0] = newRightPage.minKey();\n      for (let i = 0; i < oldKnots.length; i += 1) {\n        newKnots[i + 1] = oldKnots[i]!;\n      }\n    } else {\n      for (let i = 0; i < x - 1; i += 1) {\n        newKnots[i] = oldKnots[i]!;\n      }\n      newKnots[x - 1] = newLeftPage.minKey();\n      newKnots[x] = newRightPage.minKey();\n      for (let i = x; i < oldKnots.length; i += 1) {\n        newKnots[i + 1] = oldKnots[i]!;\n      }\n    }\n\n    const newSize = this.size - oldPage.size + newPage.size;\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  /** @internal */\n  updatedPageMerge(x: number, newPage: BTreeNode<K, V, U>, oldPage: BTreePage<K, V, U>): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const midPages = newPage.pages;\n    const newPages = new Array<BTreePage<K, V, U>>(oldPages.length + midPages.length - 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n    for (let i = 0; i < midPages.length; i += 1) {\n      newPages[i + x] = midPages[i]!;\n    }\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i + midPages.length - 1] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const midKnots = newPage.knots;\n    const newKnots = new Array<K>(newPages.length - 1);\n    if (x <= 0) {\n      for (let i = 0; i < midKnots.length; i += 1) {\n        newKnots[i] = midKnots[i]!;\n      }\n      newKnots[midKnots.length] = oldPages[1]!.minKey();\n      for (let i = 1; i < oldKnots.length; i += 1) {\n        newKnots[i + midKnots.length] = oldKnots[i]!;\n      }\n    } else {\n      for (let i = 0; i < x - 1; i += 1) {\n        newKnots[i] = oldKnots[i]!;\n      }\n      newKnots[x - 1] = midPages[0]!.minKey();\n      for (let i = 0; i < midKnots.length; i += 1) {\n        newKnots[i + x] = midKnots[i]!;\n      }\n      for (let i = x; i < oldKnots.length; i += 1) {\n        newKnots[i + midKnots.length] = oldKnots[i]!;\n      }\n    }\n\n    const newSize = this.size - oldPage.size + newPage.size;\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  override removed(key: K, tree: BTreeContext<K, V>): BTreePage<K, V, U> {\n    let x = this.lookup(key, tree);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const oldPage = this.pages[x]!;\n    const newPage = oldPage.removed(key, tree);\n    if (oldPage === newPage) {\n      return this;\n    }\n    return this.replacedPage(x, newPage, oldPage, tree);\n  }\n\n  /** @internal */\n  replacedPage(x: number, newPage: BTreePage<K, V, U>, oldPage: BTreePage<K, V, U>,\n               tree: BTreeContext<K, V>): BTreePage<K, V, U> {\n    if (!newPage.isEmpty()) {\n      if (newPage instanceof BTreeNode && tree.pageShouldMerge(newPage)) {\n        return this.updatedPageMerge(x, newPage, oldPage);\n      } else {\n        return this.updatedPage(x, newPage, oldPage);\n      }\n    } else if (this.pages.length > 2) {\n      return this.removedPage(x, newPage, oldPage);\n    } else if (this.pages.length > 1) {\n      if (x === 0) {\n        return this.pages[1]!;\n      } else {\n        return this.pages[0]!;\n      }\n    }\n    return BTreePage.empty();\n  }\n\n  /** @internal */\n  removedPage(x: number, newPage: BTreePage<K, V, U>, oldPage: BTreePage<K, V, U>): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const newPages = new Array<BTreePage<K, V, U>>(oldPages.length - 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i - 1] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<K>(oldKnots.length - 1);\n    if (x <= 0) {\n      for (let i = 1; i < oldKnots.length; i += 1) {\n        newKnots[i - 1] = oldKnots[i]!;\n      }\n    } else {\n      for (let i = 0; i < x - 1; i += 1) {\n        newKnots[i] = oldKnots[i]!;\n      }\n      for (let i = x; i < oldKnots.length; i += 1) {\n        newKnots[i - 1] = oldKnots[i]!;\n      }\n    }\n\n    const newSize = this.size - oldPage.size;\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  override drop(lower: number, tree: BTreeContext<K, V>): BTreePage<K, V, U> {\n    if (lower <= 0) {\n      return this;\n    }\n    let newSize = this.size;\n    if (lower >= newSize) {\n      return BTreePage.empty();\n    }\n    const oldPages = this.pages;\n    let x = 0;\n    while (x < oldPages.length) {\n      const size = oldPages[x]!.size;\n      if (size > lower) {\n        break;\n      }\n      newSize -= size;\n      lower -= size;\n      x += 1;\n    }\n    const newArity = oldPages.length - x;\n    if (newArity <= 1) {\n      return oldPages[x]!.drop(lower, tree);\n    }\n    let newNode: BTreeNode<K, V, U>;\n    if (x <= 0) {\n      newNode = this;\n    } else {\n      const newPages = new Array<BTreePage<K, V, U>>(newArity);\n      for (let i = 0; i < newArity; i += 1) {\n        newPages[i] = oldPages[i + x]!;\n      }\n      const newKnots = new Array<K>(newArity - 1);\n      for (let i = 0; i < newKnots.length; i += 1) {\n        newKnots[i] = this.knots[i + x]!;\n      }\n      newNode = new BTreeNode(newPages, newKnots, void 0, newSize);\n    }\n    if (lower <= 0) {\n      return newNode;\n    }\n    const oldPage = oldPages[x]!;\n    const newPage = oldPage.drop(lower, tree);\n    return newNode.replacedPage(0, newPage, oldPage, tree);\n  }\n\n  override take(upper: number, tree: BTreeContext<K, V>): BTreePage<K, V, U> {\n    if (upper >= this.size) {\n      return this;\n    } else if (upper <= 0) {\n      return BTreePage.empty();\n    }\n    const oldPages = this.pages;\n    let x = 0;\n    let newSize = 0;\n    while (x < oldPages.length && upper > 0) {\n      const size = oldPages[x]!.size;\n      newSize += size;\n      x += 1;\n      if (size > upper) {\n        break;\n      }\n      upper -= size;\n    }\n    const newArity = upper === 0 ? x : x + 1;\n    if (newArity <= 1) {\n       if (upper > 0) {\n        return oldPages[0]!.take(upper, tree);\n      }\n      return oldPages[0]!;\n    }\n    let newNode: BTreeNode<K, V, U>;\n    if (x >= oldPages.length) {\n      newNode = this;\n    } else {\n      const newPages = new Array<BTreePage<K, V, U>>(newArity);\n      for (let i = 0; i < newArity; i += 1) {\n        newPages[i] = oldPages[i]!;\n      }\n      const newKnots = new Array<K>(newArity - 1);\n      for (let i = 0; i < newKnots.length; i += 1) {\n        newKnots[i] = this.knots[i]!;\n      }\n      newNode = new BTreeNode(newPages, newKnots, void 0, newSize);\n    }\n    if (upper <= 0) {\n      return newNode;\n    }\n    const oldPage = oldPages[x - 1]!;\n    const newPage = oldPage.take(upper, tree);\n    return newNode.replacedPage(x - 1, newPage, oldPage, tree);\n  }\n\n  override balanced(tree: BTreeContext<K, V>): BTreeNode<K, V, U> {\n    if (this.pages.length <= 1 || !tree.pageShouldSplit(this)) {\n      return this;\n    }\n    return this.split(this.knots.length >>> 1);\n  }\n\n  override split(x: number): BTreeNode<K, V, U> {\n    const newPages = new Array<BTreePage<K, V, U>>(2);\n    const newLeftPage = this.splitLeft(x);\n    const newRightPage = this.splitRight(x);\n    newPages[0] = newLeftPage;\n    newPages[1] = newRightPage;\n\n    const newKnots = new Array<K>(1);\n    newKnots[0] = newRightPage.minKey();\n\n    return new BTreeNode(newPages, newKnots, void 0, this.size);\n  }\n\n  override splitLeft(x: number): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const newPages = new Array<BTreePage<K, V, U>>(x + 1);\n    for (let i = 0; i < x + 1; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<K>(x);\n    for (let i = 0; i < x; i += 1) {\n      newKnots[i] = oldKnots[i]!;\n    }\n\n    let newSize = 0;\n    for (let i = 0; i <= x; i += 1) {\n      newSize += newPages[i]!.size;\n    }\n\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  override splitRight(x: number): BTreeNode<K, V, U> {\n    const oldPages = this.pages;\n    const newArity = oldPages.length - (x + 1);\n    const newPages = new Array<BTreePage<K, V, U>>(newArity);\n    for (let i = 0; i < newArity; i += 1) {\n      newPages[i] = oldPages[i + (x + 1)]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<K>(newArity - 1);\n    for (let i = 0; i < newKnots.length; i += 1) {\n      newKnots[i] = oldKnots[i + (x + 1)]!;\n    }\n\n    let newSize = 0;\n    for (let i = 0; i < newArity; i += 1) {\n      newSize += newPages[i]!.size;\n    }\n\n    return new BTreeNode(newPages, newKnots, void 0, newSize);\n  }\n\n  override reduced(identity: U, accumulator: (result: U, element: V) => U,\n                   combiner: (result: U, result2: U) => U): BTreeNode<K, V, U> {\n    if (this.fold !== void 0) {\n      return this;\n    }\n    const oldPages = this.pages;\n    const n = oldPages.length;\n    const newPages = new Array<BTreePage<K, V, U>>(n);\n    for (let i = 0; i < n; i += 1) {\n      newPages[i] = oldPages[i]!.reduced(identity, accumulator, combiner);\n    }\n    // assert n > 0;\n    let fold: U = newPages[0]!.fold!;\n    for (let i = 1; i < n; i += 1) {\n      fold = combiner(fold, newPages[i]!.fold!);\n    }\n    return new BTreeNode(newPages, this.knots, fold, this.size);\n  }\n\n  override forEach<T, S>(callback: (this: S, value: V, key: K, tree: BTree<K, V, U>) => T | void,\n                         thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const pages = this.pages;\n    for (let i = 0; i < pages.length; i += 1) {\n      const result = pages[i]!.forEach(callback, thisArg, tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override forEachKey<T, S>(callback: (this: S, key: K, tree: BTree<K, V, U>) => T | void,\n                            thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const pages = this.pages;\n    for (let i = 0; i < pages.length; i += 1) {\n      const result = pages[i]!.forEachKey(callback, thisArg, tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override forEachValue<T, S>(callback: (this: S, value: V, tree: BTree<K, V, U>) => T | void,\n                              thisArg: S, tree: BTree<K, V, U>): T | undefined {\n    const pages = this.pages;\n    for (let i = 0; i < pages.length; i += 1) {\n      const result = pages[i]!.forEachValue(callback, thisArg, tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override entries(): Cursor<[K, V]> {\n    return new BTreeNodeCursor(this.pages);\n  }\n\n  override reverseEntries(): Cursor<[K, V]> {\n    return new BTreeNodeCursor(this.pages, this.size, this.pages.length);\n  }\n\n  /** @internal */\n  lookup(key: K, tree: BTreeContext<K, V>): number {\n    let lo = 0;\n    let hi = this.knots.length - 1;\n    while (lo <= hi) {\n      const mid = (lo + hi) >>> 1;\n      const order = tree.compare(key, this.knots[mid]!);\n      if (order > 0) {\n        lo = mid + 1;\n      } else if (order < 0) {\n        hi = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -(lo + 1);\n  }\n}\n\n/** @internal */\nexport class BTreeNodeCursor<K, V, U> extends NodeCursor<[K, V], BTreePage<K, V, U>> {\n  constructor(pages: readonly BTreePage<K, V, U>[], index: number = 0,\n              childIndex: number = 0, childCursor: Cursor<[K, V]> | null = null) {\n    super(pages, index, childIndex, childCursor);\n  }\n\n  protected override pageSize(page: BTreePage<K, V, U>): number {\n    return page.size;\n  }\n\n  protected override pageCursor(page: BTreePage<K, V, U>): Cursor<[K, V]> {\n    return page.entries();\n  }\n\n  protected override reversePageCursor(page: BTreePage<K, V, U>): Cursor<[K, V]> {\n    return page.reverseEntries();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Random} from \"@swim/util\";\nimport {Values} from \"@swim/util\";\nimport type {STreePage} from \"./STreePage\";\n\n/** @public */\nexport abstract class STreeContext<V, I> {\n  pageSplitSize: number = 32;\n\n  identify(value: V): I {\n    const id = new Uint8Array(6);\n    Random.fillBytes(id);\n    return id as unknown as I;\n  }\n\n  compare(x: I, y: I): number {\n    return Values.compare(x, y);\n  }\n\n  /** @internal */\n  pageShouldSplit(page: STreePage<V, I>): boolean {\n    return page.arity > this.pageSplitSize;\n  }\n\n  /** @internal */\n  pageShouldMerge(page: STreePage<V, I>): boolean {\n    return page.arity < this.pageSplitSize >>> 1;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport {STreeContext} from \"./STreeContext\";\nimport {STreePage} from \"./\"; // forward import\n\n/** @public */\nexport class STree<V = unknown, I = unknown> extends STreeContext<V, I> {\n  /** @internal */\n  root: STreePage<V, I>;\n\n  constructor();\n  /** @internal */\n  constructor(root: STreePage<V, I>);\n  constructor(root?: STreePage<V, I>) {\n    super();\n    if (root === void 0) {\n      root = STreePage.empty();\n    }\n    this.root = root;\n  }\n\n  get length(): number {\n    return this.root.size;\n  }\n\n  isEmpty(): boolean {\n    return this.root.isEmpty();\n  }\n\n  get(index: number, id?: I): V | undefined {\n    if (id !== void 0) {\n      index = this.lookup(id, index);\n      if (index < 0) {\n        return void 0;\n      }\n    }\n    return this.root.get(index);\n  }\n\n  getEntry(index: number, id?: I): [I, V] | undefined {\n    if (id !== void 0) {\n      index = this.lookup(id, index);\n      if (index < 0) {\n        return void 0;\n      }\n    }\n    return this.root.getEntry(index);\n  }\n\n  set(index: number, newValue: V, id?: I): this {\n    if (id !== void 0) {\n      index = this.lookup(id, index);\n      if (index < 0) {\n        throw new RangeError(\"\" + id);\n      }\n    }\n    const oldRoot = this.root;\n    if (index < 0 || index >= oldRoot.size) {\n      throw new RangeError(\"\" + index);\n    }\n    this.root = oldRoot.updated(index, newValue, this);\n    return this;\n  }\n\n  insert(index: number, newValue: V, id?: I): this {\n    const oldRoot = this.root;\n    if (index < 0 || index > oldRoot.size) {\n      throw new RangeError(\"\" + index);\n    }\n    this.root = oldRoot.inserted(index, newValue, id, this).balanced(this);\n    return this;\n  }\n\n  remove(index: number, id?: I): this {\n    if (id !== void 0) {\n      index = this.lookup(id, index);\n      if (index < 0) {\n        throw new RangeError(\"\" + id);\n      }\n    }\n    const oldRoot = this.root;\n    if (index < 0 || index > oldRoot.size) {\n      throw new RangeError(\"\" + index);\n    }\n    this.root = oldRoot.removed(index, this);\n    return this;\n  }\n\n  push(...newValues: V[]): number {\n    let newRoot = this.root;\n    for (let i = 0; i < newValues.length; i += 1) {\n      newRoot = newRoot.inserted(newRoot.size, newValues[i]!, void 0, this).balanced(this);\n    }\n    this.root = newRoot;\n    return newRoot.size;\n  }\n\n  pop(): V | undefined {\n    const oldRoot = this.root;\n    const index = oldRoot.size - 1;\n    if (index < 0) {\n      return void 0;\n    }\n    const oldValue = oldRoot.get(index);\n    this.root = oldRoot.removed(index, this);\n    return oldValue;\n  }\n\n  unshift(...newValues: V[]): number {\n    let newRoot = this.root;\n    for (let i = newValues.length - 1; i >= 0; i -= 1) {\n      newRoot = newRoot.inserted(0, newValues[i]!, void 0, this).balanced(this);\n    }\n    this.root = newRoot;\n    return newRoot.size;\n  }\n\n  shift(): V | undefined {\n    const oldRoot = this.root;\n    if (oldRoot.size === 0) {\n      return void 0;\n    }\n    const oldValue = oldRoot.get(0);\n    this.root = oldRoot.removed(0, this);\n    return oldValue;\n  }\n\n  move(fromIndex: number, toIndex: number, id?: I): this {\n    if (id !== void 0) {\n      fromIndex = this.lookup(id, fromIndex);\n      if (fromIndex < 0) {\n        throw new RangeError(\"\" + id);\n      }\n    }\n    const oldRoot = this.root;\n    if (fromIndex < 0 || fromIndex >= oldRoot.size) {\n      throw new RangeError(\"\" + fromIndex);\n    }\n    if (toIndex < 0 || toIndex >= oldRoot.size) {\n      throw new RangeError(\"\" + toIndex);\n    }\n    if (fromIndex !== toIndex) {\n      const entry = oldRoot.getEntry(fromIndex)!;\n      this.root = oldRoot.removed(fromIndex, this)\n                         .inserted(toIndex, entry[1], entry[0], this)\n                         .balanced(this);\n    }\n    return this;\n  }\n\n  splice(start: number, deleteCount?: number, ...newValues: V[]): V[] {\n    let newRoot = this.root;\n    if (start < 0) {\n      start = newRoot.size + start;\n    }\n    start = Math.min(Math.max(0, start), newRoot.size);\n    if (deleteCount === void 0) {\n      deleteCount = newRoot.size - start;\n    }\n    const deleted = [] as V[];\n    for (let i = start, n = start + deleteCount; i < n; i += 1) {\n      deleted.push(newRoot.get(start)!);\n      newRoot = newRoot.removed(start, this);\n    }\n    for (let i = 0; i < newValues.length; i += 1) {\n      newRoot = newRoot.inserted(start + i, newValues[i]!, void 0, this).balanced(this);\n    }\n    this.root = newRoot;\n    return deleted;\n  }\n\n  drop(lower: number): this {\n    const oldRoot = this.root;\n    if (lower > 0 && oldRoot.size > 0) {\n      if (lower >= oldRoot.size) {\n        this.root = STreePage.empty();\n      } else {\n        this.root = oldRoot.drop(lower, this);\n      }\n    }\n    return this;\n  }\n\n  take(upper: number): this {\n    const oldRoot = this.root;\n    if (upper < oldRoot.size && oldRoot.size > 0) {\n      if (upper <= 0) {\n        this.root = STreePage.empty();\n      } else {\n        this.root = oldRoot.take(upper, this);\n      }\n    }\n    return this;\n  }\n\n  clear(): void {\n    this.root = STreePage.empty();\n  }\n\n  forEach<T>(callback: (value: V, index: number, id: I, tree: STree<V, I>) => T | void): T | undefined;\n  forEach<T, S>(callback: (this: S, value: V, index: number, id: I, tree: STree<V, I>) => T | void, thisArg: S): T | undefined;\n  forEach<T, S>(callback: (this: S | undefined, value: V, index: number, id: I, tree: STree<V, I>) => T | void, thisArg?: S): T | undefined {\n    return this.root.forEach(callback, thisArg, 0, this);\n  }\n\n  [Symbol.iterator](): Cursor<V> {\n    return this.root.values();\n  }\n\n  keys(): Cursor<I> {\n    return this.root.keys();\n  }\n\n  values(): Cursor<V> {\n    return this.root.values();\n  }\n\n  entries(): Cursor<[I, V]> {\n    return this.root.entries();\n  }\n\n  reverseKeys(): Cursor<I> {\n    return this.root.reverseKeys();\n  }\n\n  reverseValues(): Cursor<V> {\n    return this.root.reverseValues();\n  }\n\n  reverseEntries(): Cursor<[I, V]> {\n    return this.root.reverseEntries();\n  }\n\n  clone(): STree<V, I> {\n    return this.copy(this.root);\n  }\n\n  /** @internal */\n  protected copy(root: STreePage<V, I>): STree<V, I> {\n    const tree = new STree(root);\n    if (tree.pageSplitSize !== this.pageSplitSize) {\n      tree.pageSplitSize = this.pageSplitSize;\n    }\n    if (tree.identify !== this.identify) {\n      tree.identify = this.identify;\n    }\n    if (tree.compare !== this.compare) {\n      tree.compare = this.compare;\n    }\n    return tree;\n  }\n\n  lookup(id: I, start: number = 0): number {\n    const root = this.root;\n    start = Math.min(Math.max(0, start), root.size - 1);\n    let index = start;\n    do {\n      const entry = root.getEntry(index);\n      if (entry !== void 0 && this.compare(entry[0], id) === 0) {\n        return index;\n      }\n      index = (index + 1) % root.size;\n    } while (isFinite(index) && index !== start);\n    return -1;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Cursor} from \"@swim/util\";\nimport type {STreeContext} from \"./STreeContext\";\nimport type {STree} from \"./STree\";\nimport {STreeLeaf} from \"./\"; // forward import\n\n/** @internal */\nexport abstract class STreePage<V = unknown, I = unknown> {\n  abstract readonly arity: number;\n\n  abstract readonly size: number;\n\n  abstract isEmpty(): boolean;\n\n  abstract get(index: number): V | undefined;\n\n  abstract getEntry(index: number): [I, V] | undefined;\n\n  abstract updated(index: number, newValue: V, tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract inserted(index: number, newValue: V, id: I | undefined, tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract removed(index: number, tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract drop(lower: number, tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract take(upper: number, tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract balanced(tree: STreeContext<V, I>): STreePage<V, I>;\n\n  abstract split(index: number): STreePage<V, I>;\n\n  abstract splitLeft(index: number): STreePage<V, I>;\n\n  abstract splitRight(index: number): STreePage<V, I>;\n\n  abstract forEach<T, S>(callback: (this: S, value: V, index: number, id: I, tree: STree<V, I>) => T | void,\n                         thisArg: S, offset: number, tree: STree<V, I>): T | undefined;\n\n  keys(): Cursor<I> {\n    return Cursor.keys(this.entries());\n  }\n\n  values(): Cursor<V> {\n    return Cursor.values(this.entries());\n  }\n\n  abstract entries(): Cursor<[I, V]>;\n\n  reverseKeys(): Cursor<I> {\n    return Cursor.keys(this.reverseEntries());\n  }\n\n  reverseValues(): Cursor<V> {\n    return Cursor.values(this.reverseEntries());\n  }\n\n  abstract reverseEntries(): Cursor<[I, V]>;\n\n  @Lazy\n  static empty<V, I>(): STreeLeaf<V, I> {\n    return new STreeLeaf<V, I>([]);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport type {STreeContext} from \"./STreeContext\";\nimport type {STree} from \"./STree\";\nimport {STreePage} from \"./STreePage\";\nimport {STreeNode} from \"./\"; // forward import\n\n/** @internal */\nexport class STreeLeaf<V, I> extends STreePage<V, I> {\n  constructor(slots: readonly [I, V][]) {\n    super();\n    this.slots = slots;\n  }\n\n  /** @internal */\n  readonly slots: readonly [I, V][];\n\n  override get arity(): number {\n    return this.slots.length;\n  }\n\n  override get size(): number {\n    return this.slots.length;\n  }\n\n  override isEmpty(): boolean {\n    return this.slots.length === 0;\n  }\n\n  override get(index: number): V | undefined {\n    const slot = this.slots[index];\n    if (slot === void 0) {\n      return void 0;\n    }\n    return slot[1];\n  }\n\n  override getEntry(index: number): [I, V] | undefined {\n    return this.slots[index];\n  }\n\n  override updated(index: number, newValue: V, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    if (index < 0 || index >= this.slots.length) {\n      throw new RangeError(\"\" + index);\n    }\n    return this.updatedItem(index, newValue);\n  }\n\n  /** @internal */\n  updatedItem(index: number, newValue: V): STreeLeaf<V, I> {\n    const oldItems = this.slots;\n    const oldSlot = oldItems[index];\n    if (oldSlot === void 0 || newValue === oldSlot[1]) {\n      return this;\n    }\n    const newValues = oldItems.slice(0);\n    newValues[index] = [oldSlot[0], newValue];\n    return new STreeLeaf<V, I>(newValues);\n  }\n\n  override inserted(index: number, newValue: V, id: I | undefined, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    if (index < 0 || index > this.slots.length) {\n      throw new RangeError(\"\" + index);\n    }\n    return this.insertedItem(index, newValue, id, tree);\n  }\n\n  /** @internal */\n  insertedItem(index: number, newValue: V, id: I | undefined, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    if (id === void 0) {\n      id = tree.identify(newValue);\n    }\n    const oldSlots = this.slots;\n    const newSlots = new Array<[I, V]>(oldSlots.length + 1);\n    for (let i = 0; i < index; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    newSlots[index] = [id, newValue];\n    for (let i = index; i < oldSlots.length; i += 1) {\n      newSlots[i + 1] = oldSlots[i]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override removed(index: number, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    if (index < 0 || index >= this.slots.length) {\n      throw new RangeError(\"\" + index);\n    }\n    if (this.slots.length <= 1) {\n      return STreePage.empty();\n    }\n    return this.removedSlot(index);\n  }\n\n  /** @internal */\n  removedSlot(index: number): STreeLeaf<V, I> {\n    const oldSlots = this.slots;\n    const newSlots = new Array<[I, V]>(oldSlots.length - 1);\n    for (let i = 0; i < index; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    for (let i = index; i < newSlots.length; i += 1) {\n      newSlots[i] = oldSlots[i + 1]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override drop(lower: number, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    const oldSlots = this.slots;\n    if (lower <= 0 || oldSlots.length === 0) {\n      return this;\n    } else if (lower >= oldSlots.length) {\n      return STreePage.empty();\n    }\n    const size = oldSlots.length - lower;\n    const newSlots = new Array<[I, V]>(size);\n    for (let i = 0; i < size; i += 1) {\n      newSlots[i] = oldSlots[i + lower]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override take(upper: number, tree: STreeContext<V, I>): STreeLeaf<V, I> {\n    const oldSlots = this.slots;\n    if (upper >= oldSlots.length || oldSlots.length === 0) {\n      return this;\n    } else if (upper <= 0) {\n      return STreePage.empty();\n    }\n    const newSlots = new Array<[I, V]>(upper);\n    for (let i = 0; i < upper; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override balanced(tree: STreeContext<V, I>): STreePage<V, I> {\n    const size = this.slots.length;\n    if (size <= 1 || !tree.pageShouldSplit(this)) {\n      return this;\n    }\n    return this.split(size >>> 1);\n  }\n\n  override split(index: number): STreeNode<V, I> {\n    const newPages = new Array<STreePage<V, I>>(2);\n    const newLeftPage = this.splitLeft(index);\n    const newRightPage = this.splitRight(index);\n    newPages[0] = newLeftPage;\n    newPages[1] = newRightPage;\n\n    const newKnots = new Array<number>(1);\n    newKnots[0] = index;\n\n    return new STreeNode(newPages, newKnots, this.slots.length);\n  }\n\n  override splitLeft(index: number): STreeLeaf<V, I> {\n    const oldSlots = this.slots;\n    const newSlots = new Array<[I, V]>(index);\n    for (let i = 0; i < index; i += 1) {\n      newSlots[i] = oldSlots[i]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override splitRight(index: number): STreeLeaf<V, I> {\n    const oldSlots = this.slots;\n    const newSize = oldSlots.length - index;\n    const newSlots = new Array<[I, V]>(newSize);\n    for (let i = 0; i < newSize; i += 1) {\n      newSlots[i] = oldSlots[i + index]!;\n    }\n    return new STreeLeaf<V, I>(newSlots);\n  }\n\n  override forEach<T, S>(callback: (this: S, value: V, index: number, id: I, tree: STree<V, I>) => T | void,\n                         thisArg: S, offset: number, tree: STree<V, I>): T | undefined {\n    for (let i = 0; i < this.slots.length; i += 1) {\n      const slot = this.slots[i]!;\n      const result = callback.call(thisArg, slot[1], offset + i, slot[0], tree);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override entries(): Cursor<[I, V]> {\n    return Cursor.array(this.slots);\n  }\n\n  override reverseEntries(): Cursor<[I, V]> {\n    return Cursor.array(this.slots, this.slots.length);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport {NodeCursor} from \"./NodeCursor\";\nimport type {STreeContext} from \"./STreeContext\";\nimport type {STree} from \"./STree\";\nimport {STreePage} from \"./STreePage\";\n\n/** @internal */\nexport class STreeNode<V, I> extends STreePage<V, I> {\n  constructor(pages: readonly STreePage<V, I>[], knots: readonly number[], size: number) {\n    super();\n    this.pages = pages;\n    this.knots = knots;\n    this.size = size;\n  }\n\n  /** @internal */\n  readonly pages: readonly STreePage<V, I>[];\n\n  /** @internal */\n  readonly knots: readonly number[];\n\n  override get arity(): number {\n    return this.pages.length;\n  }\n\n  override readonly size: number;\n\n  override isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  override get(index: number): V | undefined {\n    let x = this.lookup(index);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const i = x === 0 ? index : index - this.knots[x - 1]!;\n    return this.pages[x]!.get(i);\n  }\n\n  override getEntry(index: number): [I, V] | undefined {\n    let x = this.lookup(index);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const i = x === 0 ? index : index - this.knots[x - 1]!;\n    return this.pages[x]!.getEntry(i);\n  }\n\n  override updated(index: number, newValue: V, tree: STreeContext<V, I>): STreeNode<V, I> {\n    let x = this.lookup(index);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const i = x === 0 ? index : index - this.knots[x - 1]!;\n    const oldPage = this.pages[x]!;\n    const newPage = oldPage.updated(i, newValue, tree);\n    if (oldPage === newPage) {\n      return this;\n    } else if (oldPage.size !== newPage.size && tree.pageShouldSplit(newPage)) {\n      return this.updatedPageSplit(x, newPage, oldPage);\n    }\n    return this.updatedPage(x, newPage, oldPage);\n  }\n\n  /** @internal */\n  updatedPage(x: number, newPage: STreePage<V, I>, oldPage: STreePage<V, I>): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const newPages = oldPages.slice(0);\n    newPages[x] = newPage;\n\n    const oldKnots = this.knots;\n    let newKnots: number[];\n    let newSize: number;\n    if (oldPages.length - 1 <= 0) {\n      newKnots = [];\n      newSize = 0;\n    } else {\n      newKnots = oldKnots.slice(0);\n      if (x > 0) {\n        newSize = oldKnots[x - 1]!;\n      } else {\n        newSize = 0;\n      }\n      for (let i = x; i < newKnots.length; i += 1) {\n        newSize += newPages[i]!.size;\n        newKnots[i] = newSize;\n      }\n      newSize += newPages[newKnots.length]!.size;\n    }\n\n    return new STreeNode(newPages, newKnots, newSize);\n  }\n\n  /** @internal */\n  updatedPageSplit(x: number, newPage: STreePage<V, I>, oldPage: STreePage<V, I>): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const newPages = new Array<STreePage<V, I>>(oldPages.length + 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n\n    const newLeftPage = newPage.splitLeft(newPage.arity >>> 1);\n    const newRightPage = newPage.splitRight(newPage.arity >>> 1);\n    newPages[x] = newLeftPage;\n    newPages[x + 1] = newRightPage;\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i + 1] = oldPages[i]!;\n    }\n\n    return STreeNode.create(newPages);\n  }\n\n  /** @internal */\n  updatedPageMerge(x: number, newPage: STreeNode<V, I>, oldPage: STreePage<V, I>): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const midPages = newPage.pages;\n    const newPages = new Array<STreePage<V, I>>(oldPages.length + midPages.length - 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n    for (let i = 0; i < midPages.length; i += 1) {\n      newPages[i + x] = midPages[i]!;\n    }\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i + midPages.length - 1] = oldPages[i]!;\n    }\n\n    return STreeNode.create(newPages);\n  }\n\n  override inserted(index: number, newValue: V, id: I | undefined, tree: STreeContext<V, I>): STreeNode<V, I> {\n    let x = this.lookup(index);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const subIndex = x === 0 ? index : index - this.knots[x - 1]!;\n    const oldPage = this.pages[x]!;\n    const newPage = oldPage.inserted(subIndex, newValue, id, tree);\n    if (oldPage === newPage) {\n      return this;\n    } else if (tree.pageShouldSplit(newPage)) {\n      return this.updatedPageSplit(x, newPage, oldPage);\n    }\n    return this.updatedPage(x, newPage, oldPage);\n  }\n\n  override removed(index: number, tree: STreeContext<V, I>): STreePage<V, I> {\n    let x = this.lookup(index);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    const subIndex = x === 0 ? index : index - this.knots[x - 1]!;\n    const oldPage = this.pages[x]!;\n    const newPage = oldPage.removed(subIndex, tree);\n    if (oldPage === newPage) {\n      return this;\n    }\n    return this.replacedPage(x, newPage, oldPage, tree);\n  }\n\n  /** @internal */\n  replacedPage(x: number, newPage: STreePage<V, I>, oldPage: STreePage<V, I>,\n               tree: STreeContext<V, I>): STreePage<V, I> {\n    if (!newPage.isEmpty()) {\n      if (newPage instanceof STreeNode && tree.pageShouldMerge(newPage)) {\n        return this.updatedPageMerge(x, newPage, oldPage);\n      }\n      return this.updatedPage(x, newPage, oldPage);\n    } else if (this.pages.length > 2) {\n      return this.removedPage(x, newPage, oldPage);\n    } else if (this.pages.length > 1) {\n      if (x === 0) {\n        return this.pages[1]!;\n      } else {\n        return this.pages[0]!;\n      }\n    }\n    return STreePage.empty();\n  }\n\n  /** @internal */\n  removedPage(x: number, newPage: STreePage<V, I>, oldPage: STreePage<V, I>): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const newPages = new Array<STreePage<V, I>>(oldPages.length - 1);\n    for (let i = 0; i < x; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n    for (let i = x + 1; i < oldPages.length; i += 1) {\n      newPages[i - 1] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<number>(oldKnots.length - 1);\n    let newSize: number;\n    if (x <= 0) {\n      newSize = 0;\n    } else {\n      for (let i = 0; i < x; i += 1) {\n        newKnots[i] = oldKnots[i]!;\n      }\n      newSize = oldKnots[x - 1]!;\n    }\n    for (let i = x; i < newKnots.length; i += 1) {\n      newSize += newPages[i]!.size;\n      newKnots[i] = newSize;\n    }\n    newSize += newPages[newKnots.length]!.size;\n\n    return new STreeNode(newPages, newKnots, newSize);\n  }\n\n  override drop(lower: number, tree: STreeContext<V, I>): STreePage<V, I> {\n    if (lower <= 0) {\n      return this;\n    } else if (lower >= this.size) {\n      return STreePage.empty();\n    }\n    let x = this.lookup(lower);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    lower = x === 0 ? lower : lower - this.knots[x - 1]!;\n    const oldPages = this.pages;\n    const n = oldPages.length - x;\n    if (n <= 1) {\n      return oldPages[x]!.drop(lower, tree);\n    }\n    let newNode: STreeNode<V, I>;\n    if (x <= 0) {\n      newNode = this;\n    } else {\n      const newPages = new Array<STreePage<V, I>>(n);\n      for (let i = 0; i < n; i += 1) {\n        newPages[i] = oldPages[i + x]!;\n      }\n      newNode = STreeNode.create(newPages);\n    }\n    if (lower <= 0) {\n      return newNode;\n    }\n    const oldPage = oldPages[x]!;\n    const newPage = oldPage.drop(lower, tree);\n    return newNode.replacedPage(0, newPage, oldPage, tree);\n  }\n\n  override take(upper: number, tree: STreeContext<V, I>): STreePage<V, I> {\n    if (upper >= this.size) {\n      return this;\n    } else if (upper <= 0) {\n      return STreePage.empty();\n    }\n    let x = this.lookup(upper);\n    if (x >= 0) {\n      x += 1;\n    } else {\n      x = -(x + 1);\n    }\n    upper = x === 0 ? upper : upper - this.knots[x - 1]!;\n    const oldPages = this.pages;\n    const n = upper === 0 ? x : x + 1;\n    if (n <= 1) {\n      if (upper > 0) {\n        return oldPages[0]!.take(upper, tree);\n      } else {\n        return oldPages[0]!;\n      }\n    }\n    let newNode: STreeNode<V, I>;\n    if (x >= oldPages.length) {\n      newNode = this;\n    } else {\n      const newPages = new Array<STreePage<V, I>>(n);\n      for (let i = 0; i < n; i += 1) {\n        newPages[i] = oldPages[i]!;\n      }\n      const newKnots = new Array<number>(n - 1);\n      for (let i = 0; i < newKnots.length; i += 1) {\n        newKnots[i] = this.knots[i]!;\n      }\n      const newSize = newKnots[n - 2]! + newPages[n - 1]!.size;\n      newNode = new STreeNode(newPages, newKnots, newSize);\n    }\n    if (upper <= 0) {\n      return newNode;\n    }\n    const oldPage = oldPages[x]!;\n    const newPage = oldPage.take(upper, tree);\n    return newNode.replacedPage(x, newPage, oldPage, tree);\n  }\n\n  override balanced(tree: STreeContext<V, I>): STreeNode<V, I> {\n    if (this.pages.length <= 1 || !tree.pageShouldSplit(this)) {\n      return this;\n    }\n    return this.split(this.knots.length >>> 1);\n  }\n\n  override split(x: number): STreeNode<V, I> {\n    const newPages = new Array<STreePage<V, I>>(2);\n    const newLeftPage = this.splitLeft(x);\n    const newRightPage = this.splitRight(x);\n    newPages[0] = newLeftPage;\n    newPages[1] = newRightPage;\n\n    const newKnots = new Array<number>(1);\n    newKnots[0] = newLeftPage.size;\n\n    return new STreeNode(newPages, newKnots, this.size);\n  }\n\n  override splitLeft(x: number): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const newPages = new Array<STreePage<V, I>>(x + 1);\n    for (let i = 0; i < x + 1; i += 1) {\n      newPages[i] = oldPages[i]!;\n    }\n\n    const oldKnots = this.knots;\n    const newKnots = new Array<number>(x);\n    for (let i = 0; i < x; i += 1) {\n      newKnots[i] = oldKnots[i]!;\n    }\n\n    let newSize = 0;\n    for (let i = 0; i <= x; i += 1) {\n      newSize += newPages[i]!.size;\n    }\n\n    return new STreeNode(newPages, newKnots, newSize);\n  }\n\n  override splitRight(x: number): STreeNode<V, I> {\n    const oldPages = this.pages;\n    const y = oldPages.length - (x + 1);\n    const newPages = new Array<STreePage<V, I>>(y);\n    for (let i = 0; i < y; i += 1) {\n      newPages[i] = oldPages[i + (x + 1)]!;\n    }\n\n    const newKnots = new Array<number>(y - 1);\n    let newSize;\n    if (y <= 0) {\n      newSize = 0;\n    } else {\n      newSize = newPages[0]!.size;\n      for (let i = 1; i < y; i += 1) {\n        newKnots[i - 1] = newSize;\n        newSize += newPages[i]!.size;\n      }\n    }\n\n    return new STreeNode(newPages, newKnots, newSize);\n  }\n\n  override forEach<T, S>(callback: (this: S, value: V, index: number, id: I, tree: STree<V, I>) => T | void,\n                         thisArg: S, offset: number, tree: STree<V, I>): T | undefined {\n    for (let i = 0; i < this.pages.length; i += 1) {\n      const page = this.pages[i]!;\n      const result = page.forEach(callback, thisArg, offset, tree);\n      if (result !== void 0) {\n        return result;\n      }\n      offset += page.size;\n    }\n    return void 0;\n  }\n\n  override entries(): Cursor<[I, V]> {\n    return new STreeNodeCursor(this.pages);\n  }\n\n  override reverseEntries(): Cursor<[I, V]> {\n    return new STreeNodeCursor(this.pages, this.size, this.pages.length);\n  }\n\n  /** @internal */\n  lookup(index: number): number {\n    let lo = 0;\n    let hi = this.knots.length - 1;\n    while (lo <= hi) {\n      const mid = (lo + hi) >>> 1;\n      if (index > this.knots[mid]!) {\n        lo = mid + 1;\n      } else if (index < this.knots[mid]!) {\n        hi = mid - 1;\n      } else {\n        return mid;\n      }\n    }\n    return -(lo + 1);\n  }\n\n  static create<V, I>(pages: readonly STreePage<V, I>[]): STreeNode<V, I> {\n    const knots = new Array<number>(pages.length - 1);\n    let size = 0;\n    for (let i = 0, n  = knots.length; i < n; i += 1) {\n      size += pages[i]!.size;\n      knots[i] = size;\n    }\n    size += pages[knots.length]!.size;\n    return new STreeNode(pages, knots, size);\n  }\n}\n\n/** @internal */\nexport class STreeNodeCursor<V, I> extends NodeCursor<[I, V], STreePage<V, I>> {\n  constructor(pages: readonly STreePage<V, I>[], index: number = 0,\n              childIndex: number = 0, childCursor: Cursor<[I, V]> | null = null) {\n    super(pages, index, childIndex, childCursor);\n  }\n\n  protected override pageSize(page: STreePage<V, I>): number {\n    return page.size;\n  }\n\n  protected override pageCursor(page: STreePage<V, I>): Cursor<[I, V]> {\n    return page.entries();\n  }\n\n  protected override reversePageCursor(page: STreePage<V, I>): Cursor<[I, V]> {\n    return page.reverseEntries();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Constraint} from \"./Constraint\";\nimport type {ConstraintSolver} from \"./ConstraintSolver\";\n\n/** @public */\nexport interface ConstraintSymbol {\n  /** @internal */\n  isExternal(): boolean;\n\n  /** @internal */\n  isDummy(): boolean;\n\n  /** @internal */\n  isInvalid(): boolean;\n\n  /** @internal */\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal */\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal */\n  updateConstraintSolution(value: number): void;\n}\n\n/** @public */\nexport const ConstraintSymbol = {\n  /** @internal */\n  invalid: Lazy(function (): ConstraintSymbol {\n    return new ConstraintInvalid();\n  }),\n};\n\n/** @internal */\nexport class ConstraintSlack implements ConstraintSymbol {\n  isExternal(): boolean {\n    return false;\n  }\n\n  isDummy(): boolean {\n    return false;\n  }\n\n  isInvalid(): boolean {\n    return false;\n  }\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  updateConstraintSolution(value: number): void {\n    // nop\n  }\n}\n\n/** @internal */\nexport class ConstraintDummy implements ConstraintSymbol {\n  isExternal(): boolean {\n    return false;\n  }\n\n  isDummy(): boolean {\n    return true;\n  }\n\n  isInvalid(): boolean {\n    return false;\n  }\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  updateConstraintSolution(value: number): void {\n    // nop\n  }\n}\n\n/** @internal */\nexport class ConstraintError implements ConstraintSymbol {\n  isExternal(): boolean {\n    return false;\n  }\n\n  isDummy(): boolean {\n    return false;\n  }\n\n  isInvalid(): boolean {\n    return false;\n  }\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  updateConstraintSolution(value: number): void {\n    // nop\n  }\n}\n\n/** @internal */\nexport class ConstraintInvalid implements ConstraintSymbol {\n  isExternal(): boolean {\n    return false;\n  }\n\n  isDummy(): boolean {\n    return false;\n  }\n\n  isInvalid(): boolean {\n    return true;\n  }\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    // nop\n  }\n\n  updateConstraintSolution(value: number): void {\n    // nop\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport {ConstraintSum} from \"./\"; // forward import\nimport {ConstraintTerm} from \"./\"; // forward import\nimport {ConstraintProduct} from \"./\"; // forward import\nimport {ConstraintConstant} from \"./\"; // forward import\n\n/** @public */\nexport type ConstraintExpressionLike = ConstraintExpression | number;\n\n/** @public */\nexport const ConstraintExpressionLike = {\n  [Symbol.hasInstance](instance: unknown): instance is ConstraintExpressionLike {\n    return ConstraintExpression[Symbol.hasInstance](instance)\n        || typeof instance === \"number\";\n  },\n};\n\n/** @public */\nexport interface ConstraintExpression {\n  readonly terms: ReadonlyMap<ConstraintVariable, number>;\n\n  readonly constant: number;\n\n  isConstant(): boolean;\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  negative(): ConstraintExpression;\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  times(scalar: number): ConstraintExpression;\n\n  divide(scalar: number): ConstraintExpression;\n}\n\n/** @public */\nexport const ConstraintExpression = {\n  zero: Lazy(function (): ConstraintConstant {\n    return new ConstraintConstant(0);\n  }),\n\n  constant(value: number): ConstraintConstant {\n    if (value === 0) {\n      return ConstraintExpression.zero();\n    }\n    return new ConstraintConstant(value);\n  },\n\n  sum(...expressions: ConstraintExpressionLike[]): ConstraintSum {\n    const terms = new Map<ConstraintVariable, number>();\n    let constant = 0;\n    for (let i = 0; i < expressions.length; i += 1) {\n      const expression = expressions[i]!;\n      if (typeof expression === \"number\") {\n        constant += expression;\n      } else if (ConstraintTerm[Symbol.hasInstance](expression)) {\n        const variable = expression.variable;\n        if (variable === null) {\n          constant += expression.constant;\n        } else {\n          let value = terms.get(variable);\n          if (value === void 0) {\n            value = 0;\n          }\n          terms.set(variable, value + expression.coefficient);\n        }\n      } else {\n        for (const [variable, coefficient] of expression.terms) {\n          let value = terms.get(variable);\n          if (value === void 0) {\n            value = 0;\n          }\n          terms.set(variable, value + coefficient);\n        }\n        constant += expression.constant;\n      }\n    }\n    return new ConstraintSum(terms, constant);\n  },\n\n  product(coefficient: number, variable: ConstraintVariable): ConstraintProduct {\n    return new ConstraintProduct(coefficient, variable);\n  },\n\n  fromLike<T extends ConstraintExpressionLike | null | undefined>(value: T): ConstraintExpression | Uninitable<T> {\n    if (value == void 0 || value === null || ConstraintExpression[Symbol.hasInstance](value)) {\n      return value as ConstraintExpression | Uninitable<T>;\n    } else if (typeof value === \"number\") {\n      return ConstraintExpression.constant(value);\n    }\n    throw new TypeError(\"\" + value);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is ConstraintExpression {\n    return Objects.hasAllKeys<ConstraintExpression>(instance, \"terms\", \"constant\");\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\n\n/** @public */\nexport class ConstraintSum implements ConstraintExpression, Debug {\n  constructor(terms: ReadonlyMap<ConstraintVariable, number>, constant: number) {\n    this.terms = terms;\n    this.constant = constant;\n  }\n\n  isConstant(): boolean {\n    return this.terms.size === 0;\n  }\n\n  readonly terms: ReadonlyMap<ConstraintVariable, number>;\n\n  readonly constant: number;\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression {\n    return ConstraintExpression.sum(this, that);\n  }\n\n  negative(): ConstraintExpression {\n    const terms = new Map<ConstraintVariable, number>();\n    for (const [variable, coefficient] of this.terms) {\n      terms.set(variable, -coefficient);\n    }\n    return new ConstraintSum(terms, -this.constant);\n  }\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that).negative();\n    return ConstraintExpression.sum(this, that);\n  }\n\n  times(scalar: number): ConstraintExpression {\n    const terms = new Map<ConstraintVariable, number>();\n    for (const [variable, coefficient] of this.terms) {\n      terms.set(variable, coefficient * scalar);\n    }\n    return new ConstraintSum(terms, this.constant * scalar);\n  }\n\n  divide(scalar: number): ConstraintExpression {\n    const terms = new Map<ConstraintVariable, number>();\n    for (const [variable, coefficient] of this.terms) {\n      terms.set(variable, coefficient / scalar);\n    }\n    return new ConstraintSum(terms, this.constant / scalar);\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"ConstraintExpression\").write(46/*'.'*/).write(\"sum\").write(40/*'('*/);\n    let i = 0;\n    for (const [variable, coefficient] of this.terms) {\n      if (i > 0) {\n        output = output.write(\", \");\n      }\n      if (coefficient === 1) {\n        output = output.debug(variable);\n      } else {\n        output = output.debug(ConstraintExpression.product(coefficient, variable));\n      }\n      i += 1;\n    }\n    if (this.constant !== 0) {\n      if (i !== 0) {\n        output = output.write(\", \");\n      }\n      output = output.debug(this.constant);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Objects} from \"@swim/util\";\nimport type {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\n\n/** @public */\nexport interface ConstraintTerm extends ConstraintExpression {\n  readonly coefficient: number;\n\n  readonly variable: ConstraintVariable | null;\n\n  negative(): ConstraintTerm;\n}\n\n/** @public */\nexport const ConstraintTerm = {\n  [Symbol.hasInstance](instance: unknown): instance is ConstraintTerm {\n    return Objects.hasAllKeys<ConstraintTerm>(instance, \"coefficient\", \"variable\");\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintTerm} from \"./ConstraintTerm\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\n\n/** @public */\nexport class ConstraintProduct implements ConstraintTerm, Debug {\n  constructor(coefficient: number, variable: ConstraintVariable) {\n    this.coefficient = coefficient;\n    this.variable = variable;\n  }\n\n  isConstant(): boolean {\n    return false;\n  }\n\n  readonly coefficient: number;\n\n  readonly variable: ConstraintVariable;\n\n  get terms(): ReadonlyMap<ConstraintVariable, number> {\n    const terms = new Map<ConstraintVariable, number>();\n    terms.set(this.variable, this.coefficient);\n    return terms;\n  }\n\n  get constant(): number {\n    return 0;\n  }\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (that instanceof ConstraintProduct && this.variable === that.variable) {\n      return ConstraintExpression.product(this.coefficient + that.coefficient, this.variable);\n    } else if (this.variable === that) {\n      return ConstraintExpression.product(this.coefficient + 1, this.variable);\n    }\n    return ConstraintExpression.sum(this, that);\n  }\n\n  negative(): ConstraintTerm {\n    return ConstraintExpression.product(-this.coefficient, this.variable);\n  }\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (that instanceof ConstraintProduct && this.variable === that.variable) {\n      return ConstraintExpression.product(this.coefficient - that.coefficient, this.variable);\n    } else if (this.variable === that) {\n      return ConstraintExpression.product(this.coefficient - 1, this.variable);\n    }\n    return ConstraintExpression.sum(this, that.negative());\n  }\n\n  times(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(this.coefficient * scalar, this.variable);\n  }\n\n  divide(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(this.coefficient / scalar, this.variable);\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"ConstraintExpression\").write(46/*'.'*/).write(\"product\").write(40/*'('*/)\n                   .debug(this.coefficient).write(\", \").debug(this.variable).write(41/*')'*/);\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintTerm} from \"./ConstraintTerm\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\n\n/** @public */\nexport class ConstraintConstant implements ConstraintTerm, Debug {\n  constructor(constant: number) {\n    this.constant = constant;\n  }\n\n  isConstant(): boolean {\n    return true;\n  }\n\n  get coefficient(): number {\n    return 0;\n  }\n\n  get variable(): ConstraintVariable | null {\n    return null;\n  }\n\n  get terms(): ReadonlyMap<ConstraintVariable, number> {\n    return new Map<ConstraintVariable, number>();\n  }\n\n  readonly constant: number;\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (that instanceof ConstraintConstant) {\n      return ConstraintExpression.constant(this.constant + that.constant);\n    }\n    return ConstraintExpression.sum(this, that);\n  }\n\n  negative(): ConstraintTerm {\n    return ConstraintExpression.constant(-this.constant);\n  }\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (that instanceof ConstraintConstant) {\n      return ConstraintExpression.constant(this.constant - that.constant);\n    }\n    return ConstraintExpression.sum(this, that.negative());\n  }\n\n  times(scalar: number): ConstraintExpression {\n    return ConstraintExpression.constant(this.constant * scalar);\n  }\n\n  divide(scalar: number): ConstraintExpression {\n    return ConstraintExpression.constant(this.constant / scalar);\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"ConstraintExpression\").write(46/*'.'*/);\n    if (this.constant === 0) {\n      output = output.write(\"zero\").write(40/*'('*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"constant\").write(40/*'('*/).debug(this.constant).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport type {FastenerFlags} from \"@swim/component\";\nimport type {FastenerClass} from \"@swim/component\";\nimport type {Fastener} from \"@swim/component\";\nimport type {PropertyDescriptor} from \"@swim/component\";\nimport type {PropertyClass} from \"@swim/component\";\nimport {Property} from \"@swim/component\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintTerm} from \"./ConstraintTerm\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport type {ConstraintStrengthLike} from \"./Constraint\";\nimport {ConstraintStrength} from \"./\"; // forward import\nimport type {Constraint} from \"./Constraint\";\nimport {ConstraintScope} from \"./\"; // forward import\nimport type {ConstraintSolver} from \"./ConstraintSolver\";\n\n/** @public */\nexport interface ConstraintPropertyDescriptor<R, T> extends PropertyDescriptor<R, T> {\n  extends?: Proto<ConstraintProperty<any, any, any>> | boolean | null;\n  strength?: ConstraintStrengthLike;\n  constrained?: boolean;\n}\n\n/** @public */\nexport interface ConstraintPropertyClass<P extends ConstraintProperty<any, any, any> = ConstraintProperty<any, any, any>> extends PropertyClass<P> {\n  /** @internal */\n  readonly ConstrainedFlag: FastenerFlags;\n  /** @internal */\n  readonly ConstrainingFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface ConstraintProperty<R = any, T = any, I extends any[] = [T]> extends Property<R, T, I>, ConstraintVariable {\n  /** @override */\n  get descriptorType(): Proto<ConstraintPropertyDescriptor<R, T>>;\n\n  /** @internal @override */\n  isExternal(): boolean;\n\n  /** @internal @override */\n  isDummy(): boolean;\n\n  /** @internal @override */\n  isInvalid(): boolean;\n\n  /** @override */\n  isConstant(): boolean;\n\n  /** @internal @override */\n  evaluateConstraintVariable(): void;\n\n  /** @internal @override */\n  updateConstraintSolution(value: number): void;\n\n  /** @internal @protected */\n  initStrength(): ConstraintStrength;\n\n  /** @override */\n  readonly strength: ConstraintStrength;\n\n  setStrength(strength: ConstraintStrengthLike): void;\n\n  /** @override */\n  get coefficient(): number;\n\n  /** @override */\n  get variable(): ConstraintVariable | null;\n\n  /** @override */\n  get terms(): ReadonlyMap<ConstraintVariable, number>;\n\n  /** @override */\n  get constant(): number;\n\n  /** @override */\n  plus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  /** @override */\n  negative(): ConstraintTerm;\n\n  /** @override */\n  minus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  /** @override */\n  times(scalar: number): ConstraintExpression;\n\n  /** @override */\n  divide(scalar: number): ConstraintExpression;\n\n  get constrained(): boolean;\n\n  constrain(constrained?: boolean): this;\n\n  /** @internal */\n  readonly conditionCount: number;\n\n  /** @internal @override */\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal @override */\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal */\n  get constraining(): boolean;\n\n  /** @internal */\n  startConstraining(): void;\n\n  /** @protected */\n  willStartConstraining(): void;\n\n  /** @protected */\n  onStartConstraining(): void;\n\n  /** @protected */\n  didStartConstraining(): void;\n\n  /** @internal */\n  stopConstraining(): void;\n\n  /** @protected */\n  willStopConstraining(): void;\n\n  /** @protected */\n  onStopConstraining(): void;\n\n  /** @protected */\n  didStopConstraining(): void;\n\n  /** @internal */\n  updateConstraintVariable(): void;\n\n  /** @protected @override */\n  onSetValue(newValue: T, oldValue: T): void;\n\n  /** @protected @override */\n  onMount(): void;\n\n  /** @protected @override */\n  onUnmount(): void;\n\n  /** @internal @protected */\n  toNumber(value: T): number;\n}\n\n/** @public */\nexport const ConstraintProperty = (<R, T, I extends any[], P extends ConstraintProperty<any, any, any>>() => Property.extend<ConstraintProperty<R, T, I>, ConstraintPropertyClass<P>>(\"ConstraintProperty\", {\n  isExternal(): boolean {\n    return true;\n  },\n\n  isDummy(): boolean {\n    return false;\n  },\n\n  isInvalid(): boolean {\n    return false;\n  },\n\n  isConstant(): boolean {\n    return false;\n  },\n\n  evaluateConstraintVariable(): void {\n    // hook\n  },\n\n  updateConstraintSolution(value: number): void {\n    if (this.constrained && this.toNumber(this.value) !== value) {\n      this.setValue(value as unknown as T, Affinity.Reflexive);\n    }\n  },\n\n  initStrength(): ConstraintStrength {\n    let strength = (Object.getPrototypeOf(this) as ConstraintProperty<any, any, any>).strength as ConstraintStrength | undefined;\n    if (strength === void 0) {\n      strength = ConstraintStrength.Strong;\n    }\n    return strength;\n  },\n\n  setStrength(strength: ConstraintStrengthLike): void {\n    (this as Mutable<typeof this>).strength = ConstraintStrength.fromLike(strength);\n  },\n\n  get coefficient(): number {\n    return 1;\n  },\n\n  get variable(): ConstraintVariable {\n    return this;\n  },\n\n  get terms(): ReadonlyMap<ConstraintVariable, number> {\n    const terms = new Map<ConstraintVariable, number>();\n    terms.set(this, 1);\n    return terms;\n  },\n\n  get constant(): number {\n    return 0;\n  },\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (this === that) {\n      return ConstraintExpression.product(2, this);\n    }\n    return ConstraintExpression.sum(this, that);\n  },\n\n  negative(): ConstraintTerm {\n    return ConstraintExpression.product(-1, this);\n  },\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (this === that) {\n      return ConstraintExpression.zero();\n    }\n    return ConstraintExpression.sum(this, that.negative());\n  },\n\n  times(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(scalar, this);\n  },\n\n  divide(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(1 / scalar, this);\n  },\n\n  get constrained(): boolean {\n    return (this.flags & ConstraintProperty.ConstrainedFlag) !== 0;\n  },\n\n  constrain(constrained?: boolean): typeof this {\n    if (constrained === void 0) {\n      constrained = true;\n    }\n    const flags = this.flags;\n    if (constrained && (flags & ConstraintProperty.ConstrainedFlag) === 0) {\n      this.setFlags(flags | ConstraintProperty.ConstrainedFlag);\n      if (this.conditionCount !== 0 && this.mounted) {\n        this.stopConstraining();\n      }\n    } else if (!constrained && (flags & ConstraintProperty.ConstrainedFlag) !== 0) {\n      this.setFlags(flags & ~ConstraintProperty.ConstrainedFlag);\n      if (this.conditionCount !== 0 && this.mounted) {\n        this.startConstraining();\n        this.updateConstraintVariable();\n      }\n    }\n    return this;\n  },\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    (this as Mutable<typeof this>).conditionCount += 1;\n    if (!this.constrained && this.conditionCount === 1 && this.mounted) {\n      this.startConstraining();\n      this.updateConstraintVariable();\n    }\n  },\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    (this as Mutable<typeof this>).conditionCount -= 1;\n    if (!this.constrained && this.conditionCount === 0 && this.mounted) {\n      this.stopConstraining();\n    }\n  },\n\n  get constraining(): boolean {\n    return (this.flags & ConstraintProperty.ConstrainingFlag) !== 0;\n  },\n\n  startConstraining(): void {\n    if ((this.flags & ConstraintProperty.ConstrainingFlag) !== 0) {\n      return;\n    }\n    this.willStartConstraining();\n    this.setFlags(this.flags | ConstraintProperty.ConstrainingFlag);\n    this.onStartConstraining();\n    this.didStartConstraining();\n  },\n\n  willStartConstraining(): void {\n    // hook\n  },\n\n  onStartConstraining(): void {\n    const constraintScope = this.owner;\n    if (ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.addConstraintVariable(this);\n    }\n  },\n\n  didStartConstraining(): void {\n    // hook\n  },\n\n  stopConstraining(): void {\n    if ((this.flags & ConstraintProperty.ConstrainingFlag) === 0) {\n      return;\n    }\n    this.willStopConstraining();\n    this.setFlags(this.flags & ~ConstraintProperty.ConstrainingFlag);\n    this.onStopConstraining();\n    this.didStopConstraining();\n  },\n\n  willStopConstraining(): void {\n    // hook\n  },\n\n  onStopConstraining(): void {\n    const constraintScope = this.owner;\n    if (ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.removeConstraintVariable(this);\n    }\n  },\n\n  didStopConstraining(): void {\n    // hook\n  },\n\n  updateConstraintVariable(): void {\n    const constraintScope = this.owner;\n    const value = this.value;\n    if (value !== void 0 && ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.setConstraintVariable(this, this.toNumber(value));\n    }\n  },\n\n  onSetValue(newValue: T, oldValue: T): void {\n    super.onSetValue(newValue, oldValue);\n    const constraintScope = this.owner;\n    if (this.constraining && ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.setConstraintVariable(this, newValue !== void 0 && newValue !== null ? this.toNumber(newValue) : 0);\n    }\n  },\n\n  onMount(): void {\n    super.onMount();\n    if (!this.constrained && this.conditionCount !== 0) {\n      this.startConstraining();\n    }\n  },\n\n  onUnmount(): void {\n    if (!this.constrained && this.conditionCount !== 0) {\n      this.stopConstraining();\n    }\n    super.onUnmount();\n  },\n\n  toNumber(value: T): number {\n    return value !== void 0 && value !== null ? +value : 0;\n  },\n},\n{\n  construct(property: P | null, owner: P extends Fastener<infer R, any, any> ? R : never): P {\n    property = super.construct(property, owner) as P;\n    (property as Mutable<typeof property>).strength = property.initStrength();\n    (property as Mutable<typeof property>).conditionCount = 0;\n    return property;\n  },\n\n  refine(propertyClass: FastenerClass<ConstraintProperty<any, any, any>>): void {\n    super.refine(propertyClass);\n    const propertyPrototype = propertyClass.prototype;\n\n    let flagsInit = propertyPrototype.flagsInit;\n    if (Object.prototype.hasOwnProperty.call(propertyPrototype, \"constrained\")) {\n      if (propertyPrototype.constrained) {\n        flagsInit |= ConstraintProperty.ConstrainedFlag;\n      } else {\n        flagsInit &= ~ConstraintProperty.ConstrainedFlag;\n      }\n      delete (propertyPrototype as ConstraintPropertyDescriptor<any, any>).constrained;\n    }\n    Object.defineProperty(propertyPrototype, \"flagsInit\", {\n      value: flagsInit,\n      enumerable: true,\n      configurable: true,\n    });\n\n    const strengthDescriptor = Object.getOwnPropertyDescriptor(propertyPrototype, \"strength\");\n    if (strengthDescriptor !== void 0 && \"value\" in strengthDescriptor) {\n      strengthDescriptor.value = ConstraintStrength.fromLike(strengthDescriptor.value);\n      Object.defineProperty(propertyPrototype, \"strength\", strengthDescriptor);\n    }\n  },\n\n  ConstrainedFlag: 1 << (Property.FlagShift + 0),\n  ConstrainingFlag: 1 << (Property.FlagShift + 1),\n\n  FlagShift: Property.FlagShift + 2,\n  FlagMask: (1 << (Property.FlagShift + 2)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {Proto} from \"@swim/util\";\nimport {Affinity} from \"@swim/component\";\nimport type {FastenerFlags} from \"@swim/component\";\nimport type {FastenerClass} from \"@swim/component\";\nimport type {Fastener} from \"@swim/component\";\nimport type {AnimatorDescriptor} from \"@swim/component\";\nimport type {AnimatorClass} from \"@swim/component\";\nimport {Animator} from \"@swim/component\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintTerm} from \"./ConstraintTerm\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport type {ConstraintStrengthLike} from \"./Constraint\";\nimport {ConstraintStrength} from \"./\"; // forward import\nimport type {Constraint} from \"./Constraint\";\nimport {ConstraintScope} from \"./\"; // forward import\nimport type {ConstraintSolver} from \"./ConstraintSolver\";\n\n/** @public */\nexport interface ConstraintAnimatorDescriptor<R, T> extends AnimatorDescriptor<R, T> {\n  extends?: Proto<ConstraintAnimator<any, any, any>> | boolean | null;\n  strength?: ConstraintStrengthLike;\n  constrained?: boolean;\n}\n\n/** @public */\nexport interface ConstraintAnimatorClass<A extends ConstraintAnimator<any, any, any> = ConstraintAnimator<any, any, any>> extends AnimatorClass<A> {\n  /** @internal */\n  readonly ConstrainedFlag: FastenerFlags;\n  /** @internal */\n  readonly ConstrainingFlag: FastenerFlags;\n\n  /** @internal @override */\n  readonly FlagShift: number;\n  /** @internal @override */\n  readonly FlagMask: FastenerFlags;\n}\n\n/** @public */\nexport interface ConstraintAnimator<R = any, T = any, I extends any[] = [T]> extends Animator<R, T, I>, ConstraintVariable {\n  /** @override */\n  get descriptorType(): Proto<ConstraintAnimatorDescriptor<R, T>>;\n\n  /** @internal @override */\n  isExternal(): boolean;\n\n  /** @internal @override */\n  isDummy(): boolean;\n\n  /** @internal @override */\n  isInvalid(): boolean;\n\n  /** @override */\n  isConstant(): boolean;\n\n  /** @internal @override */\n  evaluateConstraintVariable(): void;\n\n  /** @internal @override */\n  updateConstraintSolution(value: number): void;\n\n  /** @internal @protected */\n  initStrength(): ConstraintStrength;\n\n  /** @override */\n  readonly strength: ConstraintStrength;\n\n  setStrength(strength: ConstraintStrengthLike): void;\n\n  /** @override */\n  get coefficient(): number;\n\n  /** @override */\n  get variable(): ConstraintVariable | null;\n\n  /** @override */\n  get terms(): ReadonlyMap<ConstraintVariable, number>;\n\n  /** @override */\n  get constant(): number;\n\n  /** @override */\n  plus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  /** @override */\n  negative(): ConstraintTerm;\n\n  /** @override */\n  minus(that: ConstraintExpressionLike): ConstraintExpression;\n\n  /** @override */\n  times(scalar: number): ConstraintExpression;\n\n  /** @override */\n  divide(scalar: number): ConstraintExpression;\n\n  get constrained(): boolean;\n\n  constrain(constrained?: boolean): this;\n\n  /** @internal */\n  readonly conditionCount: number;\n\n  /** @internal @override */\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal @override */\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void;\n\n  /** @internal */\n  get constraining(): boolean;\n\n  /** @internal */\n  startConstraining(): void;\n\n  /** @protected */\n  willStartConstraining(): void;\n\n  /** @protected */\n  onStartConstraining(): void;\n\n  /** @protected */\n  didStartConstraining(): void;\n\n  /** @internal */\n  stopConstraining(): void;\n\n  /** @protected */\n  willStopConstraining(): void;\n\n  /** @protected */\n  onStopConstraining(): void;\n\n  /** @protected */\n  didStopConstraining(): void;\n\n  /** @internal */\n  updateConstraintVariable(): void;\n\n  /** @protected @override */\n  onSetValue(newValue: T, oldValue: T): void;\n\n  /** @protected @override */\n  onMount(): void;\n\n  /** @protected @override */\n  onUnmount(): void;\n\n  /** @internal @protected */\n  toNumber(value: T): number;\n}\n\n/** @public */\nexport const ConstraintAnimator = (<R, T, I extends any[], A extends ConstraintAnimator<any, any, any>>() => Animator.extend<ConstraintAnimator<R, T, I>, ConstraintAnimatorClass<A>>(\"ConstraintAnimator\", {\n  isExternal(): boolean {\n    return true;\n  },\n\n  isDummy(): boolean {\n    return false;\n  },\n\n  isInvalid(): boolean {\n    return false;\n  },\n\n  isConstant(): boolean {\n    return false;\n  },\n\n  evaluateConstraintVariable(): void {\n    // hook\n  },\n\n  updateConstraintSolution(state: number): void {\n    if (this.constrained && this.toNumber(this.state) !== state) {\n      this.setState(state as unknown as T, Affinity.Reflexive);\n    }\n  },\n\n  initStrength(): ConstraintStrength {\n    let strength = (Object.getPrototypeOf(this) as ConstraintAnimator).strength as ConstraintStrength | undefined;\n    if (strength === void 0) {\n      strength = ConstraintStrength.Strong;\n    }\n    return strength;\n  },\n\n  setStrength(strength: ConstraintStrengthLike): void {\n    (this as Mutable<typeof this>).strength = ConstraintStrength.fromLike(strength);\n  },\n\n  get coefficient(): number {\n    return 1;\n  },\n\n  get variable(): ConstraintVariable {\n    return this;\n  },\n\n  get terms(): ReadonlyMap<ConstraintVariable, number> {\n    const terms = new Map<ConstraintVariable, number>();\n    terms.set(this, 1);\n    return terms;\n  },\n\n  get constant(): number {\n    return 0;\n  },\n\n  plus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (this === that) {\n      return ConstraintExpression.product(2, this);\n    }\n    return ConstraintExpression.sum(this, that);\n  },\n\n  negative(): ConstraintTerm {\n    return ConstraintExpression.product(-1, this);\n  },\n\n  minus(that: ConstraintExpressionLike): ConstraintExpression {\n    that = ConstraintExpression.fromLike(that);\n    if (this === that) {\n      return ConstraintExpression.zero();\n    }\n    return ConstraintExpression.sum(this, that.negative());\n  },\n\n  times(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(scalar, this);\n  },\n\n  divide(scalar: number): ConstraintExpression {\n    return ConstraintExpression.product(1 / scalar, this);\n  },\n\n  get constrained(): boolean {\n    return (this.flags & ConstraintAnimator.ConstrainedFlag) !== 0;\n  },\n\n  constrain(constrained?: boolean): typeof this {\n    if (constrained === void 0) {\n      constrained = true;\n    }\n    const flags = this.flags;\n    if (constrained && (flags & ConstraintAnimator.ConstrainedFlag) === 0) {\n      this.setFlags(flags | ConstraintAnimator.ConstrainedFlag);\n      if (this.conditionCount !== 0 && this.mounted) {\n        this.stopConstraining();\n      }\n    } else if (!constrained && (flags & ConstraintAnimator.ConstrainedFlag) !== 0) {\n      this.setFlags(flags & ~ConstraintAnimator.ConstrainedFlag);\n      if (this.conditionCount !== 0 && this.mounted) {\n        this.startConstraining();\n        this.updateConstraintVariable();\n      }\n    }\n    return this;\n  },\n\n  addConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    (this as Mutable<typeof this>).conditionCount += 1;\n    if (!this.constrained && this.conditionCount === 1 && this.mounted) {\n      this.startConstraining();\n      this.updateConstraintVariable();\n    }\n  },\n\n  removeConstraintCondition(constraint: Constraint, solver: ConstraintSolver): void {\n    (this as Mutable<typeof this>).conditionCount -= 1;\n    if (!this.constrained && this.conditionCount === 0 && this.mounted) {\n      this.stopConstraining();\n    }\n  },\n\n  get constraining(): boolean {\n    return (this.flags & ConstraintAnimator.ConstrainingFlag) !== 0;\n  },\n\n  startConstraining(): void {\n    if ((this.flags & ConstraintAnimator.ConstrainingFlag) !== 0) {\n      return;\n    }\n    this.willStartConstraining();\n    this.setFlags(this.flags | ConstraintAnimator.ConstrainingFlag);\n    this.onStartConstraining();\n    this.didStartConstraining();\n  },\n\n  willStartConstraining(): void {\n    // hook\n  },\n\n  onStartConstraining(): void {\n    const constraintScope = this.owner;\n    if (ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.addConstraintVariable(this);\n    }\n  },\n\n  didStartConstraining(): void {\n    // hook\n  },\n\n  stopConstraining(): void {\n    if ((this.flags & ConstraintAnimator.ConstrainingFlag) === 0) {\n      return;\n    }\n    this.willStopConstraining();\n    this.setFlags(this.flags & ~ConstraintAnimator.ConstrainingFlag);\n    this.onStopConstraining();\n    this.didStopConstraining();\n  },\n\n  willStopConstraining(): void {\n    // hook\n  },\n\n  onStopConstraining(): void {\n    const constraintScope = this.owner;\n    if (ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.removeConstraintVariable(this);\n    }\n  },\n\n  didStopConstraining(): void {\n    // hook\n  },\n\n  updateConstraintVariable(): void {\n    const constraintScope = this.owner;\n    const value = this.value;\n    if (value !== void 0 && ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.setConstraintVariable(this, this.toNumber(value));\n    }\n  },\n\n  onSetValue(newValue: T, oldValue: T): void {\n    super.onSetValue(newValue, oldValue);\n    const constraintScope = this.owner;\n    if (this.constraining && ConstraintScope[Symbol.hasInstance](constraintScope)) {\n      constraintScope.setConstraintVariable(this, newValue !== void 0 && newValue !== null ? this.toNumber(newValue) : 0);\n    }\n  },\n\n  onMount(): void {\n    super.onMount();\n    if (!this.constrained && this.conditionCount !== 0) {\n      this.startConstraining();\n    }\n  },\n\n  onUnmount(): void {\n    if (!this.constrained && this.conditionCount !== 0) {\n      this.stopConstraining();\n    }\n    super.onUnmount();\n  },\n\n  toNumber(value: T): number {\n    return value !== void 0 && value !== null ? +value : 0;\n  },\n},\n{\n  construct(animator: A | null, owner: A extends Fastener<infer R, any, any> ? R : never): A {\n    animator = super.construct(animator, owner) as A;\n    (animator as Mutable<typeof animator>).strength = animator.initStrength();\n    (animator as Mutable<typeof animator>).conditionCount = 0;\n    return animator;\n  },\n\n  refine(animatorClass: FastenerClass<ConstraintAnimator<any, any, any>>): void {\n    super.refine(animatorClass);\n    const animatorPrototype = animatorClass.prototype;\n\n    let flagsInit = animatorPrototype.flagsInit;\n    if (Object.prototype.hasOwnProperty.call(animatorPrototype, \"constrained\")) {\n      if (animatorPrototype.constrained) {\n        flagsInit |= ConstraintAnimator.ConstrainedFlag;\n      } else {\n        flagsInit &= ~ConstraintAnimator.ConstrainedFlag;\n      }\n      delete (animatorPrototype as ConstraintAnimatorDescriptor<any, any>).constrained;\n    }\n    Object.defineProperty(animatorPrototype, \"flagsInit\", {\n      value: flagsInit,\n      enumerable: true,\n      configurable: true,\n    });\n\n    const strengthDescriptor = Object.getOwnPropertyDescriptor(animatorPrototype, \"strength\");\n    if (strengthDescriptor !== void 0 && \"value\" in strengthDescriptor) {\n      strengthDescriptor.value = ConstraintStrength.fromLike(strengthDescriptor.value);\n      Object.defineProperty(animatorPrototype, \"strength\", strengthDescriptor);\n    }\n  },\n\n  ConstrainedFlag: 1 << (Animator.FlagShift + 0),\n  ConstrainingFlag: 1 << (Animator.FlagShift + 1),\n\n  FlagShift: Animator.FlagShift + 2,\n  FlagMask: (1 << (Animator.FlagShift + 2)) - 1,\n}))();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintScope} from \"./ConstraintScope\";\n\n/** @public */\nexport type ConstraintRelation = \"le\" | \"eq\" | \"ge\";\n\n/** @public */\nexport type ConstraintStrengthLike = ConstraintStrength | ConstraintStrengthInit;\n\n/** @public */\nexport type ConstraintStrengthInit = \"required\" | \"strong\" | \"medium\" | \"weak\";\n\n/** @public */\nexport type ConstraintStrength = number;\n\n/** @public */\nexport const ConstraintStrength: {\n  readonly Required: ConstraintStrength;\n  readonly Strong: ConstraintStrength;\n  readonly Medium: ConstraintStrength;\n  readonly Weak: ConstraintStrength;\n  readonly Unbound: ConstraintStrength;\n\n  clip(strength: ConstraintStrength): ConstraintStrength;\n\n  fromLike<T extends ConstraintStrengthLike | null | undefined>(strength: T): ConstraintStrength | Uninitable<T>;\n} = {\n  Required: 1001001000,\n  Strong: 1000000,\n  Medium: 1000,\n  Weak: 1,\n  Unbound: -1,\n\n  clip(strength: ConstraintStrength): ConstraintStrength {\n    return Math.min(Math.max(0, strength), ConstraintStrength.Required);\n  },\n\n  fromLike<T extends ConstraintStrengthLike | null | undefined>(strength: T): ConstraintStrength | Uninitable<T> {\n    if (strength === void 0 || strength === null) {\n      return strength as ConstraintStrength | Uninitable<T>;\n    } else if (typeof strength === \"number\") {\n      return ConstraintStrength.clip(strength);\n    } else if (strength === \"required\") {\n      return ConstraintStrength.Required;\n    } else if (strength === \"strong\") {\n      return ConstraintStrength.Strong;\n    } else if (strength === \"medium\") {\n      return ConstraintStrength.Medium;\n    } else if (strength === \"weak\") {\n      return ConstraintStrength.Weak;\n    }\n    throw new TypeError(\"\" + strength);\n  },\n};\n\n/** @public */\nexport class Constraint implements Debug {\n  constructor(scope: ConstraintScope, expression: ConstraintExpression,\n              relation: ConstraintRelation, strength: ConstraintStrength) {\n    this.scope = scope;\n    this.expression = expression;\n    this.relation = relation;\n    this.strength = strength;\n  }\n\n  readonly scope: ConstraintScope;\n\n  readonly expression: ConstraintExpression;\n\n  readonly relation: ConstraintRelation;\n\n  readonly strength: ConstraintStrength;\n\n  isConstrained(): boolean {\n    return this.scope.hasConstraint(this);\n  }\n\n  constrain(constrained: boolean = true): this {\n    if (constrained) {\n      this.scope.addConstraint(this);\n    } else {\n      this.scope.removeConstraint(this);\n    }\n    return this;\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.scope).write(46/*'.'*/).write(\"constraint\").write(40/*'('*/)\n                   .debug(this.expression).write(\", \").debug(this.relation).write(\", \")\n                   .debug(void 0).write(\", \");\n    if (this.strength === ConstraintStrength.Required) {\n      output = output.debug(\"required\");\n    } else if (this.strength === ConstraintStrength.Strong) {\n      output = output.debug(\"strong\");\n    } else if (this.strength === ConstraintStrength.Medium) {\n      output = output.debug(\"medium\");\n    } else if (this.strength === ConstraintStrength.Weak) {\n      output = output.debug(\"weak\");\n    } else {\n      output = output.debug(this.strength);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Objects} from \"@swim/util\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport type {ConstraintProperty} from \"./ConstraintProperty\";\nimport type {ConstraintRelation} from \"./Constraint\";\nimport type {ConstraintStrengthLike} from \"./Constraint\";\nimport type {Constraint} from \"./Constraint\";\n\n/** @public */\nexport interface ConstraintScope {\n  constraint(lhs: ConstraintExpressionLike, relation: ConstraintRelation,\n             rhs?: ConstraintExpressionLike, strength?: ConstraintStrengthLike): Constraint;\n\n  hasConstraint(constraint: Constraint): boolean;\n\n  addConstraint(constraint: Constraint): void;\n\n  removeConstraint(constraint: Constraint): void;\n\n  constraintVariable(name: string, value?: number, strength?: ConstraintStrengthLike): ConstraintProperty<unknown, number>;\n\n  hasConstraintVariable(variable: ConstraintVariable): boolean;\n\n  addConstraintVariable(variable: ConstraintVariable): void;\n\n  removeConstraintVariable(variable: ConstraintVariable): void;\n\n  setConstraintVariable(variable: ConstraintVariable, state: number): void;\n}\n\n/** @public */\nexport const ConstraintScope = {\n  [Symbol.hasInstance](instance: unknown): instance is ConstraintScope {\n    return Objects.hasAllKeys<ConstraintScope>(instance, \"constraint\", \"constraintVariable\");\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Objects} from \"@swim/util\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport type {Constraint} from \"./Constraint\";\n\n/** @public */\nexport interface ConstraintContext {\n  activateConstraint(constraint: Constraint): void;\n\n  deactivateConstraint(constraint: Constraint): void;\n\n  activateConstraintVariable(variable: ConstraintVariable): void;\n\n  deactivateConstraintVariable(variable: ConstraintVariable): void;\n\n  setConstraintVariable(variable: ConstraintVariable, state: number): void;\n}\n\n/** @public */\nexport const ConstraintContext = {\n  [Symbol.hasInstance](instance: unknown): instance is ConstraintContext {\n    return Objects.hasAllKeys<ConstraintContext>(instance, \"activateConstraint\", \"deactivateConstraint\", \"activateConstraintVariable\", \"deactivateConstraintVariable\", \"setConstraintVariable\");\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Equivalent} from \"@swim/util\";\nimport type {ConstraintSymbol} from \"./ConstraintSymbol\";\nimport {ConstraintDummy} from \"./ConstraintSymbol\";\nimport type {ConstraintSolver} from \"./ConstraintSolver\";\n\n/** @internal */\nexport class ConstraintRow {\n  constructor(solver: ConstraintSolver, symbol: ConstraintSymbol | null,\n              cells: Map<ConstraintSymbol, number>, constant: number) {\n    this.solver = solver;\n    this.symbol = symbol;\n    this.cells = cells;\n    this.constant = constant;\n  }\n\n  readonly solver: ConstraintSolver;\n\n  symbol: ConstraintSymbol | null;\n\n  /** @internal */\n  setSymbol(symbol: ConstraintSymbol | null): void {\n    this.symbol = symbol;\n    this.invalidate();\n  }\n\n  readonly cells: Map<ConstraintSymbol, number>;\n\n  constant: number;\n\n  /** @internal */\n  setConstant(constant: number): void {\n    if (this.constant === constant) {\n      return;\n    }\n    this.constant = constant;\n    this.invalidate();\n  }\n\n  isConstant(): boolean {\n    return this.cells.size === 0;\n  }\n\n  isDummy(): boolean {\n    for (const symbol of this.cells.keys()) {\n      if (!(symbol instanceof ConstraintDummy)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  clone(): ConstraintRow {\n    return new ConstraintRow(this.solver, this.symbol, new Map(this.cells), this.constant);\n  }\n\n  add(value: number): number {\n    const sum = this.constant + value;\n    this.setConstant(sum);\n    return sum;\n  }\n\n  insertSymbol(symbol: ConstraintSymbol, coefficient: number = 1): void {\n    coefficient += this.cells.get(symbol) ?? 0;\n    if (Math.abs(coefficient) < Equivalent.Epsilon) {\n      this.cells.delete(symbol);\n    } else {\n      this.cells.set(symbol, coefficient);\n    }\n  }\n\n  insertRow(that: ConstraintRow, coefficient: number): void {\n    this.setConstant(this.constant + that.constant * coefficient);\n    for (const [symbol, value] of that.cells) {\n      this.insertSymbol(symbol, value * coefficient);\n    }\n  }\n\n  removeSymbol(symbol: ConstraintSymbol): void {\n    this.cells.delete(symbol);\n  }\n\n  negate(): void {\n    this.setConstant(-this.constant);\n    for (const [symbol, value] of this.cells) {\n      this.cells.set(symbol, -value);\n    }\n  }\n\n  solveFor(symbol: ConstraintSymbol): void {\n    const value = this.cells.get(symbol);\n    if (value === void 0) {\n      return;\n    }\n    this.cells.delete(symbol);\n    const coefficient = -1 / value;\n    this.setConstant(this.constant * coefficient);\n    for (const [symbol, value] of this.cells) {\n      this.cells.set(symbol, value * coefficient);\n    }\n  }\n\n  solveForEx(lhs: ConstraintSymbol, rhs: ConstraintSymbol): void {\n    this.insertSymbol(lhs, -1.0);\n    this.solveFor(rhs);\n  }\n\n  coefficientFor(symbol: ConstraintSymbol): number {\n    const value = this.cells.get(symbol);\n    return value !== void 0 ? value : 0;\n  }\n\n  substitute(symbol: ConstraintSymbol, row: ConstraintRow): void {\n    const value = this.cells.get(symbol);\n    if (value !== void 0) {\n      this.cells.delete(symbol);\n      this.insertRow(row, value);\n    }\n  }\n\n  invalidate(): void {\n    const symbol = this.symbol;\n    if (symbol !== null) {\n      this.solver.invalidate(symbol, this);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Cursor} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {Field} from \"./Field\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./\"; // forward import\nimport {Record} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport type {NumLike} from \"./Num\";\nimport {Bool} from \"./\"; // forward import\nimport {Extant} from \"./\"; // forward import\nimport {Absent} from \"./\"; // forward import\nimport {Selector} from \"./\"; // forward import\nimport {MathModule} from \"./\"; // forward import\nimport type {InterpreterLike} from \"./interpreter/Interpreter\";\nimport type {Form} from \"./form/Form\";\n\n/** @public */\nexport type ItemLike = Item\n                     | {readonly $key: ValueLike, readonly $value: ValueLike}\n                     | {readonly [key: string]: ValueLike}\n                     | readonly ItemLike[]\n                     | Uint8Array\n                     | string\n                     | number\n                     | boolean\n                     | null\n                     | undefined;\n\n/** @public */\nexport abstract class Item implements Interpolate<Item>, HashCode, Equivalent, Compare, Debug, Display {\n  /** @internal */\n  constructor() {\n    // nop\n  }\n\n  likeType?(like: {readonly $key: ValueLike, readonly $value: ValueLike}\n                | {readonly [key: string]: ValueLike}\n                | readonly ItemLike[]\n                | Uint8Array\n                | string\n                | number\n                | boolean\n                | null\n                | undefined): void;\n\n  /**\n   * Returns `true` if this `Item` is not [[Absent]].\n   */\n  abstract isDefined(): boolean;\n\n  /**\n   * Returns `true` if this `Item` is neither [[Extant]] nor [[Absent]].\n   */\n  abstract isDistinct(): boolean;\n\n  /**\n   * Returns `true` if this `Item` is not one of: an empty `Record`, `False`,\n   * `Extant`, or `Absent`.\n   */\n  abstract isDefinite(): boolean;\n\n  /**\n   * Returns `true` if this `Item` always [[Item.evaluate evaluates]] to the\n   * same `Item`.\n   */\n  abstract isConstant(): boolean;\n\n  /**\n   * Returns the key component of this `Item`, if this `Item` is a [[Field]];\n   * otherwise returns [[Absent]] if this `Item` is a `Value`.\n   */\n  abstract readonly key: Value;\n\n  /**\n   * Returns the value component of this `Item`, if this `Item` is a [[Field]];\n   * otherwise returns `this` if this `Item` is a `Value`.\n   */\n  abstract toValue(): Value;\n\n  /**\n   * Returns the `key` string of the first member of this `Item`, if this `Item`\n   * is a [[Record]], and its first member is an [[Attr]]; otherwise returns\n   * `undefined` if this `Item` is not a `Record`, or if this `Item` is a\n   * `Record` whose first member is not an `Attr`.\n   *\n   * Used to concisely get the name of the discriminating attribute of a\n   * structure. The `tag` can be used to discern the nominal type of a\n   * polymorphic structure, similar to an XML element tag.\n   */\n  abstract readonly tag: string | undefined;\n\n  /**\n   * Returns the [[Item.flattened flattened]] members of this `Item` after all\n   * attributes have been removed, if this `Item` is a [[Record]]; otherwise\n   * returns `this` if this `Item` is a non-`Record` `Value`, or returns\n   * the value component if this `Item` is a `Field`.\n   *\n   * Used to concisely get the scalar value of an attributed structure. An\n   * attributed structure is a `Record` with one or more attributes that modify\n   * one or more other members.\n   */\n  abstract readonly target: Value;\n\n  /**\n   * Returns the sole member of this `Item`, if this `Item` is a [[Record]]\n   * with exactly one member, and its member is a `Value`; returns [[Extant]]\n   * if this `Item` is an empty `Record`; returns [[Absent]] if this `Item` is\n   * a `Field`; otherwise returns `this` if this `Item` is a `Record` with more\n   * than one member, or if this `Item` is a non-`Record` `Value`.\n   *\n   * Used to convert a unary `Record` into its member `Value`. Facilitates\n   * writing code that treats a unary `Record` equivalently to a bare `Value`.\n   */\n  abstract flattened(): Value;\n\n  /**\n   * Returns `this` if this `Item` is a [[Record]]; returns a `Record`\n   * containing just this `Item`, if this `Item` is [[Item.isDistinct\n   * distinct]]; otherwise returns an empty `Record` if this `Item` is\n   * [[Extant]] or [[Absent]]. Facilitates writing code that treats a bare\n   * `Value` equivalently to a unary `Record`.\n   */\n  abstract unflattened(): Record;\n\n  /**\n   * Returns the value of the first member of this `Item`, if this `Item` is a\n   * [[Record]], and its first member is an [[Attr]] whose `key` string is\n   * equal to `tag`; otherwise returns [[Absent]] if this `Item` is not a\n   * `Record`, or if this `Item` is a `Record` whose first member is not an\n   * `Attr`, or if this `Item` is a `Record` whose first member is an `Attr`\n   * whose `key` does not equal the `tag`.\n   *\n   * Used to conditionally get the value of the head `Attr` of a structure, if\n   * and only if the key string of the head `Attr` is equal to the `tag`. Can\n   * be used to check if a structure might conform to a nominal type named\n   * `tag`, while simultaneously getting the value of the `tag` attribute.\n   */\n  abstract header(tag: string): Value;\n\n  /**\n   * Returns the [[Item.unflattened unflattened]] [[Item.header header]] of\n   * this `Item`, if this `Item` is a [[Record]], and its first member is an\n   * [[Attr]] whose `key` string is equal to `tag`; otherwise returns\n   * `undefined`.\n   *\n   * The `headers` of the `tag` attribute of a structure are like the\n   * attributes of an XML element tag; through unlike an XML element, `tag`\n   * attribute headers are not limited to string keys and values.\n   */\n  abstract headers(tag: string): Record | undefined;\n\n  /**\n   * Returns the first member of this `Item`, if this `Item` is a non-empty\n   * [[Record]]; otherwise returns [[Absent]].\n   */\n  abstract head(): Item;\n\n  /**\n   * Returns a view of all but the first member of this `Item`, if this `Item`\n   * is a non-empty [[Record]]; otherwise returns an empty `Record` if this\n   * `Item` is not a `Record`, or if this `Item` is itself an empty `Record`.\n   */\n  abstract tail(): Record;\n\n  /**\n   * Returns the [[Record.flattened flattened]] [[Item.tail tail]] of this\n   * `Item`. Used to recursively deconstruct a structure, terminating with its\n   * last `Value`, rather than a unary `Record` containing its last value, if\n   * the structure ends with a `Value` member.\n   */\n  abstract body(): Value;\n\n  /**\n   * Returns the number of members contained in this `Item`, if this `Item` is\n   * a [[Record]]; otherwise returns `0` if this `Item` is not a `Record`.\n   */\n  abstract readonly length: number;\n\n  /**\n   * Returns `true` if this `Item` is a [[Record]] that has a [[Field]] member\n   * with a key that is equal to the given `key`; otherwise returns `false` if\n   * this `Item` is not a `Record`, or if this `Item` is a `Record`, but has no\n   * `Field` member with a key equal to the given `key`.\n   */\n  abstract has(key: ValueLike): boolean;\n\n  /**\n   * Returns the value of the last [[Field]] member of this `Item` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Item` is not a\n   * [[Record]], or if this `Item` is a `Record`, but has no `Field` member\n   * with a key equal to the given `key`.\n   */\n  abstract get(key: ValueLike): Value;\n\n  /**\n   * Returns the value of the last [[Attr]] member of this `Item` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Item` is not a\n   * [[Record]], or if this `Item` is a `Record`, but has no `Attr` member\n   * with a key equal to the given `key`.\n   */\n  abstract getAttr(key: TextLike): Value;\n\n  /**\n   * Returns the value of the last [[Slot]] member of this `Item` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Item` is not a\n   * [[Record]], or if this `Item` is a `Record`, but has no `Slot` member\n   * with a key equal to the given `key`.\n   */\n  abstract getSlot(key: ValueLike): Value;\n\n  /**\n   * Returns the last [[Field]] member of this `Item` whose key is equal to the\n   * given `key`; returns `undefined` if this `Item` is not a [[Record]], or if\n   * this `Item` is a `Record`, but has no `Field` member with a `key` equal to\n   * the given `key`.\n   */\n  abstract getField(key: ValueLike): Field | undefined;\n\n  /**\n   * Returns the member of this `Item` at the given `index`, if this `Item` is\n   * a [[Record]], and the `index` is greater than or equal to zero, and less\n   * than the [[Record.length length]] of the `Record`; otherwise returns\n   * [[Absent]] if this `Item` is not a `Record`, or if this `Item` is a\n   * `Record`, but the `index` is out of bounds.\n   */\n  abstract getItem(index: NumLike): Item;\n\n  updated(key: ValueLike, value: ValueLike): Record {\n    const record = Record.create(2);\n    record.push(this);\n    record.set(key, value);\n    return record;\n  }\n\n  updatedAttr(key: TextLike, value: ValueLike): Record {\n    const record = Record.create(2);\n    record.push(this);\n    record.setAttr(key, value);\n    return record;\n  }\n\n  updatedSlot(key: ValueLike, value: ValueLike): Record {\n    const record = Record.create(2);\n    record.push(this);\n    record.setSlot(key, value);\n    return record;\n  }\n\n  appended(...items: ItemLike[]): Record {\n    const record = Record.create(1 + arguments.length);\n    record.push(this);\n    record.push(...items);\n    return record;\n  }\n\n  prepended(...items: ItemLike[]): Record {\n    const record = Record.create(arguments.length + 1);\n    record.push(...items);\n    record.push(this);\n    return record;\n  }\n\n  abstract deleted(key: ValueLike): Item;\n\n  concat(...items: ItemLike[]): Record {\n    const record = Record.create();\n    record.push(this);\n    for (let i = 0; i < items.length; i += 1) {\n      Item.fromLike(items[i]).forEach(function (item: Item): void {\n        record.push(item);\n      });\n    }\n    return record;\n  }\n\n  abstract conditional(thenTerm: Item, elseTerm: Item): Item;\n\n  abstract or(that: Item): Item;\n\n  abstract and(that: Item): Item;\n\n  abstract bitwiseOr(that: ItemLike): Item;\n\n  abstract bitwiseXor(that: ItemLike): Item;\n\n  abstract bitwiseAnd(that: ItemLike): Item;\n\n  lt(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return this.compareTo(that) < 0 ? Bool.from(true) : Item.absent();\n  }\n\n  le(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return this.compareTo(that) <= 0 ? Bool.from(true) : Item.absent();\n  }\n\n  eq(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return this.equals(that) ? Bool.from(true) : Item.absent();\n  }\n\n  ne(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return !this.equals(that) ? Bool.from(true) : Item.absent();\n  }\n\n  ge(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return this.compareTo(that) >= 0 ? Bool.from(true) : Item.absent();\n  }\n\n  gt(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return this.compareTo(that) > 0 ? Bool.from(true) : Item.absent();\n  }\n\n  abstract plus(that: ItemLike): Item;\n\n  abstract minus(that: ItemLike): Item;\n\n  abstract times(that: ItemLike): Item;\n\n  abstract divide(that: ItemLike): Item;\n\n  abstract modulo(that: ItemLike): Item;\n\n  abstract not(): Item;\n\n  abstract bitwiseNot(): Item;\n\n  abstract negative(): Item;\n\n  abstract positive(): Item;\n\n  abstract inverse(): Item;\n\n  invoke(args: Value): Item {\n    return Item.absent();\n  }\n\n  abstract lambda(template: Value): Value;\n\n  filter(predicate?: ItemLike): Selector {\n    const selector = Selector.literal(this);\n    if (arguments.length === 0) {\n      return selector.filter();\n    } else {\n      return selector.filter(predicate);\n    }\n  }\n\n  max(that: Item): Item {\n    return this.compareTo(that) >= 0 ? this : that;\n  }\n\n  min(that: Item): Item {\n    return this.compareTo(that) <= 0 ? this : that;\n  }\n\n  evaluate(interpreter: InterpreterLike): Item {\n    return this;\n  }\n\n  substitute(interpreter: InterpreterLike): Item {\n    return this;\n  }\n\n  /**\n   * Converts this `Item` into a `string` value, if possible; otherwise returns\n   * `undefined` if this `Item` can't be converted into a `string` value.\n   */\n  abstract stringValue(): string | undefined;\n\n  /**\n   * Converts this `Item` into a `string` value, if possible; otherwise returns\n   * `orElse` if this `Item` can't be converted into a `string` value.\n   */\n  abstract stringValue<T>(orElse: T): string | T;\n\n  /**\n   * Converts this `Item` into a `number` value, if possible; otherwise returns\n   * `undefined` if this `Item` can't be converted into a `number` value.\n   */\n  abstract numberValue(): number | undefined;\n\n  /**\n   * Converts this `Item` into a `number` value, if possible; otherwise returns\n   * `orElse` if this `Item` can't be converted into a `number` value.\n   */\n  abstract numberValue<T>(orElse: T): number | T;\n\n  /**\n   * Converts this `Item` into a `boolean` value, if possible; otherwise returns\n   * `undefined` if this `Item` can't be converted into a `boolean` value.\n   */\n  abstract booleanValue(): boolean | undefined;\n\n  /**\n   * Converts this `Item` into a `boolean` value, if possible; otherwise returns\n   * `orElse` if this `Item` can't be converted into a `boolean` value.\n   */\n  abstract booleanValue<T>(orElse: T): boolean | T;\n\n  cast<T>(form: Form<T, unknown>): T | undefined;\n\n  cast<T, E = T>(form: Form<T, unknown>, orElse: E): T | E;\n\n  cast<T, E = T>(form: Form<T, unknown>, orElse?: E): T | E | undefined {\n    let object: T | E | undefined = form.cast(this);\n    if (object === void 0) {\n      object = orElse;\n    }\n    return object;\n  }\n\n  coerce<T>(form: Form<T, unknown>): T;\n\n  coerce<T, E = T>(form: Form<T, unknown>, orElse: E): T | E;\n\n  coerce<T, E = T>(form: Form<T, unknown>, orElse?: E): T | E {\n    let object: T | E | undefined = form.cast(this);\n    if (object === void 0) {\n      object = form.unit;\n    }\n    if (object === void 0) {\n      object = orElse;\n    }\n    return object!;\n  }\n\n  abstract toLike(): ItemLike;\n\n  abstract isAliased(): boolean;\n\n  abstract isMutable(): boolean;\n\n  abstract alias(): void;\n\n  abstract branch(): Item;\n\n  abstract clone(): Item;\n\n  abstract commit(): this;\n\n  /** @internal */\n  get precedence(): number {\n    return 11;\n  }\n\n  forEach<T>(callback: (item: Item, index: number) => T | void): T | undefined;\n  forEach<T, S>(callback: (this: S, item: Item, index: number) => T | void, thisArg: S): T | undefined;\n  forEach<T, S>(callback: (this: S | undefined, item: Item, index: number) => T | undefined, thisArg?: S): T | undefined {\n    return callback.call(thisArg, this, 0);\n  }\n\n  iterator(): Cursor<Item> {\n    return Cursor.unary(this);\n  }\n\n  [Symbol.iterator](): Cursor<Item> {\n    return this.iterator();\n  }\n\n  /** @override */\n  interpolateTo(that: Item): Interpolator<Item>;\n  interpolateTo(that: unknown): Interpolator<Item> | null;\n  interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Item) {\n      return ItemInterpolator(this, that);\n    }\n    return null;\n  }\n\n  /**\n   * Returns the heterogeneous sort order of this `Item`. Used to impose a\n   * total order on the set of all items. When comparing two items of\n   * different types, the items order according to their `typeOrder`.\n   */\n  abstract readonly typeOrder: number;\n\n  /** @override */\n  abstract compareTo(that: unknown): number;\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  abstract keyEquals(key: unknown): boolean;\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  /** @override */\n  abstract hashCode(): number;\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    return this.debug(output);\n  }\n\n  /** @override */\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  static empty(): Item {\n    return Record.empty();\n  }\n\n  static extant(): Item {\n    return Extant.extant();\n  }\n\n  static absent(): Item {\n    return Absent.absent();\n  }\n\n  static fromLike(item: ItemLike): Item {\n    if (item instanceof Item) {\n      return item;\n    }\n    return Value.fromLike(item);\n  }\n\n  @Lazy\n  static globalScope(): Item {\n    return Record.create(1)\n        .slot(\"math\", MathModule.scope)\n        .commit();\n  }\n}\n\n/** @internal */\nexport const ItemInterpolator = (function (_super: typeof Interpolator) {\n  const ItemInterpolator = function <Y extends Item>(y0: Y, y1: Y): Interpolator<Y> {\n    const interpolator = function (u: number): Y {\n      return u < 1 ? interpolator[0] : interpolator[1];\n    } as Interpolator<Y>;\n    Object.setPrototypeOf(interpolator, ItemInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0.commit();\n    (interpolator as Mutable<typeof interpolator>)[1] = y1.commit();\n    return interpolator;\n  } as {\n    <Y extends Item>(y0: Y, y1: Y): Interpolator<Y>;\n\n    /** @internal */\n    prototype: Interpolator<any>;\n  };\n\n  ItemInterpolator.prototype = Object.create(_super.prototype);\n  ItemInterpolator.prototype.constructor = ItemInterpolator;\n\n  return ItemInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Attr} from \"./\"; // forward import\nimport {Slot} from \"./\"; // forward import\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./\"; // forward import\nimport {Record} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport {Text} from \"./\"; // forward import\nimport type {NumLike} from \"./Num\";\n\n/** @public */\nexport type FieldLike = Field\n                      | {readonly $key: ValueLike, readonly $value: ValueLike}\n                      | {[key: string]: ValueLike};\n\n/** @public */\nexport abstract class Field extends Item {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override likeType?(like: {readonly $key: ValueLike, readonly $value: ValueLike}\n                         | {[key: string]: ValueLike}): void;\n\n  /**\n   * Always returns `true` because a `Field` can never be [[Absent]].\n   */\n  override isDefined(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns `true` because a `Field` can be neither [[Extant]] nor\n   * [[Absent]].\n   */\n  override isDistinct(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns `true` because a `Field` cannot be one of:\n   * an empty `Record`, `False`, `Extant`, or `Absent`.\n   */\n  override isDefinite(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns the key component of this `Field`.\n   */\n  abstract override readonly key: Value;\n\n  /**\n   * Returns the value component of this `Field`.\n   */\n  abstract readonly value: Value;\n\n  /**\n   * Sets the value of this `Field` to the new `value`, returning the old value.\n   *\n   * @throws `Error` if this `Field` is immutable.\n   */\n  abstract setValue(value: ValueLike): Value;\n\n  /**\n   * Returns a copy of this `Field` with the updated `value`.\n   */\n  abstract updatedValue(value: ValueLike): Field;\n\n  /**\n   * Returns the value component of this `Field`.\n   */\n  override toValue(): Value {\n    return this.value;\n  }\n\n  /**\n   * Always returns `undefined` because a `Field` can't be a `Record`, so it\n   * can't have a first member `Attr` whose key string could be returned.\n   */\n  override get tag(): string | undefined {\n    return void 0;\n  }\n\n  /**\n   * Always returns the value component of this `Field`.\n   */\n  override get target(): Value {\n    return this.value;\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be flattened into a\n   * `Value`.\n   */\n  override flattened(): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Returns a `Record` containing just this `Field`.\n   */\n  override unflattened(): Record {\n    return Record.of(this);\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have a head `Attr` whose value could be returned if its key were\n   * equal to the `tag`.\n   */\n  override header(tag: string): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns `undefined` because a `Field` can't be a `Record`, so it\n   * can't have a head `Attr` whose value could be returned as a `Record` if\n   * its key were equal to the `tag`.\n   */\n  override headers(tag: string): Record | undefined {\n    return void 0;\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have a first member.\n   */\n  override head(): Item {\n    return Item.absent();\n  }\n\n  /**\n   * Always returns an empty `Record` because a `Field` can't itself be a\n   * `Record`, so it can't have any non-first members.\n   */\n  override tail(): Record {\n    return Record.empty();\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have any non-first members to flatten, and because a `Field` isn't\n   * a distinct `Value`, so it can't return `Extant`.\n   */\n  override body(): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns `0` because a `Field` can't be a `Record`, so it can't\n   * contain any members.\n   */\n  override get length(): number {\n    return 0;\n  }\n\n  /**\n   * Always returns `false` because a `Field` can't be a `Record`, so it can't\n   * have a `Field` member whose key is equal to the given `key`.\n   */\n  override has(key: ValueLike): boolean {\n    return false;\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have a `Field` member whose key is equal to the given `key`.\n   */\n  override get(key: ValueLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have an `Attr` member whose key is equal to the given `key`.\n   */\n  override getAttr(key: TextLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have a `Slot` member whose key is equal to the given `key`.\n   */\n  override getSlot(key: ValueLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns `undefined` because a `Field` can't be a `Record`, so it\n   * can't have a `Field` member whose key is equal to the given `key`.\n   */\n  override getField(key: ValueLike): Field | undefined {\n    return void 0;\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Field` can't be a `Record`, so it\n   * can't have a member at the given `index`.\n   */\n  override getItem(index: NumLike): Item {\n    return Item.absent();\n  }\n\n  override deleted(key: ValueLike): Field {\n    return this;\n  }\n\n  override conditional(thenTerm: Field, elseTerm: Field): Field;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item {\n    thenTerm = Item.fromLike(thenTerm);\n    return thenTerm;\n  }\n\n  override or(that: Field): Field;\n  override or(that: ItemLike): Item;\n  override or(that: ItemLike): Item {\n    return this;\n  }\n\n  override and(that: Field): Field;\n  override and(that: ItemLike): Item;\n  override and(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return that;\n  }\n\n  override lambda(template: Value): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Converts the value of this `Field` into a `string` value, if possible.\n   *\n   * @throws `Error` if the value of this `Field` can't be converted into a\n   *         `string` value.\n   */\n  override stringValue(): string | undefined;\n  /**\n   * Converts the value of this `Field` into a `string` value, if possible;\n   * otherwise returns `orElse` if the value of this `Field` can't be converted\n   * into a `string` value.\n   */\n  override stringValue<T>(orElse: T): string | T;\n  override stringValue<T>(orElse?: T): string | T | undefined {\n    return this.value.stringValue(orElse);\n  }\n\n  /**\n   * Converts the value of this `Field` into a `number` value, if possible.\n   *\n   * @throws `Error` if the value of this `Field` can't be converted into a\n   *         `number` value.\n   */\n  override numberValue(): number | undefined;\n  /**\n   * Converts the value of this `Field` into a `number` value, if possible;\n   * otherwise returns `orElse` if the value of this `Field` can't be converted\n   * into a `number` value.\n   */\n  override numberValue<T>(orElse: T): number | T;\n  override numberValue<T>(orElse?: T): number | T | undefined {\n    return this.value.numberValue(orElse);\n  }\n\n  /**\n   * Converts the value of this `Field` into a `boolean` value, if possible.\n   *\n   * @throws `Error` if the value of this `Field` can't be converted into a\n   *         `boolean` value.\n   */\n  override booleanValue(): boolean | undefined;\n  /**\n   * Converts the value of this `Field` into a `boolean` value, if possible;\n   * otherwise returns `orElse` if the value of this `Field` can't be converted\n   * into a `boolean` value.\n   */\n  override booleanValue<T>(orElse: T): boolean | T;\n  override booleanValue<T>(orElse?: T): boolean | T | undefined {\n    return this.value.booleanValue(orElse);\n  }\n\n  abstract override toLike(): FieldLike;\n\n  abstract override branch(): Field;\n\n  abstract override clone(): Field;\n\n  abstract override commit(): this;\n\n  override interpolateTo(that: Field): Interpolator<Field>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Field) {\n      return FieldInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  /** @internal */\n  static readonly ImmutableFlag: number = 1 << 0;\n\n  static of(key: ValueLike, value?: ValueLike): Field {\n    let name: string | undefined;\n    if (typeof key === \"string\") {\n      name = key;\n    } else if (key instanceof Text) {\n      name = key.value;\n    }\n    if (name !== void 0 && name.charCodeAt(0) === 64/*'@'*/) {\n      name = name.slice(1);\n      if (arguments.length === 1) {\n        return Attr.of(name);\n      } else {\n        return Attr.of(name, value);\n      }\n    } else if (arguments.length === 1) {\n      return Slot.of(key);\n    } else {\n      return Slot.of(key, value);\n    }\n  }\n\n  static override fromLike(field: FieldLike): Field {\n    if (field instanceof Field) {\n      return field;\n    } else if (typeof field === \"object\" && field !== null) {\n      if ((field as any).$key !== void 0) {\n        return Field.of((field as any).$key, (field as any).$value);\n      } else {\n        for (const key in field) {\n          return Field.of(key, (field as any)[key]);\n        }\n      }\n    }\n    throw new TypeError(\"\" + field);\n  }\n}\n\n/** @internal */\nexport interface FieldInterpolator extends Interpolator<Field> {\n  /** @internal */\n  readonly keyInterpolator: Interpolator<Value>;\n  /** @internal */\n  readonly valueInterpolator: Interpolator<Value>;\n\n  readonly 0: Field;\n\n  readonly 1: Field;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const FieldInterpolator = (function (_super: typeof Interpolator) {\n  const FieldInterpolator = function (y0: Field, y1: Field): FieldInterpolator {\n    const interpolator = function (u: number): Field {\n      const key = interpolator.keyInterpolator(u);\n      const value = interpolator.valueInterpolator(u);\n      return Slot.of(key, value);\n    } as FieldInterpolator;\n    Object.setPrototypeOf(interpolator, FieldInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).keyInterpolator = y0.key.interpolateTo(y1.key);\n    (interpolator as Mutable<typeof interpolator>).valueInterpolator = y0.value.interpolateTo(y1.value);\n    return interpolator;\n  } as {\n    (y0: Field, y1: Field): FieldInterpolator;\n\n    /** @internal */\n    prototype: FieldInterpolator;\n  };\n\n  FieldInterpolator.prototype = Object.create(_super.prototype);\n  FieldInterpolator.prototype.constructor = FieldInterpolator;\n\n  Object.defineProperty(FieldInterpolator.prototype, 0, {\n    get(this: FieldInterpolator): Field {\n      return Slot.of(this.keyInterpolator[0], this.valueInterpolator[0]);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(FieldInterpolator.prototype, 1, {\n    get(this: FieldInterpolator): Field {\n      return Slot.of(this.keyInterpolator[1], this.valueInterpolator[1]);\n    },\n    configurable: true,\n  });\n\n  FieldInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof FieldInterpolator) {\n      return this.keyInterpolator.equals(that.keyInterpolator)\n          && this.valueInterpolator.equals(that.valueInterpolator);\n    }\n    return false;\n  };\n\n  return FieldInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {FieldLike} from \"./Field\";\nimport {Field} from \"./Field\";\nimport {Slot} from \"./\"; // forward import\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport {Text} from \"./\"; // forward import\nimport {Extant} from \"./\"; // forward import\nimport {Expression} from \"./\"; // forward import\nimport {BitwiseOrOperator} from \"./\"; // forward import\nimport {BitwiseXorOperator} from \"./\"; // forward import\nimport {BitwiseAndOperator} from \"./\"; // forward import\nimport {PlusOperator} from \"./\"; // forward import\nimport {MinusOperator} from \"./\"; // forward import\nimport {TimesOperator} from \"./\"; // forward import\nimport {DivideOperator} from \"./\"; // forward import\nimport {ModuloOperator} from \"./\"; // forward import\nimport type {InterpreterLike} from \"./interpreter/Interpreter\";\nimport {Interpreter} from \"./\"; // forward import\n\n/** @public */\nexport class Attr extends Field {\n  constructor(key: Text, value: Value, flags?: number) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.flags = flags !== void 0 ? flags : 0;\n  }\n\n  override isConstant(): boolean {\n    return this.key.isConstant() && this.value.isConstant();\n  }\n\n  get name(): string {\n    return this.key.value;\n  }\n\n  override readonly key: Text;\n\n  override readonly value: Value;\n\n  /** @internal */\n  readonly flags: number;\n\n  override setValue(newValue: Value): Value {\n    if ((this.flags & Field.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    const oldValue = this.value;\n    (this as Mutable<this>).value = newValue;\n    return oldValue;\n  }\n\n  override updatedValue(value: Value): Attr {\n    return new Attr(this.key, value);\n  }\n\n  override bitwiseOr(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseOrOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseOr(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseOr(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseXor(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseXorOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseXor(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseXor(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseAnd(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseAndOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseAnd(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseAnd(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override plus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new PlusOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.plus(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.plus(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override minus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new MinusOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.minus(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.minus(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override times(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new TimesOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.times(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.times(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override divide(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new DivideOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.divide(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.divide(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override modulo(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new ModuloOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Attr && this.key.equals(that.key)) {\n      newValue = this.value.modulo(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.modulo(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override not(): Item {\n    const newValue = this.value.not();\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseNot(): Item {\n    const newValue = this.value.bitwiseNot();\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override negative(): Item {\n    const newValue = this.value.negative();\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override positive(): Item {\n    const newValue = this.value.positive();\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override inverse(): Item {\n    const newValue = this.value.inverse();\n    if (newValue.isDefined()) {\n      return new Attr(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const key = this.key.evaluate(interpreter).toValue();\n    const value = this.value.evaluate(interpreter).toValue();\n    if (key === this.key && value === this.value) {\n      return this;\n    } else if (key.isDefined() && value.isDefined()) {\n      if (key instanceof Text) {\n        return new Attr(key, value);\n      } else {\n        return new Slot(key, value);\n      }\n    }\n    return Item.absent();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const key = this.key.substitute(interpreter).toValue();\n    const value = this.value.substitute(interpreter).toValue();\n    if (key === this.key && value === this.value) {\n      return this;\n    } else if (key.isDefined() && value.isDefined()) {\n      if (key instanceof Text) {\n        return new Attr(key, value);\n      } else {\n        return new Slot(key, value);\n      }\n    }\n    return Item.absent();\n  }\n\n  override toLike(): FieldLike {\n    const field = {} as {[key: string]: ValueLike};\n    field[\"@\" + this.key.value] = this.value.toLike();\n    return field;\n  }\n\n  override isAliased(): boolean {\n    return false;\n  }\n\n  override isMutable(): boolean {\n    return (this.flags & Field.ImmutableFlag) === 0;\n  }\n\n  override alias(): void {\n    (this as Mutable<this>).flags |= Field.ImmutableFlag;\n  }\n\n  override branch(): Attr {\n    if ((this.flags & Field.ImmutableFlag) === 0) {\n      return this;\n    }\n    return new Attr(this.key, this.value, this.flags & ~Field.ImmutableFlag);\n  }\n\n  override clone(): Attr {\n    return new Attr(this.key.clone(), this.value.clone());\n  }\n\n  override commit(): this {\n    (this as Mutable<this>).flags |= Field.ImmutableFlag;\n    this.value.commit();\n    return this;\n  }\n\n  override interpolateTo(that: Attr): Interpolator<Attr>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Attr) {\n      return AttrInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 1;\n  }\n\n  override compareTo(that: Item): number {\n    if (that instanceof Attr) {\n      let order = this.key.compareTo(that.key);\n      if (order === 0) {\n        order = this.value.compareTo(that.value);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Attr) {\n      return this.key.equals(that.key) && this.value.equivalentTo(that.value, epsilon);\n    }\n    return false;\n  }\n\n  override keyEquals(key: unknown): boolean {\n    if (typeof key === \"string\") {\n      return this.key.value === key;\n    } else if (key instanceof Field) {\n      return this.key.equals(key.key);\n    } else {\n      return this.key.equals(key);\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Attr) {\n      return this.key.equals(that.key) && this.value.equals(that.value);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(Attr),\n        this.key.hashCode()), this.value.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Attr\").write(46/*'.'*/).write(\"of\").write(40/*'('*/).display(this.key);\n    if (!(this.value instanceof Extant)) {\n      output = output.write(44/*','*/).write(32/*' '*/).display(this.value);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  static override of(key: TextLike, value?: ValueLike): Attr {\n    key = Text.fromLike(key);\n    if (arguments.length === 1) {\n      value = Value.extant();\n    } else {\n      value = Value.fromLike(value);\n    }\n    return new Attr(key, value);\n  }\n}\n\n/** @internal */\nexport interface AttrInterpolator extends Interpolator<Attr> {\n  /** @internal */\n  readonly keyInterpolator: Interpolator<Text>;\n  /** @internal */\n  readonly valueInterpolator: Interpolator<Value>;\n\n  readonly 0: Attr;\n\n  readonly 1: Attr;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const AttrInterpolator = (function (_super: typeof Interpolator) {\n  const AttrInterpolator = function (y0: Attr, y1: Attr): AttrInterpolator {\n    const interpolator = function (u: number): Attr {\n      const key = interpolator.keyInterpolator(u);\n      const value = interpolator.valueInterpolator(u);\n      return Attr.of(key, value);\n    } as AttrInterpolator;\n    Object.setPrototypeOf(interpolator, AttrInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).keyInterpolator = y0.key.interpolateTo(y1.key);\n    (interpolator as Mutable<typeof interpolator>).valueInterpolator = y0.value.interpolateTo(y1.value);\n    return interpolator;\n  } as {\n    (y0: Attr, y1: Attr): AttrInterpolator;\n\n    /** @internal */\n    prototype: AttrInterpolator;\n  };\n\n  AttrInterpolator.prototype = Object.create(_super.prototype);\n  AttrInterpolator.prototype.constructor = AttrInterpolator;\n\n  Object.defineProperty(AttrInterpolator.prototype, 0, {\n    get(this: AttrInterpolator): Attr {\n      return Attr.of(this.keyInterpolator[0], this.valueInterpolator[0]);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(AttrInterpolator.prototype, 1, {\n    get(this: AttrInterpolator): Attr {\n      return Attr.of(this.keyInterpolator[1], this.valueInterpolator[1]);\n    },\n    configurable: true,\n  });\n\n  AttrInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof AttrInterpolator) {\n      return this.keyInterpolator.equals(that.keyInterpolator)\n          && this.valueInterpolator.equals(that.valueInterpolator);\n    }\n    return false;\n  };\n\n  return AttrInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {FieldLike} from \"./Field\";\nimport {Field} from \"./Field\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./\"; // forward import\nimport {Text} from \"./\"; // forward import\nimport {Extant} from \"./\"; // forward import\nimport {Expression} from \"./\"; // forward import\nimport {BitwiseOrOperator} from \"./\"; // forward import\nimport {BitwiseXorOperator} from \"./\"; // forward import\nimport {BitwiseAndOperator} from \"./\"; // forward import\nimport {PlusOperator} from \"./\"; // forward import\nimport {MinusOperator} from \"./\"; // forward import\nimport {TimesOperator} from \"./\"; // forward import\nimport {DivideOperator} from \"./\"; // forward import\nimport {ModuloOperator} from \"./\"; // forward import\nimport type {InterpreterLike} from \"./interpreter/Interpreter\";\nimport {Interpreter} from \"./\"; // forward import\n\n/** @public */\nexport class Slot extends Field {\n  constructor(key: Value, value: Value, flags?: number) {\n    super();\n    this.key = key.commit();\n    this.value = value;\n    this.flags = flags !== void 0 ? flags : 0;\n  }\n\n  override readonly key: Value;\n\n  override readonly value: Value;\n\n  /** @internal */\n  readonly flags: number;\n\n  override isConstant(): boolean {\n    return this.key.isConstant() && this.value.isConstant();\n  }\n\n  override setValue(newValue: Value): Value {\n    if ((this.flags & Field.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    const oldValue = this.value;\n    (this as Mutable<this>).value = newValue;\n    return oldValue;\n  }\n\n  override updatedValue(value: Value): Slot {\n    return new Slot(this.key, value);\n  }\n\n  override bitwiseOr(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseOrOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseOr(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseOr(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseXor(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseXorOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseXor(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseXor(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseAnd(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseAndOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.bitwiseAnd(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.bitwiseAnd(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override plus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new PlusOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.plus(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.plus(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override minus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new MinusOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.minus(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.minus(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override times(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new TimesOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.times(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.times(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override divide(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new DivideOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.divide(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.divide(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override modulo(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new ModuloOperator(this, that);\n    }\n    let newValue;\n    if (that instanceof Slot && this.key.equals(that.key)) {\n      newValue = this.value.modulo(that.value);\n    } else if (that instanceof Value) {\n      newValue = this.value.modulo(that);\n    } else {\n      newValue = Value.absent();\n    }\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override not(): Item {\n    const newValue = this.value.not();\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override bitwiseNot(): Item {\n    const newValue = this.value.bitwiseNot();\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override negative(): Item {\n    const newValue = this.value.negative();\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override positive(): Item {\n    const newValue = this.value.positive();\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override inverse(): Item {\n    const newValue = this.value.inverse();\n    if (newValue.isDefined()) {\n      return new Slot(this.key, newValue);\n    }\n    return Item.absent();\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const key = this.key.evaluate(interpreter).toValue();\n    const value = this.value.evaluate(interpreter).toValue();\n    if (key === this.key && value === this.value) {\n      return this;\n    } else if (key.isDefined() && value.isDefined()) {\n      return new Slot(key, value);\n    }\n    return Item.absent();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const key = this.key.substitute(interpreter).toValue();\n    const value = this.value.substitute(interpreter).toValue();\n    if (key === this.key && value === this.value) {\n      return this;\n    } else if (key.isDefined() && value.isDefined()) {\n      return new Slot(key, value);\n    }\n    return Item.absent();\n  }\n\n  override toLike(): FieldLike {\n    const field = {} as {[key: string]: ValueLike};\n    if (this.key instanceof Text) {\n      field[this.key.value] = this.value.toLike();\n    } else {\n      field.$key = this.key.toLike();\n      field.$value = this.value.toLike();\n    }\n    return field;\n  }\n\n  override isAliased(): boolean {\n    return false;\n  }\n\n  override isMutable(): boolean {\n    return (this.flags & Field.ImmutableFlag) === 0;\n  }\n\n  override alias(): void {\n    (this as Mutable<this>).flags |= Field.ImmutableFlag;\n  }\n\n  override branch(): Slot {\n    if ((this.flags & Field.ImmutableFlag) === 0) {\n      return this;\n    }\n    return new Slot(this.key, this.value, this.flags & ~Field.ImmutableFlag);\n  }\n\n  override clone(): Slot {\n    return new Slot(this.key.clone(), this.value.clone());\n  }\n\n  override commit(): this {\n    (this as Mutable<this>).flags |= Field.ImmutableFlag;\n    this.value.commit();\n    return this;\n  }\n\n  override interpolateTo(that: Slot): Interpolator<Slot>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Slot) {\n      return SlotInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 2;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Slot) {\n      let order = this.key.compareTo(that.key);\n      if (order === 0) {\n        order = this.value.compareTo(that.value);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Slot) {\n      return this.key.equals(that.key) && this.value.equivalentTo(that.value, epsilon);\n    }\n    return false;\n  }\n\n  override keyEquals(key: unknown): boolean {\n    if (typeof key === \"string\" && this.key instanceof Text) {\n      return this.key.value === key;\n    } else if (key instanceof Field) {\n      return this.key.equals(key.key);\n    } else {\n      return this.key.equals(key);\n    }\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Slot) {\n      return this.key.equals(that.key) && this.value.equals(that.value);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(Slot),\n        this.key.hashCode()), this.value.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Slot\").write(46/*'.'*/).write(\"of\").write(40/*'('*/).display(this.key);\n    if (!(this.value instanceof Extant)) {\n      output = output.write(44/*','*/).write(32/*' '*/).display(this.value);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  static override of(key: ValueLike, value?: ValueLike): Slot {\n    key = Value.fromLike(key);\n    if (arguments.length === 1) {\n      value = Value.extant();\n    } else {\n      value = Value.fromLike(value);\n    }\n    return new Slot(key, value);\n  }\n}\n\n/** @internal */\nexport interface SlotInterpolator extends Interpolator<Slot> {\n  /** @internal */\n  readonly keyInterpolator: Interpolator<Value>;\n  /** @internal */\n  readonly valueInterpolator: Interpolator<Value>;\n\n  readonly 0: Slot;\n\n  readonly 1: Slot;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const SlotInterpolator = (function (_super: typeof Interpolator) {\n  const SlotInterpolator = function (y0: Slot, y1: Slot): SlotInterpolator {\n    const interpolator = function (u: number): Slot {\n      const key = interpolator.keyInterpolator(u);\n      const value = interpolator.valueInterpolator(u);\n      return Slot.of(key, value);\n    } as SlotInterpolator;\n    Object.setPrototypeOf(interpolator, SlotInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).keyInterpolator = y0.key.interpolateTo(y1.key);\n    (interpolator as Mutable<typeof interpolator>).valueInterpolator = y0.value.interpolateTo(y1.value);\n    return interpolator;\n  } as {\n    (y0: Slot, y1: Slot): SlotInterpolator;\n\n    /** @internal */\n    prototype: SlotInterpolator;\n  };\n\n  SlotInterpolator.prototype = Object.create(_super.prototype);\n  SlotInterpolator.prototype.constructor = SlotInterpolator;\n\n  Object.defineProperty(SlotInterpolator.prototype, 0, {\n    get(this: SlotInterpolator): Slot {\n      return Slot.of(this.keyInterpolator[0], this.valueInterpolator[0]);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(SlotInterpolator.prototype, 1, {\n    get(this: SlotInterpolator): Slot {\n      return Slot.of(this.keyInterpolator[1], this.valueInterpolator[1]);\n    },\n    configurable: true,\n  });\n\n  SlotInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof SlotInterpolator) {\n      return this.keyInterpolator.equals(that.keyInterpolator)\n          && this.valueInterpolator.equals(that.valueInterpolator);\n    }\n    return false;\n  };\n\n  return SlotInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Interpolator} from \"@swim/util\";\nimport type {Builder} from \"@swim/util\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Field} from \"./\"; // forward import\nimport {Attr} from \"./Attr\";\nimport {Slot} from \"./Slot\";\nimport {Record} from \"./\"; // forward import\nimport {Data} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport {Text} from \"./\"; // forward import\nimport type {NumLike} from \"./Num\";\nimport {Num} from \"./\"; // forward import\nimport {Bool} from \"./\"; // forward import\nimport {Extant} from \"./\"; // forward import\nimport {Absent} from \"./\"; // forward import\nimport {Expression} from \"./\"; // forward import\nimport {BitwiseOrOperator} from \"./\"; // forward import\nimport {BitwiseXorOperator} from \"./\"; // forward import\nimport {BitwiseAndOperator} from \"./\"; // forward import\nimport {LtOperator} from \"./\"; // forward import\nimport {LeOperator} from \"./\"; // forward import\nimport {EqOperator} from \"./\"; // forward import\nimport {NeOperator} from \"./\"; // forward import\nimport {GeOperator} from \"./\"; // forward import\nimport {GtOperator} from \"./\"; // forward import\nimport {PlusOperator} from \"./\"; // forward import\nimport {MinusOperator} from \"./\"; // forward import\nimport {TimesOperator} from \"./\"; // forward import\nimport {DivideOperator} from \"./\"; // forward import\nimport {ModuloOperator} from \"./\"; // forward import\nimport {LambdaFunc} from \"./\"; // forward import\n\n/** @public */\nexport type ValueLike = Value\n                      | {readonly [key: string]: ValueLike}\n                      | readonly ItemLike[]\n                      | Uint8Array\n                      | string\n                      | number\n                      | boolean\n                      | null\n                      | undefined;\n\n/** @public */\nexport abstract class Value extends Item {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override likeType?(like: {readonly [key: string]: ValueLike}\n                         | readonly ItemLike[]\n                         | Uint8Array\n                         | string\n                         | number\n                         | boolean\n                         | null\n                         | undefined): void;\n\n  /**\n   * Returns `true` if this `Value` is not [[Absent]].\n   */\n  override isDefined(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns `true` if this `Value` is neither [[Extant]] nor [[Absent]].\n   */\n  override isDistinct(): boolean {\n    return true;\n  }\n\n  /**\n   * Returns `true` if this `Value` is not one of: an empty `Record`, `False`,\n   * `Extant`, or `Absent`.\n   */\n  override isDefinite(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns [[Absent]] because a `Value` can't be a `Field`, so it\n   * can't have a key component.\n   */\n  override get key(): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns `this` because every `Value` is its own value component.\n   */\n  override toValue(): Value {\n    return this;\n  }\n\n  /**\n   * Returns the `key` string of the first member of this `Value`, if this\n   * `Value` is a [[Record]], and its first member is an [[Attr]]; otherwise\n   * returns `undefined` if this `Value` is not a `Record`, or if this `Value`\n   * is a `Record` whose first member is not an `Attr`.\n   *\n   * Used to concisely get the name of the discriminating attribute of a\n   * structure. The `tag` can be used to discern the nominal type of a\n   * polymorphic structure, similar to an XML element tag.\n   */\n  override get tag(): string | undefined {\n    return void 0;\n  }\n\n  /**\n   * Returns the [[Value.flattened flattened]] members of this `Value` after\n   * all attributes have been removed, if this `Value` is a [[Record]];\n   * otherwise returns `this` if this `Value` is not a `Record`.\n   *\n   * Used to concisely get the scalar value of an attributed structure. An\n   * attributed structure is a `Record` with one or more attributes that modify\n   * one or more other members.\n   */\n  override get target(): Value {\n    return this;\n  }\n\n  /**\n   * Returns the sole member of this `Value`, if this `Value` is a [[Record]]\n   * with exactly one member, and its member is a `Value`; returns [[Extant]]\n   * if this `Value` is an empty `Record`; otherwise returns `this` if this\n   * `Value` is a `Record` with more than one member, or if this `Value` is a\n   * not a `Record`.\n   *\n   * Used to convert a unary `Record` into its member `Value`. Facilitates\n   * writing code that treats a unary `Record` equivalently to a bare `Value`.\n   */\n  override flattened(): Value {\n    return this;\n  }\n\n  /**\n   * Returns `this` if this `Value` is a [[Record]]; returns a `Record`\n   * containing just this `Value`, if this `Value` is [[Value.isDistinct\n   * distinct]]; otherwise returns an empty `Record` if this `Value` is\n   * [[Extant]] or [[Absent]]. Facilitates writing code that treats a bare\n   * `Value` equivalently to a unary `Record`.\n   */\n  override unflattened(): Record {\n    return Record.of(this);\n  }\n\n  /**\n   * Returns the value of the first member of this `Value`, if this `Value` is\n   * a `Record`, and its first member is an [[Attr]] whose `key` string is\n   * equal to `tag`; otherwise returns [[Absent]] if this `Value` is not a\n   * `Record`, or if this `Value` is a `Record` whose first member is not an\n   * `Attr`, or if this `Value` is a `Record` whose first member is an `Attr`\n   * whose `key` does not equal the `tag`.\n   *\n   * Used to conditionally get the value of the head `Attr` of a structure, if\n   * and only if the key string of the head `Attr` is equal to the `tag`. Can\n   * be used to check if a structure might conform to a nominal type named\n   * `tag`, while simultaneously getting the value of the `tag` attribute.\n   */\n  override header(tag: string): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Returns the [[Value.unflattened unflattened]] [[Value.header header]] of\n   * this `Value`, if this `Value` is a [[Record]], and its first member is an\n   * [[Attr]] whose `key` string is equal to `tag`; otherwise returns\n   * `undefined`.\n   *\n   * The `headers` of the `tag` attribute of a structure are like the\n   * attributes of an XML element tag; through unlike an XML element, `tag`\n   * attribute headers are not limited to string keys and values.\n   */\n  override headers(tag: string): Record | undefined {\n    return void 0;\n  }\n\n  /**\n   * Returns the first member of this `Value`, if this `Value` is a non-empty\n   * [[Record]]; otherwise returns [[Absent]].\n   */\n  override head(): Item {\n    return Item.absent();\n  }\n\n  /**\n   * Returns a view of all but the first member of this `Value`, if this\n   * `Value` is a non-empty [[Record]]; otherwise returns an empty `Record`\n   * if this `Value` is not a `Record`, of if this `Value` is itself an\n   * empty `Record`.\n   */\n  override tail(): Record {\n    return Record.empty();\n  }\n\n  /**\n   * Returns the [[Record.flattened flattened]] [[Value.tail tail]] of this\n   * `Value`. Used to recursively deconstruct a structure, terminating with\n   * its last `Value`, rather than a unary `Record` containing its last value,\n   * if the structure ends with a `Value` member.\n   */\n  override body(): Value {\n    return Value.extant();\n  }\n\n  /**\n   * Returns the number of members contained in this `Value`, if this `Value`\n   * is a [[Record]]; otherwise returns `0` if this `Value` is not a `Record`.\n   */\n  override get length(): number {\n    return 0;\n  }\n\n  /**\n   * Returns `true` if this `Value` is a [[Record]] that has a [[Field]] member\n   * with a key that is equal to the given `key`; otherwise returns `false` if\n   * this `Value` is not a `Record`, or if this `Value` is a `Record`, but has\n   * no `Field` member with a key equal to the given `key`.\n   */\n  override has(key: ValueLike): boolean {\n    return false;\n  }\n\n  /**\n   * Returns the value of the last [[Field]] member of this `Value` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Value` is not a\n   * [[Record]], or if this `Value` is a `Record`, but has no `Field` member\n   * with a key equal to the given `key`.\n   */\n  override get(key: ValueLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Returns the value of the last [[Attr]] member of this `Value` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Value` is not a\n   * [[Record]], or if this `Value` is a `Record`, but has no `Attr` member\n   * with a key equal to the given `key`.\n   */\n  override getAttr(key: TextLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Returns the value of the last [[Slot]] member of this `Value` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Value` is not a\n   * [[Record]], or if this `Value` is a `Record`, but has no `Slot` member\n   * with a key equal to the given `key`.\n   */\n  override getSlot(key: ValueLike): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Returns the last [[Field]] member of this `Value` whose key is equal to\n   * the given `key`; returns `undefined` if this `Value` is not a [[Record]],\n   * or if this `Value` is a `Record`, but has no `Field` member with a `key`\n   * equal to the given `key`.\n   */\n  override getField(key: ValueLike): Field | undefined {\n    return void 0;\n  }\n\n  /**\n   * Returns the member of this `Value` at the given `index`, if this `Value`\n   * is a [[Record]], and the `index` is greater than or equal to zero, and\n   * less than the [[Record.length length]] of the `Record`; otherwise returns\n   * [[Absent]] if this `Value` is not a `Record`, or if this `Value` is a\n   * `Record`, but the `index` is out of bounds.\n   */\n  override getItem(index: NumLike): Item {\n    return Item.absent();\n  }\n\n  override deleted(key: ValueLike): Value {\n    return this;\n  }\n\n  override conditional(thenTerm: ValueLike, elseTerm: ValueLike): Value;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item {\n    thenTerm = Item.fromLike(thenTerm);\n    return thenTerm;\n  }\n\n  override or(that: ValueLike): Value;\n  override or(that: ItemLike): Item;\n  override or(that: ItemLike): Item {\n    return this;\n  }\n\n  override and(that: ValueLike): Value;\n  override and(that: ItemLike): Item;\n  override and(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    return that;\n  }\n\n  override bitwiseOr(that: ValueLike): Value;\n  override bitwiseOr(that: ItemLike): Item;\n  override bitwiseOr(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseOrOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.bitwiseOr(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.bitwiseOr(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override bitwiseXor(that: ValueLike): Value;\n  override bitwiseXor(that: ItemLike): Item;\n  override bitwiseXor(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseXorOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.bitwiseXor(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.bitwiseXor(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override bitwiseAnd(that: ValueLike): Value;\n  override bitwiseAnd(that: ItemLike): Item;\n  override bitwiseAnd(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new BitwiseAndOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.bitwiseAnd(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.bitwiseAnd(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override lt(that: ValueLike): Value;\n  override lt(that: ItemLike): Item;\n  override lt(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new LtOperator(this, that);\n    }\n    return super.lt(that);\n  }\n\n  override le(that: ValueLike): Value;\n  override le(that: ItemLike): Item;\n  override le(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new LeOperator(this, that);\n    }\n    return super.le(that);\n  }\n\n  override eq(that: ValueLike): Value;\n  override eq(that: ItemLike): Item;\n  override eq(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new EqOperator(this, that);\n    }\n    return super.eq(that);\n  }\n\n  override ne(that: ValueLike): Value;\n  override ne(that: ItemLike): Item;\n  override ne(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new NeOperator(this, that);\n    }\n    return super.ne(that);\n  }\n\n  override ge(that: ValueLike): Value;\n  override ge(that: ItemLike): Item;\n  override ge(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new GeOperator(this, that);\n    }\n    return super.ge(that);\n  }\n\n  override gt(that: ValueLike): Value;\n  override gt(that: ItemLike): Item;\n  override gt(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new GtOperator(this, that);\n    }\n    return super.gt(that);\n  }\n\n  override plus(that: ValueLike): Value;\n  override plus(that: ItemLike): Item;\n  override plus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new PlusOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.plus(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.plus(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override minus(that: ValueLike): Value;\n  override minus(that: ItemLike): Item;\n  override minus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new MinusOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.minus(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.minus(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override times(that: ValueLike): Value;\n  override times(that: ItemLike): Item;\n  override times(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new TimesOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.times(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.times(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override divide(that: ValueLike): Value;\n  override divide(that: ItemLike): Item;\n  override divide(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new DivideOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.divide(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.divide(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override modulo(that: ValueLike): Value;\n  override modulo(that: ItemLike): Item;\n  override modulo(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Expression) {\n      return new ModuloOperator(this, that);\n    } else if (that instanceof Attr) {\n      const newValue = this.modulo(that.value);\n      if (newValue.isDefined()) {\n        return new Attr(that.key, newValue);\n      }\n    } else if (that instanceof Slot) {\n      const newValue = this.modulo(that.value);\n      if (newValue.isDefined()) {\n        return new Slot(that.key, newValue);\n      }\n    }\n    return Item.absent();\n  }\n\n  override not(): Value {\n    return Value.absent();\n  }\n\n  override bitwiseNot(): Value {\n    return Value.absent();\n  }\n\n  override negative(): Value {\n    return Value.absent();\n  }\n\n  override positive(): Value {\n    return Value.absent();\n  }\n\n  override inverse(): Value {\n    return Value.absent();\n  }\n\n  override lambda(template: Value): Value {\n    return new LambdaFunc(this, template);\n  }\n\n  /**\n   * Converts this `Value` into a `string` value, if possible; otherwise returns\n   * `undefined` if this `Value` can't be converted into a `string` value.\n   */\n  override stringValue(): string | undefined;\n  /**\n   * Converts this `Value` into a `string` value, if possible; otherwise returns\n   * `orElse` if this `Value` can't be converted into a `string` value.\n   */\n  override stringValue<T>(orElse: T): string | T;\n  override stringValue<T>(orElse?: T): string | T | undefined {\n    return orElse;\n  }\n\n  /**\n   * Converts this `Value` into a `number` value, if possible; otherwise returns\n   * `undefined` if this `Value` can't be converted into a `number` value.\n   */\n  override numberValue(): number | undefined;\n  /**\n   * Converts this `Value` into a `number` value, if possible; otherwise returns\n   * `orElse` if this `Value` can't be converted into a `number` value.\n   */\n  override numberValue<T>(orElse: T): number | T;\n  override numberValue<T>(orElse?: T): number | T | undefined {\n    return orElse;\n  }\n\n  /**\n   * Converts this `Value` into a `boolean` value, if possible; otherwise\n   * returns `undefined` if this `Value` can't be converted into a `boolean`\n   * value.\n   */\n  override booleanValue(): boolean | undefined;\n  /**\n   * Converts this `Value` into a `boolean` value, if possible; otherwise\n   * returns `orElse` if this `Value` can't be converted into a `boolean` value.\n   */\n  override booleanValue<T>(orElse: T): boolean | T;\n  override booleanValue<T>(orElse?: T): boolean | T | undefined {\n    return orElse;\n  }\n\n  abstract override toLike(): ValueLike;\n\n  override isAliased(): boolean {\n    return false;\n  }\n\n  override isMutable(): boolean {\n    return false;\n  }\n\n  override alias(): void {\n    // nop\n  }\n\n  override branch(): Value {\n    return this;\n  }\n\n  override clone(): Value {\n    return this;\n  }\n\n  override commit(): this {\n    return this;\n  }\n\n  override interpolateTo(that: Value): Interpolator<Value>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    return super.interpolateTo(that);\n  }\n\n  override keyEquals(key: unknown): boolean {\n    return false;\n  }\n\n  static builder(): Builder<Item, Value> {\n    return new ValueBuilder();\n  }\n\n  static override empty(): Value {\n    return Record.empty();\n  }\n\n  static override extant(): Value {\n    return Extant.extant();\n  }\n\n  static override absent(): Value {\n    return Absent.absent();\n  }\n\n  static override fromLike(value: ValueLike): Value {\n    if (value instanceof Value) {\n      return value;\n    } else if (value instanceof Item) {\n      return Record.create(1).item(value);\n    } else if (value === void 0) {\n      return Absent.absent();\n    } else if (value === null) {\n      return Extant.extant();\n    } else if (typeof value === \"boolean\") {\n      return Bool.from(value);\n    } else if (typeof value === \"number\") {\n      return Num.from(value);\n    } else if (typeof value === \"string\") {\n      return Text.from(value);\n    } else if (value instanceof Uint8Array) {\n      return Data.wrap(value);\n    } else if (Array.isArray(value)) {\n      return Record.fromArray(value);\n    } else if (typeof value === \"object\") {\n      return Record.fromObject(value as {[key: string]: ValueLike});\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n\n/** @internal */\nexport class ValueBuilder implements Builder<Item, Value> {\n  /** @internal */\n  record: Record | null;\n  /** @internal */\n  value: Value | null;\n\n  constructor() {\n    this.record = null;\n    this.value = null;\n  }\n\n  push(...items: Item[]): void {\n    for (let i = 0; i < items.length; i += 1) {\n      const item = items[i]!;\n      if (item instanceof Field) {\n        return this.pushField(item);\n      } else if (item instanceof Value) {\n        return this.pushValue(item);\n      } else {\n        throw new TypeError(\"\" + item);\n      }\n    }\n  }\n\n  /** @internal */\n  pushField(item: Field): void {\n    if (this.record === null) {\n      this.record = Record.create();\n      if (this.value !== null) {\n        this.record.push(this.value);\n        this.value = null;\n      }\n    }\n    this.record.push(item);\n  }\n\n  /** @internal */\n  pushValue(item: Value): void {\n    if (this.record !== null) {\n      this.record.push(item);\n    } else if (this.value === null) {\n      this.value = item;\n    } else {\n      this.record = Record.create();\n      this.record.push(this.value);\n      this.value = null;\n      this.record.push(item);\n    }\n  }\n\n  build(): Value {\n    if (this.record !== null) {\n      return this.record;\n    } else if (this.value !== null) {\n      return this.value;\n    }\n    return Value.absent();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Cursor} from \"@swim/util\";\nimport type {Builder} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Field} from \"./Field\";\nimport {Attr} from \"./Attr\";\nimport {Slot} from \"./Slot\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {RecordMap} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport {Text} from \"./\"; // forward import\nimport type {NumLike} from \"./Num\";\nimport type {InterpreterLike} from \"./interpreter/Interpreter\";\nimport {Interpreter} from \"./\"; // forward import\n\n/** @public */\nexport type RecordLike = Record\n                       | {readonly [key: string]: ValueLike}\n                       | readonly ItemLike[];\n\n/** @public */\nexport abstract class Record extends Value implements Builder<Item, Record> {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override likeType?(like: {readonly [key: string]: ValueLike}\n                         | readonly ItemLike[]): void;\n\n  override isDefinite(): boolean {\n    return !this.isEmpty();\n  }\n\n  /**\n   * Returns `true` if this `Record` has no members.\n   */\n  abstract isEmpty(): boolean;\n\n  /**\n   * Returns `true` if this `Record` has only [[Value]] members–no `Field`\n   * members.\n   */\n  isArray(): boolean {\n    return this.fieldCount === 0;\n  }\n\n  /**\n   * Returns `true` if this `Record` has only [[Field]] members–no `Value`\n   * members.\n   */\n  isObject(): boolean {\n    return this.valueCount === 0;\n  }\n\n  /**\n   * Returns the number of members contained in this `Record`.\n   */\n  abstract override get length(): number;\n\n  /**\n   * Returns the number of [[Field]] members contained in this `Record`.\n   */\n  declare readonly fieldCount: number; // getter defined below to work around useDefineForClassFields lunacy\n\n  /**\n   * Returns the number of [[Value]] members contained in this `Record`.\n   */\n  get valueCount(): number {\n    let count = 0;\n    this.forEach(function (member: Item): void {\n      if (member instanceof Value) {\n        count += 1;\n      }\n    }, this);\n    return count;\n  }\n\n  override isConstant(): boolean {\n    return this.forEach(function (member: Item): boolean | undefined {\n      return member.isConstant() ? void 0 : false;\n    }, this) === void 0;\n  }\n\n  /**\n   * Returns the `key` string of the first member of this `Record`, if the\n   * first member is an [[Attr]]; otherwise returns `undefined` if the first\n   * member is not an `Attr`.\n   *\n   * Used to concisely get the name of the discriminating attribute of a\n   * structure. The `tag` can be used to discern the nominal type of a\n   * polymorphic structure, similar to an XML element tag.\n   */\n  override get tag(): string | undefined {\n    const item = this.head();\n    if (item instanceof Attr) {\n      return item.key.value;\n    }\n    return void 0;\n  }\n\n  /**\n   * Returns the [[Record.flattened flattened]] members of this `Record` after\n   * all attributes have been removed.\n   *\n   * Used to concisely get the scalar value of an attributed structure. An\n   * attributed structure is a `Record` with one or more attributes that modify\n   * one or more other members.\n   */\n  override get target(): Value {\n    let value: Value | undefined;\n    let record: Record | undefined;\n    let modified = false;\n    this.forEach(function (item: Item): void {\n      if (item instanceof Attr) {\n        modified = true;\n      } else if (value === void 0 && item instanceof Value) {\n        value = item;\n      } else {\n        if (record === void 0) {\n          record = Record.create();\n          if (value !== void 0) {\n            record.push(value);\n          }\n        }\n        record.push(item);\n      }\n    }, this);\n    if (value === void 0) {\n      return Value.extant();\n    } else if (record === void 0) {\n      return value;\n    } else if (modified) {\n      return record;\n    }\n    return this;\n  }\n\n  /**\n   * Returns the sole member of this `Record`, if this `Record` has exactly one\n   * member, and its member is a `Value`; returns [[Extant]] if this `Record`\n   * is empty; otherwise returns `this` if this `Record` has more than one\n   * member.\n   *\n   * Used to convert a unary `Record` into its member `Value`. Facilitates\n   * writing code that treats a unary `Record` equivalently to a bare `Value`.\n   */\n  override flattened(): Value {\n    if (this.isEmpty()) {\n      return Value.extant();\n    }\n    const items = this.iterator();\n    const head = items.head();\n    items.step();\n    if (items.isEmpty() && head instanceof Value) {\n      return head;\n    } else {\n      return this.branch();\n    }\n  }\n\n  /**\n   * Returns this `Record`.\n   */\n  override unflattened(): Record {\n    return this;\n  }\n\n  /**\n   * Returns the value of the first member of this `Record`, if the first\n   * member is an [[Attr]] whose `key` string is equal to `tag`; otherwise\n   * returns [[Absent]] if the first member of this `Record` is not an `Attr`,\n   * or if the first member of this `Record` is an `Attr` whose `key` does not\n   * equal the `tag`.\n   *\n   * Used to conditionally get the value of the head `Attr` of a structure, if\n   * and only if the key string of the head `Attr` is equal to the `tag`. Can\n   * be used to check if a structure might conform to a nominal type named\n   * `tag`, while simultaneously getting the value of the `tag` attribute.\n   */\n  override header(tag: string): Value {\n    const head = this.head();\n    if (!(head instanceof Attr) || head.key.value !== tag) {\n      return Value.absent();\n    }\n    return head.value;\n  }\n\n  /**\n   * Returns the [[Record.unflattened unflattened]] [[Record.header header]] of\n   * this `Record`. The `headers` of the `tag` attribute of a structure are\n   * like the attributes of an XML element tag; through unlike an XML element,\n   * `tag` attribute headers are not limited to string keys and values.\n   */\n  override headers(tag: string): Record | undefined {\n    const head = this.head();\n    if (!(head instanceof Attr) || head.key.value !== tag) {\n      return void 0;\n    }\n    const header = head.value;\n    if (header instanceof Record) {\n      return header;\n    }\n    return Record.of(header);\n  }\n\n  /**\n   * Returns the first member of this `Record`, if this `Record` is non-empty;\n   * otherwise returns [[Absent]].\n   */\n  override head(): Item {\n    return this.forEach(function (item: Item): Item {\n      return item;\n    }, this) || Item.absent();\n  }\n\n  /**\n   * Returns a view of all but the first member of this `Record`, if this\n   * `Record` is non-empty; otherwise returns an empty `Record`, if this\n   * `Record` is itself empty.\n   */\n  override tail(): Record {\n    const tail = Record.create();\n    this.forEach(function (item: Item, index: number): void {\n      if (index > 0) {\n        tail.push(item);\n      }\n    }, this);\n    return tail;\n  }\n\n  /**\n   * Returns the [[Record.flattened flattened]] [[Record.tail tail]] of this\n   * `Record`. Used to recursively deconstruct a structure, terminating\n   * with its last `Value`, rather than a unary `Record` containing its last\n   * value, if the structure ends with a `Value` member.\n   */\n  override body(): Value {\n    const tail = this.tail();\n    if (tail.isEmpty()) {\n      return Value.absent();\n    }\n    return tail.flattened();\n  }\n\n  /**\n   * Returns `true` if this `Record` has a [[Field]] member with a key that is\n   * equal to the given `key`; otherwise returns `false` if this `Record` has\n   * no `Field` member with a key equal to the given `key`.\n   */\n  override has(key: ValueLike): boolean {\n    key = Value.fromLike(key);\n    return this.forEach(function (item: Item): boolean | undefined {\n      return item instanceof Field && item.key.equals(key) ? true : void 0;\n    }, this) || false;\n  }\n\n  indexOf(item: ItemLike, index: number = 0): number {\n    item = Item.fromLike(item);\n    if (index < 0) {\n      index = Math.max(0, this.length + index);\n    }\n    const i = this.forEach(function (member: Item, i: number): number | undefined {\n      return i >= index && (item as Item).equals(member) ? i : void 0;\n    }, this);\n    return i !== void 0 ? i : -1;\n  }\n\n  lastIndexOf(item: ItemLike, index?: number): number {\n    item = Item.fromLike(item);\n    const n = this.length;\n    if (index === void 0) {\n      index = n - 1;\n    } else if (index < 0) {\n      index = n + index;\n    }\n    index = Math.min(index, n - 1);\n    while (index >= 0) {\n      if (item.equals(this.getItem(index))) {\n        return index;\n      }\n      index -= 1;\n    }\n    return -1;\n  }\n\n  /**\n   * Returns the value of the last [[Field]] member of this `Record` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Record` has no\n   * `Field` member with a key equal to the given `key`.\n   */\n  override get(key: ValueLike): Value {\n    key = Value.fromLike(key);\n    return this.forEach(function (item: Item): Value | undefined {\n      return item instanceof Field && item.key.equals(key) ? item.value : void 0;\n    }, this) || Value.absent();\n  }\n\n  /**\n   * Returns the value of the last [[Attr]] member of this `Record` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Record` has no\n   * `Attr` member with a key equal to the given `key`.\n   */\n  override getAttr(key: TextLike): Value {\n    key = Text.fromLike(key);\n    return this.forEach(function (item: Item): Value | undefined {\n      return item instanceof Attr && item.key.equals(key) ? item.value : void 0;\n    }, this) || Value.absent();\n  }\n\n  /**\n   * Returns the value of the last [[Slot]] member of this `Record` whose key\n   * is equal to the given `key`; returns [[Absent]] if this `Record` has no\n   * `Slot` member with a key equal to the given `key`.\n   */\n  override getSlot(key: ValueLike): Value {\n    key = Value.fromLike(key);\n    return this.forEach(function (item: Item): Value | undefined {\n      return item instanceof Slot && item.key.equals(key) ? item.value : void 0;\n    }, this) || Value.absent();\n  }\n\n  /**\n   * Returns the last [[Field]] member of this `Record` whose key is equal to\n   * the given `key`; returns `undefined` if this `Record` has no `Field` member\n   * with a `key` equal to the given `key`.\n   */\n  override getField(key: ValueLike): Field | undefined {\n    key = Value.fromLike(key);\n    return this.forEach(function (item: Item): Field | undefined {\n      return item instanceof Field && item.key.equals(key) ? item : void 0;\n    }, this);\n  }\n\n  /**\n   * Returns the member of this `Record` at the given `index`, if the `index`\n   * is greater than or equal to zero, and less than the [[Record.length\n   * length]] of this `Record`; otherwise returns [[Absent]] if the `index` is\n   * out of bounds.\n   */\n  abstract override getItem(index: NumLike): Item;\n\n  set(key: ValueLike, newValue: ValueLike): this {\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const items = this.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item instanceof Field && item.key.equals(key)) {\n        if (item.isMutable()) {\n          item.setValue(newValue);\n        } else {\n          items.set(item.updatedValue(newValue));\n        }\n        return this;\n      }\n      items.step();\n    }\n    this.push(new Slot(key, newValue));\n    return this;\n  }\n\n  setAttr(key: TextLike, newValue: ValueLike): this {\n    key = Text.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const items = this.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item instanceof Field && item.key.equals(key)) {\n        if (item instanceof Attr && item.isMutable()) {\n          item.setValue(newValue);\n        } else {\n          items.set(new Attr(key, newValue));\n        }\n        return this;\n      }\n      items.step();\n    }\n    this.push(new Attr(key, newValue));\n    return this;\n  }\n\n  setSlot(key: ValueLike, newValue: ValueLike): this {\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const items = this.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item instanceof Field && item.key.equals(key)) {\n        if (item instanceof Slot && item.isMutable()) {\n          item.setValue(newValue);\n        } else {\n          items.set(new Slot(key, newValue));\n        }\n        return this;\n      }\n      items.step();\n    }\n    this.push(new Slot(key, newValue));\n    return this;\n  }\n\n  /**\n   * Replaces the member of this `Record` at the given `index` with a new\n   * `item`, returning `this` `Record`, if the `index` is greater than or\n   * equal to zero, and less than the [[Record.length length]] of this `Record`.\n   *\n   * @throws `Error` if this is an immutable `Record`.\n   * @throws `RangeError` if the `index` is out of bounds.\n   */\n  abstract setItem(index: number, item: ItemLike): this;\n\n  override updated(key: ValueLike, value: ValueLike): Record {\n    key = Value.fromLike(key);\n    value = Value.fromLike(value);\n    const record = this.isMutable() ? this : this.branch();\n    const items = record.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item.key.equals(key)) {\n        if (item instanceof Field && item.isMutable()) {\n          item.setValue(value);\n        } else {\n          items.set(new Slot(key, value));\n        }\n        return record;\n      }\n      items.step();\n    }\n    record.push(new Slot(key, value));\n    return record;\n  }\n\n  override updatedAttr(key: TextLike, value: ValueLike): Record {\n    key = Text.fromLike(key);\n    value = Value.fromLike(value);\n    const record = this.isMutable() ? this : this.branch();\n    const items = record.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item.key.equals(key)) {\n        if (item instanceof Attr && item.isMutable()) {\n          item.setValue(value);\n        } else {\n          items.set(new Attr(key, value));\n        }\n        return record;\n      }\n      items.step();\n    }\n    record.push(new Attr(key, value));\n    return record;\n  }\n\n  override updatedSlot(key: ValueLike, value: ValueLike): Record {\n    key = Value.fromLike(key);\n    value = Value.fromLike(value);\n    const record = this.isMutable() ? this : this.branch();\n    const items = record.iterator();\n    while (!items.isEmpty()) {\n      const item = items.head();\n      if (item.key.equals(key)) {\n        if (item instanceof Slot && item.isMutable()) {\n          item.setValue(value);\n        } else {\n          items.set(new Slot(key, value));\n        }\n        return record;\n      }\n      items.step();\n    }\n    record.push(new Slot(key, value));\n    return record;\n  }\n\n  abstract push(...items: ItemLike[]): number;\n\n  abstract splice(start: number, deleteCount?: number, ...newItems: ItemLike[]): Item[];\n\n  abstract delete(key: ValueLike): Item;\n\n  abstract clear(): void;\n\n  override appended(...items: ItemLike[]): Record {\n    const record = this.isMutable() ? this : this.branch();\n    record.push(...items);\n    return record;\n  }\n\n  override prepended(...items: ItemLike[]): Record {\n    const record = this.isMutable() ? this : this.branch();\n    record.splice(0, 0, ...items);\n    return record;\n  }\n\n  override deleted(key: ValueLike): Record {\n    const record = this.isMutable() ? this : this.branch();\n    record.delete(key);\n    return record;\n  }\n\n  override concat(...items: ItemLike[]): Record {\n    const record = this.isMutable() ? this : this.branch();\n    for (let i = 0; i < items.length; i += 1) {\n      Item.fromLike(items[i]).forEach(function (item: Item): void {\n        record.push(item);\n      });\n    }\n    return record;\n  }\n\n  slice(lower?: number, upper?: number): Record {\n    return this.subRecord(lower, upper).branch();\n  }\n\n  attr(key: TextLike, value?: ValueLike): this {\n    let field: Field;\n    if (arguments.length === 1) {\n      field = Attr.of(key);\n    } else {\n      field = Attr.of(key, value);\n    }\n    this.push(field);\n    return this;\n  }\n\n  slot(key: ValueLike, value?: ValueLike): this {\n    let field: Field;\n    if (arguments.length === 1) {\n      field = Slot.of(key);\n    } else {\n      field = Slot.of(key, value);\n    }\n    this.push(field);\n    return this;\n  }\n\n  item(item: ItemLike): this {\n    this.push(item);\n    return this;\n  }\n\n  items(...items: ItemLike[]): this {\n    this.push(this, ...items);\n    return this;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Record {\n    interpreter = Interpreter.fromLike(interpreter);\n    const scope = Record.create();\n    interpreter.pushScope(scope);\n    let changed = false;\n    this.forEach(function (oldItem: Item): void {\n      const newItem = oldItem.evaluate(interpreter);\n      if (newItem.isDefined()) {\n        scope.push(newItem);\n      }\n      if (oldItem !== newItem) {\n        changed = true;\n      }\n    }, this);\n    interpreter.popScope();\n    return changed ? scope : this;\n  }\n\n  override substitute(interpreter: InterpreterLike): Record {\n    interpreter = Interpreter.fromLike(interpreter);\n    const scope = Record.create();\n    interpreter.pushScope(scope);\n    let changed = false;\n    this.forEach(function (oldItem: Item) {\n      const newItem = oldItem.substitute(interpreter);\n      if (newItem.isDefined()) {\n        scope.push(newItem);\n      }\n      if (oldItem !== newItem) {\n        changed = true;\n      }\n    }, this);\n    interpreter.popScope();\n    return changed ? scope : this;\n  }\n\n  override stringValue(): string | undefined;\n  override stringValue<T>(orElse: T): string | T;\n  override stringValue<T>(orElse?: T): string | T | undefined {\n    let recordString = \"\";\n    const defined = this.forEach(function (item: Item): null | void {\n      if (item instanceof Value) {\n        const itemString = item.stringValue();\n        if (itemString !== void 0) {\n          recordString += itemString;\n          return;\n        }\n      }\n      return null; // break\n    }, this) === void 0;\n    return defined ? recordString : void 0;\n  }\n\n  override toLike(): ValueLike {\n    if (!this.isEmpty() && this.isArray()) {\n      return this.toArray();\n    }\n    return this.toObject();\n  }\n\n  toArray(): ItemLike[] {\n    const array = new Array<ItemLike>(this.length);\n    this.forEach(function (item: Item, index: number): void {\n      if (item instanceof Value) {\n        array[index] = item.toLike();\n      } else if (item instanceof Field) {\n        array[index] = {\n          $key: item.key.toLike(),\n          $value: item.value.toLike(),\n        };\n      }\n    }, this);\n    return array;\n  }\n\n  toObject(): {[key: string]: ValueLike} {\n    const object = {} as {[key: string]: ValueLike};\n    this.forEach(function (item: Item, index: number): void {\n      if (item instanceof Attr) {\n        object[\"@\" + item.key.value] = item.value.toLike();\n      } else if (item instanceof Slot) {\n        if (item.key instanceof Text) {\n          object[item.key.value] = item.value.toLike();\n        } else {\n          object[\"$\" + index] = {\n            $key: item.key.toLike(),\n            $value: item.value.toLike(),\n          };\n        }\n      } else if (item instanceof Value) {\n        object[\"$\" + index] = item.toLike();\n      }\n    }, this);\n    return object;\n  }\n\n  override isAliased(): boolean {\n    return false;\n  }\n\n  override isMutable(): boolean {\n    return true;\n  }\n\n  override alias(): void {\n    // nop\n  }\n\n  override branch(): Record {\n    const branch = Record.create();\n    this.forEach(function (item: Item): void {\n      branch.push(item);\n    }, this);\n    return branch;\n  }\n\n  override clone(): Record {\n    const clone = Record.create();\n    this.forEach(function (item: Item): void {\n      clone.push(item.clone());\n    }, this);\n    return clone;\n  }\n\n  override commit(): this {\n    return this;\n  }\n\n  build(): Record {\n    return this;\n  }\n\n  subRecord(lower?: number, upper?: number): Record {\n    const n = this.length;\n    if (lower === void 0) {\n      lower = 0;\n    } else if (lower < 0) {\n      lower = n + lower;\n    }\n    lower = Math.min(Math.max(0, lower), n);\n    if (upper === void 0) {\n      upper = n;\n    } else if (upper < 0) {\n      upper = n + upper;\n    }\n    const record = Record.create();\n    this.forEach(function (item: Item, index: number): null | void {\n      if (index < lower!) {\n        return;\n      } else if (index < upper!) {\n        record.push(item);\n        return;\n      } else {\n        return null;\n      }\n    }, this);\n    return record;\n  }\n\n  abstract override forEach<T>(callback: (item: Item, index: number) => T | void): T | undefined;\n  abstract override forEach<T, S>(callback: (this: S, item: Item, index: number) => T | void, thisArg: S): T | undefined;\n\n  override iterator(): Cursor<Item> {\n    return new RecordCursor(this);\n  }\n\n  override interpolateTo(that: Record): Interpolator<Record>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Record) {\n      return RecordInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 3;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Record) {\n      const xs = this.iterator();\n      const ys = that.iterator();\n      let order = 0;\n      do {\n        if (!xs.isEmpty() && !ys.isEmpty()) {\n          order = xs.head().compareTo(ys.head());\n          xs.step();\n          ys.step();\n        } else {\n          break;\n        }\n      } while (order === 0);\n      if (order !== 0) {\n        return order;\n      } else if (xs.isEmpty() && !ys.isEmpty()) {\n        return -1;\n      } else if (!xs.isEmpty() && ys.isEmpty()) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Record) {\n      const xs = this.iterator();\n      const ys = that.iterator();\n      while (!xs.isEmpty() && !ys.isEmpty()) {\n        if (!xs.head().equivalentTo(ys.head(), epsilon)) {\n          return false;\n        }\n        xs.step();\n        ys.step();\n      }\n      return xs.isEmpty() && ys.isEmpty();\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Record) {\n      const xs = this.iterator();\n      const ys = that.iterator();\n      while (!xs.isEmpty() && !ys.isEmpty()) {\n        if (!xs.head().equals(ys.head())) {\n          return false;\n        }\n        xs.step();\n        ys.step();\n      }\n      return xs.isEmpty() && ys.isEmpty();\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    let hashValue = Constructors.hash(Record);\n    this.forEach(function (item: Item): void {\n      hashValue = Murmur3.mix(hashValue, item.hashCode());\n    }, this);\n    return hashValue;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Record\").write(46/*'.'*/);\n    if (this.isEmpty()) {\n      output = output.write(\"empty\").write(40/*'('*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"of\").write(40/*'('*/);\n      this.forEach(function (item: Item, index: number): void {\n        if (index !== 0) {\n          output = output.write(44/*','*/).write(32/*' '*/);\n        }\n        output = output.display(item);\n      }, this);\n      output = output.write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @internal */\n  static readonly AliasedFlag: number = 1;\n  /** @internal */\n  static readonly ImmutableFlag: number = 2;\n\n  static override empty(): Record {\n    return RecordMap.empty();\n  }\n\n  static create(initialCapacity?: number): Record {\n    return RecordMap.create(initialCapacity);\n  }\n\n  static of(...items: ItemLike[]): Record {\n    return RecordMap.of(...items);\n  }\n\n  static override fromLike(value: RecordLike): Record {\n    if (value instanceof Record) {\n      return value;\n    } else if (Array.isArray(value)) {\n      return Record.fromArray(value);\n    } else if (typeof value === \"object\" && value !== null) {\n      return Record.fromObject(value as {[key: string]: ValueLike});\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromArray(array: {[index: number]: ItemLike, length?: number}): Record {\n    const n = array.length || 0;\n    const record = Record.create(n);\n    for (let i = 0; i < n; i += 1) {\n      record.push(Item.fromLike(array[i]));\n    }\n    return record;\n  }\n\n  static fromObject(object: {[key: string]: ValueLike}): Record {\n    const record = Record.create();\n    for (const key in object) {\n      const value = object[key];\n      if (key.charCodeAt(0) === 36/*'$'*/) {\n        if (!value || typeof value !== \"object\" || !Object.prototype.hasOwnProperty.call(value, \"$key\")) {\n          record.push(Value.fromLike(value));\n        } else {\n          record.push(Field.of((value as any).$key, (value as any).$value));\n        }\n      } else {\n        record.push(Field.of(key, value));\n      }\n    }\n    return record;\n  }\n\n  /** @internal */\n  static expand(n: number): number {\n    n = Math.max(8, n) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8; n |= n >> 16;\n    return n + 1;\n  }\n}\nObject.defineProperty(Record.prototype, \"fieldCount\", {\n  get(this: Record): number {\n    let count = 0;\n    this.forEach(function (member: Item): void {\n      if (member instanceof Field) {\n        count += 1;\n      }\n    }, this);\n    return count;\n  },\n  configurable: true,\n});\n\n/** @internal */\nexport interface RecordInterpolator extends Interpolator<Record> {\n  /** @internal */\n  readonly interpolators: readonly Interpolator<Item>[];\n\n  readonly 0: Record;\n\n  readonly 1: Record;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const RecordInterpolator = (function (_super: typeof Interpolator) {\n  const RecordInterpolator = function (y0: Record, y1: Record): RecordInterpolator {\n    const interpolator = function (u: number): Record {\n      const interpolators = interpolator.interpolators;\n      const interpolatorCount = interpolators.length;\n      const record = Record.create(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        record.push(interpolators[i]!(u));\n      }\n      return record;\n    } as RecordInterpolator;\n    Object.setPrototypeOf(interpolator, RecordInterpolator.prototype);\n    const interpolatorCount = Math.min(y0.length, y1.length);\n    const interpolators = new Array<Interpolator<Item>>(interpolatorCount);\n    for (let i = 0; i < interpolatorCount; i += 1) {\n      interpolators[i] = y0.getItem(i)!.interpolateTo(y1.getItem(i)!);\n    }\n    (interpolator as Mutable<typeof interpolator>).interpolators = interpolators;\n    return interpolator;\n  } as {\n    (y0: Record, y1: Record): RecordInterpolator;\n\n    /** @internal */\n    prototype: RecordInterpolator;\n  };\n\n  RecordInterpolator.prototype = Object.create(_super.prototype);\n  RecordInterpolator.prototype.constructor = RecordInterpolator;\n\n  Object.defineProperty(RecordInterpolator.prototype, 0, {\n    get(this: RecordInterpolator): Record {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const record = Record.create(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        record.push(interpolators[i]![0]);\n      }\n      return record;\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(RecordInterpolator.prototype, 1, {\n    get(this: RecordInterpolator): Record {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const record = Record.create(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        record.push(interpolators[i]![1]);\n      }\n      return record;\n    },\n    configurable: true,\n  });\n\n  RecordInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof RecordInterpolator) {\n      const n = this.interpolators.length;\n      if (n === that.interpolators.length) {\n        for (let i = 0; i < n; i += 1) {\n          if (!this.interpolators[i]!.equals(that.interpolators[i]!)) {\n            return false;\n          }\n        }\n        return true;\n      }\n    }\n    return false;\n  };\n\n  return RecordInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class RecordCursor extends Cursor<Item> {\n  constructor(record: Record, lower?: number, upper?: number, index?: number) {\n    super();\n    if (lower === void 0) {\n      lower = 0;\n    }\n    if (upper === void 0) {\n      upper = record.length;\n    }\n    if (index === void 0) {\n      index = lower;\n    }\n    this.record = record;\n    this.lower = lower;\n    this.upper = upper;\n    this.index = index;\n    this.direction = 0;\n  }\n\n  /** @internal */\n  readonly record: Record;\n\n  /** @internal */\n  readonly lower: number;\n\n  /** @internal */\n  readonly upper: number;\n\n  /** @internal */\n  readonly index: number;\n\n  /** @internal */\n  readonly direction: number;\n\n  override isEmpty(): boolean {\n    return this.index >= this.upper;\n  }\n\n  override head(): Item {\n    (this as Mutable<this>).direction = 0;\n    if (this.index >= this.upper) {\n      throw new Error(\"empty\");\n    }\n    return this.record.getItem(this.index);\n  }\n\n  override step(): void {\n    (this as Mutable<this>).direction = 0;\n    const index = this.index;\n    if (index >= this.upper) {\n      throw new Error(\"empty\");\n    }\n    (this as Mutable<this>).index = index + 1;\n  }\n\n  override skip(count: number): void {\n    (this as Mutable<this>).index = Math.min(Math.max(this.lower, this.index + count, this.upper));\n  }\n\n  override hasNext(): boolean {\n    return this.index < this.upper;\n  }\n\n  override nextIndex(): number {\n    return this.index - this.lower;\n  }\n\n  override next(): IteratorResult<Item> {\n    (this as Mutable<this>).direction = 1;\n    const index = this.index;\n    if (index >= this.upper) {\n      (this as Mutable<this>).index = this.upper;\n      return {done: true, value: void 0};\n    }\n    (this as Mutable<this>).index = index + 1;\n    return {done: this.index === this.upper, value: this.record.getItem(index)};\n  }\n\n  override hasPrevious(): boolean {\n    return this.index > this.lower;\n  }\n\n  override previousIndex(): number {\n    return this.index - this.lower - 1;\n  }\n\n  override previous(): IteratorResult<Item> {\n    (this as Mutable<this>).direction = -1;\n    const index = this.index - 1;\n    if (index < this.lower) {\n      (this as Mutable<this>).index = 0;\n      return {done: true, value: void 0};\n    }\n    (this as Mutable<this>).index = index;\n    return {done: index === this.lower, value: this.record.getItem(index)};\n  }\n\n  override set(newItem: Item): void {\n    if (this.direction > 0) {\n      this.record.setItem(this.index - 1, newItem);\n    } else {\n      this.record.setItem(this.index, newItem);\n    }\n  }\n\n  override delete(): void {\n    let index = this.index;\n    if (this.direction > 0) {\n      index -= 1;\n      (this as Mutable<this>).index = index;\n    }\n    this.record.splice(index, 1);\n    (this as Mutable<this>).direction = 0;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Field} from \"./Field\";\nimport {Attr} from \"./Attr\";\nimport {Slot} from \"./Slot\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {Record} from \"./Record\";\nimport {RecordMapView} from \"./\"; // forward import\nimport type {TextLike} from \"./Text\";\nimport {Text} from \"./\"; // forward import\nimport type {NumLike} from \"./Num\";\nimport {Num} from \"./\"; // forward import\nimport type {InterpreterLike} from \"./interpreter/Interpreter\"; // forward import\nimport {Interpreter} from \"./\"; // forward import\n\n/** @internal */\nexport class RecordMap extends Record {\n  constructor(array: Array<Item> | null, table: Array<Field> | null,\n              length: number, fieldCount: number, flags: number) {\n    super();\n    this.array = array;\n    this.table = table;\n    Object.defineProperty(this, \"length\", {\n      value: length,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    });\n    Object.defineProperty(this, \"fieldCount\", {\n      value: fieldCount,\n      writable: true,\n      enumerable: true,\n      configurable: true,\n    });\n    this.flags = flags;\n  }\n\n  /** @internal */\n  readonly array: Array<Item> | null;\n\n  /** @internal */\n  readonly table: Array<Field> | null;\n\n  override isEmpty(): boolean {\n    return this.length === 0;\n  }\n\n  override readonly length!: number;\n\n  override readonly fieldCount!: number;\n\n  override get valueCount(): number {\n    return this.length - this.fieldCount;\n  }\n\n  /** @internal */\n  readonly flags: number;\n\n  override isConstant(): boolean {\n    const array = this.array;\n    for (let i = 0; i < this.length; i += 1) {\n      if (!array![i]!.isConstant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override get tag(): string | undefined {\n    if (this.fieldCount === 0) {\n      return void 0;\n    }\n    const head = this.array![0];\n    if (!(head instanceof Attr)) {\n      return void 0;\n    }\n    return head.key.value;\n  }\n\n  override get target(): Value {\n    let value: Value | undefined;\n    let record: Record | undefined;\n    let modified = false;\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      const item = array[i];\n      if (item instanceof Attr) {\n        modified = true;\n      } else if (value === void 0 && item instanceof Value) {\n        value = item;\n      } else {\n        if (record === void 0) {\n          record = Record.create();\n          if (value !== void 0) {\n            record.push(value);\n          }\n        }\n        record.push(item);\n      }\n    }\n    if (value === void 0) {\n      return Value.extant();\n    } else if (record === void 0) {\n      return value;\n    } else if (modified) {\n      return record;\n    }\n    return this;\n  }\n\n  override head(): Item {\n    if (this.length === 0) {\n      return Item.absent();\n    }\n    return this.array![0]!;\n  }\n\n  override tail(): Record {\n    const n = this.length;\n    if (n === 0) {\n      return Record.empty();\n    }\n    return new RecordMapView(this, 1, n);\n  }\n\n  override body(): Value {\n    const n = this.length;\n    if (n === 0 || n === 1) {\n      return Value.absent();\n    } else if (n === 2) {\n      const item = this.array![1];\n      if (item instanceof Value) {\n        return item;\n      }\n      return Record.of(item);\n    }\n    return new RecordMapView(this, 1, n).branch();\n  }\n\n  override has(key: ValueLike): boolean {\n    if (this.fieldCount === 0) {\n      return false;\n    }\n    key = Value.fromLike(key);\n    const table = this.hashTable()!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        return true;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    return false;\n  }\n\n  override indexOf(item: ItemLike, index: number = 0): number {\n    item = Item.fromLike(item);\n    const array = this.array!;\n    const n = this.length;\n    if (index < 0) {\n      index = Math.max(0, n + index);\n    }\n    while (index < n) {\n      if (item.equals(array[index])) {\n        return index;\n      }\n      index += 1;\n    }\n    return -1;\n  }\n\n  override lastIndexOf(item: ItemLike, index?: number): number {\n    item = Item.fromLike(item);\n    const array = this.array!;\n    const n = this.length;\n    if (index === void 0) {\n      index = n - 1;\n    } else if (index < 0) {\n      index = n + index;\n    }\n    index = Math.min(index, n - 1);\n    while (index >= 0) {\n      if (item.equals(array[index])) {\n        return index;\n      }\n      index -= 1;\n    }\n    return -1;\n  }\n\n  override get(key: ValueLike): Value {\n    if (this.fieldCount === 0) {\n      return Value.absent();\n    }\n    key = Value.fromLike(key);\n    const table = this.hashTable()!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        return field.value;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    return Value.absent();\n  }\n\n  override getAttr(key: TextLike): Value {\n    if (this.fieldCount === 0) {\n      return Value.absent();\n    }\n    key = Text.fromLike(key);\n    const table = this.hashTable()!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field instanceof Attr && field.key.equals(key)) {\n        return field.value;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    return Value.absent();\n  }\n\n  override getSlot(key: ValueLike): Value {\n    if (this.fieldCount === 0) {\n      return Value.absent();\n    }\n    key = Value.fromLike(key);\n    const table = this.hashTable()!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field instanceof Slot && field.key.equals(key)) {\n        return field.value;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    return Value.absent();\n  }\n\n  override getField(key: ValueLike): Field | undefined {\n    if (this.fieldCount === 0) {\n      return void 0;\n    }\n    key = Value.fromLike(key);\n    const table = this.hashTable()!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        return field;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    return void 0;\n  }\n\n  override getItem(index: NumLike): Item {\n    if (index instanceof Num) {\n      index = index.value;\n    }\n    const n = this.length;\n    if (index < 0) {\n      index = n + index;\n    }\n    if (index < 0 || index >= n) {\n      return Item.absent();\n    }\n    return this.array![index]!;\n  }\n\n  override set(key: ValueLike, newValue: Value): this {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      if (this.fieldCount > 0) {\n        this.setAliased(key, newValue);\n      } else {\n        this.pushAliased(new Slot(key, newValue));\n      }\n    } else if (this.fieldCount > 0) {\n      if (this.table !== null) {\n        this.setMutable(key, newValue);\n      } else {\n        this.updateMutable(key, newValue);\n      }\n    } else {\n      this.pushMutable(new Slot(key, newValue));\n    }\n    return this;\n  }\n\n  /** @internal */\n  setAliased(key: Value, newValue: Value): void {\n    const n = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(n + 1));\n    for (let i = 0; i < n; i += 1) {\n      const item = oldArray[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        newArray[i] = item.updatedValue(newValue);\n        i += 1;\n        while (i < n) {\n          newArray[i] = oldArray[i];\n          i += 1;\n        }\n        (this as Mutable<this>).array = newArray;\n        (this as Mutable<this>).table = null;\n        (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n        return;\n      }\n      newArray[i] = item;\n    }\n    newArray[n] = new Slot(key, newValue);\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = n + 1;\n    (this as Mutable<this>).fieldCount += 1;\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  setMutable(key: Value, newValue: Value): void {\n    const table = this.table!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        if (field.isMutable()) {\n          field.setValue(newValue);\n        } else {\n          this.updateMutable(key, newValue);\n        }\n        return;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    const field = new Slot(key, newValue);\n    this.pushMutable(field);\n    RecordMap.put(table, field);\n  }\n\n  /** @internal */\n  updateMutable(key: Value, newValue: Value): void {\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      const item = array[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        array[i] = item.updatedValue(newValue);\n        (this as Mutable<this>).table = null;\n        return;\n      }\n    }\n    const field = new Slot(key, newValue);\n    this.pushMutable(field);\n    RecordMap.put(this.table, field);\n  }\n\n  override setAttr(key: TextLike, newValue: Value): this {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    key = Text.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      if (this.fieldCount > 0) {\n        this.setAttrAliased(key, newValue);\n      } else {\n        this.pushAliased(new Attr(key, newValue));\n      }\n    } else if (this.fieldCount > 0) {\n      if (this.table !== null) {\n        this.setAttrMutable(key, newValue);\n      } else {\n        this.updateAttrMutable(key, newValue);\n      }\n    } else {\n      this.pushMutable(new Attr(key, newValue));\n    }\n    return this;\n  }\n\n  /** @internal */\n  setAttrAliased(key: Text, newValue: Value): void {\n    const n = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(n + 1));\n    for (let i = 0; i < n; i += 1) {\n      const item = oldArray[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        newArray[i] = new Attr(key, newValue);\n        i += 1;\n        while (i < n) {\n          newArray[i] = oldArray[i];\n          i += 1;\n        }\n        (this as Mutable<this>).array = newArray;\n        (this as Mutable<this>).table = null;\n        (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n        return;\n      }\n      newArray[i] = item;\n    }\n    newArray[n] = new Attr(key, newValue);\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = n + 1;\n    (this as Mutable<this>).fieldCount += 1;\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  setAttrMutable(key: Text, newValue: Value): void {\n    const table = this.table!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        if (field instanceof Attr && field.isMutable()) {\n          field.setValue(newValue);\n        } else {\n          this.updateAttrMutable(key, newValue);\n        }\n        return;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    const field = new Attr(key, newValue);\n    this.push(field);\n    RecordMap.put(table, field);\n  }\n\n  /** @internal */\n  updateAttrMutable(key: Text, newValue: Value): void {\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      const item = array[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        array[i] = new Attr(key, newValue);\n        (this as Mutable<this>).table = null;\n        return;\n      }\n    }\n    const field = new Attr(key, newValue);\n    this.push(field);\n    RecordMap.put(this.table, field);\n  }\n\n  override setSlot(key: ValueLike, newValue: Value): this {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      if (this.fieldCount > 0) {\n        this.setSlotAliased(key, newValue);\n      } else {\n        this.pushAliased(new Slot(key, newValue));\n      }\n    } else if (this.fieldCount > 0) {\n      if (this.table !== null) {\n        this.setSlotMutable(key, newValue);\n      } else {\n        this.updateSlotMutable(key, newValue);\n      }\n    } else {\n      this.pushMutable(new Slot(key, newValue));\n    }\n    return this;\n  }\n\n  /** @internal */\n  setSlotAliased(key: Value, newValue: Value): void {\n    const n = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(n + 1));\n    for (let i = 0; i < n; i += 1) {\n      const item = oldArray[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        newArray[i] = new Slot(key, newValue);\n        i += 1;\n        while (i < n) {\n          newArray[i] = oldArray[i];\n          i += 1;\n        }\n        (this as Mutable<this>).array = newArray;\n        (this as Mutable<this>).table = null;\n        (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n        return;\n      }\n      newArray[i] = item;\n    }\n    newArray[n] = new Slot(key, newValue);\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = n + 1;\n    (this as Mutable<this>).fieldCount += 1;\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  setSlotMutable(key: Value, newValue: Value): void {\n    const table = this.table!;\n    const n = table.length;\n    //assert(n > 0);\n    const x = Math.abs(key.hashCode() % n);\n    let i = x;\n    do {\n      const field = table[i];\n      if (field === void 0) {\n        break;\n      } else if (field.key.equals(key)) {\n        if (field instanceof Slot && field.isMutable()) {\n          field.setValue(newValue);\n        } else {\n          this.updateSlotMutable(key, newValue);\n        }\n        return;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    const field = new Slot(key, newValue);\n    this.push(field);\n    RecordMap.put(table, field);\n  }\n\n  /** @internal */\n  updateSlotMutable(key: Value, newValue: Value): void {\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      const item = array[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        array[i] = new Slot(key, newValue);\n        (this as Mutable<this>).table = null;\n        return;\n      }\n    }\n    const field = new Slot(key, newValue);\n    this.push(field);\n    RecordMap.put(this.table, field);\n  }\n\n  override setItem(index: number, newItem: ItemLike): this {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    newItem = Item.fromLike(newItem);\n    const n = this.length;\n    if (index < 0) {\n      index = n + index;\n    }\n    if (index < 0 || index > n) {\n      throw new RangeError(\"\" + index);\n    }\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      this.setItemAliased(index, newItem);\n    } else {\n      this.setItemMutable(index, newItem);\n    }\n    return this;\n  }\n\n  /** @internal */\n  setItemAliased(index: number, newItem: Item): void {\n    const n = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(n));\n    for (let i = 0; i < n; i += 1) {\n      newArray[i] = oldArray[i];\n    }\n    const oldItem = oldArray[index];\n    newArray[index] = newItem;\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    if (newItem instanceof Field) {\n      if (!(oldItem instanceof Field)) {\n        (this as Mutable<this>).fieldCount += 1;\n      }\n    } else if (oldItem instanceof Field) {\n      (this as Mutable<this>).fieldCount -= 1;\n    }\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  setItemMutable(index: number, newItem: Item): void {\n    const array = this.array!;\n    const oldItem = array[index];\n    array[index] = newItem;\n    if (newItem instanceof Field) {\n      (this as Mutable<this>).table = null;\n      if (!(oldItem instanceof Field)) {\n        (this as Mutable<this>).fieldCount += 1;\n      }\n    } else if (oldItem instanceof Field) {\n      (this as Mutable<this>).table = null;\n      (this as Mutable<this>).fieldCount -= 1;\n    }\n  }\n\n  override updated(key: ValueLike, newValue: ValueLike): Record {\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const record = (this.flags & Record.ImmutableFlag) === 0 ? this : this.branch();\n    if ((record.flags & Record.AliasedFlag) !== 0) {\n      if (record.fieldCount > 0) {\n        record.setAliased(key, newValue);\n      } else {\n        record.pushAliased(new Slot(key, newValue));\n      }\n    } else if (record.fieldCount > 0) {\n      if (record.table !== null) {\n        record.setMutable(key, newValue);\n      } else {\n        record.updateMutable(key, newValue);\n      }\n    } else {\n      record.pushMutable(new Slot(key, newValue));\n    }\n    return record;\n  }\n\n  override updatedAttr(key: TextLike, newValue: ValueLike): Record {\n    key = Text.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const record = (this.flags & Record.ImmutableFlag) === 0 ? this : this.branch();\n    if ((record.flags & Record.AliasedFlag) !== 0) {\n      if (record.fieldCount > 0) {\n        record.setAttrAliased(key, newValue);\n      } else {\n        record.pushAliased(new Attr(key, newValue));\n      }\n    } else if (record.fieldCount > 0) {\n      if (record.table !== null) {\n        record.setAttrMutable(key, newValue);\n      } else {\n        record.updateAttrMutable(key, newValue);\n      }\n    } else {\n      record.pushMutable(new Attr(key, newValue));\n    }\n    return record;\n  }\n\n  override updatedSlot(key: ValueLike, newValue: ValueLike): Record {\n    key = Value.fromLike(key);\n    newValue = Value.fromLike(newValue);\n    const record = (this.flags & Record.ImmutableFlag) === 0 ? this : this.branch();\n    if ((record.flags & Record.AliasedFlag) !== 0) {\n      if (record.fieldCount > 0) {\n        record.setSlotAliased(key, newValue);\n      } else {\n        record.pushAliased(new Slot(key, newValue));\n      }\n    } else if (record.fieldCount > 0) {\n      if (record.table !== null) {\n        record.setSlotMutable(key, newValue);\n      } else {\n        record.updateSlotMutable(key, newValue);\n      }\n    } else {\n      record.pushMutable(new Slot(key, newValue));\n    }\n    return record;\n  }\n\n  override push(...newItems: ItemLike[]): number {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      this.pushAliased(...newItems);\n    } else {\n      this.pushMutable(...newItems);\n    }\n    return this.length;\n  }\n\n  /** @internal */\n  pushAliased(...newItems: ItemLike[]): void {\n    const k = newItems.length;\n    let m = this.length;\n    let n = this.fieldCount;\n    const oldArray = this.array;\n    const newArray = new Array(Record.expand(m + k));\n    if (oldArray !== null) {\n      for (let i = 0; i < m; i += 1) {\n        newArray[i] = oldArray[i];\n      }\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[m] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n      }\n    }\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = m;\n    (this as Mutable<this>).fieldCount = n;\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  pushMutable(...newItems: ItemLike[]): void {\n    const k = newItems.length;\n    let m = this.length;\n    let n = this.fieldCount;\n    const oldArray = this.array;\n    let newArray;\n    if (oldArray === null || m + k > oldArray.length) {\n      newArray = new Array(Record.expand(m + k));\n      if (oldArray !== null) {\n        for (let i = 0; i < m; i += 1) {\n          newArray[i] = oldArray[i];\n        }\n      }\n    } else {\n      newArray = oldArray;\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[m] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n        (this as Mutable<this>).table = null;\n      }\n    }\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).length = m;\n    (this as Mutable<this>).fieldCount = n;\n  }\n\n  splice(start: number, deleteCount: number = 0, ...newItems: ItemLike[]): Item[] {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    const n = this.length;\n    if (start < 0) {\n      start = n + start;\n    }\n    start = Math.min(Math.max(0, start), n);\n    deleteCount = Math.min(Math.max(0, deleteCount), n - start);\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      return this.spliceAliased(start, deleteCount, ...newItems);\n    } else {\n      return this.spliceMutable(start, deleteCount, ...newItems);\n    }\n  }\n\n  /** @internal */\n  spliceAliased(start: number, deleteCount: number, ...newItems: ItemLike[]): Item[] {\n    const k = newItems.length;\n    let m = this.length;\n    let n = this.fieldCount;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(m - deleteCount + k));\n    for (let i = 0; i < start; i += 1) {\n      newArray[i] = oldArray[i];\n    }\n    const oldItems: Item[] = [];\n    for (let i = start; i < start + deleteCount; i += 1) {\n      const oldItem = oldArray[i]!;\n      oldItems.push(oldItem);\n      m -= 1;\n      if (oldItem instanceof Field) {\n        n -= 1;\n      }\n    }\n    for (let i = start; i < m; i += 1) {\n      newArray[i + k] = oldArray[i + deleteCount];\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[i + start] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n      }\n    }\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = m;\n    (this as Mutable<this>).fieldCount = n;\n    (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n    return oldItems;\n  }\n\n  /** @internal */\n  spliceMutable(start: number, deleteCount: number, ...newItems: ItemLike[]): Item[] {\n    const k = newItems.length;\n    let m = this.length;\n    let n = this.fieldCount;\n    const oldArray = this.array!;\n    let newArray;\n    if (oldArray === null || m - deleteCount + k > oldArray.length) {\n      newArray = new Array(Record.expand(m - deleteCount + k));\n      if (oldArray !== null) {\n        for (let i = 0; i < start; i += 1) {\n          newArray[i] = oldArray[i];\n        }\n      }\n    } else {\n      newArray = oldArray;\n    }\n    const oldItems: Item[] = [];\n    for (let i = start; i < start + deleteCount; i += 1) {\n      const oldItem = oldArray[i]!;\n      oldItems.push(oldItem);\n      m -= 1;\n      if (oldItem instanceof Field) {\n        n -= 1;\n      }\n    }\n    if (k > deleteCount) {\n      for (let i = m - 1; i >= start; i -= 1) {\n        newArray[i + k] = oldArray[i + deleteCount];\n      }\n    } else {\n      for (let i = start; i < m; i += 1) {\n        newArray[i + k] = oldArray[i + deleteCount];\n      }\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[i + start] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n      }\n    }\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).length = m;\n    (this as Mutable<this>).fieldCount = n;\n    return oldItems;\n  }\n\n  override delete(key: ValueLike): Item {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    key = Value.fromLike(key);\n    if ((this.flags & Record.AliasedFlag) !== 0) {\n      return this.deleteAliased(key);\n    } else {\n      return this.deleteMutable(key);\n    }\n  }\n\n  /** @internal */\n  deleteAliased(key: Value): Item {\n    const n = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(Record.expand(n));\n    for (let i = 0; i < n; i += 1) {\n      const item = oldArray[i];\n      if (item instanceof Field && item.key.equals(key)) {\n        for (let j = i + 1; j < n; j += 1, i += 1) {\n          newArray[i] = oldArray[j];\n        }\n        (this as Mutable<this>).array = newArray;\n        (this as Mutable<this>).table = null;\n        (this as Mutable<this>).length = n - 1;\n        (this as Mutable<this>).fieldCount -= 1;\n        (this as Mutable<this>).flags &= ~Record.AliasedFlag;\n        return item;\n      }\n      newArray[i] = item;\n    }\n    return Item.absent();\n  }\n\n  /** @internal */\n  deleteMutable(key: Value): Item {\n    const n = this.length;\n    const array = this.array!;\n    for (let i = 0; i < n; i += 1) {\n      const item = array[i]!;\n      if (item instanceof Field && item.key.equals(key)) {\n        for (let j = i + 1; j < n; j += 1, i += 1) {\n          array[i] = array[j]!;\n        }\n        array[n - 1] = void 0 as unknown as Item;\n        (this as Mutable<this>).table = null;\n        (this as Mutable<this>).length = n - 1;\n        (this as Mutable<this>).fieldCount -= 1;\n        return item;\n      }\n    }\n    return Item.absent();\n  }\n\n  override clear(): void {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    (this as Mutable<this>).array = null;\n    (this as Mutable<this>).table = null;\n    (this as Mutable<this>).length = 0;\n    (this as Mutable<this>).fieldCount = 0;\n    (this as Mutable<this>).flags = 0;\n  }\n\n  override isAliased(): boolean {\n    return (this.flags & Record.AliasedFlag) !== 0;\n  }\n\n  override isMutable(): boolean {\n    return (this.flags & Record.ImmutableFlag) === 0;\n  }\n\n  override alias(): void {\n    (this as Mutable<this>).flags |= Record.AliasedFlag;\n  }\n\n  override branch(): RecordMap {\n    if ((this.flags & (Record.AliasedFlag | Record.ImmutableFlag)) === 0) {\n      const array = this.array!;\n      for (let i = 0; i < this.length; i += 1) {\n        array[i]!.alias();\n      }\n    }\n    (this as Mutable<this>).flags |= Record.AliasedFlag;\n    return new RecordMap(this.array, this.table, this.length, this.fieldCount, Record.AliasedFlag);\n  }\n\n  override clone(): RecordMap {\n    const itemCount = this.length;\n    const oldArray = this.array!;\n    const newArray = new Array(itemCount);\n    for (let i = 0; i < itemCount; i += 1) {\n      newArray[i] = oldArray[i]!.clone();\n    }\n    return new RecordMap(newArray, null, itemCount, this.fieldCount, 0);\n  }\n\n  override commit(): this {\n    if ((this.flags & Record.ImmutableFlag) !== 0) {\n      return this;\n    }\n    (this as Mutable<this>).flags |= Record.ImmutableFlag;\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      array[i]!.commit();\n    }\n    return this;\n  }\n\n  hashTable(): Array<Field> | null {\n    const n = this.fieldCount;\n    let table = this.table;\n    if (n !== 0 && table === null) {\n      table = new Array(Record.expand(Math.max(n, n * 10 / 7)));\n      const array = this.array!;\n      for (let i = 0; i < this.length; i += 1) {\n        const item = array[i];\n        if (item instanceof Field) {\n          RecordMap.put(table, item);\n        }\n      }\n      (this as Mutable<this>).table = table;\n    }\n    return table;\n  }\n\n  /** @internal */\n  static put(table: Field[] | null, field: Field): void {\n    if (table === null) {\n      return;\n    }\n    const n = table.length;\n    const x = Math.abs(field.key.hashCode() % n);\n    let i = x;\n    do {\n      const item = table[i];\n      if (item === void 0 || field.key.equals(item.key)) {\n        table[i] = field;\n        return;\n      }\n      i = (i + 1) % n;\n    } while (i !== x);\n    throw new Error();\n  }\n\n  override evaluate(interpreter: InterpreterLike): Record {\n    interpreter = Interpreter.fromLike(interpreter);\n    const array = this.array!;\n    const n = this.length;\n    const scope = Record.create(n);\n    interpreter.pushScope(scope);\n    let changed = false;\n    for (let i = 0; i < n; i += 1) {\n      const oldItem = array[i]!;\n      const newItem = oldItem.evaluate(interpreter);\n      if (newItem.isDefined()) {\n        scope.push(newItem);\n      }\n      if (oldItem !== newItem) {\n        changed = true;\n      }\n    }\n    interpreter.popScope();\n    return changed ? scope : this;\n  }\n\n  override substitute(interpreter: InterpreterLike): Record {\n    interpreter = Interpreter.fromLike(interpreter);\n    const array = this.array!;\n    const n = this.length;\n    const scope = Record.create(n);\n    interpreter.pushScope(scope);\n    let changed = false;\n    for (let i = 0; i < n; i += 1) {\n      const oldItem = array[i]!;\n      const newItem = oldItem.substitute(interpreter);\n      if (newItem.isDefined()) {\n        scope.push(newItem);\n      }\n      if (oldItem !== newItem) {\n        changed = true;\n      }\n    }\n    interpreter.popScope();\n    return changed ? scope : this;\n  }\n\n  override subRecord(lower?: number, upper?: number): Record {\n    const n = this.length;\n    if (lower === void 0) {\n      lower = 0;\n    } else if (lower < 0) {\n      lower = n + lower;\n    }\n    if (upper === void 0) {\n      upper = n;\n    } else if (upper < 0) {\n      upper = n + upper;\n    }\n    if (lower < 0 || upper > n || lower > upper) {\n      throw new RangeError(lower + \", \" + upper);\n    }\n    return new RecordMapView(this, lower, upper);\n  }\n\n  override forEach<T>(callback: (item: Item, index: number) => T | void): T | undefined;\n  override forEach<T, S>(callback: (this: S, item: Item, index: number) => T | void, thisArg: S): T | undefined;\n  override forEach<T, S>(callback: (this: S | undefined, item: Item, index: number) => T | void, thisArg?: S): T | undefined {\n    const array = this.array!;\n    for (let i = 0; i < this.length; i += 1) {\n      const result = callback.call(thisArg, array[i]!, i);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  @Lazy\n  static override empty(): RecordMap {\n    return new RecordMap(null, null, 0, 0, Record.AliasedFlag | Record.ImmutableFlag);\n  }\n\n  static override create(initialCapacity?: number): RecordMap {\n    if (initialCapacity === void 0) {\n      return new RecordMap(null, null, 0, 0, Record.AliasedFlag);\n    }\n    return new RecordMap(new Array(initialCapacity), null, 0, 0, 0);\n  }\n\n  static override of(...items: ItemLike[]): RecordMap {\n    const n = items.length;\n    if (n === 0) {\n      return new RecordMap(null, null, 0, 0, Record.AliasedFlag);\n    }\n    const array = new Array(n);\n    let itemCount = 0;\n    let fieldCount = 0;\n    for (let i = 0; i < n; i += 1) {\n      const item = Item.fromLike(items[i]);\n      array[i] = item;\n      itemCount += 1;\n      if (item instanceof Field) {\n        fieldCount += 1;\n      }\n    }\n    return new RecordMap(array, null, itemCount, fieldCount, 0);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Field} from \"./Field\";\nimport {Attr} from \"./Attr\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {Record} from \"./Record\";\nimport {RecordMap} from \"./RecordMap\";\nimport type {NumLike} from \"./Num\";\nimport {Num} from \"./\"; // forward import\n\n/** @internal */\nexport class RecordMapView extends Record {\n  constructor(record: RecordMap, lower: number, upper: number) {\n    super();\n    this.record = record;\n    this.lower = lower;\n    this.upper = upper;\n  }\n\n  /** @internal */\n  readonly record: RecordMap;\n\n  /** @internal */\n  readonly lower: number;\n\n  /** @internal */\n  readonly upper: number;\n\n  override isEmpty(): boolean {\n    return this.lower === this.upper;\n  }\n\n  override isArray(): boolean {\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      if (array![i] instanceof Field) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override isObject(): boolean {\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      if (array![i] instanceof Value) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override get length(): number {\n    return this.upper - this.lower;\n  }\n\n  declare readonly fieldCount: number; // getter defined below to work around useDefineForClassFields lunacy\n\n  override get valueCount(): number {\n    let k = 0;\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      if (array![i] instanceof Value) {\n        k += 1;\n      }\n    }\n    return k;\n  }\n\n  override isConstant(): boolean {\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      if (!array![i]!.isConstant()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override get tag(): string | undefined {\n    if (this.length === 0) {\n      return void 0;\n    }\n    const item = this.record.array![this.lower];\n    if (!(item instanceof Attr)) {\n      return void 0;\n    }\n    return item.key.value;\n  }\n\n  override get target(): Value {\n    let value: Value | undefined;\n    let record: Record | undefined;\n    let modified = false;\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      const item = array![i];\n      if (item instanceof Attr) {\n        modified = true;\n      } else if (value === void 0 && item instanceof Value) {\n        value = item;\n      } else {\n        if (record === void 0) {\n          record = Record.create();\n          if (value !== void 0) {\n            record.push(value);\n          }\n        }\n        record.push(item);\n      }\n    }\n    if (value === void 0) {\n      return Value.extant();\n    } else if (record === void 0) {\n      return value;\n    } else if (modified) {\n      return record;\n    }\n    return this;\n  }\n\n  override head(): Item {\n    if (this.length === 0) {\n      return Item.absent();\n    }\n    return this.record.array![this.lower]!;\n  }\n\n  override tail(): Record {\n    if (this.length === 0) {\n      return Record.empty();\n    }\n    return new RecordMapView(this.record, this.lower + 1, this.upper);\n  }\n\n  override body(): Value {\n    const n = this.length;\n    if (n === 0 || n === 1) {\n      return Value.absent();\n    } else if (n === 2) {\n      const item = this.record.array![this.lower + 1];\n      if (item instanceof Value) {\n        return item;\n      }\n      return Record.of(item);\n    }\n    return new RecordMapView(this.record, this.lower + 1, this.upper).branch();\n  }\n\n  override indexOf(item: ItemLike, index: number = 0): number {\n    item = Item.fromLike(item);\n    const array = this.record.array;\n    const n = this.length;\n    if (index < 0) {\n      index = Math.max(0, n + index);\n    }\n    index = this.lower + index;\n    while (index < this.upper) {\n      if (item.equals(array![index])) {\n        return index - this.lower;\n      }\n      index += 1;\n    }\n    return -1;\n  }\n\n  override lastIndexOf(item: ItemLike, index?: number): number {\n    item = Item.fromLike(item);\n    const array = this.record.array;\n    const n = this.length;\n    if (index === void 0) {\n      index = n - 1;\n    } else if (index < 0) {\n      index = n + index;\n    }\n    index = this.lower + Math.min(index, n - 1);\n    while (index >= this.lower) {\n      if (item.equals(array![index])) {\n        return index - this.lower;\n      }\n      index -= 1;\n    }\n    return -1;\n  }\n\n  override getItem(index: NumLike): Item {\n    if (index instanceof Num) {\n      index = index.value;\n    }\n    const n = this.length;\n    if (index < 0) {\n      index = n + index;\n    }\n    if (index < 0 || index >= n) {\n      return Item.absent();\n    }\n    return this.record.array![this.lower + index]!;\n  }\n\n  override setItem(index: number, newItem: ItemLike): this {\n    if ((this.record.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    newItem = Item.fromLike(newItem);\n    const n = this.length;\n    if (index < 0) {\n      index = n + index;\n    }\n    if (index < 0 || index > n) {\n      throw new RangeError(\"\" + index);\n    }\n    if ((this.record.flags & Record.AliasedFlag) !== 0) {\n      this.setItemAliased(index, newItem);\n    } else {\n      this.setItemMutable(index, newItem);\n    }\n    return this;\n  }\n\n  /** @internal */\n  setItemAliased(index: number, newItem: Item): void {\n    const record = this.record;\n    const n = record.length;\n    const oldArray = record.array;\n    const newArray = new Array(Record.expand(n));\n    for (let i = 0; i < n; i += 1) {\n      newArray[i] = oldArray![i];\n    }\n    const oldItem = oldArray !== null ? oldArray[this.lower + index] : null;\n    newArray[this.lower + index] = newItem;\n    (record as Mutable<RecordMap>).array = newArray;\n    (record as Mutable<RecordMap>).table = null;\n    if (newItem instanceof Field) {\n      if (!(oldItem instanceof Field)) {\n        (record as Mutable<RecordMap>).fieldCount += 1;\n      }\n    } else if (oldItem instanceof Field) {\n      (record as Mutable<RecordMap>).fieldCount -= 1;\n    }\n    (record as Mutable<RecordMap>).flags &= ~Record.AliasedFlag;\n  }\n\n  /** @internal */\n  setItemMutable(index: number, newItem: Item): void {\n    const record = this.record;\n    const array = record.array!;\n    const oldItem = array[this.lower + index];\n    array[this.lower + index] = newItem;\n    if (newItem instanceof Field) {\n      (record as Mutable<RecordMap>).table = null;\n      if (!(oldItem instanceof Field)) {\n        (record as Mutable<RecordMap>).fieldCount += 1;\n      }\n    } else if (oldItem instanceof Field) {\n      (record as Mutable<RecordMap>).table = null;\n      (record as Mutable<RecordMap>).fieldCount -= 1;\n    }\n  }\n\n  override push(...newItems: ItemLike[]): number {\n    if ((this.record.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    if ((this.record.flags & Record.AliasedFlag) !== 0) {\n      this.pushAliased(...newItems);\n    } else {\n      this.pushMutable(...newItems);\n    }\n    return this.length;\n  }\n\n  /** @internal */\n  pushAliased(...newItems: ItemLike[]): void {\n    const record = this.record;\n    const k = newItems.length;\n    let m = record.length;\n    let n = record.fieldCount;\n    const oldArray = record.array;\n    const newArray = new Array(Record.expand(m + k));\n    if (oldArray !== null) {\n      for (let i = 0; i < this.upper; i += 1) {\n        newArray[i] = oldArray[i];\n      }\n      for (let i = this.upper; i < m; i += 1) {\n        newArray[i + k] = oldArray[i];\n      }\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[i + this.upper] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n      }\n    }\n    (record as Mutable<RecordMap>).array = newArray;\n    (record as Mutable<RecordMap>).table = null;\n    (record as Mutable<RecordMap>).length = m;\n    (record as Mutable<RecordMap>).fieldCount = n;\n    (record as Mutable<RecordMap>).flags &= ~Record.AliasedFlag;\n    (this as Mutable<this>).upper += k;\n  }\n\n  /** @internal */\n  pushMutable(...newItems: ItemLike[]): void {\n    const record = this.record;\n    const k = newItems.length;\n    let m = record.length;\n    let n = record.fieldCount;\n    const oldArray = record.array!;\n    let newArray;\n    if (oldArray === null || m + k > oldArray.length) {\n      newArray = new Array(Record.expand(m + k));\n      if (oldArray !== null) {\n        for (let i = 0; i < this.upper; i += 1) {\n          newArray[i] = oldArray[i];\n        }\n      }\n    } else {\n      newArray = oldArray;\n    }\n    for (let i = m - 1; i >= this.upper; i -= 1) {\n      newArray[i + k] = oldArray[i];\n    }\n    for (let i = 0; i < k; i += 1) {\n      const newItem = Item.fromLike(newItems[i]);\n      newArray[i + this.upper] = newItem;\n      m += 1;\n      if (newItem instanceof Field) {\n        n += 1;\n        (record as Mutable<RecordMap>).table = null;\n      }\n    }\n    (record as Mutable<RecordMap>).array = newArray;\n    (record as Mutable<RecordMap>).length = m;\n    (record as Mutable<RecordMap>).fieldCount = n;\n    (this as Mutable<this>).upper += k;\n  }\n\n  override splice(start: number, deleteCount: number = 0, ...newItems: ItemLike[]): Item[] {\n    if ((this.record.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    const n = this.length;\n    if (start < 0) {\n      start = n + start;\n    }\n    start = Math.min(Math.max(0, start), n);\n    deleteCount = Math.min(Math.max(0, deleteCount), n - start);\n    let deleted;\n    if ((this.record.flags & Record.AliasedFlag) !== 0) {\n      deleted = this.record.spliceAliased(this.lower + start, deleteCount, ...newItems);\n    } else {\n      deleted = this.record.spliceMutable(this.lower + start, deleteCount, ...newItems);\n    }\n    (this as Mutable<this>).upper += newItems.length - deleted.length;\n    return deleted;\n  }\n\n  override delete(key: ValueLike): Item {\n    if ((this.record.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    key = Value.fromLike(key);\n    if ((this.record.flags & Record.AliasedFlag) !== 0) {\n      return this.deleteAliased(key);\n    } else {\n      return this.deleteMutable(key);\n    }\n  }\n\n  /** @internal */\n  deleteAliased(key: Value): Item {\n    const record = this.record;\n    const n = record.length;\n    const oldArray = record.array;\n    const newArray = new Array(Record.expand(n));\n    for (let i = this.lower; i < this.upper; i += 1) {\n      const item = oldArray![i];\n      if (item instanceof Field && item.key.equals(key)) {\n        for (let j = i + 1; j < n; j += 1, i += 1) {\n          newArray[i] = oldArray![j];\n        }\n        (record as Mutable<RecordMap>).array = newArray;\n        (record as Mutable<RecordMap>).table = null;\n        (record as Mutable<RecordMap>).length = n - 1;\n        (record as Mutable<RecordMap>).fieldCount -= 1;\n        (record as Mutable<RecordMap>).flags &= ~Record.AliasedFlag;\n        (this as Mutable<this>).upper -= 1;\n        return item;\n      }\n      newArray[i] = item;\n    }\n    return Item.absent();\n  }\n\n  /** @internal */\n  deleteMutable(key: Value): Item {\n    const record = this.record;\n    const n = record.length;\n    const array = record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      const item = array![i]!;\n      if (item instanceof Field && item.key.equals(key)) {\n        for (let j = i + 1; j < n; j += 1, i += 1) {\n          array![i] = array![j]!;\n        }\n        array![n - 1] = void 0 as any;\n        (record as Mutable<RecordMap>).table = null;\n        (record as Mutable<RecordMap>).length = n - 1;\n        (record as Mutable<RecordMap>).fieldCount -= 1;\n        (this as Mutable<this>).upper -= 1;\n        return item;\n      }\n    }\n    return Item.absent();\n  }\n\n  override clear(): void {\n    if ((this.record.flags & Record.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    if ((this.record.flags & Record.AliasedFlag) !== 0) {\n      this.clearAliased();\n    } else {\n      this.clearMutable();\n    }\n  }\n\n  /** @internal */\n  clearAliased(): void {\n    const record = this.record;\n    const m = record.length;\n    let n = record.fieldCount;\n    const l = m - this.length;\n    const oldArray = record.array;\n    const newArray = new Array(Record.expand(l));\n    let i = 0;\n    while (i < this.lower) {\n      newArray[i] = oldArray![i];\n      i += 1;\n    }\n    while (i < this.upper) {\n      if (oldArray![i] instanceof Field) {\n        n -= 1;\n      }\n      i += 1;\n    }\n    i = this.lower;\n    let j = this.upper;\n    while (j < m) {\n      newArray[i] = oldArray![j];\n      i += 1;\n      j += 1;\n    }\n    (record as Mutable<RecordMap>).array = newArray;\n    (record as Mutable<RecordMap>).table = null;\n    (record as Mutable<RecordMap>).length = l;\n    (record as Mutable<RecordMap>).fieldCount = n;\n    (record as Mutable<RecordMap>).flags &= ~Record.AliasedFlag;\n    (this as Mutable<this>).upper = this.lower;\n  }\n\n  /** @internal */\n  clearMutable(): void {\n    const record = this.record;\n    const m = record.length;\n    let n = record.fieldCount;\n    const array = record.array;\n    let i = this.lower;\n    while (i < this.upper) {\n      if (array![i] instanceof Field) {\n        n -= 1;\n      }\n      i += 1;\n    }\n    i = this.lower;\n    let j = this.upper;\n    while (j < m) {\n      const item = array![j]!;\n      if (item instanceof Field) {\n        (record as Mutable<RecordMap>).table = null;\n      }\n      array![i] = item;\n      i += 1;\n      j += 1;\n    }\n    (record as Mutable<RecordMap>).length = i;\n    (record as Mutable<RecordMap>).fieldCount = n;\n    while (i < m) {\n      array![i] = void 0 as any;\n      i += 1;\n    }\n    (this as Mutable<this>).upper = this.lower;\n  }\n\n  override isAliased(): boolean {\n    return (this.record.flags & Record.AliasedFlag) !== 0;\n  }\n\n  override isMutable(): boolean {\n    return (this.record.flags & Record.ImmutableFlag) === 0;\n  }\n\n  override alias(): void {\n    (this.record as Mutable<RecordMap>).flags |= Record.AliasedFlag;\n  }\n\n  override branch(): RecordMap {\n    const m = this.length;\n    let n = 0;\n    const oldArray = this.record.array;\n    const newArray = new Array(Record.expand(m));\n    let i = this.lower;\n    let j = 0;\n    while (j < m) {\n      const item = oldArray![i];\n      newArray[j] = item;\n      if (item instanceof Field) {\n        n += 1;\n      }\n      i += 1;\n      j += 1;\n    }\n    return new RecordMap(newArray, null, m, n, 0);\n  }\n\n  override clone(): RecordMap {\n    const m = this.length;\n    let n = 0;\n    const oldArray = this.record.array;\n    const newArray = new Array(Record.expand(m));\n    let i = this.lower;\n    let j = 0;\n    while (j < m) {\n      const item = oldArray![i]!;\n      newArray[j] = item.clone();\n      if (item instanceof Field) {\n        n += 1;\n      }\n      i += 1;\n      j += 1;\n    }\n    return new RecordMap(newArray, null, m, n, 0);\n  }\n\n  override commit(): this {\n    this.record.commit();\n    return this;\n  }\n\n  override subRecord(lower?: number, upper?: number): Record {\n    const n = this.length;\n    if (lower === void 0) {\n      lower = 0;\n    } else if (lower < 0) {\n      lower = n + lower;\n    }\n    if (upper === void 0) {\n      upper = n;\n    } else if (upper < 0) {\n      upper = n + upper;\n    }\n    if (lower < 0 || upper > n || lower > upper) {\n      throw new RangeError(lower + \", \" + upper);\n    }\n    return new RecordMapView(this.record, this.lower + lower, this.upper + upper);\n  }\n\n  override forEach<T>(callback: (item: Item, index: number) => T | void): T | undefined;\n  override forEach<T, S>(callback: (this: S, item: Item, index: number) => T | void, thisArg?: S): T | undefined;\n  override forEach<T, S>(callback: (this: S | undefined, item: Item, index: number) => T | void, thisArg?: S): T | undefined {\n    const array = this.record.array;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      const result = callback.call(thisArg, array![i]!, i);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n}\nObject.defineProperty(RecordMapView.prototype, \"fieldCount\", {\n  get(this: RecordMapView): number {\n    const array = this.record.array;\n    let k = 0;\n    for (let i = this.lower; i < this.upper; i += 1) {\n      if (array![i] instanceof Field) {\n        k += 1;\n      }\n    }\n    return k;\n  },\n  configurable: true,\n});\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Random} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport type {OutputSettingsLike} from \"@swim/codec\";\nimport {OutputSettings} from \"@swim/codec\";\nimport {Output} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Base64} from \"@swim/codec\";\nimport {Item} from \"./Item\";\nimport {Value} from \"./Value\";\n\n/** @public */\nexport type DataLike = Data | Uint8Array;\n\n/** @public */\nexport class Data extends Value {\n  constructor(array: Uint8Array | null, size: number, flags: number) {\n    super();\n    this.array = array;\n    this.size = size;\n    this.flags = flags;\n  }\n\n  override likeType?(like: Uint8Array): void;\n\n  /** @internal */\n  readonly array: Uint8Array | null;\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  readonly size: number;\n\n  /** @internal */\n  readonly flags: number;\n\n  getByte(index: number): number {\n    if (index < 0 || index >= this.size) {\n      throw new RangeError(\"\" + index);\n    }\n    return this.array![index]!;\n  }\n\n  setByte(index: number, value: number): Data {\n    const flags = this.flags;\n    if ((flags & Data.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    } else if (index < 0 || index >= this.size) {\n      throw new RangeError(\"\" + index);\n    }\n    if ((flags & Data.AliasedFlag) !== 0) {\n      return this.setByteAliased(index, value);\n    } else {\n      return this.setByteMutable(index, value);\n    }\n  }\n\n  /** @internal */\n  setByteAliased(index: number, value: number): Data {\n    const n = this.size;\n    const oldArray = this.array!;\n    const newArray = new Uint8Array(Data.expand(n));\n    newArray.set(oldArray, 0);\n    newArray[index] = value;\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).flags &= ~Data.AliasedFlag;\n    return this;\n  }\n\n  /** @internal */\n  setByteMutable(index: number, value: number): Data {\n    this.array![index] = value;\n    return this;\n  }\n\n  addByte(value: number): Data {\n    const flags = this.flags;\n    if ((flags & Data.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    if ((flags & Data.AliasedFlag) !== 0) {\n      return this.addByteAliased(value);\n    } else {\n      return this.addByteMutable(value);\n    }\n  }\n\n  /** @internal */\n  addByteAliased(value: number): Data {\n    const n = this.size;\n    const oldArray = this.array;\n    const newArray = new Uint8Array(Data.expand(n + 1));\n    if (oldArray !== null) {\n      newArray.set(oldArray, 0);\n    }\n    newArray[n] = value;\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).size = n + 1;\n    (this as Mutable<this>).flags &= ~Data.AliasedFlag;\n    return this;\n  }\n\n  /** @internal */\n  addByteMutable(value: number): Data {\n    const n = this.size;\n    const oldArray = this.array;\n    let newArray;\n    if (oldArray === null || n + 1 > oldArray.length) {\n      newArray = new Uint8Array(Data.expand(n + 1));\n      if (oldArray !== null) {\n        newArray.set(oldArray, 0);\n      }\n      (this as Mutable<this>).array = newArray;\n    } else {\n      newArray = oldArray;\n    }\n    newArray[n] = value;\n    (this as Mutable<this>).size = n + 1;\n    return this;\n  }\n\n  addData(data: Data): Data {\n    let array = data.array;\n    if (array === null) {\n      return this;\n    }\n    const size = data.size;\n    if (array.length > size) {\n      array = array.slice(0, size);\n    }\n    return this.addUint8Array(array);\n  }\n\n  addUint8Array(array: Uint8Array): Data {\n    const flags = this.flags;\n    if ((flags & Data.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    if ((flags & Data.AliasedFlag) !== 0) {\n      return this.addUint8ArrayAliased(array);\n    } else {\n      return this.addUint8ArrayMutable(array);\n    }\n  }\n\n  /** @internal */\n  addUint8ArrayAliased(array: Uint8Array): Data {\n    const size = array.length;\n    if (size === 0) {\n      return this;\n    }\n    const n = this.size;\n    const oldArray = this.array;\n    const newArray = new Uint8Array(Data.expand(n + size));\n    if (oldArray !== null) {\n      newArray.set(oldArray, 0);\n    }\n    newArray.set(array, n);\n    (this as Mutable<this>).array = newArray;\n    (this as Mutable<this>).size = n + size;\n    (this as Mutable<this>).flags &= ~Data.AliasedFlag;\n    return this;\n  }\n\n  /** @internal */\n  addUint8ArrayMutable(array: Uint8Array): Data {\n    const size = array.length;\n    if (size === 0) {\n      return this;\n    }\n    const n = this.size;\n    const oldArray = this.array;\n    let newArray;\n    if (oldArray === null || n + size > oldArray.length) {\n      newArray = new Uint8Array(Data.expand(n + size));\n      if (oldArray !== null) {\n        newArray.set(oldArray, 0);\n      }\n      (this as Mutable<this>).array = newArray;\n    } else {\n      newArray = oldArray;\n    }\n    newArray.set(array, n);\n    (this as Mutable<this>).size = n + size;\n    return this;\n  }\n\n  clear(): void {\n    if ((this.flags & Data.ImmutableFlag) !== 0) {\n      throw new Error(\"immutable\");\n    }\n    (this as Mutable<this>).array = null;\n    (this as Mutable<this>).size = 0;\n    (this as Mutable<this>).flags = Data.AliasedFlag;\n  }\n\n  toUint8Array(): Uint8Array {\n    const oldArray = this.array;\n    const flags = this.flags;\n    if ((flags & Data.ImmutableFlag) !== 0) {\n      return oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);\n    } else if ((flags & Data.AliasedFlag) !== 0 || this.size !== oldArray!.length) {\n      const newArray = oldArray !== null ? oldArray.slice(0) : new Uint8Array(0);\n      (this as Mutable<this>).array = newArray;\n      (this as Mutable<this>).flags &= ~Data.AliasedFlag;\n      return newArray;\n    }\n    return oldArray!;\n  }\n\n  asUint8Array(): Uint8Array | undefined {\n    const array = this.array;\n    if (array === null || this.size === 0) {\n      return void 0;\n    } else if (array.length !== this.size) {\n      return new Uint8Array(array.buffer, array.byteOffset, this.size);\n    }\n    return array;\n  }\n\n  override toLike(): DataLike {\n    return this.toUint8Array();\n  }\n\n  override isAliased(): boolean {\n    return (this.flags & Data.AliasedFlag) !== 0;\n  }\n\n  override isMutable(): boolean {\n    return (this.flags & Data.ImmutableFlag) === 0;\n  }\n\n  override branch(): Data {\n    (this as Mutable<this>).flags |= Data.AliasedFlag;\n    return new Data(this.array, this.size, Data.AliasedFlag);\n  }\n\n  override clone(): Data {\n    return this.branch();\n  }\n\n  override commit(): this {\n    (this as Mutable<this>).flags |= Data.ImmutableFlag;\n    return this;\n  }\n\n  writeBase16(output: Output, base16: Base16 = Base16.uppercase): Writer<unknown, unknown> {\n    let array = this.array;\n    const size = this.size;\n    if (array === null || size === 0) {\n      return Writer.end();\n    } else if (array.length !== size) {\n      array = array.slice(0, size);\n    }\n    return base16.writeUint8Array(output, array);\n  }\n\n  toBase16(base16: Base16 = Base16.uppercase): string {\n    const output = Unicode.stringOutput();\n    this.writeBase16(output, base16).bind();\n    return output.bind();\n  }\n\n  writeBase64(output: Output, base64: Base64 = Base64.standard()): Writer<unknown, unknown> {\n    let array = this.array;\n    const size = this.size;\n    if (array === null || size === 0) {\n      return Writer.end();\n    } else if (array.length !== size) {\n      array = array.slice(0, size);\n    }\n    return base64.writeUint8Array(output, array);\n  }\n\n  toBase64(base64: Base64 = Base64.standard()): string {\n    const output = Unicode.stringOutput();\n    this.writeBase64(output, base64);\n    return output.bind();\n  }\n\n  override interpolateTo(that: Data): Interpolator<Data>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 4;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Data) {\n      const xs = this.array!;\n      const ys = that.array!;\n      const xn = this.size;\n      const yn = that.size;\n      let order = 0;\n      let i = 0;\n      do {\n        if (i < xn && i < yn) {\n          order = xs[i]! - ys[i]!;\n          i += 1;\n        } else {\n          break;\n        }\n      } while (order === 0);\n      if (order > 0) {\n        return 1;\n      } else if (order < 0) {\n        return -1;\n      } else if (xn > yn) {\n        return 1;\n      } else if (xn < yn) {\n        return -1;\n      } else {\n        return 0;\n      }\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: Item): boolean {\n    return this.equals(that);\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Data) {\n      const xs = this.array!;\n      const ys = that.array!;\n      const xn = this.size;\n      if (xn !== that.size) {\n        return false;\n      }\n      for (let i = 0; i < xn; i += 1) {\n        if (xs[i] !== ys[i]) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mixUint8Array(Constructors.hash(Data),\n        this.array !== null ? this.array : new Uint8Array(0)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Data\").write(46/*'.'*/);\n    if (this.size === 0) {\n      output = output.write(\"empty\").write(40/*'('*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"base16\").write(40/*'('*/).write(34/*'\"'*/);\n      const writer = this.writeBase16(output);\n      if (!writer.isDone()) {\n        return Output.error(writer.trap());\n      }\n      output = output.write(34/*'\"'*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @internal */\n  static readonly AliasedFlag: number = 1 << 0;\n  /** @internal */\n  static readonly ImmutableFlag: number = 1 << 1;\n\n  @Lazy\n  static override empty(): Data {\n    return new Data(null, 0, Data.AliasedFlag | Data.ImmutableFlag);\n  }\n\n  static create(initialCapacity?: number): Data {\n    if (initialCapacity === void 0) {\n      return new Data(null, 0, Data.AliasedFlag);\n    }\n    return new Data(new Uint8Array(initialCapacity), 0, 0);\n  }\n\n  static wrap(value: Uint8Array): Data {\n    return new Data(value, value.length, Data.AliasedFlag);\n  }\n\n  static fromBase16(input: Input | string): Data {\n    if (typeof input === \"string\") {\n      input = Unicode.stringInput(input);\n    }\n    return Base16.parse(input, Data.output()).bind();\n  }\n\n  static fromBase64(input: Input | string, base64: Base64 = Base64.standard()): Data {\n    if (typeof input === \"string\") {\n      input = Unicode.stringInput(input);\n    }\n    return base64.parse(input, Data.output()).bind();\n  }\n\n  static override fromLike(value: DataLike): Data {\n    if (value instanceof Data) {\n      return value;\n    } else if (value instanceof Uint8Array) {\n      return Data.wrap(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static random(size: number): Data {\n    const array = new Uint8Array(size);\n    Random.fillBytes(array);\n    return Data.wrap(array);\n  }\n\n  static output(): Output<Data>;\n  static output(initialCapacity: number): Output<Data>;\n  static output(data: Data): Output<Data>;\n  static output(data?: number | Data): Output<Data> {\n    if (!(data instanceof Data)) {\n      data = Data.create(data);\n    }\n    return new DataOutput(data, OutputSettings.standard());\n  }\n\n  /** @internal */\n  static expand(n: number): number {\n    n = Math.max(32, n) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8; n |= n >> 16;\n    return n + 1;\n  }\n}\n\n/** @internal */\nexport class DataOutput extends Output<Data> {\n  constructor(data: Data, settings: OutputSettings) {\n    super();\n    this.data = data;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly data: Data;\n\n  override isCont(): boolean {\n    return true;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<Data> {\n    return this;\n  }\n\n  override write(b: number | string): Output<Data> {\n    if (typeof b !== \"number\") {\n      throw new TypeError(\"\" + b);\n    }\n    this.data.addByte(b);\n    return this;\n  }\n\n  override writeln(string?: string): Output<Data> {\n    throw new TypeError(\"\" + string);\n  }\n\n  override readonly settings: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<Data> {\n    settings = OutputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  override bind(): Data {\n    return this.data;\n  }\n\n  override clone(): Output<Data> {\n    return new DataOutput(this.data.branch(), this.settings);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {OutputSettingsLike} from \"@swim/codec\";\nimport {OutputSettings} from \"@swim/codec\";\nimport {Output} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {Num} from \"./\"; // forward import\n\n/** @public */\nexport type TextLike = Text | string;\n\n/** @public */\nexport class Text extends Value {\n  private constructor(value: string) {\n    super();\n    this.value = value;\n    this.hashValue = void 0;\n  }\n\n  override likeType?(like: string): void;\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  readonly value: string;\n\n  get size(): number {\n    return this.value.length;\n  }\n\n  override stringValue(): string;\n  override stringValue<T>(orElse: T): string;\n  override stringValue<T>(orElse?: T): string {\n    return this.value;\n  }\n\n  override numberValue(): number | undefined;\n  override numberValue<T>(orElse: T): number | T;\n  override numberValue<T>(orElse?: T): number | T | undefined {\n    try {\n      return Num.parse(this.value).numberValue();\n    } catch (error) {\n      return orElse;\n    }\n  }\n\n  override booleanValue(): boolean | undefined;\n  override booleanValue<T>(orElse: T): boolean | T;\n  override booleanValue<T>(orElse?: T): boolean | T | undefined {\n    if (this.value === \"true\") {\n      return true;\n    } else if (this.value === \"false\") {\n      return false;\n    } else {\n      return orElse;\n    }\n  }\n\n  override toLike(): TextLike {\n    return this.value;\n  }\n\n  override valueOf(): string {\n    return this.value;\n  }\n\n  override plus(that: ValueLike): Value;\n  override plus(that: ItemLike): Item;\n  override plus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Text) {\n      return Text.from(this.value + that.value);\n    }\n    return super.plus(that);\n  }\n\n  override branch(): Text {\n    return this;\n  }\n\n  override clone(): Text {\n    return this;\n  }\n\n  override commit(): this {\n    return this;\n  }\n\n  override interpolateTo(that: Text): Interpolator<Text>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 5;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Text) {\n      return this.value.localeCompare(that.value);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this.equals(that);\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Text) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  /** @internal */\n  readonly hashValue: number | undefined;\n\n  override hashCode(): number {\n    let hashValue = this.hashValue;\n    if (hashValue === void 0) {\n      hashValue = Strings.hash(this.value);\n      (this as Mutable<this>).hashValue = hashValue;\n    }\n    return hashValue;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Text\").write(46/*'.'*/);\n    if (this.value.length === 0) {\n      output = output.write(\"empty\").write(40/*'('*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"from\").write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    return Format.debugAny(output, this.value);\n  }\n\n  override toString(): string {\n    return this.value;\n  }\n\n  @Lazy\n  static override empty(): Text {\n    return new Text(\"\");\n  }\n\n  static from(value: string): Text {\n    const n = value.length;\n    if (n === 0) {\n      return Text.empty();\n    }\n    return new Text(value);\n  }\n\n  static override fromLike(value: TextLike): Text {\n    if (value instanceof Text) {\n      return value;\n    } else if (typeof value === \"string\") {\n      return Text.from(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static output(settings?: OutputSettings): Output<Text> {\n    if (settings === void 0) {\n      settings = OutputSettings.standard();\n    }\n    return new TextOutput(\"\", settings);\n  }\n}\n\n/** @internal */\nexport class TextOutput extends Output<Text> {\n  constructor(string: string, settings: OutputSettings) {\n    super();\n    this.string = string;\n    this.settings = settings;\n  }\n\n  /** @internal */\n  readonly string: string;\n\n  override isCont(): boolean {\n    return true;\n  }\n\n  override isFull(): boolean {\n    return false;\n  }\n\n  override isDone(): boolean {\n    return false;\n  }\n\n  override isError(): boolean {\n    return false;\n  }\n\n  override isPart(): boolean {\n    return false;\n  }\n\n  override asPart(part: boolean): Output<Text> {\n    return this;\n  }\n\n  override write(token: number | string): Output<Text> {\n    if (typeof token === \"number\") {\n      if ((token >= 0x0000 && token <= 0xd7ff)\n          || (token >= 0xe000 && token <= 0xffff)) { // U+0000..U+D7FF | U+E000..U+FFFF\n        token = String.fromCharCode(token);\n      } else if (token >= 0x10000 && token <= 0x10ffff) { // U+10000..U+10FFFF\n        const u = token - 0x10000;\n        token = String.fromCharCode(0xd800 | (u >>> 10), 0xdc00 | (u & 0x3ff));\n      } else { // invalid code point\n        token = \"\\ufffd\";\n      }\n    }\n    (this as Mutable<this>).string += token;\n    return this;\n  }\n\n  override readonly settings!: OutputSettings;\n\n  override withSettings(settings: OutputSettingsLike): Output<Text> {\n    settings = OutputSettings.fromLike(settings);\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  override bind(): Text {\n    return Text.from(this.string);\n  }\n\n  override clone(): Output<Text> {\n    return new TextOutput(this.string, this.settings);\n  }\n\n  override toString(): string {\n    return this.string;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\n\n/** @public */\nexport type NumLike = Num | number;\n\n/** @public */\nexport class Num extends Value {\n  private constructor(value: number, flags?: number) {\n    super();\n    this.value = value;\n    this.flags = flags !== void 0 ? flags : 0;\n  }\n\n  override likeType?(like: number): void;\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  readonly value: number;\n\n  /** @internal */\n  readonly flags: number;\n\n  isNaN(): boolean {\n    return isNaN(this.value);\n  }\n\n  isInfinite(): boolean {\n    return !isNaN(this.value) && !isFinite(this.value);\n  }\n\n  isUint32(): boolean {\n    return (this.flags & Num.Uint32Flag) !== 0;\n  }\n\n  isUint64(): boolean {\n    return (this.flags & Num.Uint64Flag) !== 0;\n  }\n\n  override stringValue(): string;\n  override stringValue<T>(orElse: T): string;\n  override stringValue<T>(orElse?: T): string {\n    return \"\" + this.value;\n  }\n\n  override numberValue(): number;\n  override numberValue<T>(orElse: T): number;\n  override numberValue<T>(orElse?: T): number {\n    return this.value;\n  }\n\n  override booleanValue(): boolean;\n  override booleanValue<T>(orElse: T): boolean;\n  override booleanValue<T>(orElse?: T): boolean {\n    return !!this.value;\n  }\n\n  override toLike(): NumLike {\n    return this.value;\n  }\n\n  override valueOf(): number {\n    return this.value;\n  }\n\n  override bitwiseOr(that: ValueLike): Value;\n  override bitwiseOr(that: ItemLike): Item;\n  override bitwiseOr(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from((this.value | that.value) >>> 0);\n    }\n    return super.bitwiseOr(that);\n  }\n\n  override bitwiseXor(that: ValueLike): Value;\n  override bitwiseXor(that: ItemLike): Item;\n  override bitwiseXor(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from((this.value ^ that.value) >>> 0);\n    }\n    return super.bitwiseXor(that);\n  }\n\n  override bitwiseAnd(that: ValueLike): Value;\n  override bitwiseAnd(that: ItemLike): Item;\n  override bitwiseAnd(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from((this.value & that.value) >>> 0);\n    }\n    return super.bitwiseAnd(that);\n  }\n\n  override plus(that: ValueLike): Value;\n  override plus(that: ItemLike): Item;\n  override plus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from(this.value + that.value);\n    }\n    return super.plus(that);\n  }\n\n  override minus(that: ValueLike): Value;\n  override minus(that: ItemLike): Item;\n  override minus(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from(this.value - that.value);\n    }\n    return super.minus(that);\n  }\n\n  override times(that: ValueLike): Value;\n  override times(that: ItemLike): Item;\n  override times(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from(this.value * that.value);\n    }\n    return super.times(that);\n  }\n\n  override divide(that: ValueLike): Value;\n  override divide(that: ItemLike): Item;\n  override divide(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from(this.value / that.value);\n    }\n    return super.divide(that);\n  }\n\n  override modulo(that: ValueLike): Value;\n  override modulo(that: ItemLike): Item;\n  override modulo(that: ItemLike): Item {\n    that = Item.fromLike(that);\n    if (that instanceof Num) {\n      return Num.from(this.value % that.value);\n    }\n    return super.modulo(that);\n  }\n\n  override bitwiseNot(): Value {\n    return Num.from(~this.value >>> 0);\n  }\n\n  override negative(): Value {\n    return Num.from(-this.value);\n  }\n\n  override positive(): Value {\n    return this;\n  }\n\n  override inverse(): Value {\n    return Num.from(1 / this.value);\n  }\n\n  abs(): Num {\n    return Num.from(Math.abs(this.value));\n  }\n\n  ceil(): Num {\n    return Num.from(Math.ceil(this.value));\n  }\n\n  floor(): Num {\n    return Num.from(Math.floor(this.value));\n  }\n\n  round(): Num {\n    return Num.from(Math.round(this.value));\n  }\n\n  sqrt(): Num {\n    return Num.from(Math.sqrt(this.value));\n  }\n\n  pow(that: NumLike): Num {\n    that = Num.fromLike(that);\n    return Num.from(Math.pow(this.value, that.value));\n  }\n\n  override max(that: Num): Num;\n  override max(that: Item): Item;\n  override max(that: Item): Item {\n    return this.compareTo(that) >= 0 ? this : that;\n  }\n\n  override min(that: Num): Num;\n  override min(that: Item): Item;\n  override min(that: Item): Item {\n    return this.compareTo(that) <= 0 ? this : that;\n  }\n\n  override interpolateTo(that: Num): Interpolator<Num>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof Num) {\n      return NumInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 6;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Num) {\n      const x = this.value;\n      const y = that.value;\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Num) {\n      const x = this.value;\n      const y = that.value;\n      return x === y || isNaN(x) && isNaN(y) || Math.abs(y - x) < (epsilon !== void 0 ? epsilon : Equivalent.Epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Num) {\n      const x = this.value;\n      const y = that.value;\n      return x === y || isNaN(x) && isNaN(y);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Numbers.hash(this.value);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Num\").write(46/*'.'*/).write(\"from\")\n                   .write(40/*'('*/).display(this).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    return Format.displayNumber(output, this.value);\n  }\n\n  /** @internal */\n  static readonly Uint32Flag: number = 1;\n  /** @internal */\n  static readonly Uint64Flag: number = 2;\n  /** @internal */\n  static readonly TypeMask = 0x3;\n\n  @Lazy\n  static zero(): Num {\n    return new Num(0);\n  }\n\n  @Lazy\n  static negativeZero(): Num {\n    return new Num(-0);\n  }\n\n  @Lazy\n  static one(): Num {\n    return new Num(1);\n  }\n\n  @Lazy\n  static negativeOne(): Num {\n    return new Num(-1);\n  }\n\n  @Lazy\n  static nan(): Num {\n    return new Num(NaN);\n  }\n\n  static uint32(value: number): Num {\n    return new Num(value, Num.Uint32Flag);\n  }\n\n  static uint64(value: number): Num {\n    return new Num(value, Num.Uint64Flag);\n  }\n\n  static from(value: number): Num {\n    if (value === 0) {\n      if (1 / value === -Infinity) {\n        return Num.negativeZero();\n      } else {\n        return Num.zero();\n      }\n    } else if (value === 1) {\n      return Num.one();\n    } else if (value === -1) {\n      return Num.negativeOne();\n    } else if (isNaN(value)) {\n      return Num.nan();\n    }\n    return new Num(value);\n  }\n\n  static override fromLike(value: NumLike): Num {\n    if (value instanceof Num) {\n      return value;\n    } else if (typeof value === \"number\") {\n      return Num.from(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(value: string): Num {\n    if (value === \"NaN\") {\n      return Num.nan();\n    }\n    const num = +value;\n    if (!isFinite(num)) {\n      throw new Error(value);\n    }\n    return Num.from(num);\n  }\n}\n\n/** @internal */\nexport const NumInterpolator = (function (_super: typeof Interpolator) {\n  const NumInterpolator = function (y0: Num, y1: Num): Interpolator<Num> {\n    const interpolator = function (u: number): Num {\n      const y0 = interpolator[0].value;\n      const y1 = interpolator[1].value;\n      return Num.from(y0 + u * (y1 - y0));\n    } as Interpolator<Num>;\n    Object.setPrototypeOf(interpolator, NumInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    (y0: Num, y1: Num): Interpolator<Num>;\n\n    /** @internal */\n    prototype: Interpolator<Num>;\n  };\n\n  NumInterpolator.prototype = Object.create(_super.prototype);\n  NumInterpolator.prototype.constructor = NumInterpolator;\n\n  return NumInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\n\n/** @public */\nexport type BoolLike = Bool | boolean;\n\n/** @public */\nexport class Bool extends Value {\n  private constructor(value: boolean) {\n    super();\n    Object.defineProperty(this, \"value\", {\n      value: value,\n      enumerable: true,\n    });\n    Object.defineProperty(this, \"hashValue\", {\n      value: Strings.hash(value ? \"true\" : \"false\"),\n    });\n  }\n\n  override likeType?(like: boolean): void;\n\n  override isDefinite(): boolean {\n    return this.value;\n  }\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  readonly value!: boolean;\n\n  override stringValue(): string;\n  override stringValue<T>(orElse: T): string;\n  override stringValue<T>(orElse?: T): string {\n    return this.value ? \"true\" : \"false\";\n  }\n\n  override booleanValue(): boolean;\n  override booleanValue<T>(orElse: T): boolean;\n  override booleanValue<T>(orElse?: T): boolean {\n    return this.value;\n  }\n\n  override toLike(): BoolLike {\n    return this.value;\n  }\n\n  override valueOf(): boolean {\n    return this.value;\n  }\n\n  override conditional(thenTerm: ValueLike, elseTerm: ValueLike): Value;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item {\n    return this.value ? Item.fromLike(thenTerm) : Item.fromLike(elseTerm);\n  }\n\n  override or(that: ValueLike): Value;\n  override or(that: ItemLike): Item;\n  override or(that: ItemLike): Item {\n    return this.value ? this : Item.fromLike(that);\n  }\n\n  override and(that: ValueLike): Value;\n  override and(that: ItemLike): Item;\n  override and(that: ItemLike): Item {\n    return this.value ? Item.fromLike(that) : this;\n  }\n\n  override not(): Value {\n    return Bool.from(!this.value);\n  }\n\n  override get typeOrder(): number {\n    return 7;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Bool) {\n      if (this.value && !that.value) {\n        return -1;\n      } else if (!this.value && that.value) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this.equals(that);\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Bool) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  /** @internal */\n  readonly hashValue!: number;\n\n  override hashCode(): number {\n    return this.hashValue;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Bool\").write(46/*'.'*/).write(\"from\").write(40/*'('*/)\n                   .write(this.value ? \"true\" : \"false\").write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = output.write(this.value ? \"true\" : \"false\");\n    return output;\n  }\n\n  @Lazy\n  static true(): Bool {\n    return new Bool(true);\n  }\n\n  @Lazy\n  static false(): Bool {\n    return new Bool(false);\n  }\n\n  static from(value: boolean): Bool {\n    return value ? Bool.true() : Bool.false();\n  }\n\n  static override fromLike(value: BoolLike): Bool {\n    if (value instanceof Bool) {\n      return value;\n    } else if (typeof value === \"boolean\") {\n      return Bool.from(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"./Item\";\nimport {Value} from \"./Value\";\nimport {Record} from \"./Record\";\n\n/** @public */\nexport type ExtantLike = Extant | null;\n\n/** @public */\nexport class Extant extends Value {\n  /** @internal */\n  private constructor() {\n    super();\n  }\n\n  override likeType?(like: null): void;\n\n  /**\n   * Always returns `true` because `Extant` is a defined value.\n   */\n  override isDefined(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns `false` because `Extant` is not a distinct value.\n   */\n  override isDistinct(): boolean {\n    return false;\n  }\n\n  /**\n   * Always returns `false` because `Extant` is not a definite value.\n   */\n  override isDefinite(): boolean {\n    return false;\n  }\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns an empty `Record` because `Extant` is not a distinct value.\n   */\n  override unflattened(): Record {\n    return Record.empty();\n  }\n\n  override not(): Value {\n    return Value.absent();\n  }\n\n  /**\n   * Always returns the empty `string` because `Extant` behaves like an empty\n   * `Record`, which converts to a `string` by concatenating the string values\n   * of all its members, if all its members convert to string values.\n   */\n  override stringValue(): string;\n  /**\n   * Always returns the empty `string` because `Extant` behaves like an empty\n   * `Record`, which converts to a `string` by concatenating the string values\n   * of all its members, if all its members convert to string values.\n   */\n  override stringValue<T>(orElse: T): string;\n  override stringValue<T>(orElse?: T): string {\n    return \"\";\n  }\n\n  /**\n   * Always returns `true` because `Extant` behaves like a truthy value.\n   */\n  override booleanValue(): boolean;\n  /**\n   * Always returns `true` because `Extant` behaves like a truthy value.\n   */\n  override booleanValue<T>(orElse: T): boolean;\n  override booleanValue<T>(orElse?: T): boolean {\n    return true;\n  }\n\n  override toLike(): ExtantLike {\n    return null;\n  }\n\n  override interpolateTo(that: Extant): Interpolator<Extant>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 98;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this === that;\n  }\n\n  override equals(that: unknown): boolean {\n    return this === that;\n  }\n\n  override hashCode(): number {\n    return Constructors.hash(Extant);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Value\").write(46/*'.'*/).write(\"extant\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = output.write(\"null\");\n    return output;\n  }\n\n  @Lazy\n  static override extant(): Extant {\n    return new Extant();\n  }\n\n  static override fromLike(value: ExtantLike): Extant {\n    if (value instanceof Extant) {\n      return value;\n    } else if (value === null) {\n      return Extant.extant();\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Cursor} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport {Attr} from \"./Attr\";\nimport {Slot} from \"./Slot\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {Record} from \"./Record\";\nimport type {TextLike} from \"./Text\";\n\n/** @public */\nexport type AbsentLike = Absent | undefined;\n\n/** @public */\nexport class Absent extends Value {\n  /** @internal */\n  private constructor() {\n    super();\n  }\n\n  override likeType?(like: undefined): void;\n\n  /**\n   * Always returns `false` because `Absent` represents an undefined value.\n   */\n  override isDefined(): boolean {\n    return false;\n  }\n\n  /**\n   * Always returns `false` because `Absent` is not a distinct value.\n   */\n  override isDistinct(): boolean {\n    return false;\n  }\n\n  /**\n   * Always returns `false` because `Absent` is not a definite value.\n   */\n  override isDefinite(): boolean {\n    return false;\n  }\n\n  override isConstant(): boolean {\n    return true;\n  }\n\n  /**\n   * Always returns an empty `Record` because `Absent` is not a distinct value.\n   */\n  override unflattened(): Record {\n    return Record.empty();\n  }\n\n  override updated(key: ValueLike, value: ValueLike): Record {\n    return Record.of(Slot.of(key, value));\n  }\n\n  override updatedAttr(key: TextLike, value: ValueLike): Record {\n    return Record.of(Attr.of(key, value));\n  }\n\n  override updatedSlot(key: ValueLike, value: ValueLike): Record {\n    return Record.of(Slot.of(key, value));\n  }\n\n  override appended(...items: ItemLike[]): Record {\n    return Record.of(items);\n  }\n\n  override prepended(...items: ItemLike[]): Record {\n    return Record.of(items);\n  }\n\n  override concat(...items: ItemLike[]): Record {\n    const record = Record.create();\n    for (let i = 0; i < items.length; i += 1) {\n      Item.fromLike(items[i]).forEach(function (item: Item): void {\n        record.push(item);\n      });\n    }\n    return record;\n  }\n\n  override conditional(thenTerm: ValueLike, elseTerm: ValueLike): Value;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item {\n    return Item.fromLike(elseTerm);\n  }\n\n  override or(that: ValueLike): Value;\n  override or(that: ItemLike): Item;\n  override or(that: ItemLike): Item {\n    return Item.fromLike(that);\n  }\n\n  override and(that: ValueLike): Value;\n  override and(that: ItemLike): Item;\n  override and(that: ItemLike): Item {\n    return this;\n  }\n\n  override not(): Value {\n    return Value.extant();\n  }\n\n  /**\n   * Always returns `false` because `Absent` behaves like a falsey value.\n   */\n  override booleanValue(): boolean;\n  /**\n   * Always returns `false` because `Absent` behaves like a falsey value.\n   */\n  override booleanValue<T>(orElse: T): boolean;\n  override booleanValue<T>(orElse?: T): boolean {\n    return false;\n  }\n\n  override toLike(): AbsentLike {\n    return void 0;\n  }\n\n  override forEach<T>(callback: (item: Item, index: number) => T | void): T | undefined;\n  override forEach<T, S>(callback: (this: S, item: Item, index: number) => T | void, thisArg: S): T | undefined;\n  override forEach<T, S>(callback: (this: S | undefined, item: Item, index: number) => T | void, thisArg?: S): T | undefined {\n    return void 0;\n  }\n\n  override iterator(): Cursor<Item> {\n    return Cursor.empty();\n  }\n\n  override interpolateTo(that: Absent): Interpolator<Absent>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    return super.interpolateTo(that);\n  }\n\n  override get typeOrder(): number {\n    return 99;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this === that;\n  }\n\n  override equals(that: unknown): boolean {\n    return this === that;\n  }\n\n  override hashCode(): number {\n    return Constructors.hash(Absent);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Value\").write(46/*'.'*/).write(\"absent\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = output.write(\"undefined\");\n    return output;\n  }\n\n  @Lazy\n  static override absent(): Absent {\n    return new Absent();\n  }\n\n  static override fromLike(value: AbsentLike): Absent {\n    if (value instanceof Absent) {\n      return value;\n    } else if (value === void 0) {\n      return Absent.absent();\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {ItemLike} from \"./Item\";\nimport {Item} from \"./Item\";\nimport type {ValueLike} from \"./Value\";\nimport {Value} from \"./Value\";\nimport {Num} from \"./Num\";\nimport type {Operator} from \"./operator/Operator\";\nimport {ConditionalOperator} from \"./\"; // forward import\nimport {OrOperator} from \"./\"; // forward import\nimport {AndOperator} from \"./\"; // forward import\nimport {BitwiseOrOperator} from \"./\"; // forward import\nimport {BitwiseXorOperator} from \"./\"; // forward import\nimport {BitwiseAndOperator} from \"./\"; // forward import\nimport {LtOperator} from \"./\"; // forward import\nimport {LeOperator} from \"./\"; // forward import\nimport {EqOperator} from \"./\"; // forward import\nimport {NeOperator} from \"./\"; // forward import\nimport {GeOperator} from \"./\"; // forward import\nimport {GtOperator} from \"./\"; // forward import\nimport {PlusOperator} from \"./\"; // forward import\nimport {MinusOperator} from \"./\"; // forward import\nimport {TimesOperator} from \"./\"; // forward import\nimport {DivideOperator} from \"./\"; // forward import\nimport {ModuloOperator} from \"./\"; // forward import\nimport {NotOperator} from \"./\"; // forward import\nimport {BitwiseNotOperator} from \"./\"; // forward import\nimport {NegativeOperator} from \"./\"; // forward import\nimport {PositiveOperator} from \"./\"; // forward import\n\n/** @public */\nexport abstract class Expression extends Value {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override conditional(thenTerm: Value, elseTerm: Value): Value;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item;\n  override conditional(thenTerm: ItemLike, elseTerm: ItemLike): Item {\n    thenTerm = Item.fromLike(thenTerm);\n    elseTerm = Item.fromLike(elseTerm);\n    return new ConditionalOperator(this, thenTerm, elseTerm);\n  }\n\n  override or(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new OrOperator(this, that);\n  }\n\n  override and(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new AndOperator(this, that);\n  }\n\n  override bitwiseOr(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new BitwiseOrOperator(this, that);\n  }\n\n  override bitwiseXor(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new BitwiseXorOperator(this, that);\n  }\n\n  override bitwiseAnd(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new BitwiseAndOperator(this, that);\n  }\n\n  override lt(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new LtOperator(this, that);\n  }\n\n  override le(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new LeOperator(this, that);\n  }\n\n  override eq(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new EqOperator(this, that);\n  }\n\n  override ne(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new NeOperator(this, that);\n  }\n\n  override ge(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new GeOperator(this, that);\n  }\n\n  override gt(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new GtOperator(this, that);\n  }\n\n  override plus(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new PlusOperator(this, that);\n  }\n\n  override minus(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new MinusOperator(this, that);\n  }\n\n  override times(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new TimesOperator(this, that);\n  }\n\n  override divide(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new DivideOperator(this, that);\n  }\n\n  override modulo(that: ItemLike): Operator {\n    that = Item.fromLike(that);\n    return new ModuloOperator(this, that);\n  }\n\n  override not(): Operator {\n    return new NotOperator(this);\n  }\n\n  override bitwiseNot(): Operator {\n    return new BitwiseNotOperator(this);\n  }\n\n  override negative(): Operator {\n    return new NegativeOperator(this);\n  }\n\n  override positive(): Operator {\n    return new PositiveOperator(this);\n  }\n\n  override inverse(): Operator {\n    return new DivideOperator(Num.one(), this);\n  }\n\n  override toLike(): ValueLike {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Expression} from \"../Expression\";\nimport type {BinaryOperator} from \"./BinaryOperator\";\nimport type {UnaryOperator} from \"./UnaryOperator\";\nimport {OrOperator} from \"../\"; // forward import\nimport {AndOperator} from \"../\"; // forward import\nimport {BitwiseOrOperator} from \"../\"; // forward import\nimport {BitwiseXorOperator} from \"../\"; // forward import\nimport {BitwiseAndOperator} from \"../\"; // forward import\nimport {LtOperator} from \"../\"; // forward import\nimport {LeOperator} from \"../\"; // forward import\nimport {EqOperator} from \"../\"; // forward import\nimport {NeOperator} from \"../\"; // forward import\nimport {GeOperator} from \"../\"; // forward import\nimport {GtOperator} from \"../\"; // forward import\nimport {PlusOperator} from \"../\"; // forward import\nimport {MinusOperator} from \"../\"; // forward import\nimport {TimesOperator} from \"../\"; // forward import\nimport {DivideOperator} from \"../\"; // forward import\nimport {ModuloOperator} from \"../\"; // forward import\nimport {NotOperator} from \"../\"; // forward import\nimport {BitwiseNotOperator} from \"../\"; // forward import\nimport {NegativeOperator} from \"../\"; // forward import\nimport {PositiveOperator} from \"../\"; // forward import\n\n/** @public */\nexport abstract class Operator extends Expression {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  static binary(operand1: Item, operator: string, operand2: Item): BinaryOperator {\n    switch (operator) {\n      case \"||\": return new OrOperator(operand1, operand2);\n      case \"&&\": return new AndOperator(operand1, operand2);\n      case \"|\": return new BitwiseOrOperator(operand1, operand2);\n      case \"^\": return new BitwiseXorOperator(operand1, operand2);\n      case \"&\": return new BitwiseAndOperator(operand1, operand2);\n      case \"<\": return new LtOperator(operand1, operand2);\n      case \"<=\": return new LeOperator(operand1, operand2);\n      case \"==\": return new EqOperator(operand1, operand2);\n      case \"!=\": return new NeOperator(operand1, operand2);\n      case \">=\": return new GeOperator(operand1, operand2);\n      case \">\": return new GtOperator(operand1, operand2);\n      case \"+\": return new PlusOperator(operand1, operand2);\n      case \"-\": return new MinusOperator(operand1, operand2);\n      case \"*\": return new TimesOperator(operand1, operand2);\n      case \"/\": return new DivideOperator(operand1, operand2);\n      case \"%\": return new ModuloOperator(operand1, operand2);\n      default: throw new Error(operator);\n    }\n  }\n\n  static unary(operator: string, operand: Item): UnaryOperator {\n    switch (operator) {\n      case \"!\": return new NotOperator(operand);\n      case \"~\": return new BitwiseNotOperator(operand);\n      case \"-\": return new NegativeOperator(operand);\n      case \"+\": return new PositiveOperator(operand);\n      default: throw new Error(operator);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {Operator} from \"./Operator\";\nimport {BinaryOperatorInterpolator} from \"../\"; // forward import\n\n/** @public */\nexport abstract class BinaryOperator extends Operator {\n  constructor(operand1: Item, operand2: Item) {\n    super();\n    this.operand1 = operand1;\n    this.operand2 = operand2;\n  }\n\n  readonly operand1: Item;\n\n  abstract readonly operator: string;\n\n  readonly operand2: Item;\n\n  override isConstant(): boolean {\n    return this.operand1.isConstant() && this.operand2.isConstant();\n  }\n\n  override interpolateTo(that: BinaryOperator): Interpolator<BinaryOperator>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof BinaryOperator && this.operator === that.operator) {\n      return BinaryOperatorInterpolator(this, that);\n    } else {\n      return super.interpolateTo(that);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {Operator} from \"./Operator\";\nimport type {BinaryOperator} from \"./BinaryOperator\";\n\n/** @internal */\nexport interface BinaryOperatorInterpolator extends Interpolator<BinaryOperator> {\n  /** @internal */\n  readonly operand1Interpolator: Interpolator<Item>;\n  /** @internal */\n  readonly operator: string;\n  /** @internal */\n  readonly operand2Interpolator: Interpolator<Item>;\n\n  readonly 0: BinaryOperator;\n\n  readonly 1: BinaryOperator;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const BinaryOperatorInterpolator = (function (_super: typeof Interpolator) {\n  const BinaryOperatorInterpolator = function (y0: BinaryOperator, y1: BinaryOperator): BinaryOperatorInterpolator {\n    const operator = y0.operator;\n    if (operator !== y1.operator) {\n      throw new Error();\n    }\n    const interpolator = function (u: number): BinaryOperator {\n      const operand1 = interpolator.operand1Interpolator(u);\n      const operand2 = interpolator.operand2Interpolator(u);\n      return Operator.binary(operand1, interpolator.operator, operand2);\n    } as BinaryOperatorInterpolator;\n    Object.setPrototypeOf(interpolator, BinaryOperatorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).operand1Interpolator = y0.operand1.interpolateTo(y1.operand1);\n    (interpolator as Mutable<typeof interpolator>).operator = operator;\n    (interpolator as Mutable<typeof interpolator>).operand2Interpolator = y0.operand2.interpolateTo(y1.operand2);\n    return interpolator;\n  } as {\n    (y0: BinaryOperator, y1: BinaryOperator): BinaryOperatorInterpolator;\n\n    /** @internal */\n    prototype: BinaryOperatorInterpolator;\n  };\n\n  BinaryOperatorInterpolator.prototype = Object.create(_super.prototype);\n  BinaryOperatorInterpolator.prototype.constructor = BinaryOperatorInterpolator;\n\n  Object.defineProperty(BinaryOperatorInterpolator.prototype, 0, {\n    get(this: BinaryOperatorInterpolator): BinaryOperator {\n      const operand1 = this.operand1Interpolator[0];\n      const operand2 = this.operand2Interpolator[0];\n      return Operator.binary(operand1, this.operator, operand2);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(BinaryOperatorInterpolator.prototype, 1, {\n    get(this: BinaryOperatorInterpolator): BinaryOperator {\n      const operand1 = this.operand1Interpolator[1];\n      const operand2 = this.operand2Interpolator[1];\n      return Operator.binary(operand1, this.operator, operand2);\n    },\n    configurable: true,\n  });\n\n  BinaryOperatorInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BinaryOperatorInterpolator) {\n      return this.operator === that.operator\n          && this.operand1Interpolator.equals(that.operand1Interpolator)\n          && this.operand2Interpolator.equals(that.operand2Interpolator);\n    }\n    return false;\n  };\n\n  return BinaryOperatorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {Operator} from \"./Operator\";\nimport {UnaryOperatorInterpolator} from \"../\"; // forward import\n\n/** @public */\nexport abstract class UnaryOperator extends Operator {\n  constructor(operand: Item) {\n    super();\n    this.operand = operand;\n  }\n\n  readonly operand: Item;\n\n  abstract readonly operator: string;\n\n  override isConstant(): boolean {\n    return this.operand.isConstant();\n  }\n\n  override interpolateTo(that: UnaryOperator): Interpolator<UnaryOperator>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof UnaryOperator && this.operator === that.operator) {\n      return UnaryOperatorInterpolator(this, that);\n    } else {\n      return super.interpolateTo(that);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {Operator} from \"./Operator\";\nimport type {UnaryOperator} from \"./UnaryOperator\";\n\n/** @internal */\nexport interface UnaryOperatorInterpolator extends Interpolator<UnaryOperator> {\n  /** @internal */\n  readonly operator: string;\n  /** @internal */\n  readonly operandInterpolator: Interpolator<Item>;\n\n  readonly 0: UnaryOperator;\n\n  readonly 1: UnaryOperator;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const UnaryOperatorInterpolator = (function (_super: typeof Interpolator) {\n  const UnaryOperatorInterpolator = function (y0: UnaryOperator, y1: UnaryOperator): UnaryOperatorInterpolator {\n    const operator = y0.operator;\n    if (operator !== y1.operator) {\n      throw new Error();\n    }\n    const interpolator = function (u: number): UnaryOperator {\n      const operand = interpolator.operandInterpolator(u);\n      return Operator.unary(interpolator.operator, operand);\n    } as UnaryOperatorInterpolator;\n    Object.setPrototypeOf(interpolator, UnaryOperatorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).operator = operator;\n    (interpolator as Mutable<typeof interpolator>).operandInterpolator = y0.operand.interpolateTo(y1.operand);\n    return interpolator;\n  } as {\n    (y0: UnaryOperator, y1: UnaryOperator): UnaryOperatorInterpolator;\n\n    /** @internal */\n    prototype: UnaryOperatorInterpolator;\n  };\n\n  UnaryOperatorInterpolator.prototype = Object.create(_super.prototype);\n  UnaryOperatorInterpolator.prototype.constructor = UnaryOperatorInterpolator;\n\n  Object.defineProperty(UnaryOperatorInterpolator.prototype, 0, {\n    get(this: UnaryOperatorInterpolator): UnaryOperator {\n      const operand = this.operandInterpolator[0];\n      return Operator.unary(this.operator, operand);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(UnaryOperatorInterpolator.prototype, 1, {\n    get(this: UnaryOperatorInterpolator): UnaryOperator {\n      const operand = this.operandInterpolator[1];\n      return Operator.unary(this.operator, operand);\n    },\n    configurable: true,\n  });\n\n  UnaryOperatorInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UnaryOperatorInterpolator) {\n      return this.operator === that.operator\n          && this.operandInterpolator.equals(that.operandInterpolator);\n    }\n    return false;\n  };\n\n  return UnaryOperatorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Operator} from \"./Operator\";\nimport {ConditionalOperatorInterpolator} from \"../\"; // forward import\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class ConditionalOperator extends Operator {\n  constructor(ifTerm: Item, thenTerm: Item, elseTerm: Item) {\n    super();\n    this.ifTerm = ifTerm.commit();\n    this.thenTerm = thenTerm.commit();\n    this.elseTerm = elseTerm.commit();\n  }\n\n  readonly ifTerm: Item;\n\n  readonly thenTerm: Item;\n\n  readonly elseTerm: Item;\n\n  override isConstant(): boolean {\n    return this.ifTerm.isConstant() && this.thenTerm.isConstant()\n        && this.elseTerm.isConstant();\n  }\n\n  override get precedence(): number {\n    return 2;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    let result;\n    const ifTerm = this.ifTerm.evaluate(interpreter);\n    if (ifTerm.isDefinite()) {\n      const theTerm = this.thenTerm.evaluate(interpreter);\n      result = theTerm;\n    } else {\n      const elseTerm = this.elseTerm.evaluate(interpreter);\n      result = elseTerm;\n    }\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const ifTerm = this.ifTerm.substitute(interpreter);\n    const thenTerm = this.thenTerm.substitute(interpreter);\n    const elseTerm = this.elseTerm.substitute(interpreter);\n    return new ConditionalOperator(ifTerm, thenTerm, elseTerm);\n  }\n\n  override interpolateTo(that: ConditionalOperator): Interpolator<ConditionalOperator>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof ConditionalOperator) {\n      return ConditionalOperatorInterpolator(this, that);\n    } else {\n      return super.interpolateTo(that);\n    }\n  }\n\n  override get typeOrder(): number {\n    return 20;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof ConditionalOperator) {\n      let order = this.ifTerm.compareTo(that.ifTerm);\n      if (order === 0) {\n        order = this.thenTerm.compareTo(that.thenTerm);\n        if (order === 0) {\n          order = this.elseTerm.compareTo(that.elseTerm);\n        }\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ConditionalOperator) {\n      return this.ifTerm.equivalentTo(that.ifTerm, epsilon)\n          && this.thenTerm.equivalentTo(that.thenTerm, epsilon)\n          && this.elseTerm.equivalentTo(that.elseTerm, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ConditionalOperator) {\n      return this.ifTerm.equals(that.ifTerm) && this.thenTerm.equals(that.thenTerm)\n          && this.elseTerm.equals(that.elseTerm);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Constructors.hash(ConditionalOperator),\n        this.ifTerm.hashCode()), this.thenTerm.hashCode()), this.elseTerm.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.ifTerm).write(46/*'.'*/).write(\"conditional\").write(40/*'('*/)\n                   .debug(this.thenTerm).write(44/*','*/).write(32/*' '*/)\n                   .debug(this.elseTerm).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): ConditionalOperator {\n    return new ConditionalOperator(this.ifTerm.clone(), this.thenTerm.clone(), this.elseTerm.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {ConditionalOperator} from \"./ConditionalOperator\";\n\n/** @internal */\nexport interface ConditionalOperatorInterpolator extends Interpolator<ConditionalOperator> {\n  /** @internal */\n  readonly ifTermInterpolator: Interpolator<Item>;\n  /** @internal */\n  readonly thenTermInterpolator: Interpolator<Item>;\n  /** @internal */\n  readonly elseTermInterpolator: Interpolator<Item>;\n\n  readonly 0: ConditionalOperator;\n\n  readonly 1: ConditionalOperator;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const ConditionalOperatorInterpolator = (function (_super: typeof Interpolator) {\n  const ConditionalOperatorInterpolator = function (y0: ConditionalOperator, y1: ConditionalOperator): ConditionalOperatorInterpolator {\n    const interpolator = function (u: number): ConditionalOperator {\n      const ifTerm = interpolator.ifTermInterpolator(u);\n      const thenTerm = interpolator.thenTermInterpolator(u);\n      const elseTerm = interpolator.elseTermInterpolator(u);\n      return new ConditionalOperator(ifTerm, thenTerm, elseTerm);\n    } as ConditionalOperatorInterpolator;\n    Object.setPrototypeOf(interpolator, ConditionalOperatorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).ifTermInterpolator = y0.ifTerm.interpolateTo(y1.ifTerm);\n    (interpolator as Mutable<typeof interpolator>).thenTermInterpolator = y0.thenTerm.interpolateTo(y1.thenTerm);\n    (interpolator as Mutable<typeof interpolator>).elseTermInterpolator = y0.elseTerm.interpolateTo(y1.elseTerm);\n    return interpolator;\n  } as {\n    (y0: ConditionalOperator, y1: ConditionalOperator): ConditionalOperatorInterpolator;\n\n    /** @internal */\n    prototype: ConditionalOperatorInterpolator;\n  };\n\n  ConditionalOperatorInterpolator.prototype = Object.create(_super.prototype);\n  ConditionalOperatorInterpolator.prototype.constructor = ConditionalOperatorInterpolator;\n\n  Object.defineProperty(ConditionalOperatorInterpolator.prototype, 0, {\n    get(this: ConditionalOperatorInterpolator): ConditionalOperator {\n      const ifTerm = this.ifTermInterpolator[0];\n      const thenTerm = this.thenTermInterpolator[0];\n      const elseTerm = this.elseTermInterpolator[0];\n      return new ConditionalOperator(ifTerm, thenTerm, elseTerm);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(ConditionalOperatorInterpolator.prototype, 1, {\n    get(this: ConditionalOperatorInterpolator): ConditionalOperator {\n      const ifTerm = this.ifTermInterpolator[1];\n      const thenTerm = this.thenTermInterpolator[1];\n      const elseTerm = this.elseTermInterpolator[1];\n      return new ConditionalOperator(ifTerm, thenTerm, elseTerm);\n    },\n    configurable: true,\n  });\n\n  ConditionalOperatorInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ConditionalOperatorInterpolator) {\n      return this.ifTermInterpolator.equals(that.ifTermInterpolator)\n          && this.thenTermInterpolator.equals(that.thenTermInterpolator)\n          && this.elseTermInterpolator.equals(that.elseTermInterpolator);\n    }\n    return false;\n  };\n\n  return ConditionalOperatorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport class InterpreterException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, InterpreterException.prototype);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\n\n/** @public */\nexport class InterpreterSettings implements Debug, HashCode {\n  constructor(maxScopeDepth: number) {\n    this.maxScopeDepth = maxScopeDepth;\n  }\n\n  readonly maxScopeDepth: number;\n\n  withMaxScopeDepth(maxScopeDepth: number): InterpreterSettings {\n    return this.copy(maxScopeDepth);\n  }\n\n  protected copy(maxScopeDepth: number): InterpreterSettings {\n    return new InterpreterSettings(maxScopeDepth);\n  }\n\n  protected canEqual(that: unknown): boolean {\n    return that instanceof InterpreterSettings;\n  }\n\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InterpreterSettings) {\n      return that.canEqual(this) && this.maxScopeDepth === that.maxScopeDepth;\n    }\n    return false;\n  }\n\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(InterpreterSettings),\n        Numbers.hash(this.maxScopeDepth)));\n  }\n\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"new\").write(32/*' '*/).write(\"InterpreterSettings\")\n                   .write(40/*'('*/).debug(this.maxScopeDepth).write(41/*')'*/);\n    return output;\n  }\n\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static standard(): InterpreterSettings {\n    const maxScopeDepth = 1024;\n    return new InterpreterSettings(maxScopeDepth);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {InterpreterException} from \"./InterpreterException\";\nimport {InterpreterSettings} from \"./InterpreterSettings\";\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport type {Operator} from \"../operator/Operator\";\nimport type {Selector} from \"../selector/Selector\";\n\n/** @public */\nexport type InterpreterLike = Interpreter | ItemLike;\n\n/** @public */\nexport class Interpreter {\n  constructor(settings?: InterpreterSettings, scopeStack?: Item[] | null, scopeDepth?: number) {\n    this.settings = settings !== void 0 ? settings : InterpreterSettings.standard();\n    this.scopeStack = scopeStack !== void 0 ? scopeStack : null;\n    this.scopeDepth = scopeDepth !== void 0 ? scopeDepth : 0;\n  }\n\n  likeType?(like: ItemLike): void;\n\n  readonly settings: InterpreterSettings;\n\n  withSettings(settings: InterpreterSettings): this {\n    (this as Mutable<this>).settings = settings;\n    return this;\n  }\n\n  /** @internal */\n  readonly scopeStack: Item[] | null;\n\n  readonly scopeDepth: number;\n\n  peekScope(): Item {\n    const scopeDepth = this.scopeDepth;\n    if (scopeDepth <= 0) {\n      throw new InterpreterException(\"scope stack empty\");\n    }\n    return this.scopeStack![scopeDepth - 1]!;\n  }\n\n  getScope(index: number): Item {\n    if (index < 0 || index >= this.scopeDepth) {\n      throw new RangeError(\"\" + index);\n    }\n    return this.scopeStack![index]!;\n  }\n\n  pushScope(scope: Item): void {\n    const scopeDepth = this.scopeDepth;\n    if (scopeDepth >= this.settings.maxScopeDepth) {\n      throw new InterpreterException(\"scope stack overflow\");\n    }\n    const oldScopeStack = this.scopeStack;\n    let newScopeStack;\n    if (oldScopeStack === null || scopeDepth + 1 > oldScopeStack.length) {\n      newScopeStack = new Array<Item>(Interpreter.expand(scopeDepth + 1));\n      if (oldScopeStack !== null) {\n        for (let i = 0; i < scopeDepth; i += 1) {\n          newScopeStack[i] = oldScopeStack[i]!;\n        }\n      }\n      (this as Mutable<this>).scopeStack = newScopeStack;\n    } else {\n      newScopeStack = oldScopeStack;\n    }\n    newScopeStack[scopeDepth] = scope;\n    (this as Mutable<this>).scopeDepth += 1;\n  }\n\n  popScope(): Item {\n    const scopeDepth = this.scopeDepth;\n    if (scopeDepth <= 0) {\n      throw new InterpreterException(\"scope stack empty\");\n    }\n    const scopeStack = this.scopeStack!;\n    const scope = scopeStack[scopeDepth - 1]!;\n    scopeStack[scopeDepth - 1] = void 0 as any;\n    (this as Mutable<this>).scopeDepth -= 1;\n    return scope;\n  }\n\n  swapScope(newScope: Item): Item {\n    const scopeDepth = this.scopeDepth;\n    if (scopeDepth <= 0) {\n      throw new InterpreterException(\"scope stack empty\");\n    }\n    const scopeStack = this.scopeStack!;\n    const oldScope = scopeStack[scopeDepth - 1]!;\n    scopeStack[scopeDepth - 1] = newScope;\n    return oldScope;\n  }\n\n  willOperate(operator: Operator): void {\n    // hook\n  }\n\n  didOperate(operator: Operator, result: Item): void {\n    // hook\n  }\n\n  willSelect(selector: Selector): void {\n    // hook\n  }\n\n  didSelect(selector: Selector, result: unknown): void {\n    // hook\n  }\n\n  willTransform(selector: Selector): void {\n    // hook\n  }\n\n  didTransform(selector: Selector, result: Item): void {\n    // hook\n  }\n\n  static of(...objects: ItemLike[]): Interpreter {\n    const n = objects.length;\n    const scopes = new Array(Interpreter.expand(n));\n    for (let i = 0; i < n; i += 1) {\n      const scope = Item.fromLike(objects[i]);\n      scopes[i] = scope;\n    }\n    return new Interpreter(InterpreterSettings.standard(), scopes, n);\n  }\n\n  static fromLike(interpreter: InterpreterLike, globalScope: Item = Item.globalScope()): Interpreter {\n    if (!(interpreter instanceof Interpreter)) {\n      const scope = interpreter;\n      interpreter = new Interpreter();\n      if (globalScope !== void 0) {\n        interpreter.pushScope(globalScope);\n      }\n      if (scope !== void 0) {\n        interpreter.pushScope(Item.fromLike(scope));\n      }\n    }\n    return interpreter;\n  }\n\n  private static expand(n: number): number {\n    n = Math.max(32, n) - 1;\n    n |= n >> 1; n |= n >> 2; n |= n >> 4; n |= n >> 8; n |= n >> 16;\n    return n + 1;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class OrOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"||\";\n  }\n\n  override get precedence(): number {\n    return 3;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    let result: Item;\n    const argument1 = this.operand1.evaluate(interpreter);\n    if (argument1.isDefinite()) {\n      result = argument1;\n    } else {\n      const argument2 = this.operand2.evaluate(interpreter);\n      result = argument2;\n    }\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.or(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 21;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof OrOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof OrOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof OrOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(OrOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"or\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): OrOperator {\n    return new OrOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class AndOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"&&\";\n  }\n\n  override get precedence(): number {\n    return 4;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    let result: Item;\n    const argument1 = this.operand1.evaluate(interpreter);\n    if (argument1.isDefinite()) {\n      const argument2 = this.operand2.evaluate(interpreter);\n      result = argument2;\n    } else {\n      result = argument1;\n    }\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.and(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 22;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof AndOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof AndOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof AndOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(AndOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"and\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): AndOperator {\n    return new AndOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class BitwiseOrOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"|\";\n  }\n\n  override get precedence(): number {\n    return 5;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.bitwiseOr(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.bitwiseOr(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 23;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof BitwiseOrOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseOrOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseOrOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(BitwiseOrOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"bitwiseOr\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): BitwiseOrOperator {\n    return new BitwiseOrOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class BitwiseXorOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"^\";\n  }\n\n  override get precedence(): number {\n    return 6;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.bitwiseXor(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.bitwiseXor(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 24;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof BitwiseXorOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseXorOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseXorOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(BitwiseXorOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"bitwiseXor\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): BitwiseXorOperator {\n    return new BitwiseXorOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class BitwiseAndOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"&\";\n  }\n\n  override get precedence(): number {\n    return 7;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.bitwiseAnd(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.bitwiseAnd(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 25;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof BitwiseAndOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseAndOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseAndOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(BitwiseAndOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"bitwiseAnd\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): BitwiseAndOperator {\n    return new BitwiseAndOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class LtOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"<\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.lt(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.lt(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 26;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof LtOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LtOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LtOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(LtOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    return output.debug(this.operand1).write(46/*'.'*/).write(\"lt\").write(40/*'('*/)\n                 .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): LtOperator {\n    return new LtOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class LeOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"<=\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.le(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.le(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 27;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof LeOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LeOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LeOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(LeOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    return output.debug(this.operand1).write(46/*'.'*/).write(\"le\").write(40/*'('*/)\n                 .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): LeOperator {\n    return new LeOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class EqOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"==\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.eq(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.eq(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 28;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof EqOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof EqOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof EqOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(EqOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"eq\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): EqOperator {\n    return new EqOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class NeOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"!=\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.ne(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.ne(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 29;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof NeOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NeOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NeOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(NeOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"ne\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): NeOperator {\n    return new NeOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class GeOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \">=\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.ge(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.ge(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 30;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof GeOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GeOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"ge\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): GeOperator {\n    return new GeOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class GtOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \">\";\n  }\n\n  override get precedence(): number {\n    return 0;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.gt(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.gt(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 31;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof GtOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GtOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GtOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GtOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"gt\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): GtOperator {\n    return new GtOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class PlusOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"+\";\n  }\n\n  override get precedence(): number {\n    return 8;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.plus(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.plus(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 32;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof PlusOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof PlusOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof PlusOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(PlusOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"plus\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): PlusOperator {\n    return new PlusOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class MinusOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"-\";\n  }\n\n  override get precedence(): number {\n    return 8;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.minus(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.minus(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 33;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof MinusOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof MinusOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof MinusOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(MinusOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"minus\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): MinusOperator {\n    return new MinusOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class TimesOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"*\";\n  }\n\n  override get precedence(): number {\n    return 9;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.times(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.times(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 34;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof TimesOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimesOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimesOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(TimesOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"times\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): TimesOperator {\n    return new TimesOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class DivideOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"/\";\n  }\n\n  override get precedence(): number {\n    return 9;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.divide(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.divide(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 35;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof DivideOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DivideOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DivideOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(DivideOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"divide\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): DivideOperator {\n    return new DivideOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {BinaryOperator} from \"./BinaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class ModuloOperator extends BinaryOperator {\n  constructor(operand1: Item, operand2: Item) {\n    super(operand1, operand2);\n  }\n\n  override get operator(): string {\n    return \"%\";\n  }\n\n  override get precedence(): number {\n    return 9;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    interpreter.willOperate(this);\n    const argument1 = this.operand1.evaluate(interpreter);\n    const argument2 = this.operand2.evaluate(interpreter);\n    const result = argument1.modulo(argument2);\n    interpreter.didOperate(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument1 = this.operand1.substitute(interpreter);\n    const argument2 = this.operand2.substitute(interpreter);\n    return argument1.modulo(argument2);\n  }\n\n  override get typeOrder(): number {\n    return 36;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof ModuloOperator) {\n      let order = this.operand1.compareTo(that.operand1);\n      if (order === 0) {\n        order = this.operand2.compareTo(that.operand2);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ModuloOperator) {\n      return this.operand1.equivalentTo(that.operand1, epsilon)\n          && this.operand2.equivalentTo(that.operand2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ModuloOperator) {\n      return this.operand1.equals(that.operand1) && this.operand2.equals(that.operand2);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(ModuloOperator),\n        this.operand1.hashCode()), this.operand2.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand1).write(46/*'.'*/).write(\"modulo\").write(40/*'('*/)\n                   .debug(this.operand2).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): ModuloOperator {\n    return new ModuloOperator(this.operand1.clone(), this.operand2.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Item} from \"../Item\";\nimport {UnaryOperator} from \"./UnaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class NotOperator extends UnaryOperator {\n  constructor(operand: Item) {\n    super(operand);\n  }\n\n  override get operator(): string {\n    return \"!\";\n  }\n\n  override get precedence(): number {\n    return 10;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.evaluate(interpreter);\n    return argument.not();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.substitute(interpreter);\n    return argument.not();\n  }\n\n  override get typeOrder(): number {\n    return 37;\n  }\n\n  override compareTo(that: Item): number {\n    return Numbers.compare(this.typeOrder, that.typeOrder);\n  }\n\n  override equivalentTo(that: Item, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NotOperator) {\n      return this.operand.equivalentTo(that.operand, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NotOperator) {\n      return this.operand.equals(that.operand);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(NotOperator), this.operand.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand).write(46/*'.'*/).write(\"not\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): NotOperator {\n    return new NotOperator(this.operand.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {UnaryOperator} from \"./UnaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class BitwiseNotOperator extends UnaryOperator {\n  constructor(operand: Item) {\n    super(operand);\n  }\n\n  override get operator(): string {\n    return \"~\";\n  }\n\n  override get precedence(): number {\n    return 10;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.evaluate(interpreter);\n    return argument.bitwiseNot();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.substitute(interpreter);\n    return argument.bitwiseNot();\n  }\n\n  override get typeOrder(): number {\n    return 38;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof BitwiseNotOperator) {\n      return this.operand.compareTo(that.operand);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseNotOperator) {\n      return this.operand.equivalentTo(that.operand, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof BitwiseNotOperator) {\n      return this.operand.equals(that.operand);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(BitwiseNotOperator), this.operand.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand).write(46/*'.'*/).write(\"bitwiseNot\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): BitwiseNotOperator {\n    return new BitwiseNotOperator(this.operand.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {UnaryOperator} from \"./UnaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class NegativeOperator extends UnaryOperator {\n  constructor(operand: Item) {\n    super(operand);\n  }\n\n  override get operator(): string {\n    return \"-\";\n  }\n\n  override get precedence(): number {\n    return 10;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.evaluate(interpreter);\n    return argument.negative();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.substitute(interpreter);\n    return argument.negative();\n  }\n\n  override get typeOrder(): number {\n    return 39;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof NegativeOperator) {\n      return this.operand.compareTo(that.operand);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NegativeOperator) {\n      return this.operand.equivalentTo(that.operand, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof NegativeOperator) {\n      return this.operand.equals(that.operand);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(NegativeOperator), this.operand.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand).write(46/*'.'*/).write(\"negative\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): NegativeOperator {\n    return new NegativeOperator(this.operand.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {UnaryOperator} from \"./UnaryOperator\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport class PositiveOperator extends UnaryOperator {\n  constructor(operand: Item) {\n    super(operand);\n  }\n\n  override get operator(): string {\n    return \"+\";\n  }\n\n  override get precedence(): number {\n    return 10;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.evaluate(interpreter);\n    return argument.positive();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const argument = this.operand.substitute(interpreter);\n    return argument.positive();\n  }\n\n  override get typeOrder(): number {\n    return 40;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof PositiveOperator) {\n      return this.operand.compareTo(that.operand);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof PositiveOperator) {\n      return this.operand.equivalentTo(that.operand, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof PositiveOperator) {\n      return this.operand.equals(that.operand);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(PositiveOperator), this.operand.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.operand).write(46/*'.'*/).write(\"positive\").write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): PositiveOperator {\n    return new PositiveOperator(this.operand.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport type {Value} from \"../Value\";\nimport {Operator} from \"./Operator\";\nimport {InvokeOperatorInterpolator} from \"../\"; // forward import\nimport {Func} from \"../\"; // forward import\nimport type {InterpreterLike} from \"../interpreter/Interpreter\"; // forward import\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class InvokeOperator extends Operator {\n  constructor(func: Value, args: Value) {\n    super();\n    this.func = func;\n    this.args = args.commit();\n    this.state = void 0;\n  }\n\n  readonly func: Value;\n\n  readonly args: Value;\n\n  readonly state: unknown;\n\n  setState(state: unknown): void {\n    (this as Mutable<this>).state = state;\n  }\n\n  override isConstant(): boolean {\n    return this.func.isConstant() && this.args.isConstant();\n  }\n\n  override get precedence(): number {\n    return 11;\n  }\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const func = this.func.evaluate(interpreter);\n    if (func instanceof Func) {\n      return func.invoke(this.args, interpreter, this);\n    }\n    return Item.absent();\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const func = this.func.evaluate(interpreter);\n    if (func instanceof Func) {\n      const result = func.expand(this.args, interpreter, this);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    const args = this.args.substitute(interpreter).toValue();\n    return new InvokeOperator(this.func, args);\n  }\n\n  override interpolateTo(that: InvokeOperator): Interpolator<InvokeOperator>;\n  override interpolateTo(that: Item): Interpolator<Item>;\n  override interpolateTo(that: unknown): Interpolator<Item> | null;\n  override interpolateTo(that: unknown): Interpolator<Item> | null {\n    if (that instanceof InvokeOperator) {\n      return InvokeOperatorInterpolator(this, that);\n    } else {\n      return super.interpolateTo(that);\n    }\n  }\n\n  override get typeOrder(): number {\n    return 41;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof InvokeOperator) {\n      let order = this.func.compareTo(that.func);\n      if (order === 0) {\n        order = this.args.compareTo(that.args);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InvokeOperator) {\n      return this.func.equals(that.func)\n          && this.args.equivalentTo(that.args, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InvokeOperator) {\n      return this.func.equals(that.func) && this.args.equals(that.args);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(InvokeOperator),\n        this.func.hashCode()), this.args.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.func).write(46/*'.'*/).write(\"invoke\").write(40/*'('*/)\n                   .debug(this.args).write(41/*')'*/);\n    return output;\n  }\n\n  override clone(): InvokeOperator {\n    return new InvokeOperator(this.func.clone(), this.args.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Item} from \"../Item\";\nimport {InvokeOperator} from \"./InvokeOperator\";\n\n/** @internal */\nexport interface InvokeOperatorInterpolator extends Interpolator<InvokeOperator> {\n  /** @internal */\n  readonly funcInterpolator: Interpolator<Item>;\n  /** @internal */\n  readonly argsInterpolator: Interpolator<Item>;\n\n  readonly 0: InvokeOperator;\n\n  readonly 1: InvokeOperator;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const InvokeOperatorInterpolator = (function (_super: typeof Interpolator) {\n  const InvokeOperatorInterpolator = function (y0: InvokeOperator, y1: InvokeOperator): InvokeOperatorInterpolator {\n    const interpolator = function (u: number): InvokeOperator {\n      const func = interpolator.funcInterpolator(u);\n      const args = interpolator.argsInterpolator(u);\n      return new InvokeOperator(func, args);\n    } as InvokeOperatorInterpolator;\n    Object.setPrototypeOf(interpolator, InvokeOperatorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>).funcInterpolator = y0.func.interpolateTo(y1.func);\n    (interpolator as Mutable<typeof interpolator>).argsInterpolator = y0.args.interpolateTo(y1.args);\n    return interpolator;\n  } as {\n    (y0: InvokeOperator, y1: InvokeOperator): InvokeOperatorInterpolator;\n\n    /** @internal */\n    prototype: InvokeOperatorInterpolator;\n  };\n\n  InvokeOperatorInterpolator.prototype = Object.create(_super.prototype);\n  InvokeOperatorInterpolator.prototype.constructor = InvokeOperatorInterpolator;\n\n  Object.defineProperty(InvokeOperatorInterpolator.prototype, 0, {\n    get(this: InvokeOperatorInterpolator): InvokeOperator {\n      const func = this.funcInterpolator[0];\n      const args = this.argsInterpolator[0];\n      return new InvokeOperator(func, args);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(InvokeOperatorInterpolator.prototype, 1, {\n    get(this: InvokeOperatorInterpolator): InvokeOperator {\n      const func = this.funcInterpolator[1];\n      const args = this.argsInterpolator[1];\n      return new InvokeOperator(func, args);\n    },\n    configurable: true,\n  });\n\n  InvokeOperatorInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof InvokeOperatorInterpolator) {\n      return this.funcInterpolator.equals(that.funcInterpolator)\n          && this.argsInterpolator.equals(that.argsInterpolator);\n    }\n    return false;\n  };\n\n  return InvokeOperatorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport type {ValueLike} from \"../Value\";\nimport {Value} from \"../Value\";\nimport {Record} from \"../Record\";\nimport type {TextLike} from \"../Text\";\nimport {Text} from \"../Text\";\nimport type {NumLike} from \"../Num\";\nimport {Num} from \"../Num\";\nimport {Expression} from \"../Expression\";\nimport type {Operator} from \"../operator/Operator\";\nimport {InvokeOperator} from \"../operator/InvokeOperator\";\nimport {IdentitySelector} from \"../\"; // forward import\nimport {GetSelector} from \"../\"; // forward import\nimport {GetAttrSelector} from \"../\"; // forward import\nimport {GetItemSelector} from \"../\"; // forward import\nimport {KeysSelector} from \"../\"; // forward import\nimport {ValuesSelector} from \"../\"; // forward import\nimport {ChildrenSelector} from \"../\"; // forward import\nimport {DescendantsSelector} from \"../\"; // forward import\nimport {FilterSelector} from \"../\"; // forward import\nimport {LiteralSelector} from \"../\"; // forward import\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport abstract class Selector extends Expression {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override isConstant(): boolean {\n    return false;\n  }\n\n  /**\n   * The `Selector` that this `Selector` uses to match sub-selections.\n   */\n  abstract readonly then: Selector;\n\n  abstract forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  abstract forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n\n  abstract mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  abstract mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n\n  override evaluate(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let selected = Item.absent();\n    let count = 0;\n    this.forSelected(interpreter, function (interpreter: Interpreter): void {\n      const scope = interpreter.peekScope();\n      if (scope !== void 0) {\n        if (count === 0) {\n          selected = scope;\n        } else {\n          if (count === 1) {\n            const record = Record.create();\n            record.push(selected);\n            selected = record;\n          }\n          (selected as Record).push(scope);\n        }\n        count += 1;\n      }\n    }, this);\n    return selected;\n  }\n\n  abstract override substitute(interpreter: InterpreterLike): Item;\n\n  abstract andThen(then: Selector): Selector;\n\n  override get(key: ValueLike): Selector {\n    key = Value.fromLike(key);\n    return this.andThen(new GetSelector(key, Selector.identity()));\n  }\n\n  override getAttr(key: TextLike): Selector {\n    key = Text.fromLike(key);\n    return this.andThen(new GetAttrSelector(key, Selector.identity()));\n  }\n\n  override getItem(index: NumLike): Selector {\n    index = Num.fromLike(index);\n    return this.andThen(new GetItemSelector(index, Selector.identity()));\n  }\n\n  keys(): Selector {\n    return this.andThen(Selector.keys());\n  }\n\n  values(): Selector {\n    return this.andThen(Selector.values());\n  }\n\n  children(): Selector {\n    return this.andThen(Selector.children());\n  }\n\n  descendants(): Selector {\n    return this.andThen(Selector.descendants());\n  }\n\n  override filter(predicate?: ItemLike): Selector {\n    if (arguments.length === 0) {\n      return new FilterSelector(this, Selector.identity());\n    } else {\n      predicate = Item.fromLike(predicate);\n      return this.andThen(predicate.filter());\n    }\n  }\n\n  override invoke(args: Value): Operator {\n    return new InvokeOperator(this, args);\n  }\n\n  override get precedence(): number {\n    return 11;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Selector\").write(46/*'.'*/).write(\"identity\").write(40/*'('*/).write(41/*')'*/);\n    output = this.debugThen(output);\n    return output;\n  }\n\n  abstract debugThen<T>(output: Output<T>): Output<T>;\n\n  abstract override clone(): Selector;\n\n  @Lazy\n  static identity(): Selector {\n    return new IdentitySelector();\n  }\n\n  static get(key: ValueLike): Selector {\n    key = Value.fromLike(key);\n    return new GetSelector(key, Selector.identity());\n  }\n\n  static getAttr(key: TextLike): Selector {\n    key = Text.fromLike(key);\n    return new GetAttrSelector(key, Selector.identity());\n  }\n\n  static getItem(index: NumLike): Selector {\n    index = Num.fromLike(index);\n    return new GetItemSelector(index, Selector.identity());\n  }\n\n  @Lazy\n  static keys(): Selector {\n    return new KeysSelector(Selector.identity());\n  }\n\n  @Lazy\n  static values(): Selector {\n    return new ValuesSelector(Selector.identity());\n  }\n\n  @Lazy\n  static children(): Selector {\n    return new ChildrenSelector(Selector.identity());\n  }\n\n  @Lazy\n  static descendants(): Selector {\n    return new DescendantsSelector(Selector.identity());\n  }\n\n  static literal(item: ItemLike): Selector {\n    item = Item.fromLike(item);\n    if (!(item instanceof Selector)) {\n      item = new LiteralSelector(item, Selector.identity());\n    }\n    return item as Selector;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport type {ValueLike} from \"../Value\";\nimport {Value} from \"../Value\";\nimport type {TextLike} from \"../Text\";\nimport {Text} from \"../Text\";\nimport type {NumLike} from \"../Num\";\nimport {Num} from \"../Num\";\nimport {Selector} from \"./Selector\";\nimport {GetSelector} from \"../\"; // forward import\nimport {GetAttrSelector} from \"../\"; // forward import\nimport {GetItemSelector} from \"../\"; // forward import\nimport {FilterSelector} from \"../\"; // forward import\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class IdentitySelector extends Selector {\n  override get then(): Selector {\n    return this;\n  }\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const oldScope = interpreter.popScope();\n      // Evaluate the current selection.\n      const newScope = oldScope.evaluate(interpreter);\n      // Push the evaluated selection onto the scope stack.\n      interpreter.pushScope(newScope);\n      // Visit the evaluated selection.\n      selected = callback.call(thisArg, interpreter);\n      // Restore the original selection to the top of the scope stack.\n      interpreter.swapScope(oldScope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    return transform.call(thisArg, interpreter);\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    return interpreter.peekScope().substitute(interpreter);\n  }\n\n  override get(key: ValueLike): Selector {\n    key = Value.fromLike(key);\n    return new GetSelector(key, this);\n  }\n\n  override getAttr(key: TextLike): Selector {\n    key = Text.fromLike(key);\n    return new GetAttrSelector(key, this);\n  }\n\n  override getItem(index: NumLike): Selector {\n    index = Num.fromLike(index);\n    return new GetItemSelector(index, this);\n  }\n\n  override andThen(then: Selector): Selector {\n    return then;\n  }\n\n  override keys(): Selector {\n    return Selector.keys();\n  }\n\n  override values(): Selector {\n    return Selector.values();\n  }\n\n  override children(): Selector {\n    return Selector.children();\n  }\n\n  override descendants(): Selector {\n    return Selector.descendants();\n  }\n\n  override filter(predicate?: ItemLike): Selector {\n    if (arguments.length === 0) {\n      return new FilterSelector(this, this);\n    } else {\n      predicate = Item.fromLike(predicate);\n      return predicate.filter();\n    }\n  }\n\n  override get typeOrder(): number {\n    return 10;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this === that;\n  }\n\n  override equals(that: unknown): boolean {\n    return this === that;\n  }\n\n  override hashCode(): number {\n    return Constructors.hash(IdentitySelector);\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    return output; // blank\n  }\n\n  override clone(): Selector {\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Field} from \"../Field\";\nimport type {Value} from \"../Value\";\nimport {Record} from \"../Record\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class GetSelector extends Selector {\n  constructor(key: Value, then: Selector) {\n    super();\n    this.item = key.commit();\n    this.then = then;\n  }\n\n  readonly item: Value;\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    interpreter.willSelect(this);\n    // Evaluate the key, in case it's dynamic.\n    const key = this.item.evaluate(interpreter).toValue();\n    const selected = GetSelector.forSelected(key, this.then, interpreter, callback, thisArg);\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  /** @internal */\n  static forSelected<T, S>(key: Value, then: Selector, interpreter: Interpreter,\n                           callback: (this: S | undefined, interpreter: Interpreter) => T,\n                           thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the next selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      let field: Field | undefined;\n      // Only records can have members.\n      if (scope instanceof Record) {\n        field = scope.getField(key);\n        if (field !== void 0) {\n          // Push the field value onto the scope stack.\n          interpreter.pushScope(field.toValue());\n          // Subselect the field value.\n          selected = then.forSelected(interpreter, callback, thisArg);\n          // Pop the field value off of the scope stack.\n          interpreter.popScope();\n        }\n      }\n      if (field === void 0 && selected === void 0) {\n        selected = GetSelector.forSelected(key, then, interpreter, callback, thisArg);\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    // Evaluate the key, if it's dynamic.\n    const key = this.item.evaluate(interpreter).toValue();\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have members.\n      if (scope instanceof Record) {\n        const oldField = scope.getField(key);\n        if (oldField !== void 0) {\n          // Push the field value onto the scope stack.\n          interpreter.pushScope(oldField.toValue());\n          // Transform the field value.\n          const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n          // Pop the field value off the scope stack.\n          interpreter.popScope();\n          if (newItem instanceof Field) {\n            // Replace the original field with the transformed field.\n            if (key.equals(newItem.key)) {\n              scope.set(key, newItem.toValue());\n            } else {\n              scope.delete(key);\n              scope.push(newItem);\n            }\n          } else if (newItem.isDefined()) {\n            // Update the field with the transformed value.\n            scope.set(key, newItem.toValue());\n          } else {\n            // Remove the field.\n            scope.delete(key);\n          }\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    // Evaluate the key, in case it's dynamic.\n    const key = this.item.evaluate(interpreter).toValue();\n    const value = GetSelector.substitute(key, this.then, interpreter);\n    if (value !== void 0) {\n      return value;\n    }\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new GetSelector(this.item, then as Selector);\n  }\n\n  /** @internal */\n  static substitute(key: Value, then: Selector, interpreter: Interpreter): Item | undefined {\n    let selected: Item | undefined;\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the next selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      let field: Field | undefined;\n      // Only records can have members.\n      if (scope instanceof Record) {\n        field = scope.getField(key);\n        if (field !== void 0) {\n          // Substitute the field value.\n          selected = field.toValue().substitute(interpreter);\n        }\n      }\n      if (field === void 0 && selected === void 0) {\n        selected = GetSelector.substitute(key, then, interpreter);\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    return selected;\n  }\n\n  override andThen(then: Selector): Selector {\n    return new GetSelector(this.item, this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 12;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof GetSelector) {\n      let order = this.item.compareTo(that.item);\n      if (order === 0) {\n        order = this.then.compareTo(that.then);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetSelector) {\n      return this.item.equals(that.item) && this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetSelector) {\n      return this.item.equals(that.item) && this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GetSelector),\n        this.item.hashCode()), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"get\").write(40/*'('*/).debug(this.item).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new GetSelector(this.item.clone(), this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Field} from \"../Field\";\nimport {Attr} from \"../Attr\";\nimport {Record} from \"../Record\";\nimport type {Text} from \"../Text\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class GetAttrSelector extends Selector {\n  constructor(key: Text, then: Selector) {\n    super();\n    this.item = key;\n    this.then = then;\n  }\n\n  readonly item: Text;\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    interpreter.willSelect(this);\n    const key = this.item;\n    const selected = GetAttrSelector.forSelected(key, this.then, interpreter, callback);\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  /** @internal */\n  static forSelected<T, S>(key: Text, then: Selector, interpreter: Interpreter,\n                           callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                           thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the next selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      let field: Field | undefined;\n      // Only records can have members.\n      if (scope instanceof Record) {\n        field = scope.getField(key);\n        if (field instanceof Attr) {\n          // Push the field value onto the scope stack.\n          interpreter.pushScope(field.toValue());\n          // Subselect the field value.\n          selected = then.forSelected(interpreter, callback, thisArg);\n          // Pop the field value off of the scope stack.\n          interpreter.popScope();\n        }\n      }\n      if (field === void 0 && selected === void 0) {\n        selected = GetAttrSelector.forSelected(key, then, interpreter, callback, thisArg);\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    const key = this.item;\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have members.\n      if (scope instanceof Record) {\n        const oldField = scope.getField(key);\n        if (oldField instanceof Attr) {\n          // Push the field value onto the scope stack.\n          interpreter.pushScope(oldField.toValue());\n          // Transform the field value.\n          const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n          // Pop the field value off the scope stack.\n          interpreter.popScope();\n          if (newItem instanceof Field) {\n            // Replace the original field with the transformed field.\n            if (key.equals(newItem.key)) {\n              scope.setAttr(key, newItem.toValue());\n            } else {\n              scope.delete(key);\n              scope.push(newItem);\n            }\n          } else if (newItem.isDefined()) {\n            // Update the field with the transformed value.\n            scope.setAttr(key, newItem.toValue());\n          } else {\n            // Remove the field.\n            scope.delete(key);\n          }\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const key = this.item;\n    const value = GetAttrSelector.substitute(key, this.then, interpreter);\n    if (value !== void 0) {\n      return value;\n    }\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new GetAttrSelector(this.item, then as Selector);\n  }\n\n  /** @internal */\n  static substitute(key: Text, then: Selector, interpreter: Interpreter): Item | undefined {\n    let selected: Item | undefined;\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the next selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      let field: Field | undefined;\n      // Only records can have members.\n      if (scope instanceof Record) {\n        field = scope.getField(key);\n        if (field instanceof Attr) {\n          // Substitute the field value.\n          selected = field.toValue().substitute(interpreter);\n        }\n      }\n      if (field === void 0 && selected === void 0) {\n        selected = GetAttrSelector.substitute(key, then, interpreter);\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    return selected;\n  }\n\n  override andThen(then: Selector): Selector {\n    return new GetAttrSelector(this.item, this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 13;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof GetAttrSelector) {\n      let order = this.item.compareTo(that.item);\n      if (order === 0) {\n        order = this.then.compareTo(that.then);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetAttrSelector) {\n      return this.item.equals(that.item) && this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetAttrSelector) {\n      return this.item.equals(that.item) && this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GetAttrSelector),\n        this.item.hashCode()), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"getAttr\").write(40/*'('*/)\n                   .debug(this.item).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new GetAttrSelector(this.item.clone(), this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Record} from \"../Record\";\nimport type {Num} from \"../Num\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class GetItemSelector extends Selector {\n  constructor(index: Num, then: Selector) {\n    super();\n    this.item = index;\n    this.then = then;\n  }\n\n  readonly item: Num;\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    const index = this.item.numberValue();\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      if (scope instanceof Record && index < scope.length) {\n        const item = scope.getItem(index);\n        // Push the item onto the scope stack.\n        interpreter.pushScope(item);\n        // Subselect the item.\n        selected = this.then.forSelected(interpreter, callback, thisArg);\n        // Pop the item off of the scope stack.\n        interpreter.popScope();\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      const index = this.item.numberValue();\n      if (scope instanceof Record && index < scope.length) {\n        const oldItem = scope.getItem(index);\n        // Push the item onto the scope stack.\n        interpreter.pushScope(oldItem);\n        // Transform the item.\n        const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n        // Pop the item off the scope stack.\n        interpreter.popScope();\n        if (newItem.isDefined()) {\n          scope.setItem(index, newItem);\n        } else {\n          scope.splice(index, 1);\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const index = this.item.numberValue();\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      let selected: Item | undefined;\n      if (scope instanceof Record && index < scope.length) {\n        const item = scope.getItem(index);\n        // Substitute the item.\n        selected = item.substitute(interpreter);\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n      if (selected !== void 0) {\n        return selected;\n      }\n    }\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new GetItemSelector(this.item, then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new GetItemSelector(this.item, this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 14;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof GetItemSelector) {\n      let order = this.item.compareTo(that.item);\n      if (order === 0) {\n        order = this.then.compareTo(that.then);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetItemSelector) {\n      return this.item.equals(that.item) && this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GetItemSelector) {\n      return this.item.equals(that.item) && this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GetItemSelector),\n        this.item.hashCode()), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"getItem\").write(40/*'('*/)\n                   .debug(this.item).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new GetItemSelector(this.item, this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Field} from \"../Field\";\nimport {Attr} from \"../Attr\";\nimport {Slot} from \"../Slot\";\nimport {Record} from \"../Record\";\nimport {Text} from \"../Text\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class KeysSelector extends Selector {\n  constructor(then: Selector) {\n    super();\n    this.then = then;\n  }\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope();\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child, while none have been selected:\n        while (selected === void 0 && children.hasNext()) {\n          const child = children.next().value!;\n          // Only fields can have keys.\n          if (child instanceof Field) {\n            // Push the child key onto the scope stack.\n            interpreter.pushScope(child.key);\n            // Subselect the child key.\n            selected = this.then.forSelected(interpreter, callback, thisArg);\n            // Pop the child key off of the scope stack.\n            interpreter.popScope();\n          }\n        }\n      } else if (scope instanceof Field) {\n        // Push the key onto the scope stack.\n        interpreter.pushScope(scope.key);\n        // Subselect the key.\n        selected = this.then.forSelected(interpreter, callback, thisArg);\n        // Pop the key off of the scope stack.\n        interpreter.popScope();\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      let scope = interpreter.popScope();\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        while (children.hasNext()) {\n          const child = children.next().value!;\n          if (child instanceof Field) {\n            const oldKey = child.key;\n            // Push the key onto the scope stack.\n            interpreter.pushScope(oldKey);\n            // Subselect the key.\n            const newKey = this.then.mapSelected(interpreter, transform, thisArg).toValue();\n            // Pop the key off of the scope stack.\n            interpreter.popScope();\n            if (newKey.isDefined()) {\n              if (oldKey !== newKey) {\n                if (scope instanceof Attr && newKey instanceof Text) {\n                  children.set(Attr.of(newKey, scope.toValue()));\n                } else {\n                  children.set(Slot.of(newKey, scope.toValue()));\n                }\n              }\n            } else {\n              children.delete();\n            }\n          }\n        }\n      } else if (scope instanceof Field) {\n        const oldKey = scope.key;\n        // Push the key onto the scope stack.\n        interpreter.pushScope(oldKey);\n        // Subselect the key.\n        const newKey = this.then.mapSelected(interpreter, transform, thisArg).toValue();\n        // Pop the key off of the scope stack.\n        interpreter.popScope();\n        if (newKey.isDefined()) {\n          if (oldKey !== newKey) {\n            if (scope instanceof Attr && newKey instanceof Text) {\n              scope = Attr.of(newKey, scope.toValue());\n            } else {\n              scope = Slot.of(newKey, scope.toValue());\n            }\n          }\n        } else {\n          scope = Item.absent();\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new KeysSelector(then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new KeysSelector(this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 15;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof KeysSelector) {\n      return this.then.compareTo(that.then);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof KeysSelector) {\n      return this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof KeysSelector) {\n      return this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(KeysSelector), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"keys\").write(40/*'('*/).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new KeysSelector(this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Field} from \"../Field\";\nimport {Record} from \"../Record\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class ValuesSelector extends Selector {\n  constructor(then: Selector) {\n    super();\n    this.then = then;\n  }\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope();\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child, while none have been selected:\n        while (selected === void 0 && children.hasNext()) {\n          const child = children.next().value!;\n          // Push the child value onto the scope stack.\n          interpreter.pushScope(child.toValue());\n          // Subselect the child value.\n          selected = this.then.forSelected(interpreter, callback, thisArg);\n          // Pop the child value off of the scope stack.\n          interpreter.popScope();\n        }\n      } else {\n        // Push the value onto the scope stack.\n        interpreter.pushScope(scope.toValue());\n        // Subselect the value.\n        selected = this.then.forSelected(interpreter, callback, thisArg);\n        // Pop the value off of the scope stack.\n        interpreter.popScope();\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      let scope = interpreter.popScope();\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        while (children.hasNext()) {\n          const child = children.next().value!;\n          if (child instanceof Field) {\n            const oldValue = child.toValue();\n            // Push the child value onto the scope stack.\n            interpreter.pushScope(oldValue);\n            // Transform the child value.\n            const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n            // Pop the child value off of the scope stack.\n            interpreter.popScope();\n            if (newItem.isDefined()) {\n              if (newItem instanceof Field) {\n                children.set(newItem);\n              } else if (newItem !== oldValue) {\n                children.set(child.updatedValue(newItem.toValue()));\n              }\n            } else {\n              children.delete();\n            }\n          } else {\n            // Push the child onto the scope stack.\n            interpreter.pushScope(child.toValue());\n            // Transform the child.\n            const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n            // Pop the child off of the scope stack.\n            interpreter.popScope();\n            if (newItem.isDefined()) {\n              if (child !== newItem) {\n                children.set(newItem);\n              }\n            } else {\n              children.delete();\n            }\n          }\n        }\n      } else if (scope instanceof Field) {\n        const oldValue = scope.toValue();\n        // Push the field value onto the scope stack.\n        interpreter.pushScope(oldValue);\n        // Transform the field value.\n        const newItem = this.then.mapSelected(interpreter, transform, thisArg);\n        // Pop the field value off of the scope stack.\n        interpreter.popScope();\n        if (newItem.isDefined()) {\n          if (newItem instanceof Field) {\n            scope = newItem;\n          } else if (newItem !== oldValue) {\n            scope = scope.updatedValue(newItem.toValue());\n          }\n        } else {\n          scope = Item.absent();\n        }\n      } else {\n        // Push the value onto the scope stack.\n        interpreter.pushScope(scope);\n        // Transform the value.\n        scope = this.then.mapSelected(interpreter, transform, thisArg);\n        // Pop the value off of the scope stack.\n        interpreter.popScope();\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new ValuesSelector(then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new ValuesSelector(this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 16;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof ValuesSelector) {\n      return this.then.compareTo(that.then);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ValuesSelector) {\n      return this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ValuesSelector) {\n      return this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(ValuesSelector), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"values\").write(40/*'('*/).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new ValuesSelector(this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Record} from \"../Record\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class ChildrenSelector extends Selector {\n  constructor(then: Selector) {\n    super();\n    this.then = then;\n  }\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have children.\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child, while none have been selected:\n        while (selected === void 0 && children.hasNext()) {\n          const child = children.next().value!;\n          // Push the child onto the scope stack.\n          interpreter.pushScope(child);\n          // Subselect the child.\n          selected = this.then.forSelected(interpreter, callback, thisArg);\n          // Pop the child off of the scope stack.\n          interpreter.popScope();\n        }\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have children.\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child:\n        while (children.hasNext()) {\n          const oldChild = children.next().value!;\n          // Push the child onto the scope stack.\n          interpreter.pushScope(oldChild);\n          // Transform the child.\n          const newChild = this.then.mapSelected(interpreter, transform);\n          // Pop the child off the scope stack.\n          interpreter.popScope();\n          if (newChild.isDefined()) {\n            // Update the child, if its identity changed.\n            if (newChild !== oldChild) {\n              children.set(newChild);\n            }\n          } else {\n            // Remove the child, if it transformed to Absent.\n            children.delete();\n          }\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new ChildrenSelector(then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new ChildrenSelector(this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 17;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof ChildrenSelector) {\n      return this.then.compareTo(that.then);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ChildrenSelector) {\n      return this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof ChildrenSelector) {\n      return this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(ChildrenSelector), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"children\").write(40/*'('*/).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new ChildrenSelector(this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Record} from \"../Record\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class DescendantsSelector extends Selector {\n  constructor(then: Selector) {\n    super();\n    this.then = then;\n  }\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have descendants.\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child, while none have selected a result:\n        while (selected === void 0 && children.hasNext()) {\n          const child = children.next().value!;\n          // Push the child onto the scope stack.\n          interpreter.pushScope(child);\n          // Subselect the child.\n          selected = this.then.forSelected(interpreter, callback, thisArg);\n          // If the child was not selected:\n          if (selected === void 0) {\n            // Recursively select the child's children.\n            this.forSelected(interpreter, callback, thisArg);\n          }\n          // Pop the child off of the scope stack.\n          interpreter.popScope();\n        }\n      }\n      // Push the current selection back onto the stack.\n      interpreter.pushScope(scope);\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // Pop the current selection off of the stack to take it out of scope.\n      const scope = interpreter.popScope().toValue();\n      // Only records can have descendants.\n      if (scope instanceof Record) {\n        const children = scope.iterator();\n        // For each child:\n        while (children.hasNext()) {\n          const oldChild = children.next().value!;\n          // Push the child onto the scope stack.\n          interpreter.pushScope(oldChild);\n          // Transform the child.\n          let newChild = this.then.mapSelected(interpreter, transform, thisArg);\n          // If the child was not removed:\n          if (newChild.isDefined()) {\n            // Recursively transform the child's children.\n            newChild = this.mapSelected(interpreter, transform, thisArg);\n          }\n          // Pop the child off the scope stack.\n          interpreter.popScope();\n          if (newChild.isDefined()) {\n            // Update the child, if its identity changed.\n            if (newChild !== oldChild) {\n              children.set(newChild);\n            }\n          } else {\n            // Remove the child, if it transformed to Absent.\n            children.delete();\n          }\n        }\n      }\n      // Push the transformed selection back onto the stack.\n      interpreter.pushScope(scope);\n      result = scope;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new DescendantsSelector(then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new DescendantsSelector(this.then.andThen(then));\n  }\n\n  override get typeOrder(): number {\n    return 18;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof DescendantsSelector) {\n      return this.then.compareTo(that.then);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DescendantsSelector) {\n      return this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DescendantsSelector) {\n      return this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(DescendantsSelector), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"descendants\").write(40/*'('*/).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new DescendantsSelector(this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class FilterSelector extends Selector {\n  constructor(predicate: Selector, then: Selector) {\n    super();\n    this.predicate = predicate;\n    this.then = then;\n  }\n\n  readonly predicate: Selector;\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      // If the filter matches the selection scope:\n      if (this.filterSelected(interpreter)) {\n        // Then subselect the selection scope.\n        selected = this.then.forSelected(interpreter, callback, thisArg);\n      }\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      // If the filter matches the selection scope:\n      if (this.filterSelected(interpreter)) {\n        // Then transform the selection scope.\n        result = this.then.mapSelected(interpreter, transform, thisArg);\n      } else {\n        result = interpreter.peekScope().toValue();\n      }\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    let predicate = this.predicate.substitute(interpreter);\n    if (!(predicate instanceof Selector)) {\n      predicate = this.predicate;\n    }\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new FilterSelector(predicate as Selector, then as Selector);\n  }\n\n  protected filterSelected(interpreter: Interpreter): boolean {\n    return this.predicate.forSelected(interpreter, this.selected, this) !== void 0;\n  }\n\n  protected selected(interpreter: Interpreter): null {\n    return null;\n  }\n\n  override andThen(then: Selector): Selector {\n    return new FilterSelector(this.predicate, this.then.andThen(then));\n  }\n\n  override filter(predicate?: ItemLike): Selector {\n    if (arguments.length === 0) {\n      return this;\n    } else {\n      predicate = Item.fromLike(predicate);\n      return this.andThen(predicate.filter());\n    }\n  }\n\n  override get typeOrder(): number {\n    return 19;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof FilterSelector) {\n      let order = this.predicate.compareTo(that.predicate);\n      if (order === 0) {\n        order = this.then.compareTo(that.then);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof FilterSelector) {\n      return this.predicate.equivalentTo(that.predicate, epsilon)\n          && this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof FilterSelector) {\n      return this.predicate.equals(that.predicate) && this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(FilterSelector),\n        this.predicate.hashCode()), this.then.hashCode()));\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    output = output.write(46/*'.'*/).write(\"filter\").write(40/*'('*/)\n                   .debug(this.predicate).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override clone(): Selector {\n    return new FilterSelector(this.predicate.clone(), this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Selector} from \"./Selector\";\nimport type {InterpreterLike} from \"../interpreter/Interpreter\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class LiteralSelector extends Selector {\n  constructor(item: Item, then: Selector) {\n    super();\n    this.item = item.commit();\n    this.then = then;\n  }\n\n  readonly item: Item;\n\n  override readonly then: Selector;\n\n  override forSelected<T>(interpreter: Interpreter,\n                          callback: (interpreter: Interpreter) => T | undefined): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S, interpreter: Interpreter) => T | undefined,\n                             thisArg: S): T | undefined;\n  override forSelected<T, S>(interpreter: Interpreter,\n                             callback: (this: S | undefined, interpreter: Interpreter) => T | undefined,\n                             thisArg?: S): T | undefined {\n    let selected: T | undefined;\n    interpreter.willSelect(this);\n    if (interpreter.scopeDepth !== 0) {\n      const literal = this.item.evaluate(interpreter);\n      if (literal.isDefined()) {\n        // Push the literal onto the scope stack.\n        interpreter.pushScope(literal);\n        // Subselect the literal.\n        selected = this.then.forSelected(interpreter, callback, thisArg);\n        // Pop the literal off of the scope stack.\n        interpreter.popScope();\n      }\n    }\n    interpreter.didSelect(this, selected);\n    return selected;\n  }\n\n  override mapSelected(interpreter: Interpreter,\n                       transform: (interpreter: Interpreter) => Item): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S, interpreter: Interpreter) => Item,\n                          thisArg: S): Item;\n  override mapSelected<S>(interpreter: Interpreter,\n                          transform: (this: S | undefined, interpreter: Interpreter) => Item,\n                          thisArg?: S): Item {\n    let result: Item;\n    interpreter.willTransform(this);\n    if (interpreter.scopeDepth !== 0) {\n      let literal = this.item.evaluate(interpreter);\n      if (literal.isDefined()) {\n        // Push the literal onto the scope stack.\n        interpreter.pushScope(literal);\n        // Transform the literal.\n        literal = this.then.mapSelected(interpreter, transform, thisArg);\n        // Pop the literal off of the scope stack.\n        interpreter.popScope();\n      }\n      result = literal;\n    } else {\n      result = Item.absent();\n    }\n    interpreter.didTransform(this, result);\n    return result;\n  }\n\n  override substitute(interpreter: InterpreterLike): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const item = this.item.substitute(interpreter);\n    let then = this.then.substitute(interpreter);\n    if (!(then instanceof Selector)) {\n      then = this.then;\n    }\n    return new LiteralSelector(item, then as Selector);\n  }\n\n  override andThen(then: Selector): Selector {\n    return new LiteralSelector(this.item, this.then.andThen(then));\n  }\n\n  override get precedence(): number {\n    return this.item.precedence;\n  }\n\n  override get typeOrder(): number {\n    return 11;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof LiteralSelector) {\n      let order = this.item.compareTo(that.item);\n      if (order === 0) {\n        order = this.then.compareTo(that.then);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LiteralSelector) {\n      return this.item.equivalentTo(that.item, epsilon)\n          && this.then.equivalentTo(that.then, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LiteralSelector) {\n      return this.item.equals(that.item) && this.then.equals(that.then);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(LiteralSelector),\n        this.item.hashCode()), this.then.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Selector\").write(46/*'.'*/).write(\"literal\").write(40/*'('*/)\n                   .debug(this.item).write(41/*')'*/);\n    output = this.then.debugThen(output);\n    return output;\n  }\n\n  override debugThen<T>(output: Output<T>): Output<T> {\n    return output; // blank\n  }\n\n  override clone(): Selector {\n    return new LiteralSelector(this.item.clone(), this.then.clone());\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport type {Value} from \"../Value\";\nimport {Expression} from \"../Expression\";\nimport type {InvokeOperator} from \"../operator/InvokeOperator\";\nimport type {Interpreter} from \"../interpreter/Interpreter\";\n\n/** @public */\nexport abstract class Func extends Expression {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override isConstant(): boolean {\n    return false;\n  }\n\n  abstract override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item;\n\n  expand(args: Value, interpreter: Interpreter, operator: InvokeOperator): Item | undefined {\n    return void 0;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Slot} from \"../Slot\";\nimport {Value} from \"../Value\";\nimport {Record} from \"../Record\";\nimport {Text} from \"../Text\";\nimport type {InvokeOperator} from \"../operator/InvokeOperator\";\nimport {Func} from \"./Func\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport class LambdaFunc extends Func {\n  constructor(bindings: Value, template: Value) {\n    super();\n    this.bindings = bindings;\n    this.template = template;\n  }\n\n  readonly bindings: Value;\n\n  readonly template: Value;\n\n  override get precedence(): number {\n    return 1;\n  }\n\n  override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n    interpreter = Interpreter.fromLike(interpreter);\n    const bindings = this.bindings;\n    const arity = Math.max(1, bindings.length);\n    const params = Record.create(arity);\n    let i = 0;\n    let j = 0;\n    while (i < arity) {\n      const binding = bindings instanceof Record ? bindings.getItem(i) : i === 0 ? bindings : Item.absent();\n      const arg = args instanceof Record ? args.getItem(j).toValue() : j === 0 ? args : Value.absent();\n      if (binding instanceof Text && arg.isDistinct()) {\n        params.push(Slot.of(binding, arg));\n        j += 1;\n      } else if (binding instanceof Slot) {\n        if (arg.isDistinct()) {\n          params.push(binding.updatedValue(arg));\n        } else {\n          params.push(binding);\n        }\n        j += 1;\n      }\n      i += 1;\n    }\n    interpreter.pushScope(params);\n    const result = this.template.evaluate(interpreter);\n    interpreter.popScope();\n    return result;\n  }\n\n  override get typeOrder(): number {\n    return 50;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof LambdaFunc) {\n      let order = this.bindings.compareTo(that.bindings);\n      if (order === 0) {\n        order = this.template.compareTo(that.template);\n      }\n      return order;\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LambdaFunc) {\n      return this.bindings.equivalentTo(that.bindings, epsilon)\n          && this.template.equivalentTo(that.template, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof LambdaFunc) {\n      return this.bindings.equals(that.bindings) && this.template.equals(that.template);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(LambdaFunc),\n        this.bindings.hashCode()), this.template.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.debug(this.bindings).write(46/*'.'*/).write(\"lambda\").write(40/*'('*/)\n                   .debug(this.template).write(41/*')'*/);\n    return output;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Item} from \"../Item\";\nimport {Func} from \"./Func\";\n\n/** @public */\nexport abstract class BridgeFunc extends Func {\n  override get typeOrder(): number {\n    return 51;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof BridgeFunc) {\n      return Constructors.compare(this.constructor, that.constructor);\n    } else if (that instanceof Item) {\n      return Numbers.compare(this.typeOrder, that.typeOrder);\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown): boolean {\n    return this === that;\n  }\n\n  override equals(that: unknown): boolean {\n    return this === that;\n  }\n\n  override hashCode(): number {\n    return Constructors.hash(this.constructor);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(this.constructor.name);\n    return output;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Item} from \"../Item\";\nimport type {Value} from \"../Value\";\nimport {Record} from \"../Record\";\nimport {Num} from \"../Num\";\nimport type {InvokeOperator} from \"../operator/InvokeOperator\";\nimport type {Func} from \"./Func\";\nimport {BridgeFunc} from \"./BridgeFunc\";\nimport {Interpreter} from \"../\"; // forward import\n\n/** @public */\nexport const MathModule = (function () {\n  const MathModule = {} as {\n    readonly max: Func;\n\n    readonly min: Func;\n\n    readonly abs: Func;\n\n    readonly ceil: Func;\n\n    readonly floor: Func;\n\n    readonly round: Func;\n\n    readonly sqrt: Func;\n\n    readonly pow: Func;\n\n    readonly rate: Func;\n\n    readonly random: Func;\n\n    readonly scope: Record;\n  };\n\n  Object.defineProperty(MathModule, \"max\", {\n    get(): Func {\n      const func = new MaxFunc();\n      Object.defineProperty(MathModule, \"max\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"min\", {\n    get(): Func {\n      const func = new MinFunc();\n      Object.defineProperty(MathModule, \"min\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"abs\", {\n    get(): Func {\n      const func = new AbsFunc();\n      Object.defineProperty(MathModule, \"abs\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"ceil\", {\n    get(): Func {\n      const func = new CeilFunc();\n      Object.defineProperty(MathModule, \"ceil\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"floor\", {\n    get(): Func {\n      const func = new FloorFunc();\n      Object.defineProperty(MathModule, \"floor\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"round\", {\n    get(): Func {\n      const func = new RoundFunc();\n      Object.defineProperty(MathModule, \"round\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"sqrt\", {\n    get(): Func {\n      const func = new SqrtFunc();\n      Object.defineProperty(MathModule, \"sqrt\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"pow\", {\n    get(): Func {\n      const func = new PowFunc();\n      Object.defineProperty(MathModule, \"pow\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"rate\", {\n    get(): Func {\n      const func = new RateFunc();\n      Object.defineProperty(MathModule, \"rate\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"random\", {\n    get(): Func {\n      const func = new RandomFunc();\n      Object.defineProperty(MathModule, \"random\", {\n        value: func,\n        enumerable: true,\n        configurable: true,\n      });\n      return func;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(MathModule, \"scope\", {\n    get(): Record {\n      const scope = Record.create(10)\n          .slot(\"max\", MathModule.max)\n          .slot(\"min\", MathModule.min)\n          .slot(\"abs\", MathModule.abs)\n          .slot(\"ceil\", MathModule.ceil)\n          .slot(\"floor\", MathModule.floor)\n          .slot(\"round\", MathModule.round)\n          .slot(\"pow\", MathModule.pow)\n          .slot(\"sqrt\", MathModule.sqrt)\n          .slot(\"rate\", MathModule.rate)\n          .slot(\"random\", MathModule.random)\n          .commit();\n      Object.defineProperty(MathModule, \"scope\", {\n        value: scope,\n        configurable: true,\n        enumerable: true,\n      });\n      return scope;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  class MaxFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      interpreter = Interpreter.fromLike(interpreter);\n      let x: Item;\n      let y: Item | undefined;\n      if (args.length >= 2) {\n        x = args.getItem(0).evaluate(interpreter);\n        y = args.getItem(1).evaluate(interpreter);\n      } else {\n        x = args.evaluate(interpreter);\n      }\n      if (y !== void 0) {\n        return x.max(y);\n      } else if (operator !== void 0) {\n        y = operator.state as Item;\n        const max = y !== void 0 ? x.max(y) : x;\n        operator.setState(max);\n        return max;\n      }\n      return Item.absent();\n    }\n\n    override expand(args: Value, interpreter: Interpreter, operator: InvokeOperator): Item | undefined {\n      if (args.length === 1) {\n        args = args.evaluate(interpreter).toValue();\n        return this.invoke(args, interpreter, operator);\n      }\n      return void 0;\n    }\n  }\n\n  class MinFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      interpreter = Interpreter.fromLike(interpreter);\n      let x: Item;\n      let y: Item | undefined;\n      if (args.length >= 2) {\n        x = args.getItem(0).evaluate(interpreter);\n        y = args.getItem(1).evaluate(interpreter);\n      } else {\n        x = args.evaluate(interpreter);\n      }\n      if (y !== void 0) {\n        return x.min(y);\n      } else if (operator !== void 0) {\n        y = operator.state as Item;\n        const min = y !== void 0 ? x.min(y) : x;\n        operator.setState(min);\n        return min;\n      }\n      return Item.absent();\n    }\n\n    override expand(args: Value, interpreter: Interpreter, operator: InvokeOperator): Item | undefined {\n      if (args.length === 1) {\n        args = args.evaluate(interpreter).toValue();\n        return this.invoke(args, interpreter, operator);\n      }\n      return void 0;\n    }\n  }\n\n  class AbsFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      if (args instanceof Num) {\n        return args.abs();\n      }\n      return Item.absent();\n    }\n  }\n\n  class CeilFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      if (args instanceof Num) {\n        return args.ceil();\n      }\n      return Item.absent();\n    }\n  }\n\n  class FloorFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      if (args instanceof Num) {\n        return args.floor();\n      }\n      return Item.absent();\n    }\n  }\n\n  class RoundFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      if (args instanceof Num) {\n        return args.round();\n      }\n      return Item.absent();\n    }\n  }\n\n  class SqrtFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      if (args instanceof Num) {\n        return args.sqrt();\n      }\n      return Item.absent();\n    }\n  }\n\n  class PowFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      interpreter = Interpreter.fromLike(interpreter);\n      const x = args.getItem(0).evaluate(interpreter);\n      const y = args.getItem(1).evaluate(interpreter);\n      if (x instanceof Num && y instanceof Num) {\n        return x.pow(y);\n      }\n      return Item.absent();\n    }\n  }\n\n  class RateFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      interpreter = Interpreter.fromLike(interpreter);\n      let value: number;\n      let period: number;\n      if (args.length >= 2) {\n        value = args.getItem(0).evaluate(interpreter).numberValue(NaN);\n        period = args.getItem(1).evaluate(interpreter).numberValue(1000);\n      } else {\n        value = args.evaluate(interpreter).numberValue(NaN);\n        period = 1000;\n      }\n      if (isFinite(value) && operator !== void 0) {\n        let state = operator.state as {v0: number, t0: number, dv: number, dt: number} | undefined;\n        if (state === void 0) {\n          state = {v0: value, t0: Date.now(), dv: 0, dt: 0};\n          operator.setState(state);\n        } else {\n          const t1 = Date.now();\n          const dt = t1 - state.t0;\n          if (dt > period && t1 > state.t0 || dt > 2 * period) {\n            const dv = value - state.v0;\n            state.v0 = value;\n            state.t0 = t1;\n            state.dv = dv;\n            state.dt = dt;\n          }\n          operator.setState(state);\n          if (state.dt !== 0) {\n            const rate = period * state.dv / state.dt;\n            return Num.from(rate);\n          }\n        }\n      }\n      return Item.absent();\n    }\n\n    override expand(args: Value, interpreter: Interpreter, operator: InvokeOperator): Item | undefined {\n      args = args.evaluate(interpreter).toValue();\n      return this.invoke(args, interpreter, operator);\n    }\n  }\n\n  class RandomFunc extends BridgeFunc {\n    override invoke(args: Value, interpreter?: Interpreter, operator?: InvokeOperator): Item {\n      args = args.evaluate(interpreter).toValue();\n      const lower = args.length >= 1 ? args.getItem(0).numberValue(0.0) : 0.0;\n      const upper = args.length >= 2 ? args.getItem(1).numberValue(lower + 1.0) : lower + 1.0;\n      const value = lower + Math.random() * (upper - lower);\n      return Num.from(value);\n    }\n  }\n\n  return MathModule;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n/** @public */\nexport class FormException extends Error {\n  constructor(message?: string) {\n    super(message);\n    Object.setPrototypeOf(this, FormException.prototype);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport type {ValueLike} from \"../Value\";\nimport {Value} from \"../Value\";\nimport {TagForm} from \"../\"; // forward import\nimport {UnitForm} from \"../\"; // forward import\nimport {StringForm} from \"../\"; // forward import\nimport {NumberForm} from \"../\"; // forward import\nimport {BooleanForm} from \"../\"; // forward import\nimport {AnyForm} from \"../\"; // forward import\nimport {ItemForm} from \"../\"; // forward import\nimport {ValueForm} from \"../\"; // forward import\n\n/**\n * Transformation between a structurally typed [Item] and a nominally typed\n * JavaScript object.\n * @public\n */\nexport abstract class Form<T, U = T> {\n  /**\n   * Returns the key of the tag attribute that distinguishes structures of this\n   * `Form`; returns `undefined` if this `Form` has no distinguishing tag\n   * attribute. Used to accelerate discrimination of polymorphic structural\n   * types with nominal type hints.\n   */\n  declare readonly tag: string | undefined; // getter defined below to work around useDefineForClassFields lunacy\n\n  /**\n   * Returns a version of this `Form` that requires a head [Attr] with the\n   * given `tag` name.\n   */\n  withTag(tag: string | undefined): Form<T, U> {\n    if (tag === void 0 || tag === this.tag) {\n      return this;\n    }\n    return new TagForm(this, tag);\n  }\n\n  /**\n   * Returns a default–possibly `undefined`–value of type `T`. Used as the\n   * fallback return value when [Item.coerce coercing] an invalid structural\n   * value.\n   */\n  declare readonly unit: T | undefined; // getter defined below to work around useDefineForClassFields lunacy\n\n  /**\n   * Returns a version of this `Form` with the given `unit` value.\n   */\n  withUnit(unit: T | undefined): Form<T, U> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new UnitForm(this, unit);\n  }\n\n  /**\n   * Converts a nominally typed JavaScript `object` into its structurally typed\n   * equivalent, optionally based on the provided prototype `item`.\n   */\n  abstract mold(object: T | U, item?: Item): Item;\n\n  /**\n   * Converts a structurally typed `item` into a nominally typed JavaScript\n   * object, optionally based on the provided prototype `object`.\n   */\n  abstract cast(item: Item, object?: T): T | undefined;\n\n  @Lazy\n  static forString(): Form<string> {\n    return new StringForm(\"\");\n  }\n\n  @Lazy\n  static forNumber(): Form<number> {\n    return new NumberForm(0);\n  }\n\n  @Lazy\n  static forBoolean(): Form<boolean> {\n    return new BooleanForm(false);\n  }\n\n  @Lazy\n  static forAny(): Form<ItemLike> {\n    return new AnyForm(void 0);\n  }\n\n  @Lazy\n  static forItem(): Form<Item, ItemLike> {\n    return new ItemForm(Item.absent());\n  }\n\n  @Lazy\n  static forValue(): Form<Value, ValueLike> {\n    return new ValueForm(Value.absent());\n  }\n}\nObject.defineProperty(Form.prototype, \"tag\", {\n  get<T, U>(this: Form<T, U>): string | undefined {\n    return void 0;\n  },\n  configurable: true,\n});\nObject.defineProperty(Form.prototype, \"unit\", {\n  get<T, U>(this: Form<T, U>): T | undefined {\n    return void 0;\n  },\n  configurable: true,\n});\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Attr} from \"../Attr\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class TagForm<T, U = T> extends Form<T, U> {\n  constructor(form: Form<T, U>, tag: string) {\n    super();\n    this.form = form;\n    this.tag = tag;\n  }\n\n  /** @internal */\n  readonly form: Form<T, U>;\n\n  override readonly tag: string;\n\n  override withTag(tag: string | undefined): Form<T, U> {\n     if (tag !== void 0 && tag !== this.tag) {\n      return new TagForm(this.form, tag);\n    } else if (tag === void 0) {\n      return this.form;\n    } else {\n      return this;\n    }\n  }\n\n  override readonly unit!: T | undefined; // // getter defined below to work around useDefineForClassFields lunacy\n\n  override withUnit(unit: T | undefined): Form<T, U> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new TagForm(this.form.withUnit(unit), this.tag);\n  }\n\n  override mold(object: T | U, item?: Item): Item {\n    item = this.form.mold(object, item);\n    if (!item.header(this.tag).isDefined()) {\n      item = item.prepended(Attr.of(this.tag));\n    }\n    return item;\n  }\n\n  override cast(item: Item, object?: T): T | undefined {\n    if (item.header(this.tag).isDefined()) {\n      return this.form.cast(item, object);\n    } else if (item.keyEquals(this.tag)) {\n      return this.form.cast(item.toValue(), object);\n    }\n    return void 0;\n  }\n}\nObject.defineProperty(TagForm.prototype, \"unit\", {\n  get<T, U>(this: TagForm<T, U>): T | undefined {\n    return this.form.unit;\n  },\n  configurable: true,\n});\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class UnitForm<T, U = T> extends Form<T, U> {\n  constructor(form: Form<T, U>, unit: T | undefined) {\n    super();\n    this.form = form;\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  /** @internal */\n  readonly form: Form<T, U>;\n\n  override readonly tag: string | undefined; // // getter defined below to work around useDefineForClassFields lunacy\n\n  override withTag(tag: string | undefined): Form<T, U> {\n    if (tag === this.tag) {\n      return this;\n    }\n    return new UnitForm(this.form.withTag(tag), this.unit);\n  }\n\n  override readonly unit: T | undefined;\n\n  override withUnit(unit: T | undefined): Form<T, U> {\n    if (unit !== this.unit) {\n      return new UnitForm(this.form, unit);\n    } else if (unit === this.form.unit) {\n      return this.form;\n    }\n    return this;\n  }\n\n  override mold(object: T | U, item?: Item): Item {\n    if (arguments.length === 1) {\n      return this.form.mold(object);\n    }\n    return this.form.mold(object, item);\n  }\n\n  override cast(item: Item, object?: T): T | undefined {\n    if (arguments.length === 1) {\n      return this.form.cast(item);\n    }\n    return this.form.cast(item, object);\n  }\n}\nObject.defineProperty(UnitForm.prototype, \"tag\", {\n  get<T, U>(this: UnitForm<T, U>): string | undefined {\n    return this.form.tag;\n  },\n  configurable: true,\n});\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Text} from \"../Text\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class StringForm extends Form<string> {\n  constructor(unit?: string) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: string | undefined;\n\n  override withUnit(unit: string | undefined): Form<string> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new StringForm(unit);\n  }\n\n  override mold(object: string, item?: Item): Item {\n    if (item === void 0) {\n      return Text.from(object);\n    } else {\n      return item.concat(Text.from(object));\n    }\n  }\n\n  override cast(item: Item, object?: string): string | undefined {\n    const value = item.target;\n    try {\n      return value.stringValue();\n    } catch (error) {\n      return void 0;\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Num} from \"../Num\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class NumberForm extends Form<number> {\n  constructor(unit?: number) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: number | undefined;\n\n  override withUnit(unit: number | undefined): Form<number> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new NumberForm(unit);\n  }\n\n  override mold(object: number, item?: Item): Item {\n    if (item === void 0) {\n      return Num.from(object);\n    } else {\n      return item.concat(Num.from(object));\n    }\n  }\n\n  override cast(item: Item, object?: number): number | undefined {\n    const value = item.target;\n    try {\n      return value.numberValue();\n    } catch (error) {\n      return void 0;\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport {Bool} from \"../Bool\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class BooleanForm extends Form<boolean> {\n  constructor(unit?: boolean) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: boolean | undefined;\n\n  override withUnit(unit: boolean | undefined): Form<boolean> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new BooleanForm(unit);\n  }\n\n  override mold(object: boolean, item?: Item): Item {\n    if (item === void 0) {\n      return Bool.from(object);\n    } else {\n      return item.concat(Bool.from(object));\n    }\n  }\n\n  override cast(item: Item, object?: boolean): boolean | undefined {\n    const value = item.target;\n    try {\n      return value.booleanValue();\n    } catch (error) {\n      return void 0;\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class AnyForm extends Form<ItemLike> {\n  constructor(unit?: ItemLike) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: ItemLike | undefined;\n\n  override withUnit(unit: ItemLike | undefined): Form<ItemLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new AnyForm(unit);\n  }\n\n  override mold(object: ItemLike, item?: Item): Item {\n    object = Item.fromLike(object);\n    if (item !== void 0) {\n      object = item.concat(object);\n    }\n    return object;\n  }\n\n  override cast(item: Item, object?: ItemLike): ItemLike | undefined {\n    return item.toLike();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {ItemLike} from \"../Item\";\nimport {Item} from \"../Item\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class ItemForm extends Form<Item, ItemLike> {\n  constructor(unit?: Item) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: Item | undefined;\n\n  override withUnit(unit: Item | undefined): Form<Item> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new ItemForm(unit);\n  }\n\n  override mold(object: ItemLike, item?: Item): Item {\n    object = Item.fromLike(object);\n    if (item !== void 0) {\n      object = item.concat(object);\n    }\n    return object;\n  }\n\n  override cast(item: Item, object?: Item): Item | undefined {\n    return item;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Item} from \"../Item\";\nimport type {ValueLike} from \"../Value\";\nimport {Value} from \"../Value\";\nimport {Form} from \"./Form\";\n\n/** @internal */\nexport class ValueForm extends Form<Value, ValueLike> {\n  constructor(unit?: Value) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: Value | undefined;\n\n  override withUnit(unit: Value | undefined): Form<Value> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new ValueForm(unit);\n  }\n\n  override mold(object: ValueLike, item?: Item): Item {\n    object = Value.fromLike(object);\n    if (item !== void 0) {\n      object = item.concat(object);\n    }\n    return object;\n  }\n\n  override cast(item: Item, object?: Value): Value | undefined {\n    return item.toValue();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Output} from \"@swim/codec\";\nimport type {Parser} from \"@swim/codec\";\nimport type {Writer} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Data} from \"@swim/structure\";\nimport type {ReconParser} from \"./parser/ReconParser\";\nimport {ReconStructureParser} from \"./\"; // forward import\nimport type {ReconWriter} from \"./writer/ReconWriter\";\nimport {ReconStructureWriter} from \"./\"; // forward import\n\n/**\n * Factory for constructing Recon parsers and writers.\n * @public\n */\nexport const Recon = (function () {\n  const Recon = {} as {\n    structureParser(): ReconParser<Item, Value>;\n\n    structureWriter(): ReconWriter<Item, Value>;\n\n    parse(recon: string): Value;\n\n    parser(): Parser<Value>;\n\n    sizeOf(item: Item): number;\n\n    sizeOfBlock(item: Item): number;\n\n    write(output: Output, item: Item): Writer;\n\n    writeBlock(output: Output, item: Item): Writer;\n\n    toString(item: Item): string;\n\n    toBlockString(item: Item): string;\n\n    toData(item: Item): Data;\n\n    toBlockData(item: Item): Data;\n\n    /** @internal */\n    isSpace(c: number): boolean;\n\n    /** @internal */\n    isNewline(c: number): boolean;\n\n    /** @internal */\n    isWhitespace(c: number): boolean;\n\n    /** @internal */\n    isIdentStartChar(c: number): boolean;\n\n    /** @internal */\n    isIdentChar(c: number): boolean;\n  };\n\n  Object.defineProperty(Recon, \"structureParser\", {\n    value: function (): ReconStructureParser {\n      const structureParser = new ReconStructureParser();\n      Object.defineProperty(Recon, \"structureParser\", {\n        value: function (): ReconStructureParser {\n          return structureParser;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n      return structureParser;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Object.defineProperty(Recon, \"structureWriter\", {\n    value: function (): ReconStructureWriter {\n      const structureWriter = new ReconStructureWriter();\n      Object.defineProperty(Recon, \"structureWriter\", {\n        value: function (): ReconStructureWriter {\n          return structureWriter;\n        },\n        enumerable: true,\n        configurable: true,\n      });\n      return structureWriter;\n    },\n    enumerable: true,\n    configurable: true,\n  });\n\n  Recon.parse = function (recon: string): Value {\n    return Recon.structureParser().parseBlockString(recon);\n  };\n\n  Recon.parser = function (): Parser<Value> {\n    return Recon.structureParser().blockParser();\n  };\n\n  Recon.sizeOf = function (item: Item): number {\n    return Recon.structureWriter().sizeOfItem(item);\n  };\n\n  Recon.sizeOfBlock = function (item: Item): number {\n    return Recon.structureWriter().sizeOfBlockItem(item);\n  };\n\n  Recon.write = function (output: Output, item: Item): Writer {\n    return Recon.structureWriter().writeItem(output, item);\n  };\n\n  Recon.writeBlock = function (output: Output, item: Item): Writer {\n    return Recon.structureWriter().writeBlockItem(output, item);\n  };\n\n  Recon.toString = function (item: Item): string {\n    let output = Unicode.stringOutput();\n    const writer = Recon.write(output, item);\n    if (!writer.isDone()) {\n      output = Output.error(writer.trap());\n    }\n    return output.bind();\n  };\n\n  Recon.toBlockString = function (item: Item): string {\n    let output = Unicode.stringOutput();\n    const writer = Recon.writeBlock(output, item);\n    if (!writer.isDone()) {\n      output = Output.error(writer.trap());\n    }\n    return output.bind();\n  };\n\n  Recon.toData = function (item: Item): Data {\n    let output = Utf8.encodedOutput(Data.output());\n    const writer = Recon.write(output, item);\n    if (!writer.isDone()) {\n      output = Output.error(writer.trap());\n    }\n    return output.bind();\n  };\n\n  Recon.toBlockData = function (item: Item): Data {\n    let output = Utf8.encodedOutput(Data.output());\n    const writer = Recon.writeBlock(output, item);\n    if (!writer.isDone()) {\n      output = Output.error(writer.trap());\n    }\n    return output.bind();\n  };\n\n  Recon.isSpace = function (c: number): boolean {\n    return c === 0x20 || c === 0x9;\n  };\n\n  Recon.isNewline = function (c: number): boolean {\n    return c === 0xa || c === 0xd;\n  };\n\n  Recon.isWhitespace = function (c: number): boolean {\n    return Recon.isSpace(c) || Recon.isNewline(c);\n  };\n\n  Recon.isIdentStartChar = function (c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x2ff\n        || c >= 0x370 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  };\n\n  Recon.isIdentChar = function (c: number): boolean {\n    return c === 45/*'-'*/\n        || c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c === 95/*'_'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c === 0xb7\n        || c >= 0xc0 && c <= 0xd6\n        || c >= 0xd8 && c <= 0xf6\n        || c >= 0xf8 && c <= 0x37d\n        || c >= 0x37f && c <= 0x1fff\n        || c >= 0x200c && c <= 0x200d\n        || c >= 0x203f && c <= 0x2040\n        || c >= 0x2070 && c <= 0x218f\n        || c >= 0x2c00 && c <= 0x2fef\n        || c >= 0x3001 && c <= 0xd7ff\n        || c >= 0xf900 && c <= 0xfdcf\n        || c >= 0xfdf0 && c <= 0xfffd\n        || c >= 0x10000 && c <= 0xeffff;\n  };\n\n  Item.prototype.toRecon = function (this: Item): string {\n    return Recon.toString(this);\n  };\n\n  Item.prototype.toReconBlock = function (this: Item): string {\n    return Recon.toBlockString(this);\n  };\n\n  return Recon;\n})();\n\nValue.parseRecon = function (recon: string): Value {\n  return Recon.parse(recon);\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class BlockParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly keyParser: Parser<V> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.keyParser = keyParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return BlockParser.parse(input, this.recon, this.builder, this.keyParser,\n                             this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     keyParser?: Parser<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    block: do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 33/*'!'*/ || c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 37/*'%'*/\n              || c === 39/*'\\''*/ || c === 40/*'('*/ || c === 43/*'+'*/ || c === 45/*'-'*/\n              || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 64/*'@'*/\n              || c === 91/*'['*/ || c === 96/*'`'*/ || c === 123/*'{'*/ || c === 126/*'~'*/\n              || Recon.isIdentStartChar(c)) {\n            builder = builder || recon.valueBuilder();\n            step = 2;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 7;\n          } else {\n            if (builder !== void 0) {\n              return Parser.done(builder.build());\n            } else {\n              return Parser.done(recon.absent());\n            }\n          }\n        } else if (input.isDone()) {\n          if (builder !== void 0) {\n            return Parser.done(builder.build());\n          } else {\n            return Parser.done(recon.absent());\n          }\n        }\n      }\n      if (step === 2) {\n        if (keyParser === void 0) {\n          keyParser = recon.parseBlockExpression(input);\n        }\n        while (keyParser.isCont() && !input.isEmpty()) {\n          keyParser = keyParser.feed(input);\n        }\n        if (keyParser.isDone()) {\n          step = 3;\n        } else if (keyParser.isError()) {\n          return keyParser;\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 58/*':'*/) {\n            input = input.step();\n            step = 4;\n          } else {\n            builder!.push(recon.item(keyParser!.bind()));\n            keyParser = void 0;\n            step = 6;\n          }\n        } else if (input.isDone()) {\n          builder!.push(recon.item(keyParser!.bind()));\n          return Parser.done(builder!.build());\n        }\n      }\n      if (step === 4) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 5;\n        } else if (input.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind()));\n          return Parser.done(builder!.build());\n        }\n      }\n      if (step === 5) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind(), valueParser.bind()));\n          keyParser = void 0;\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser;\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/ || c === 59/*';'*/ || Recon.isNewline(c)) {\n            input = input.step();\n            step = 1;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 7;\n          } else {\n            return Parser.done(builder!.build());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.build());\n        }\n      }\n      if (step === 7) {\n        while (input.isCont()) {\n          c = input.head();\n          if (!Recon.isNewline(c)) {\n            input = input.step();\n          } else {\n            step = 1;\n            continue block;\n          }\n        }\n        if (input.isDone()) {\n          step = 1;\n          continue;\n        }\n      }\n      break;\n    } while (true);\n    return new BlockParser<I, V>(recon, builder, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class AttrParser<I, V> extends Parser<I> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly keyParser: Parser<V> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.keyParser = keyParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<I> {\n    return AttrParser.parse(input, this.recon, this.keyParser,\n                            this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, keyParser?: Parser<V>,\n                     valueParser?: Parser<V>, step: number = 1): Parser<I> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(64/*'@'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(64/*'@'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (keyParser === void 0) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n            keyParser = recon.parseString(input);\n          } else if (Recon.isIdentStartChar(c)) {\n            keyParser = recon.parseIdent(input);\n          } else {\n            return Parser.error(Diagnostic.expected(\"attribute name\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"attribute name\", input));\n        }\n      } else {\n        keyParser = keyParser.feed(input);\n      }\n      if (keyParser !== void 0) {\n        if (keyParser.isDone()) {\n          step = 3;\n        } else if (keyParser.isError()) {\n          return keyParser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      if (input.isCont() && input.head() === 40/*'('*/) {\n        input = input.step();\n        step = 4;\n      } else if (!input.isEmpty()) {\n        return Parser.done(recon.attr(keyParser!.bind()));\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          return Parser.done(recon.attr(keyParser!.bind()));\n        } else {\n          step = 5;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    if (step === 5) {\n      if (valueParser === void 0) {\n        valueParser = recon.parseBlock(input);\n      }\n      while (valueParser.isCont() && !input.isEmpty()) {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 6;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 6) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          return Parser.done(recon.attr(keyParser!.bind(), valueParser!.bind()));\n        } else {\n          return Parser.error(Diagnostic.expected(\")\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new AttrParser<I, V>(recon, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class BlockItemParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly fieldParser: Parser<I> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, fieldParser?: Parser<I>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.fieldParser = fieldParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return BlockItemParser.parse(input, this.recon, this.builder, this.fieldParser,\n                                 this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 64/*'@'*/) {\n            fieldParser = recon.parseAttr(input);\n            step = 2;\n          } else if (c === 123/*'{'*/) {\n            builder = builder || recon.recordBuilder();\n            valueParser = recon.parseRecord(input, builder);\n            step = 5;\n          } else if (c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            valueParser = recon.parseMarkup(input, builder);\n            step = 5;\n          } else if (Recon.isIdentStartChar(c)) {\n            valueParser = recon.parseIdent(input);\n            step = 4;\n          } else if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n            valueParser = recon.parseString(input);\n            step = 4;\n          } else if (c === 96/*'`'*/) {\n            valueParser = recon.parseRawString(input);\n            step = 4;\n          } else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n            valueParser = recon.parseNumber(input);\n            step = 4;\n          } else if (c === 37/*'%'*/) {\n            valueParser = recon.parseData(input);\n            step = 4;\n          } else if (c === 36/*'$'*/) {\n            valueParser = recon.parseSelector(input);\n            step = 4;\n          } else if (builder === void 0) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.build());\n          }\n        } else if (input.isDone()) {\n          if (builder === void 0) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.build());\n          }\n        }\n      }\n      if (step === 2) {\n        while (fieldParser!.isCont() && !input.isEmpty()) {\n          fieldParser = fieldParser!.feed(input);\n        }\n        if (fieldParser!.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(fieldParser!.bind());\n          fieldParser = void 0;\n          step = 3;\n        } else if (fieldParser!.isError()) {\n          return fieldParser!.asError();\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 1;\n          continue;\n        } else if (input.isDone()) {\n          return Parser.done(builder!.build());\n        }\n      }\n      if (step === 4) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser!.bind()));\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 5) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (input.head() === 64/*'@'*/) {\n            step = 1;\n          } else {\n            return Parser.done(builder!.build());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.build());\n        }\n      }\n      break;\n    } while (true);\n    return new BlockItemParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class InlineItemParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly fieldParser: Parser<I> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, fieldParser?: Parser<I>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.fieldParser = fieldParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return InlineItemParser.parse(input, this.recon, this.builder, this.fieldParser,\n                                  this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>,  valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 64/*'@'*/) {\n          fieldParser = recon.parseAttr(input);\n          step = 2;\n        } else if (c === 123/*'{'*/) {\n          if (builder !== void 0) {\n            valueParser = recon.parseRecord(input, builder);\n            step = 5;\n          } else {\n            valueParser = recon.parseRecord(input);\n            step = 4;\n          }\n        } else if (c === 91/*'['*/) {\n          if (builder !== void 0) {\n            valueParser = recon.parseMarkup(input, builder);\n            step = 5;\n          } else {\n            valueParser = recon.parseMarkup(input);\n            step = 4;\n          }\n        } else if (builder === void 0) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.build());\n        }\n      } else if (input.isDone()) {\n        if (builder === void 0) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.build());\n        }\n      }\n    }\n    if (step === 2) {\n      while (fieldParser!.isCont() && !input.isEmpty()) {\n        fieldParser = fieldParser!.feed(input);\n      }\n      if (fieldParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(fieldParser!.bind());\n        fieldParser = void 0;\n        step = 3;\n      } else if (fieldParser!.isError()) {\n        return fieldParser!.asError();\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 123/*'{'*/) {\n          valueParser = recon.parseRecord(input, builder);\n          step = 5;\n        } else if (c === 91/*'['*/) {\n          valueParser = recon.parseMarkup(input, builder);\n          step = 5;\n        } else {\n          return Parser.done(builder!.build());\n        }\n      } else if (input.isDone()) {\n        return Parser.done(builder!.build());\n      }\n    }\n    if (step === 4) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(recon.item(valueParser!.bind()));\n        return Parser.done(builder.build());\n      } else if (valueParser!.isError()) {\n        return valueParser!;\n      }\n    }\n    if (step === 5) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        return Parser.done(builder!.build());\n      } else if (valueParser!.isError()) {\n        return valueParser!;\n      }\n    }\n    return new InlineItemParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class RecordParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly keyParser: Parser<V> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, keyParser?: Parser<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.keyParser = keyParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return RecordParser.parse(input, this.recon, this.builder, this.keyParser,\n                              this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     keyParser?: Parser<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 123/*'{'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(123/*'{'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(123/*'{'*/, input));\n      }\n    }\n    block: do {\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          builder = builder || recon.recordBuilder();\n          if (c === 125/*'}'*/) {\n            input = input.step();\n            return Parser.done(builder.build());\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 8;\n          } else {\n            step = 3;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 3) {\n        if (keyParser === void 0) {\n          keyParser = recon.parseBlockExpression(input);\n        }\n        while (keyParser.isCont() && !input.isEmpty()) {\n          keyParser = keyParser.feed(input);\n        }\n        if (keyParser.isDone()) {\n          step = 4;\n        } else if (keyParser.isError()) {\n          return keyParser;\n        }\n      }\n      if (step === 4) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 58/*':'*/) {\n            input = input.step();\n            step = 5;\n          } else {\n            builder!.push(recon.item(keyParser!.bind()));\n            keyParser = void 0;\n            step = 7;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 5) {\n        while (input.isCont() && Recon.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          step = 6;\n        } else if (input.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind()));\n          return Parser.done(builder!.build());\n        }\n      }\n      if (step === 6) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder!.push(recon.slot(keyParser!.bind(), valueParser.bind()));\n          keyParser = void 0;\n          valueParser = void 0;\n          step = 7;\n        } else if (valueParser.isError()) {\n          return valueParser;\n        }\n      }\n      if (step === 7) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/ || c === 59/*';'*/ || Recon.isNewline(c)) {\n            input = input.step();\n            step = 2;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 8;\n          } else if (c === 125/*'}'*/) {\n            input = input.step();\n            return Parser.done(builder!.build());\n          } else {\n            return Parser.error(Diagnostic.expected(\"'}', ';', ',', or newline\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(125/*'}'*/, input));\n        }\n      }\n      if (step === 8) {\n        while (input.isCont()) {\n          c = input.head();\n          if (!Recon.isNewline(c)) {\n            input = input.step();\n          } else {\n            step = 2;\n            continue block;\n          }\n        }\n        if (input.isDone()) {\n          step = 2;\n          continue;\n        }\n      }\n      break;\n    } while (true);\n    return new RecordParser<I, V>(recon, builder, keyParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class MarkupParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly textOutput: Output<V> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, textOutput?: Output<V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.textOutput = textOutput;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return MarkupParser.parse(input, this.recon, this.builder, this.textOutput,\n                              this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     textOutput?: Output<V>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 91/*'['*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(91/*'['*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(91/*'['*/, input));\n      }\n    }\n    do {\n      if (step === 2) {\n        while (input.isCont()) {\n          c = input.head();\n          if (c !== 64/*'@'*/ && c !== 91/*'['*/ && c !== 92/*'\\\\'*/ && c !== 93/*']'*/\n              && c !== 123/*'{'*/ && c !== 125/*'}'*/) {\n            input = input.step();\n            textOutput = textOutput || recon.textOutput();\n            textOutput.write(c);\n          } else {\n            break;\n          }\n        }\n        if (input.isCont()) {\n          if (c === 93/*']'*/) {\n            input = input.step();\n            builder = builder || recon.recordBuilder();\n            if (textOutput !== void 0) {\n              builder.push(recon.item(textOutput.bind()));\n            }\n            return Parser.done(builder.build());\n          } else if (c === 64/*'@'*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput !== void 0) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseInlineItem(input);\n            step = 3;\n          } else if (c === 123/*'{'*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput !== void 0) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseRecord(input, builder);\n            step = 4;\n          } else if (c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            if (textOutput !== void 0) {\n              builder.push(recon.item(textOutput.bind()));\n              textOutput = void 0;\n            }\n            valueParser = recon.parseMarkup(input, builder);\n            step = 4;\n          } else if (c === 92/*'\\\\'*/) {\n            input = input.step();\n            step = 5;\n          } else {\n            return Parser.error(Diagnostic.unexpected(input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 3) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          builder!.push(recon.item(valueParser!.bind()));\n          valueParser = void 0;\n          step = 2;\n          continue;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 4) {\n        while (valueParser!.isCont() && !input.isEmpty()) {\n          valueParser = valueParser!.feed(input);\n        }\n        if (valueParser!.isDone()) {\n          valueParser = void 0;\n          step = 2;\n          continue;\n        } else if (valueParser!.isError()) {\n          return valueParser!;\n        }\n      }\n      if (step === 5) {\n        if (input.isCont()) {\n          c = input.head();\n          textOutput = textOutput || recon.textOutput();\n          if (c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 39/*'\\''*/ || c === 47/*'/'*/\n              || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/ || c === 93/*']'*/\n              || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            input = input.step();\n            textOutput.write(c);\n            step = 2;\n          } else if (c === 98/*'b'*/) {\n            input = input.step();\n            textOutput.write(8/*'\\b'*/);\n            step = 2;\n          } else if (c === 102/*'f'*/) {\n            input = input.step();\n            textOutput.write(12/*'\\f'*/);\n            step = 2;\n          } else if (c === 110/*'n'*/) {\n            input = input.step();\n            textOutput.write(10/*'\\n'*/);\n            step = 2;\n          } else if (c === 114/*'r'*/) {\n            input = input.step();\n            textOutput.write(13/*'\\r'*/);\n            step = 2;\n          } else if (c === 116/*'t'*/) {\n            input = input.step();\n            textOutput.write(9/*'\\t'*/);\n            step = 2;\n          } else {\n            return Parser.error(Diagnostic.expected(\"escape character\", input));\n          }\n          continue;\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"escape character\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new MarkupParser<I, V>(recon, builder, textOutput, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Base64} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class DataParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly base64Parser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, base64Parser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.base64Parser = base64Parser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return DataParser.parse(input, this.recon, this.base64Parser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>,\n                     base64Parser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(37/*'%'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(37/*'%'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (base64Parser === void 0) {\n        base64Parser = Base64.standard().parse(input, recon.dataOutput());\n      }\n      while (base64Parser.isCont() && !input.isEmpty()) {\n        base64Parser = base64Parser.feed(input);\n      }\n      if (base64Parser.isDone()) {\n        return base64Parser;\n      } else if (base64Parser.isError()) {\n        return base64Parser;\n      }\n    }\n    return new DataParser<I, V>(recon, base64Parser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class IdentParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly output: Output<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output?: Output<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.output = output;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return IdentParser.parse(input, this.recon, this.output, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output?: Output<V>,\n                     step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (Recon.isIdentStartChar(c)) {\n          input = input.step();\n          output = output || recon.textOutput();\n          output = output.write(c);\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"identifier\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"identifier\", input));\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isIdentChar(c))) {\n        input = input.step();\n        output!.write(c);\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(recon.ident(output!.bind()));\n      }\n    }\n    return new IdentParser<I, V>(recon, output, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class StringParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly output: Output<V> | undefined;\n  private readonly quote: number | undefined;\n  private readonly code: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output?: Output<V>, quote?: number,\n              code?: number, step?: number) {\n    super();\n    this.recon = recon;\n    this.output = output;\n    this.quote = quote;\n    this.code = code;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return StringParser.parse(input, this.recon, this.output, this.quote,\n                              this.code, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output?: Output<V>,\n                     quote: number = 0, code: number = 0, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if ((c === 34/*'\"'*/ || c === 39/*'\\''*/) && (quote === c || quote === 0)) {\n          input = input.step();\n          output = output || recon.textOutput();\n          quote = c;\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"string\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"string\", input));\n      }\n    }\n    string: do {\n      if (step === 2) {\n        while (input.isCont()) {\n          c = input.head();\n          if (c >= 0x20 && c !== quote && c !== 92/*'\\\\'*/) {\n            input = input.step();\n            output = output!.write(c);\n          } else {\n            break;\n          }\n        }\n        if (input.isCont()) {\n          if (c === quote) {\n            input = input.step();\n            return Parser.done(output!.bind());\n          } else if (c === 92/*'\\\\'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return Parser.error(Diagnostic.expected(quote, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(quote, input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 39/*'\\''*/ || c === 47/*'/'*/\n              || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/ || c === 93/*']'*/\n              || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            input = input.step();\n            output = output!.write(c);\n            step = 2;\n            continue;\n          } else if (c === 98/*'b'*/) {\n            input = input.step();\n            output = output!.write(8/*'\\b'*/);\n            step = 2;\n            continue;\n          } else if (c === 102/*'f'*/) {\n            input = input.step();\n            output = output!.write(12/*'\\f'*/);\n            step = 2;\n            continue;\n          } else if (c === 110/*'n'*/) {\n            input = input.step();\n            output = output!.write(10/*'\\n'*/);\n            step = 2;\n            continue;\n          } else if (c === 114/*'r'*/) {\n            input = input.step();\n            output = output!.write(13/*'\\r'*/);\n            step = 2;\n            continue;\n          } else if (c === 116/*'t'*/) {\n            input = input.step();\n            output = output!.write(9/*'\\t'*/);\n            step = 2;\n            continue;\n          } else if (c === 117/*'u'*/) {\n            input = input.step();\n            step = 4;\n          } else {\n            return Parser.error(Diagnostic.expected(\"escape character\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"escape character\", input));\n        }\n      }\n      if (step >= 4) {\n        do {\n          if (input.isCont()) {\n            c = input.head();\n            if (Base16.isDigit(c)) {\n              input = input.step();\n              code = 16 * code + Base16.decodeDigit(c);\n              if (step <= 6) {\n                step += 1;\n                continue;\n              } else {\n                output = output!.write(code);\n                code = 0;\n                step = 2;\n                continue string;\n              }\n            } else {\n              return Parser.error(Diagnostic.expected(\"hex digit\", input));\n            }\n          } else if (input.isDone()) {\n            return Parser.error(Diagnostic.expected(\"hex digit\", input));\n          }\n          break;\n        } while (true);\n      }\n      break;\n    } while (true);\n    return new StringParser<I, V>(recon, output, quote, code, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class RawStringParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly output: Output<V> | undefined;\n  private readonly count: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output?: Output<V>, count?: number, step?: number) {\n    super();\n    this.recon = recon;\n    this.output = output;\n    this.count = count;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return RawStringParser.parse(input, this.recon, this.output, this.count, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output?: Output<V>,\n                     count: number = 0, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 96/*'`'*/) {\n        input = input.step();\n        count = 1;\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"raw string\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        if (input.head() === 96/*'`'*/) {\n          input = input.step();\n          count = 2;\n          step = 3;\n        } else {\n          output = output || recon.textOutput();\n          step = 4;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"raw string\", input));\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        if (input.head() === 96/*'`'*/) {\n          input = input.step();\n          output = output || recon.textOutput();\n          count = 3;\n          step = 4;\n        } else {\n          output = output || recon.textOutput();\n          return Parser.done(output!.bind());\n        }\n      } else if (input.isDone()) {\n        output = output || recon.textOutput();\n        return Parser.done(output!.bind());\n      }\n    }\n    do {\n      if (step === 4) {\n        while (input.isCont()) {\n          c = input.head();\n          if ((count !== 1 || c >= 0x20) && c !== 96/*'`'*/ && c !== 92/*'\\\\'*/) {\n            input = input.step();\n            output = output!.write(c);\n          } else {\n            break;\n          }\n        }\n        if (input.isCont()) {\n          if (c === 92/*'\\\\'*/) {\n            input = input.step();\n            step = 5;\n          } else if (c === 96/*'`'*/) {\n            input = input.step();\n            if (count === 1) {\n              return Parser.done(output!.bind());\n            } else {\n              step = 6;\n            }\n          } else {\n            return Parser.error(Diagnostic.expected(96/*'`'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(96/*'`'*/, input));\n        }\n      }\n      if (step === 5) {\n        if (input.isCont()) {\n          c = input.head();\n          input = input.step();\n          if (c !== 92/*'\\\\'*/ && c !== 96/*'`'*/) {\n            output = output!.write(92/*'\\\\'*/);\n          }\n          output = output!.write(c);\n          step = 4;\n          continue;\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(\"escape character\", input));\n        }\n      }\n      if (step === 6) {\n        if (input.isCont()) {\n          if (input.head() === 96/*'`'*/) {\n            input = input.step();\n            step = 7;\n          } else {\n            output = output!.write(96/*'`'*/);\n            step = 4;\n            continue;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.message(\"unclosed raw string\", input));\n        }\n      }\n      if (step === 7) {\n        if (input.isCont()) {\n          if (input.head() === 96/*'`'*/) {\n            input = input.step();\n            return Parser.done(output!.bind());\n          } else {\n            output = output!.write(96/*'`'*/);\n            output = output!.write(96/*'`'*/);\n            step = 4;\n            continue;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.message(\"unclosed raw string\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new RawStringParser<I, V>(recon, output, count, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class NumberParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly sign: number | undefined;\n  private readonly value: number | undefined;\n  private readonly mode: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, sign?: number, value?: number, mode?: number, step?: number) {\n    super();\n    this.recon = recon;\n    this.sign = sign;\n    this.value = value;\n    this.mode = mode;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return NumberParser.parse(input, this.recon, this.sign, this.value, this.mode, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, sign: number = 1, value: number = 0,\n                     mode: number = 2, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 45/*'-'*/) {\n          input = input.step();\n          sign = -1;\n        }\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"number\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 48/*'0'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c >= 49/*'1'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          value = sign * (c - 48/*'0'*/);\n          step = 3;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          const newValue = 10 * value + sign * (c - 48/*'0'*/);\n          if (-9007199254740991 <= newValue && newValue <= 9007199254740992) {\n            value = newValue;\n            input = input.step();\n          } else {\n            return Parser.error(Diagnostic.message(\"integer overflow\", input));\n          }\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        step = 4;\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(value));\n      }\n    }\n    if (step === 4) {\n      if (input.isCont()) {\n        c = input.head();\n        if (mode > 0 && c === 46/*'.'*/ || mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          let output = Unicode.stringOutput();\n          if (sign < 0 && value === 0) {\n            output = output.write(45/*'-'*/).write(48/*'0'*/);\n          } else {\n            output = output.write(\"\" + value);\n          }\n          return DecimalParser.parse(input, recon, output, mode);\n        } else if (c === 120/*'x'*/ && sign > 0 && value === 0) {\n          input = input.step();\n          return HexadecimalParser.parse(input, recon);\n        } else {\n          return Parser.done(recon.num(value));\n        }\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(value));\n      }\n    }\n    return new NumberParser<I, V>(recon, sign, value, mode, step);\n  }\n\n  static parseInteger<I, V>(input: Input, recon: ReconParser<I, V>): Parser<V> {\n    return NumberParser.parse(input, recon, void 0, void 0, 0);\n  }\n\n  static parseDecimal<I, V>(input: Input, recon: ReconParser<I, V>): Parser<V> {\n    return NumberParser.parse(input, recon, void 0, void 0, 1);\n  }\n}\n\n/** @internal */\nexport class DecimalParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly output: Output<string>;\n  private readonly mode: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, output: Output<string>, mode?: number, step?: number) {\n    super();\n    this.recon = recon;\n    this.output = output;\n    this.mode = mode;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return DecimalParser.parse(input, this.recon, this.output, this.mode, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, output: Output<string>,\n                     mode: number = 2, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 46/*'.'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 2;\n        } else if (mode > 1 && (c === 69/*'E'*/ || c === 101/*'e'*/)) {\n          input = input.step();\n          output = output.write(c);\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"decimal or exponent\", input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 3;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 3) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (input.isCont()) {\n        if (mode > 1) {\n          step = 4;\n        } else {\n          return Parser.done(recon.num(output.bind()));\n        }\n      } else if (input.isDone()) {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    if (step === 4) {\n      c = input.head();\n      if (c === 69/*'E'*/ || c === 101/*'e'*/) {\n        input = input.step();\n        output = output.write(c);\n        step = 5;\n      } else {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    if (step === 5) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 43/*'+'*/ || c === 45/*'-'*/) {\n          input = input.step();\n          output = output.write(c);\n        }\n        step = 6;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 6) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n          step = 7;\n        } else {\n          return Parser.error(Diagnostic.expected(\"digit\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(\"digit\", input));\n      }\n    }\n    if (step === 7) {\n      while (input.isCont()) {\n        c = input.head();\n        if (c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          input = input.step();\n          output = output.write(c);\n        } else {\n          break;\n        }\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(recon.num(output.bind()));\n      }\n    }\n    return new DecimalParser<I, V>(recon, output, mode, step);\n  }\n}\n\n/** @internal */\nclass HexadecimalParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly value: number | undefined;\n  private readonly size: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, value?: number, size?: number) {\n    super();\n    this.recon = recon;\n    this.value = value;\n    this.size = size;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return HexadecimalParser.parse(input, this.recon, this.value, this.size);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>,\n                     value: number = 0, size: number = 0): Parser<V> {\n    let c = 0;\n    while (input.isCont()) {\n      c = input.head();\n      if (Base16.isDigit(c)) {\n        input = input.step();\n        value = 16 * value + Base16.decodeDigit(c);\n        size += 1;\n      } else {\n        break;\n      }\n    }\n    if (!input.isEmpty()) {\n      if (size > 0) {\n        if (size <= 8) {\n          return Parser.done(recon.uint32(value));\n        } else {\n          return Parser.done(recon.uint64(value));\n        }\n      } else {\n        return Parser.error(Diagnostic.expected(\"hex digit\", input));\n      }\n    }\n    return new HexadecimalParser<I, V>(recon, value, size);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class LambdaFuncParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly bindingsParser: Parser<V> | undefined;\n  private readonly templateParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, bindingsParser?: Parser<V>,\n              templateParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.bindingsParser = bindingsParser;\n    this.templateParser = templateParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return LambdaFuncParser.parse(input, this.recon, this.builder, this.bindingsParser,\n                                  this.templateParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     bindingsParser?: Parser<V>, templateParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (bindingsParser === void 0) {\n        bindingsParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (bindingsParser.isCont() && !input.isEmpty()) {\n        bindingsParser = bindingsParser.feed(input);\n      }\n      if (bindingsParser.isDone()) {\n        step = 2;\n      } else if (bindingsParser.isError()) {\n        return bindingsParser.asError();\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 62/*'>'*/) {\n          // leading '=' consumed by ComparisonOperatorParser\n          input = input.step();\n          step = 3;\n        } else {\n          return bindingsParser!;\n        }\n      } else if (input.isDone()) {\n        return bindingsParser!;\n      }\n    }\n    if (step === 3) {\n      if (templateParser === void 0) {\n        templateParser = recon.parseConditionalOperator(input);\n      }\n      while (templateParser.isCont() && !input.isEmpty()) {\n        templateParser = templateParser.feed(input);\n      }\n      if (templateParser.isDone()) {\n        const bindings = bindingsParser!.bind();\n        const template = templateParser.bind();\n        return Parser.done(recon.lambda(bindings, template));\n      } else if (templateParser.isError()) {\n        return templateParser.asError();\n      }\n    }\n    return new LambdaFuncParser<I, V>(recon, builder, bindingsParser, templateParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class ConditionalOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly ifParser: Parser<V> | undefined;\n  private readonly thenParser: Parser<V> | undefined;\n  private readonly elseParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, ifParser?: Parser<V>,\n              thenParser?: Parser<V>, elseParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.ifParser = ifParser;\n    this.thenParser = thenParser;\n    this.elseParser = elseParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return ConditionalOperatorParser.parse(input, this.recon, this.builder, this.ifParser,\n                                           this.thenParser, this.elseParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     ifParser?: Parser<V>, thenParser?: Parser<V>,\n                     elseParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (ifParser === void 0) {\n        ifParser = recon.parseOrOperator(input, builder);\n      }\n      while (ifParser.isCont() && !input.isEmpty()) {\n        ifParser = ifParser.feed(input);\n      }\n      if (ifParser.isDone()) {\n        step = 2;\n      } else if (ifParser.isError()) {\n        return ifParser.asError();\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 63/*'?'*/) {\n          input = input.step();\n          step = 3;\n        } else {\n          return ifParser!;\n        }\n      } else if (input.isDone()) {\n        return ifParser!;\n      }\n    }\n    if (step === 3) {\n      if (thenParser === void 0) {\n        thenParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (thenParser.isCont() && !input.isEmpty()) {\n        thenParser = thenParser.feed(input);\n      }\n      if (thenParser.isDone()) {\n        step = 4;\n      } else if (thenParser.isError()) {\n        return thenParser.asError();\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 58/*':'*/) {\n          input = input.step();\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(58/*':'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(58/*':'*/, input));\n      }\n    }\n    if (step === 5) {\n      if (elseParser === void 0) {\n        elseParser = recon.parseConditionalOperator(input, builder);\n      }\n      while (elseParser.isCont() && !input.isEmpty()) {\n        elseParser = elseParser.feed(input);\n      }\n      if (elseParser.isDone()) {\n        const ifTerm = ifParser!.bind();\n        const thenTerm = thenParser!.bind();\n        const elseTerm = elseParser.bind();\n        return Parser.done(recon.conditional(ifTerm, thenTerm, elseTerm));\n      } else if (elseParser.isError()) {\n        return elseParser.asError();\n      }\n    }\n    return new ConditionalOperatorParser<I, V>(recon, builder, ifParser, thenParser, elseParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class OrOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return OrOperatorParser.parse(input, this.recon, this.builder, this.lhsParser,\n                                  this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseAndOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 124/*'|'*/) {\n            // first '|' consumed by BitwiseOrOperatorParser\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseAndOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.or(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new OrOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class AndOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return AndOperatorParser.parse(input, this.recon, this.builder, this.lhsParser,\n                                   this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseBitwiseOrOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 38/*'&'*/) {\n            // first '&' consumed by BitwiseAndOperatorParser\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseBitwiseOrOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.and(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new AndOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class BitwiseOrOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return BitwiseOrOperatorParser.parse(input, this.recon, this.builder,\n                                         this.lhsParser, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseBitwiseXorOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 124/*'|'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 124/*'|'*/) {\n            return lhsParser!;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 4) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseBitwiseXorOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseOr(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseOrOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class BitwiseXorOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return BitwiseXorOperatorParser.parse(input, this.recon, this.builder,\n                                          this.lhsParser, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseBitwiseAndOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 94/*'^'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseBitwiseAndOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseXor(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseXorOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class BitwiseAndOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              lhsParser?: Parser<V>, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return BitwiseAndOperatorParser.parse(input, this.recon, this.builder,\n                                          this.lhsParser, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     lhsParser?: Parser<V>, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseComparisonOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 38/*'&'*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 38/*'&'*/) {\n            return lhsParser!;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      if (step === 4) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseComparisonOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          lhsParser = Parser.done(recon.bitwiseAnd(lhs, rhs));\n          rhsParser = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new BitwiseAndOperatorParser<I, V>(recon, builder, lhsParser, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class ComparisonOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly operator: string | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.operator = operator;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return ComparisonOperatorParser.parse(input, this.recon, this.builder, this.lhsParser,\n                                          this.operator, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (lhsParser === void 0) {\n        lhsParser = recon.parseAttrExpression(input, builder);\n      }\n      while (lhsParser.isCont() && !input.isEmpty()) {\n        lhsParser = lhsParser.feed(input);\n      }\n      if (lhsParser.isDone()) {\n        step = 2;\n      } else if (lhsParser.isError()) {\n        return lhsParser.asError();\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 33/*'!'*/) {\n          input = input.step();\n          step = 3;\n        } else if (c === 60/*'<'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c === 62/*'>'*/) {\n          input = input.step();\n          step = 5;\n        } else if (c === 61/*'='*/) {\n          input = input.step();\n          step = 6;\n        } else {\n          return lhsParser!;\n        }\n      } else if (input.isDone()) {\n        return lhsParser!;\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"!=\";\n          step = 7;\n        } else {\n          operator = \"!\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 4) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"<=\";\n          step = 7;\n        } else {\n          operator = \"<\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 5) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \">=\";\n          step = 7;\n        } else {\n          operator = \">\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 6) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 61/*'='*/) {\n          input = input.step();\n          operator = \"==\";\n          step = 7;\n        } else if (c === 62/*'>'*/) {\n          return lhsParser!;\n        } else {\n          operator = \"=\";\n          step = 7;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 7) {\n      if (rhsParser === void 0) {\n        rhsParser = recon.parseAttrExpression(input, builder);\n      }\n      while (rhsParser.isCont() && !input.isEmpty()) {\n        rhsParser = rhsParser.feed(input);\n      }\n      if (rhsParser.isDone()) {\n        const lhs = lhsParser!.bind();\n        const rhs = rhsParser.bind();\n        if (operator === \"<\") {\n          return Parser.done(recon.lt(lhs, rhs));\n        } else if (operator === \"<=\") {\n          return Parser.done(recon.le(lhs, rhs));\n        } else if (operator === \"==\") {\n          return Parser.done(recon.eq(lhs, rhs));\n        } else if (operator === \"!=\") {\n          return Parser.done(recon.ne(lhs, rhs));\n        } else if (operator === \">=\") {\n          return Parser.done(recon.ge(lhs, rhs));\n        } else if (operator === \">\") {\n          return Parser.done(recon.gt(lhs, rhs));\n        } else {\n          return Parser.error(Diagnostic.message(operator!, input));\n        }\n      } else if (rhsParser.isError()) {\n        return rhsParser.asError();\n      }\n    }\n    return new ComparisonOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class AttrExpressionParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly fieldParser: Parser<I> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              fieldParser?: Parser<I>, valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.fieldParser = fieldParser;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return AttrExpressionParser.parse(input, this.recon, this.builder,\n                                      this.fieldParser, this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     fieldParser?: Parser<I>, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 64/*'@'*/) {\n            step = 2;\n          } else if (c === 123/*'{'*/ || c === 91/*'['*/) {\n            builder = builder || recon.recordBuilder();\n            step = 5;\n          } else if (c === 40/*'('*/) {\n            step = 4;\n          } else if (c === 33/*'!'*/ || c === 34/*'\"'*/ || c === 36/*'$'*/ || c === 37/*'%'*/\n                  || c === 39/*'\\''*/ || c === 43/*'+'*/ || c === 45/*'-'*/\n                  || c >= 48/*'0'*/ && c <= 57/*'9'*/ || c === 96/*'`'*/ || c === 126/*'~'*/\n                  || Recon.isIdentStartChar(c)) {\n            step = 3;\n          } else if (builder === void 0) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.build());\n          }\n        } else if (input.isDone()) {\n          if (builder === void 0) {\n            return Parser.done(recon.extant());\n          } else {\n            return Parser.done(builder.build());\n          }\n        }\n      }\n      if (step === 2) {\n        if (fieldParser === void 0) {\n          fieldParser = recon.parseAttr(input);\n        }\n        while (fieldParser.isCont() && !input.isEmpty()) {\n          fieldParser = fieldParser.feed(input);\n        }\n        if (fieldParser.isDone()) {\n          builder = builder || recon.recordBuilder();\n          builder.push(fieldParser.bind());\n          fieldParser = void 0;\n          step = 1;\n          continue;\n        } else if (fieldParser.isError()) {\n          return fieldParser.asError();\n        }\n      }\n      if (step === 3) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseAdditiveOperator(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser.bind()));\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 4) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseAdditiveOperator(input, builder);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          if (builder === void 0) {\n            builder = recon.valueBuilder();\n            builder.push(recon.item(valueParser.bind()));\n          }\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 5) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseAdditiveOperator(input, builder);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          valueParser = void 0;\n          step = 6;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 6) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 64/*'@'*/) {\n            step = 1;\n            continue;\n          } else {\n            return Parser.done(builder!.build());\n          }\n        } else if (input.isDone()) {\n          return Parser.done(builder!.build());\n        }\n      }\n      break;\n    } while (true);\n    return new AttrExpressionParser<I, V>(recon, builder, fieldParser, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class AdditiveOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly operator: string | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.operator = operator;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return AdditiveOperatorParser.parse(input, this.recon, this.builder, this.lhsParser,\n                                        this.operator, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parseMultiplicativeOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 43/*'+'*/) {\n            input = input.step();\n            operator = \"+\";\n            step = 3;\n          } else if (c === 45/*'-'*/) {\n            input = input.step();\n            operator = \"-\";\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parseMultiplicativeOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          if (operator === \"+\") {\n            lhsParser = Parser.done(recon.plus(lhs, rhs));\n          } else if (operator === \"-\") {\n            lhsParser = Parser.done(recon.minus(lhs, rhs));\n          } else {\n            return Parser.error(Diagnostic.message(operator!, input));\n          }\n          rhsParser = void 0;\n          operator = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new AdditiveOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class MultiplicativeOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly lhsParser: Parser<V> | undefined;\n  private readonly operator: string | undefined;\n  private readonly rhsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.lhsParser = lhsParser;\n    this.operator = operator;\n    this.rhsParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return MultiplicativeOperatorParser.parse(input, this.recon, this.builder, this.lhsParser,\n                                              this.operator, this.rhsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>, lhsParser?: Parser<V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (lhsParser === void 0) {\n          lhsParser = recon.parsePrefixOperator(input, builder);\n        }\n        while (lhsParser.isCont() && !input.isEmpty()) {\n          lhsParser = lhsParser.feed(input);\n        }\n        if (lhsParser.isDone()) {\n          step = 2;\n        } else if (lhsParser.isError()) {\n          return lhsParser.asError();\n        }\n      }\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 42/*'*'*/) {\n            input = input.step();\n            operator = \"*\";\n            step = 3;\n          } else if (c === 47/*'/'*/) {\n            input = input.step();\n            operator = \"/\";\n            step = 3;\n          } else if (c === 37/*'%'*/) {\n            input = input.step();\n            operator = \"%\";\n            step = 3;\n          } else {\n            return lhsParser!;\n          }\n        } else if (input.isDone()) {\n          return lhsParser!;\n        }\n      }\n      if (step === 3) {\n        if (rhsParser === void 0) {\n          rhsParser = recon.parsePrefixOperator(input, builder);\n        }\n        while (rhsParser.isCont() && !input.isEmpty()) {\n          rhsParser = rhsParser.feed(input);\n        }\n        if (rhsParser.isDone()) {\n          const lhs = lhsParser!.bind();\n          const rhs = rhsParser.bind();\n          if (operator === \"*\") {\n            lhsParser = Parser.done(recon.times(lhs, rhs));\n          } else if (operator === \"/\") {\n            lhsParser = Parser.done(recon.divide(lhs, rhs));\n          } else if (operator === \"%\") {\n            lhsParser = Parser.done(recon.modulo(lhs, rhs));\n          } else {\n            return Parser.error(Diagnostic.message(operator!, input));\n          }\n          rhsParser = void 0;\n          operator = void 0;\n          step = 2;\n          continue;\n        } else if (rhsParser.isError()) {\n          return rhsParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new MultiplicativeOperatorParser<I, V>(recon, builder, lhsParser, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class PrefixOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly operator: string | undefined;\n  private readonly operandParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              operator?: string, rhsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.operator = operator;\n    this.operandParser = rhsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return PrefixOperatorParser.parse(input, this.recon, this.builder,\n                                      this.operator, this.operandParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     operator?: string, rhsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 33/*'!'*/) {\n          input = input.step();\n          operator = \"!\";\n        } else if (c === 126/*'~'*/) {\n          input = input.step();\n          operator = \"~\";\n        } else if (c === 45/*'-'*/) {\n          input = input.step();\n          operator = \"-\";\n        } else if (c === 43/*'+'*/) {\n          input = input.step();\n          operator = \"+\";\n        } else {\n          return recon.parseInvokeOperator(input, builder);\n        }\n        step = 2;\n      } else if (input.isDone()) {\n        return recon.parseInvokeOperator(input, builder);\n      }\n    }\n    if (step === 2) {\n      if (rhsParser === void 0) {\n        rhsParser = recon.parsePrefixOperator(input, builder);\n      }\n      while (rhsParser.isCont() && !input.isEmpty()) {\n        rhsParser = rhsParser.feed(input);\n      }\n      if (rhsParser.isDone()) {\n        const operand = rhsParser.bind();\n        if (!recon.isDistinct(operand)) {\n          return Parser.error(Diagnostic.expected(\"value\", input));\n        } else if (operator === \"!\") {\n          return Parser.done(recon.not(operand));\n        } else if (operator === \"~\") {\n          return Parser.done(recon.bitwiseNot(operand));\n        } else if (operator === \"-\") {\n          return Parser.done(recon.negative(operand));\n        } else if (operator === \"+\") {\n          return Parser.done(recon.positive(operand));\n        } else {\n          return Parser.error(Diagnostic.message(operator!, input));\n        }\n      } else if (rhsParser.isError()) {\n        return rhsParser.asError();\n      }\n    }\n    return new PrefixOperatorParser<I, V>(recon, builder, operator, rhsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class InvokeOperatorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly exprParser: Parser<V> | undefined;\n  private readonly argsParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              exprParser?: Parser<V>, argsParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.exprParser = exprParser;\n    this.argsParser = argsParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return InvokeOperatorParser.parse(input, this.recon, this.builder,\n                                      this.exprParser, this.argsParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     exprParser?: Parser<V>, argsParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      if (exprParser === void 0) {\n        exprParser = recon.parsePrimary(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        step = 2;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    do {\n      if (step === 2) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 40/*'('*/) {\n            input = input.step();\n            step = 3;\n          } else {\n            return exprParser!;\n          }\n        } else if (input.isDone()) {\n          return exprParser!;\n        }\n      }\n      if (step === 3) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 41/*')'*/) {\n            input = input.step();\n            const expr = exprParser!.bind();\n            exprParser = Parser.done(recon.invoke(expr, recon.extant()));\n            step = 2;\n            continue;\n          } else {\n            step = 4;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      if (step === 4) {\n        if (argsParser === void 0) {\n          argsParser = recon.parseBlock(input);\n        }\n        while (argsParser.isCont() && !input.isEmpty()) {\n          argsParser = argsParser.feed(input);\n        }\n        if (argsParser.isDone()) {\n          step = 5;\n        } else if (argsParser.isError()) {\n          return argsParser.asError();\n        }\n      }\n      if (step === 5) {\n        while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n        if (c === 41/*')'*/) {\n            input = input.step();\n            const expr = exprParser!.bind();\n            const args = argsParser!.bind();\n            exprParser = Parser.done(recon.invoke(expr, args));\n            argsParser = void 0;\n            step = 2;\n            continue;\n          } else {\n            return Parser.error(Diagnostic.expected(41/*')'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      break;\n    } while (true);\n    return new InvokeOperatorParser<I, V>(recon, builder, exprParser, argsParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class PrimaryParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly exprParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              exprParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.exprParser = exprParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return PrimaryParser.parse(input, this.recon, this.builder,\n                               this.exprParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     exprParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 40/*'('*/) {\n          input = input.step();\n          step = 3;\n        } else {\n          step = 2;\n        }\n      } else if (input.isDone()) {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (exprParser === void 0) {\n        exprParser = recon.parseLiteral(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        return exprParser;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    if (step === 3) {\n      if (exprParser === void 0) {\n        exprParser = recon.parseBlockExpression(input, builder);\n      }\n      while (exprParser.isCont() && !input.isEmpty()) {\n        exprParser = exprParser.feed(input);\n      }\n      if (exprParser.isDone()) {\n        step = 4;\n      } else if (exprParser.isError()) {\n        return exprParser.asError();\n      }\n    }\n    do {\n      if (step === 4) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 44/*','*/) {\n            input = input.step();\n            if (exprParser !== void 0) {\n              if (builder === void 0) {\n                builder = recon.recordBuilder();\n                builder.push(recon.item(exprParser.bind()));\n              }\n              exprParser = void 0;\n            }\n            step = 5;\n          } else if (c === 41/*')'*/) {\n            input = input.step();\n            if (exprParser !== void 0) {\n              return exprParser;\n            } else {\n              return Parser.done(builder!.build());\n            }\n          } else {\n            return Parser.error(Diagnostic.expected(41/*')'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      }\n      if (step === 5) {\n        if (exprParser === void 0) {\n          exprParser = recon.parseBlockExpression(input, builder);\n        }\n        while (exprParser.isCont() && !input.isEmpty()) {\n          exprParser = exprParser.feed(input);\n        }\n        if (exprParser.isDone()) {\n          exprParser = void 0;\n          step = 4;\n          continue;\n        } else if (exprParser.isError()) {\n          return exprParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new PrimaryParser<I, V>(recon, builder, exprParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Builder} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class LiteralParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return LiteralParser.parse(input, this.recon, this.builder, this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 40/*'('*/) {\n          input = input.step();\n          step = 4;\n        } else if (c === 123/*'{'*/) {\n          builder = builder || recon.recordBuilder();\n          valueParser = recon.parseRecord(input, builder);\n          step = 3;\n        } else if (c === 91/*'['*/) {\n          builder = builder || recon.recordBuilder();\n          valueParser = recon.parseMarkup(input, builder);\n          step = 3;\n        } else if (Recon.isIdentStartChar(c)) {\n          valueParser = recon.parseIdent(input);\n          step = 2;\n        } else if (c === 34/*'\"'*/ || c === 39/*'\\''*/) {\n          valueParser = recon.parseString(input);\n          step = 2;\n        } else if (c === 96/*'`'*/) {\n          valueParser = recon.parseRawString(input);\n          step = 2;\n        } else if (c === 45/*'-'*/ || c >= 48/*'0'*/ && c <= 57/*'9'*/) {\n          valueParser = recon.parseNumber(input);\n          step = 2;\n        } else if (c === 37/*'%'*/) {\n          valueParser = recon.parseData(input);\n          step = 2;\n        } else if (c === 36/*'$'*/) {\n          valueParser = recon.parseSelector(input);\n          step = 2;\n        } else if (builder === void 0) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.build());\n        }\n      } else if (input.isDone()) {\n        if (builder === void 0) {\n          return Parser.done(recon.extant());\n        } else {\n          return Parser.done(builder.build());\n        }\n      }\n    }\n    if (step === 2) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        builder = builder || recon.valueBuilder();\n        builder.push(recon.item(valueParser!.bind()));\n        return Parser.done(builder.build());\n      } else if (valueParser!.isError()) {\n        return valueParser!.asError();\n      }\n    }\n    if (step === 3) {\n      while (valueParser!.isCont() && !input.isEmpty()) {\n        valueParser = valueParser!.feed(input);\n      }\n      if (valueParser!.isDone()) {\n        return Parser.done(builder!.build());\n      } else if (valueParser!.isError()) {\n        return valueParser!.asError();\n      }\n    }\n    if (step === 4) {\n      if (valueParser === void 0) {\n        valueParser = recon.parseBlockExpression(input);\n      }\n      while (valueParser.isCont() && !input.isEmpty()) {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 5;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Recon.isWhitespace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 41/*')'*/) {\n          input = input.step();\n          builder = builder || recon.valueBuilder();\n          builder.push(recon.item(valueParser!.bind()));\n          return Parser.done(builder.build());\n        } else {\n          return Parser.error(Diagnostic.expected(41/*')'*/, input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(41/*')'*/, input));\n      }\n    }\n    return new LiteralParser<I, V>(recon, builder, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport type {ReconParser} from \"./ReconParser\";\n\n/** @internal */\nexport class SelectorParser<I, V> extends Parser<V> {\n  private readonly recon: ReconParser<I, V>;\n  private readonly builder: Builder<I, V> | undefined;\n  private readonly selector: V | undefined;\n  private readonly valueParser: Parser<V> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconParser<I, V>, builder?: Builder<I, V>,\n              selector?: V, valueParser?: Parser<V>, step?: number) {\n    super();\n    this.recon = recon;\n    this.builder = builder;\n    this.selector = selector;\n    this.valueParser = valueParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<V> {\n    return SelectorParser.parse(input, this.recon, this.builder,\n                                this.selector, this.valueParser, this.step);\n  }\n\n  static parse<I, V>(input: Input, recon: ReconParser<I, V>, builder?: Builder<I, V>,\n                     selector?: V, valueParser?: Parser<V>, step: number = 1): Parser<V> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 36/*'$'*/) {\n        input = input.step();\n        selector = selector || recon.selector();\n        step = 2;\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.expected(36/*'$'*/, input));\n      }\n    }\n    if (step === 2) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 91/*'['*/) {\n          input = input.step();\n          step = 8;\n        } else if (c === 64/*'@'*/) {\n          input = input.step();\n          step = 7;\n        } else if (c === 58/*':'*/) {\n          input = input.step();\n          step = 6;\n        } else if (c === 42/*'*'*/) {\n          input = input.step();\n          step = 5;\n        } else if (c === 35/*'#'*/) {\n          input = input.step();\n          step = 4;\n        } else {\n          step = 3;\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    do {\n      if (step === 3) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseLiteral(input, recon.valueBuilder());\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.get(selector!, valueParser.bind());\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 4) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseInteger(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.value(recon.getItem(selector!, valueParser.bind()));\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 5) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 58/*':'*/) {\n            input = input.step();\n            selector = recon.keys(selector!);\n            step = 10;\n          } else if (c === 42/*'*'*/) {\n            input = input.step();\n            selector = recon.descendants(selector!);\n            step = 10;\n          } else {\n            selector = recon.children(selector!);\n            step = 10;\n          }\n        } else if (input.isDone()) {\n          selector = recon.children(selector!);\n          step = 10;\n        }\n      }\n      if (step === 6) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 42/*'*'*/) {\n            input = input.step();\n            selector = recon.values(selector!);\n            step = 10;\n          } else {\n            return Parser.error(Diagnostic.expected(42/*'*'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(42/*'*'*/, input));\n        }\n      }\n      if (step === 7) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseIdent(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          selector = recon.getAttr(selector!, valueParser.bind());\n          valueParser = void 0;\n          step = 10;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 8) {\n        if (valueParser === void 0) {\n          valueParser = recon.parseBlockExpression(input);\n        }\n        while (valueParser.isCont() && !input.isEmpty()) {\n          valueParser = valueParser.feed(input);\n        }\n        if (valueParser.isDone()) {\n          step = 9;\n        } else if (valueParser.isError()) {\n          return valueParser.asError();\n        }\n      }\n      if (step === 9) {\n        while (input.isCont() && (c = input.head(), Recon.isSpace(c))) {\n          input = input.step();\n        }\n        if (input.isCont()) {\n          if (c === 93/*']'*/) {\n            input = input.step();\n            selector = recon.filter(selector!, valueParser!.bind());\n            valueParser = void 0;\n            step = 10;\n          } else {\n            return Parser.error(Diagnostic.expected(93/*']'*/, input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.expected(93/*']'*/, input));\n        }\n      }\n      if (step === 10) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 91/*'['*/) {\n            input = input.step();\n            step = 8;\n            continue;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 4;\n            continue;\n          } else if (c === 46/*'.'*/) {\n            input = input.step();\n            step = 11;\n          } else if (builder !== void 0) {\n            builder.push(recon.item(selector!));\n            return Parser.done(builder.build());\n          } else {\n            return Parser.done(selector!);\n          }\n        } else if (input.isDone()) {\n          if (builder !== void 0) {\n            builder.push(recon.item(selector!));\n            return Parser.done(builder.build());\n          } else {\n            return Parser.done(selector!);\n          }\n        }\n      }\n      if (step === 11) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 64/*'@'*/) {\n            input = input.step();\n            step = 7;\n            continue;\n          } else if (c === 58/*':'*/) {\n            input = input.step();\n            step = 6;\n            continue;\n          } else if (c === 42/*'*'*/) {\n            input = input.step();\n            step = 5;\n            continue;\n          } else {\n            step = 3;\n            continue;\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      break;\n    } while (true);\n    return new SelectorParser<I, V>(recon, builder, selector, valueParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport {BlockParser} from \"./BlockParser\";\nimport {AttrParser} from \"./AttrParser\";\nimport {BlockItemParser} from \"./BlockItemParser\";\nimport {InlineItemParser} from \"./InlineItemParser\";\nimport {RecordParser} from \"./RecordParser\";\nimport {MarkupParser} from \"./MarkupParser\";\nimport {DataParser} from \"./DataParser\";\nimport {IdentParser} from \"./IdentParser\";\nimport {StringParser} from \"./StringParser\";\nimport {RawStringParser} from \"./RawStringParser\";\nimport {NumberParser} from \"./NumberParser\";\nimport {LambdaFuncParser} from \"./LambdaFuncParser\";\nimport {ConditionalOperatorParser} from \"./ConditionalOperatorParser\";\nimport {OrOperatorParser} from \"./OrOperatorParser\";\nimport {AndOperatorParser} from \"./AndOperatorParser\";\nimport {BitwiseOrOperatorParser} from \"./BitwiseOrOperatorParser\";\nimport {BitwiseXorOperatorParser} from \"./BitwiseXorOperatorParser\";\nimport {BitwiseAndOperatorParser} from \"./BitwiseAndOperatorParser\";\nimport {ComparisonOperatorParser} from \"./ComparisonOperatorParser\";\nimport {AttrExpressionParser} from \"./AttrExpressionParser\";\nimport {AdditiveOperatorParser} from \"./AdditiveOperatorParser\";\nimport {MultiplicativeOperatorParser} from \"./MultiplicativeOperatorParser\";\nimport {PrefixOperatorParser} from \"./PrefixOperatorParser\";\nimport {InvokeOperatorParser} from \"./InvokeOperatorParser\";\nimport {PrimaryParser} from \"./PrimaryParser\";\nimport {LiteralParser} from \"./LiteralParser\";\nimport {SelectorParser} from \"./SelectorParser\";\n\n/**\n * Factory for constructing Recon parsers and parse trees.\n * @public\n */\nexport abstract class ReconParser<I, V> {\n  abstract isDistinct(value: V): boolean;\n\n  abstract item(value: V): I;\n\n  abstract value(item: I): V;\n\n  abstract attr(key: V, value: V): I;\n\n  abstract attr(key: V): I;\n\n  abstract slot(key: V, value: V): I;\n\n  abstract slot(key: V): I;\n\n  abstract valueBuilder(): Builder<I, V>;\n\n  abstract recordBuilder(): Builder<I, V>;\n\n  abstract dataOutput(): Output<V>;\n\n  abstract textOutput(): Output<V>;\n\n  abstract ident(value: V): V;\n\n  abstract num(value: number | string): V;\n\n  abstract uint32(value: number): V;\n\n  abstract uint64(value: number): V;\n\n  abstract bool(value: boolean): V;\n\n  abstract selector(): V;\n\n  abstract extant(): V;\n\n  abstract absent(): V;\n\n  abstract conditional(ifTerm: V, thenTerm: V, elseTerm: V): V;\n\n  abstract or(lhs: V, rhs: V): V;\n\n  abstract and(lhs: V, rhs: V): V;\n\n  abstract bitwiseOr(lhs: V, rhs: V): V;\n\n  abstract bitwiseXor(lhs: V, rhs: V): V;\n\n  abstract bitwiseAnd(lhs: V, rhs: V): V;\n\n  abstract lt(lhs: V, rhs: V): V;\n\n  abstract le(lhs: V, rhs: V): V;\n\n  abstract eq(lhs: V, rhs: V): V;\n\n  abstract ne(lhs: V, rhs: V): V;\n\n  abstract ge(lhs: V, rhs: V): V;\n\n  abstract gt(lhs: V, rhs: V): V;\n\n  abstract plus(lhs: V, rhs: V): V;\n\n  abstract minus(lhs: V, rhs: V): V;\n\n  abstract times(lhs: V, rhs: V): V;\n\n  abstract divide(lhs: V, rhs: V): V;\n\n  abstract modulo(lhs: V, rhs: V): V;\n\n  abstract not(rhs: V): V;\n\n  abstract bitwiseNot(rhs: V): V;\n\n  abstract negative(rhs: V): V;\n\n  abstract positive(rhs: V): V;\n\n  abstract invoke(func: V, args: V): V;\n\n  abstract lambda(bindings: V, template: V): V;\n\n  abstract get(selector: V, key: V): V;\n\n  abstract getAttr(selector: V, key: V): V;\n\n  abstract getItem(selector: V, index: V): I;\n\n  abstract children(selector: V): V;\n\n  abstract descendants(selector: V): V;\n\n  abstract keys(selector: V): V;\n\n  abstract values(selector: V): V;\n\n  abstract filter(selector: V, predicate: V): V;\n\n  parseBlock(input: Input): Parser<V> {\n    return BlockParser.parse(input, this);\n  }\n\n  parseAttr(input: Input): Parser<I> {\n    return AttrParser.parse(input, this);\n  }\n\n  parseBlockItem(input: Input): Parser<V> {\n    return BlockItemParser.parse(input, this);\n  }\n\n  parseInlineItem(input: Input): Parser<V> {\n    return InlineItemParser.parse(input, this);\n  }\n\n  parseRecord(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return RecordParser.parse(input, this, builder);\n  }\n\n  parseMarkup(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return MarkupParser.parse(input, this, builder);\n  }\n\n  parseData(input: Input): Parser<V> {\n    return DataParser.parse(input, this);\n  }\n\n  parseIdent(input: Input): Parser<V> {\n    return IdentParser.parse(input, this);\n  }\n\n  parseString(input: Input): Parser<V> {\n    return StringParser.parse(input, this);\n  }\n\n  parseRawString(input: Input): Parser<V> {\n    return RawStringParser.parse(input, this);\n  }\n\n  parseNumber(input: Input): Parser<V> {\n    return NumberParser.parse(input, this);\n  }\n\n  parseInteger(input: Input): Parser<V> {\n    return NumberParser.parseInteger(input, this);\n  }\n\n  parseBlockExpression(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return this.parseLambdaFunc(input, builder);\n  }\n\n  parseLambdaFunc(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return LambdaFuncParser.parse(input, this, builder);\n  }\n\n  parseConditionalOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return ConditionalOperatorParser.parse(input, this, builder);\n  }\n\n  parseOrOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return OrOperatorParser.parse(input, this, builder);\n  }\n\n  parseAndOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AndOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseOrOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseOrOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseXorOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseXorOperatorParser.parse(input, this, builder);\n  }\n\n  parseBitwiseAndOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return BitwiseAndOperatorParser.parse(input, this, builder);\n  }\n\n  parseComparisonOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return ComparisonOperatorParser.parse(input, this, builder);\n  }\n\n  parseAttrExpression(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AttrExpressionParser.parse(input, this, builder);\n  }\n\n  parseAdditiveOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return AdditiveOperatorParser.parse(input, this, builder);\n  }\n\n  parseMultiplicativeOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return MultiplicativeOperatorParser.parse(input, this, builder);\n  }\n\n  parsePrefixOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return PrefixOperatorParser.parse(input, this, builder);\n  }\n\n  parseInvokeOperator(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return InvokeOperatorParser.parse(input, this, builder);\n  }\n\n  parsePrimary(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return PrimaryParser.parse(input, this, builder);\n  }\n\n  parseLiteral(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return LiteralParser.parse(input, this, builder);\n  }\n\n  parseSelector(input: Input, builder?: Builder<I, V>): Parser<V> {\n    return SelectorParser.parse(input, this, builder);\n  }\n\n  blockParser(): Parser<V> {\n    return new BlockParser<I, V>(this);\n  }\n\n  parseBlockString(string: string): V {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Recon.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = this.parseBlock(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Recon.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Builder} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Attr} from \"@swim/structure\";\nimport {Slot} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Data} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Num} from \"@swim/structure\";\nimport {Bool} from \"@swim/structure\";\nimport {Selector} from \"@swim/structure\";\nimport {AndOperator} from \"@swim/structure\";\nimport {BitwiseAndOperator} from \"@swim/structure\";\nimport {BitwiseNotOperator} from \"@swim/structure\";\nimport {BitwiseOrOperator} from \"@swim/structure\";\nimport {BitwiseXorOperator} from \"@swim/structure\";\nimport {DivideOperator} from \"@swim/structure\";\nimport {EqOperator} from \"@swim/structure\";\nimport {GeOperator} from \"@swim/structure\";\nimport {GtOperator} from \"@swim/structure\";\nimport {InvokeOperator} from \"@swim/structure\";\nimport {LeOperator} from \"@swim/structure\";\nimport {LtOperator} from \"@swim/structure\";\nimport {MinusOperator} from \"@swim/structure\";\nimport {ModuloOperator} from \"@swim/structure\";\nimport {NeOperator} from \"@swim/structure\";\nimport {NegativeOperator} from \"@swim/structure\";\nimport {NotOperator} from \"@swim/structure\";\nimport {OrOperator} from \"@swim/structure\";\nimport {PlusOperator} from \"@swim/structure\";\nimport {PositiveOperator} from \"@swim/structure\";\nimport {TimesOperator} from \"@swim/structure\";\nimport {ReconParser} from \"./ReconParser\";\n\n/** @public */\nexport class ReconStructureParser extends ReconParser<Item, Value> {\n  override isDistinct(value: Value): boolean {\n    return value.isDistinct();\n  }\n\n  override item(value: Value): Item {\n    return value;\n  }\n\n  override value(item: Item): Value {\n    return item.toValue();\n  }\n\n  override attr(key: Value, value?: Value): Item {\n    if (arguments.length === 1) {\n      return Attr.of(key as Text);\n    } else {\n      return Attr.of(key as Text, value);\n    }\n  }\n\n  override slot(key: Value, value?: Value): Item {\n    if (arguments.length === 1) {\n      return Slot.of(key);\n    } else {\n      return Slot.of(key, value);\n    }\n  }\n\n  override valueBuilder(): Builder<Item, Value> {\n    return Value.builder();\n  }\n\n  override recordBuilder(): Builder<Item, Value> {\n    return Record.create();\n  }\n\n  override dataOutput(): Output<Value> {\n    return Data.output();\n  }\n\n  override textOutput(): Output<Value> {\n    return Text.output();\n  }\n\n  override ident(value: Value): Value {\n    if (value instanceof Text) {\n      const string = value.stringValue();\n      if (string === \"true\") {\n        return Bool.from(true);\n      } else if (string === \"false\") {\n        return Bool.from(false);\n      }\n    }\n    return value;\n  }\n\n  override num(value: number | string): Value {\n    if (typeof value === \"number\") {\n      return Num.from(value);\n    } else if (typeof value === \"string\") {\n      return Num.from(+value);\n    } else {\n      throw new TypeError(\"\" + value);\n    }\n  }\n\n  override uint32(value: number): Value {\n    return Num.uint32(value);\n  }\n\n  override uint64(value: number): Value {\n    return Num.uint64(value);\n  }\n\n  override bool(value: boolean): Value {\n    return Bool.from(value);\n  }\n\n  override selector(): Value {\n    return Selector.identity();\n  }\n\n  override extant(): Value {\n    return Value.extant();\n  }\n\n  override absent(): Value {\n    return Value.absent();\n  }\n\n  override conditional(ifTerm: Value, thenTerm: Value, elseTerm: Value): Value {\n    return ifTerm.conditional(thenTerm, elseTerm);\n  }\n\n  override or(lhs: Value, rhs: Value): Value {\n    return new OrOperator(lhs, rhs);\n  }\n\n  override and(lhs: Value, rhs: Value): Value {\n    return new AndOperator(lhs, rhs);\n  }\n\n  override bitwiseOr(lhs: Value, rhs: Value): Value {\n    return new BitwiseOrOperator(lhs, rhs);\n  }\n\n  override bitwiseXor(lhs: Value, rhs: Value): Value {\n    return new BitwiseXorOperator(lhs, rhs);\n  }\n\n  override bitwiseAnd(lhs: Value, rhs: Value): Value {\n    return new BitwiseAndOperator(lhs, rhs);\n  }\n\n  override lt(lhs: Value, rhs: Value): Value {\n    return new LtOperator(lhs, rhs);\n  }\n\n  override le(lhs: Value, rhs: Value): Value {\n    return new LeOperator(lhs, rhs);\n  }\n\n  override eq(lhs: Value, rhs: Value): Value {\n    return new EqOperator(lhs, rhs);\n  }\n\n  override ne(lhs: Value, rhs: Value): Value {\n    return new NeOperator(lhs, rhs);\n  }\n\n  override ge(lhs: Value, rhs: Value): Value {\n    return new GeOperator(lhs, rhs);\n  }\n\n  override gt(lhs: Value, rhs: Value): Value {\n    return new GtOperator(lhs, rhs);\n  }\n\n  override plus(lhs: Value, rhs: Value): Value {\n    return new PlusOperator(lhs, rhs);\n  }\n\n  override minus(lhs: Value, rhs: Value): Value {\n    return new MinusOperator(lhs, rhs);\n  }\n\n  override times(lhs: Value, rhs: Value): Value {\n    return new TimesOperator(lhs, rhs);\n  }\n\n  override divide(lhs: Value, rhs: Value): Value {\n    return new DivideOperator(lhs, rhs);\n  }\n\n  override modulo(lhs: Value, rhs: Value): Value {\n    return new ModuloOperator(lhs, rhs);\n  }\n\n  override not(rhs: Value): Value {\n    return new NotOperator(rhs);\n  }\n\n  override bitwiseNot(rhs: Value): Value {\n    return new BitwiseNotOperator(rhs);\n  }\n\n  override negative(rhs: Value): Value {\n    if (rhs instanceof Num) {\n      return rhs.negative();\n    } else {\n      return new NegativeOperator(rhs);\n    }\n  }\n\n  override positive(rhs: Value): Value {\n    return new PositiveOperator(rhs);\n  }\n\n  override invoke(func: Value, args: Value): Value {\n    return new InvokeOperator(func, args);\n  }\n\n  override lambda(bindings: Value, template: Value): Value {\n    return bindings.lambda(template);\n  }\n\n  override get(selector: Value, key: Value): Value {\n    return selector.get(key);\n  }\n\n  override getAttr(selector: Value, key: Value): Value {\n    return selector.getAttr(key as Text);\n  }\n\n  override getItem(selector: Value, index: Value): Item {\n    return selector.getItem(index as Num);\n  }\n\n  override children(selector: Value): Value {\n    return Selector.literal(selector).children();\n  }\n\n  override descendants(selector: Value): Value {\n    return Selector.literal(selector).descendants();\n  }\n\n  override keys(selector: Value): Value {\n    return Selector.literal(selector).keys();\n  }\n\n  override values(selector: Value): Value {\n    return Selector.literal(selector).values();\n  }\n\n  override filter(selector: Value, predicate: Value): Value {\n    return selector.filter(predicate);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class AttrWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly key: V;\n  private readonly value: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, value: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.key = key;\n    this.value = value;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return AttrWriter.write(output, this.recon, this.key, this.value, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, value: V): number {\n    let size = 0;\n    size += 1; // '@'\n    size += recon.sizeOfValue(key);\n    if (!recon.isExtant(recon.item(value))) {\n      size += 1; // '(';\n      size += recon.sizeOfBlockValue(value);\n      size += 1; // ')';\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, value: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(64/*'@'*/);\n      step = 2;\n    }\n    if (step === 2) {\n      if (part === void 0) {\n        part = recon.writeValue(output, key);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        if (recon.isExtant(recon.item(value))) {\n          return Writer.end();\n        } else {\n          step = 3;\n        }\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(40/*'('*/);\n      step = 4;\n    }\n    if (step === 4) {\n      if (part === void 0) {\n        part = recon.writeBlockValue(output, value);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 5;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(41/*')'*/);\n      return Writer.end();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new AttrWriter<I, V>(recon, key, value, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class SlotWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly key: V;\n  private readonly value: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, value: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.key = key;\n    this.value = value;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return SlotWriter.write(output, this.recon, this.key, this.value, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, value: V): number {\n    let size = 0;\n    size += recon.sizeOfValue(key);\n    size += 1; // ':'\n    if (!recon.isExtant(recon.item(value))) {\n      size += recon.sizeOfValue(value);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, value: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (part === void 0) {\n        part = recon.writeValue(output, key);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      if (recon.isExtant(recon.item(value))) {\n        return Writer.end();\n      } else {\n        step = 3;\n      }\n    }\n    if (step === 3) {\n      if (part === void 0) {\n        part = recon.writeValue(output, value);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.end();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new SlotWriter<I, V>(recon, key, value, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class BlockWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly items: Cursor<I>;\n  private readonly inBlock: boolean;\n  private readonly inMarkup: boolean;\n  private readonly inBraces: boolean | undefined;\n  private readonly inBrackets: boolean | undefined;\n  private readonly first: boolean | undefined;\n  private readonly markupSafe: boolean | undefined;\n  private readonly item: I | undefined;\n  private readonly next: I | undefined;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, items: Cursor<I>, inBlock: boolean, inMarkup: boolean,\n              inBraces?: boolean, inBrackets?: boolean, first?: boolean, markupSafe?: boolean,\n              item?: I, next?: I, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.items = items;\n    this.inBlock = inBlock;\n    this.inMarkup = inMarkup;\n    this.inBraces = inBraces;\n    this.inBrackets = inBrackets;\n    this.first = first;\n    this.markupSafe = markupSafe;\n    this.item = item;\n    this.next = next;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return BlockWriter.write(output, this.recon, this.items, this.inBlock, this.inMarkup,\n                             this.inBraces, this.inBrackets, this.first, this.markupSafe,\n                             this.item, this.next, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, items: Cursor<I>,\n                      inBlock: boolean, inMarkup: boolean): number {\n    let size = 0;\n    let inBraces = false;\n    let inBrackets = false;\n    let first = true;\n    let markupSafe = true;\n    let next: I | undefined;\n    while (next !== void 0 || items.hasNext()) {\n      let item: I | undefined;\n      if (next === void 0) {\n        item = items.next().value as I;\n      } else {\n        item = next;\n        next = void 0;\n      }\n      if (items.hasNext()) {\n        next = items.next().value as I;\n      }\n      if (recon.isExpression(item)) {\n        markupSafe = false;\n      }\n      if (inBrackets && recon.isAttr(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        }\n        size += 1; // ']'\n        inBrackets = false;\n      }\n      if (recon.isAttr(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        } else if (inBrackets) { // Case already covered?\n          size += 1; // ']'\n          inBrackets = false;\n        }\n        size += recon.sizeOfItem(item);\n        first = false;\n      } else if (inBrackets && recon.isText(item)) {\n        if (inBraces) {\n          size += 1; // '}'\n          inBraces = false;\n        }\n        size += recon.sizeOfMarkupText(item);\n      } else if (inBraces) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += BlockWriter.sizeOfBlockItem(recon, item);\n      } else if (inBrackets) {\n        if (recon.isRecord(item) && recon.isMarkupSafe(recon.items(item))) {\n          size += recon.sizeOfBlock(recon.items(item), false, true);\n          if (next !== void 0 && recon.isText(next)) {\n            size += recon.sizeOfMarkupText(next);\n            next = void 0;\n          } else if (next !== void 0 && !recon.isAttr(next)) {\n            size += 1; // '{'\n            inBraces = true;\n            first = true;\n          } else {\n            size += 1; // ']'\n            inBrackets = false;\n          }\n        } else {\n          size += 1; // '{'\n          size += recon.sizeOfItem(item);\n          inBraces = true;\n          first = false;\n        }\n      } else if (markupSafe && recon.isText(item) && next !== void 0 && !recon.isField(next)\n              && !recon.isText(next) && !recon.isBool(next)) {\n        size += 1; // '['\n        size += recon.sizeOfMarkupText(item);\n        inBrackets = true;\n      } else if (inBlock && !inBraces) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += BlockWriter.sizeOfBlockItem(recon, item);\n      } else if (inMarkup && recon.isText(item) && next === void 0) {\n        size += 1; // '['\n        size += recon.sizeOfMarkupText(item);\n        size += 1; // ']'\n      } else if (!inMarkup && recon.isValue(item) && !recon.isRecord(item)\n             && (!first && next === void 0 || next !== void 0 && recon.isAttr(next))) {\n        if (!first && (recon.isText(item) && recon.isIdent(item)\n                    || recon.isNum(item) || recon.isBool(item))) {\n          size += 1; // ' '\n        }\n        size += recon.sizeOfItem(item);\n      } else {\n        size += 1; // '{'\n        size += recon.sizeOfItem(item);\n        inBraces = true;\n        first = false;\n      }\n    }\n    if (inBraces) {\n      size += 1; // '}'\n    }\n    if (inBrackets) {\n      size += 1; // ']'\n    }\n    return size;\n  }\n\n  static sizeOfBlockItem<I, V>(recon: ReconWriter<I, V>, item: I): number {\n    let size = 0;\n    if (recon.isField(item)) {\n      size += recon.sizeOfSlot(recon.key(item), recon.value(item));\n    } else {\n      size += recon.sizeOfItem(item);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, items: Cursor<I>,\n                     inBlock: boolean, inMarkup: boolean, inBraces: boolean = false,\n                     inBrackets: boolean = false, first: boolean = true, markupSafe: boolean = true,\n                     item?: I, next?: I, part?: Writer, step: number = 1): Writer {\n    do {\n      if (step === 1) {\n        if (next === void 0 && !items.hasNext()) {\n          step = 10;\n          break;\n        } else {\n          if (next === void 0) {\n            item = items.next().value as I;\n          } else {\n            item = next;\n            next = void 0;\n          }\n          if (items.hasNext()) {\n            next = items.next().value as I;\n          }\n          if (recon.isExpression(item)) {\n            markupSafe = false;\n          }\n          step = 2;\n        }\n      }\n      if (step === 2 && output.isCont()) {\n        if (inBrackets && recon.isAttr(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          }\n          step = 3;\n        } else {\n          step = 4;\n        }\n      }\n      if (step === 3 && output.isCont()) {\n        output = output.write(93/*']'*/);\n        inBrackets = false;\n        step = 4;\n      }\n      if (step === 4 && output.isCont()) {\n        if (recon.isAttr(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          } else if (inBrackets) {\n            output = output.write(93/*']'*/);\n            inBrackets = false;\n          }\n          part = recon.writeItem(output, item!);\n          first = false;\n          step = 7;\n        } else if (inBrackets && recon.isText(item!)) {\n          if (inBraces) {\n            output = output.write(125/*'}'*/);\n            inBraces = false;\n          }\n          part = recon.writeMarkupText(output, item!);\n          step = 7;\n        } else if (inBraces) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = BlockWriter.writeBlockItem(output, recon, item!);\n          step = 7;\n        } else if (inBrackets) {\n          if (recon.isRecord(item!) && recon.isMarkupSafe(recon.items(item!))) {\n            part = recon.writeBlock(output, recon.items(item!), false, true);\n            step = 5;\n          } else {\n            output = output.write(123/*'{'*/);\n            part = recon.writeItem(output, item!);\n            inBraces = true;\n            first = false;\n            step = 7;\n          }\n        } else if (markupSafe && recon.isText(item!) && next !== void 0 && !recon.isField(next)\n                && !recon.isText(next) && !recon.isBool(next)) {\n          output = output.write(91/*'['*/);\n          part = recon.writeMarkupText(output, item!);\n          inBrackets = true;\n          step = 7;\n        } else if (inBlock && !inBraces) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = BlockWriter.writeBlockItem(output, recon, item!);\n          step = 7;\n        } else if (inMarkup && recon.isText(item!) && next === void 0) {\n          output = output.write(91/*'['*/);\n          part = recon.writeMarkupText(output, item!);\n          step = 8;\n        } else if (!inMarkup && recon.isValue(item!) && !recon.isRecord(item!)\n               && (!first && next === void 0 || next !== void 0 && recon.isAttr(next))) {\n          if (!first && (recon.isText(item!) && recon.isIdent(item!)\n                      || recon.isNum(item!) || recon.isBool(item!))) {\n            output = output.write(32/*' '*/);\n          }\n          part = recon.writeItem(output, item!);\n          step = 7;\n        } else {\n          output = output.write(123/*'{'*/);\n          part = recon.writeItem(output, item!);\n          inBraces = true;\n          first = false;\n          step = 7;\n        }\n      }\n      if (step === 5) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 6;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 6 && output.isCont()) {\n        if (next !== void 0 && recon.isText(next)) {\n          part = recon.writeMarkupText(output, next);\n          next = void 0;\n          step = 7;\n        } else if (next !== void 0 && !recon.isAttr(next)) {\n          output = output.write(123/*'{'*/);\n          inBraces = true;\n          first = true;\n          step = 1;\n          continue;\n        } else {\n          output = output.write(93/*']'*/);\n          inBrackets = false;\n          step = 1;\n          continue;\n        }\n      }\n      if (step === 7) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 1;\n          continue;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 8) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 9;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      if (step === 9 && output.isCont()) {\n        output = output.write(93/*']'*/);\n        step = 1;\n        continue;\n      }\n      break;\n    } while (true);\n    if (step === 10) {\n      if (inBraces) {\n        if (output.isCont()) {\n          output = output.write(125/*'}'*/);\n          step = 11;\n        }\n      } else {\n        step = 11;\n      }\n    }\n    if (step === 11) {\n      if (inBrackets) {\n        if (output.isCont()) {\n          output = output.write(93/*']'*/);\n          return Writer.end();\n        }\n      } else {\n        return Writer.end();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new BlockWriter<I, V>(recon, items, inBlock, inMarkup, inBraces, inBrackets,\n                                 first, markupSafe, item, next, part, step);\n  }\n\n  static writeBlockItem<I, V>(output: Output, recon: ReconWriter<I, V>, item: I): Writer {\n    if (recon.isField(item)) {\n      return recon.writeSlot(output, recon.key(item), recon.value(item));\n    } else {\n      return recon.writeItem(output, item);\n    }\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class PrimaryWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly items: Cursor<I>;\n  private readonly inParens: boolean | undefined;\n  private readonly first: boolean | undefined;\n  private readonly item: I | undefined;\n  private readonly next: I | undefined;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, items: Cursor<I>, inParens?: boolean,\n              first?: boolean, item?: I, next?: I, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.items = items;\n    this.inParens = inParens;\n    this.first = first;\n    this.item = item;\n    this.next = next;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return PrimaryWriter.write(output, this.recon, this.items, this.inParens, this.first,\n                               this.item, this.next, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, items: Cursor<I>): number {\n    let size = 0;\n    let inParens = false;\n    let first = true;\n    let next: I | undefined;\n    while (next !== void 0 || items.hasNext()) {\n      let item: I | undefined;\n      if (next === void 0) {\n        item = items.next().value as I;\n      } else {\n        item = next;\n        next = void 0;\n      }\n      if (items.hasNext()) {\n        next = items.next().value as I;\n      }\n      if (!inParens && !first) {\n        size += 1; // ' '\n      }\n      if (recon.isAttr(item)) {\n        if (inParens) {\n          size += 1; // ')'\n          inParens = false;\n        }\n        size += recon.sizeOfItem(item);\n        first = false;\n      } else if (inParens) {\n        if (!first) {\n          size += 1; // ','\n        } else {\n          first = false;\n        }\n        size += recon.sizeOfBlockItem(item);\n      } else if (recon.isValue(item) && !recon.isRecord(item)\n             && (!first && next === void 0 || next !== void 0 && recon.isAttr(next))) {\n        size += recon.sizeOfItem(item);\n      } else {\n        size += 1; // '('\n        size += recon.sizeOfItem(item);\n        inParens = true;\n        first = false;\n      }\n    }\n    if (inParens) {\n      size += 1; // ')'\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, items: Cursor<I>,\n                     inParens: boolean = false, first: boolean = true, item?: I,\n                     next?: I, part?: Writer, step: number = 1): Writer {\n    do {\n      if (step === 1) {\n        if (next === void 0 && !items.hasNext()) {\n          step = 5;\n          break;\n        } else {\n          if (next === void 0) {\n            item = items.next().value!;\n          } else {\n            item = next;\n            next = void 0;\n          }\n          if (items.hasNext()) {\n            next = items.next().value!;\n          }\n          step = 2;\n        }\n      }\n      if (step === 2 && output.isCont()) {\n        if (!inParens && !first) {\n          output = output.write(32/*' '*/);\n        }\n        step = 3;\n      }\n      if (step === 3 && output.isCont()) {\n        if (recon.isAttr(item!)) {\n          if (inParens) {\n            output = output.write(41/*')'*/);\n            inParens = false;\n          }\n          part = recon.writeItem(output, item!);\n          first = false;\n          step = 4;\n        } else if (inParens) {\n          if (!first) {\n            output = output.write(44/*','*/);\n          } else {\n            first = false;\n          }\n          part = recon.writeBlockItem(output, item!);\n          step = 4;\n        } else if (recon.isValue(item!) && !recon.isRecord(item!)\n               && (!first && next === void 0 || next !== void 0 && recon.isAttr(next))) {\n          part = recon.writeItem(output, item!);\n          step = 4;\n        } else {\n          output = output.write(40/*'('*/);\n          part = recon.writeItem(output, item!);\n          inParens = true;\n          first = false;\n          step = 4;\n        }\n      }\n      if (step === 4) {\n        part = part!.pull(output);\n        if (part.isDone()) {\n          part = void 0;\n          step = 1;\n          continue;\n        } else if (part.isError()) {\n          return part.asError();\n        }\n      }\n      break;\n    } while (true);\n    if (step === 5) {\n      if (inParens) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.end();\n        }\n      } else {\n        return Writer.end();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new PrimaryWriter<I, V>(recon, items, inParens, first, item, next, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\n\n/** @internal */\nexport class MarkupTextWriter extends Writer {\n  private readonly text: string;\n  private readonly index: number | undefined;\n  private readonly escape: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(text: string, index?: number, escape?: number, step?: number) {\n    super();\n    this.text = text;\n    this.index = index;\n    this.escape = escape;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return MarkupTextWriter.write(output, this.text, this.index, this.escape, this.step);\n  }\n\n  static sizeOf(text: string): number {\n    let size = 0;\n    for (let i = 0; i < text.length; i = Strings.offsetByCodePoints(text, i, 1)) {\n      let c = text.codePointAt(i);\n      if (c === void 0) {\n        c = text.charCodeAt(i);\n      }\n      if (c === 36/*'$'*/ || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/\n          || c === 93/*']'*/ || c === 123/*'{'*/ || c === 125/*'}'*/ || c === 8/*'\\b'*/\n          || c === 12/*'\\f'*/ || c === 10/*'\\n'*/ || c === 13/*'\\r'*/ || c === 9/*'\\t'*/) {\n        size += 2;\n      } else if (c < 0x20) {\n        size += 6;\n      } else {\n        size += Utf8.sizeOf(c);\n      }\n    }\n    return size;\n  }\n\n  static write(output: Output, text: string, index: number = 0,\n               escape: number = 0, step: number = 1): Writer {\n    const length = text.length;\n    while (output.isCont()) {\n      if (step === 1) {\n        if (index < length) {\n          let c = text.codePointAt(index);\n          if (c === void 0) {\n            c = text.charCodeAt(index);\n          }\n          index = Strings.offsetByCodePoints(text, index, 1);\n          if (c === 36/*'$'*/ || c === 64/*'@'*/ || c === 91/*'['*/ || c === 92/*'\\\\'*/\n              || c === 93/*']'*/ || c === 123/*'{'*/ || c === 125/*'}'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 2;\n          } else if (c === 8/*'\\b'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 98/*'b'*/;\n            step = 2;\n          } else if (c === 12/*'\\f'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 102/*'f'*/;\n            step = 2;\n          } else if (c === 10/*'\\n'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 110/*'n'*/;\n            step = 2;\n          } else if (c === 13/*'\\r'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 114/*'r'*/;\n            step = 2;\n          } else if (c === 9/*'\\t'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 116/*'t'*/;\n            step = 2;\n          } else if (c < 0x20) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 3;\n          } else {\n            output = output.write(c);\n          }\n        } else {\n          return Writer.end();\n        }\n      } else if (step === 2) {\n        output = output.write(escape);\n        escape = 0;\n        step = 1;\n      } else if (step === 3) {\n        output = output.write(117/*'u'*/);\n        step = 4;\n      } else if (step === 4) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 12) & 0xf));\n        step = 5;\n      } else if (step === 5) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 8) & 0xf));\n        step = 6;\n      } else if (step === 6) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 4) & 0xf));\n        step = 7;\n      } else if (step === 7) {\n        output = output.write(Base16.uppercase.encodeDigit(escape & 0xf));\n        escape = 0;\n        step = 1;\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new MarkupTextWriter(text, index, escape, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Base64} from \"@swim/codec\";\n\n/** @internal */\nexport class DataWriter extends Writer {\n  private readonly array: Uint8Array;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(array: Uint8Array, part?: Writer, step?: number) {\n    super();\n    this.array = array;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return DataWriter.write(output, this.array, this.part, this.step);\n  }\n\n  static sizeOf(length: number): number {\n    return 1 + ((Math.floor(length * 4 / 3) + 3) & ~3);\n  }\n\n  static write(output: Output, array: Uint8Array, part?: Writer,\n               step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(37/*'%'*/);\n      step = 2;\n    }\n    if (step === 2) {\n      if (part === void 0) {\n        part = Base64.standard().writeUint8Array(output, array);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        return Writer.end();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new DataWriter(array, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\n\n/** @internal */\nexport class IdentWriter extends Writer {\n  private readonly ident: string;\n  private readonly index: number | undefined;\n\n  constructor(ident: string, index?: number) {\n    super();\n    this.ident = ident;\n    this.index = index;\n  }\n\n  override pull(output: Output): Writer {\n    return IdentWriter.write(output, this.ident, this.index);\n  }\n\n  static sizeOf(ident: string): number {\n    return Utf8.sizeOf(ident);\n  }\n\n  static write(output: Output, ident: string, index: number = 0): Writer {\n    let c: number | undefined;\n    const length = ident.length;\n    if (length === 0) {\n      return Writer.error(new WriterException(\"empty identifier\"));\n    }\n    if (index === 0 && output.isCont()) {\n      c = ident.codePointAt(0);\n      if (c === void 0) {\n        c = ident.charCodeAt(0);\n      }\n      if (Recon.isIdentStartChar(c)) {\n        output = output.write(c);\n        index = Strings.offsetByCodePoints(ident, 0, 1);\n      }\n    }\n    while (index < length && output.isCont()) {\n      c = ident.codePointAt(index);\n      if (c === void 0) {\n        c = ident.charCodeAt(index);\n      }\n      if (Recon.isIdentChar(c)) {\n        output = output.write(c);\n        index = Strings.offsetByCodePoints(ident, index, 1);\n      } else {\n        return Writer.error(new WriterException(\"invalid identifier\"));\n      }\n    }\n    if (index >= length) {\n      return Writer.end();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new IdentWriter(ident, index);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\n\n/** @internal */\nexport class StringWriter extends Writer {\n  private readonly string: string;\n  private readonly index: number | undefined;\n  private readonly escape: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(string: string, index?: number, escape?: number, step?: number) {\n    super();\n    this.string = string;\n    this.index = index;\n    this.escape = escape;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return StringWriter.write(output, this.string, this.index, this.escape, this.step);\n  }\n\n  static sizeOf(string: string): number {\n    let size = 0;\n    size += 1; // '\"';\n    for (let i = 0; i < string.length; i = Strings.offsetByCodePoints(string, i, 1)) {\n      let c = string.codePointAt(i);\n      if (c === void 0) {\n        c = string.charCodeAt(i);\n      }\n      if (c === 34/*'\"'*/ || c === 92/*'\\\\'*/ || c === 8/*'\\b'*/ || c === 12/*'\\f'*/\n          || c === 10/*'\\n'*/ || c === 13/*'\\r'*/ || c === 9/*'\\t'*/) {\n        size += 2;\n      } else if (c < 0x20) {\n        size += 6;\n      } else {\n        size += Utf8.sizeOf(c);\n      }\n    }\n    size += 1; // '\"';\n    return size;\n  }\n\n  static write(output: Output, string: string, index: number = 0, escape: number = 0,\n               step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(34/*'\"'*/);\n      step = 2;\n    }\n    const length = string.length;\n    while (step >= 2 && step <= 8 && output.isCont()) {\n      if (step === 2) {\n        if (index < length) {\n          let c = string.codePointAt(index);\n          if (c === void 0) {\n            c = string.charCodeAt(index);\n          }\n          index = Strings.offsetByCodePoints(string, index, 1);\n          if (c === 34/*'\"'*/ || c === 92/*'\\\\'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = c;\n            step = 3;\n          } else if (c === 8/*'\\b'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 98/*'b'*/;\n            step = 3;\n          } else if (c === 12/*'\\f'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 102/*'f'*/;\n            step = 3;\n          } else if (c === 10/*'\\n'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 110/*'n'*/;\n            step = 3;\n          } else if (c === 13/*'\\r'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 114/*'r'*/;\n            step = 3;\n          } else if (c === 9/*'\\t'*/) {\n            output = output.write(92/*'\\\\'*/);\n            escape = 116/*'t'*/;\n            step = 3;\n          } else if (c < 0x20) {\n            output = output.write('\\\\');\n            escape = c;\n            step = 4;\n          } else {\n            output = output.write(c);\n          }\n        } else {\n          step = 9;\n          break;\n        }\n      } else if (step === 3) {\n        output = output.write(escape);\n        escape = 0;\n        step = 2;\n      } else if (step === 4) {\n        output = output.write(117/*'u'*/);\n        step = 5;\n      } else if (step === 5) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 12) & 0xf));\n        step = 6;\n      } else if (step === 6) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 8) & 0xf));\n        step = 7;\n      } else if (step === 7) {\n        output = output.write(Base16.uppercase.encodeDigit((escape >>> 4) & 0xf));\n        step = 8;\n      } else if (step === 8) {\n        output = output.write(Base16.uppercase.encodeDigit(escape & 0xf));\n        escape = 0;\n        step = 2;\n      }\n    }\n    if (step === 9 && output.isCont()) {\n      output = output.write(34/*'\"'*/);\n      return Writer.end();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new StringWriter(string, index, escape, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class LambdaFuncWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly bindings: V;\n  private readonly template: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, bindings: V, template: V,\n              part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.bindings = bindings;\n    this.template = template;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return LambdaFuncWriter.write(output, this.recon, this.bindings, this.template,\n                                  this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, bindings: V, template: V): number {\n    let size = 0;\n    size += recon.sizeOfPrimary(bindings);\n    size += 4; // \" => \"\n    size += recon.sizeOfValue(template);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, bindings: V, template: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (part === void 0) {\n        part = recon.writePrimary(output, bindings);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(61/*'='*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(62/*'>'*/);\n      step = 5;\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 6;\n    }\n    if (step === 6) {\n      if (part === void 0) {\n        part = recon.writeValue(output, template);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.end();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new LambdaFuncWriter<I, V>(recon, bindings, template, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class ConditionalOperatorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly ifTerm: I;\n  private readonly thenTerm: I;\n  private readonly elseTerm: I;\n  private readonly precedence: number;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I, elseTerm: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.ifTerm = ifTerm;\n    this.thenTerm = thenTerm;\n    this.elseTerm = elseTerm;\n    this.precedence = precedence;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return ConditionalOperatorWriter.write(output, this.recon, this.ifTerm, this.thenTerm,\n                                           this.elseTerm, this.precedence, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I,\n                      elseTerm: I, precedence: number): number {\n    let size = 0;\n    if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(ifTerm);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(ifTerm);\n    }\n    size += 3; // \" ? \"\n    size += recon.sizeOfItem(thenTerm);\n    size += 3; // \" : \"\n    size += recon.sizeOfItem(elseTerm);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, ifTerm: I, thenTerm: I, elseTerm: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (part === void 0) {\n        part = recon.writeItem(output, ifTerm);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(ifTerm) > 0 && recon.precedence(ifTerm) <= precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 5;\n    }\n    if (step === 5 && output.isCont()) {\n      output = output.write(63/*'?'*/);\n      step = 6;\n    }\n    if (step === 6 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 7;\n    }\n    if (step === 7) {\n      if (part === void 0) {\n        part = recon.writeItem(output, thenTerm);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 8;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 8 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 9;\n    }\n    if (step === 9 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      step = 10;\n    }\n    if (step === 10 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 11;\n    }\n    if (step === 11) {\n      if (part === void 0) {\n        part = recon.writeItem(output, elseTerm);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return Writer.end();\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ConditionalOperatorWriter<I, V>(recon, ifTerm, thenTerm, elseTerm,\n                                               precedence, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class InfixOperatorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly lhs: I;\n  private readonly operator: string;\n  private readonly rhs: I;\n  private readonly precedence: number;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.lhs = lhs;\n    this.operator = operator;\n    this.rhs = rhs;\n    this.precedence = precedence;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return InfixOperatorWriter.write(output, this.recon, this.lhs, this.operator, this.rhs,\n                                     this.precedence, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I, precedence: number): number {\n    let size = 0;\n    if (recon.precedence(lhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(lhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(lhs);\n    }\n    size += 1; // ' '\n    size += Utf8.sizeOf(operator);\n    size += 1; // ' '\n    if (recon.precedence(rhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(rhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(rhs);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, lhs: I, operator: string, rhs: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(lhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (part === void 0) {\n        part = recon.writeItem(output, lhs);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(lhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 5;\n    }\n    if (step === 5) {\n      if (part === void 0) {\n        part = Unicode.writeString(output, operator);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 6;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 6 && output.isCont()) {\n      output = output.write(32/*' '*/);\n      step = 7;\n    }\n    if (step === 7) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 8;\n        }\n      } else {\n        step = 8;\n      }\n    }\n    if (step === 8) {\n      if (part === void 0) {\n        part = recon.writeItem(output, rhs);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 9;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 9) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.end();\n        }\n      } else {\n        return Writer.end();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new InfixOperatorWriter<I, V>(recon, lhs, operator, rhs, precedence, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class PrefixOperatorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly operator: string;\n  private readonly rhs: I;\n  private readonly precedence: number;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, operator: string, rhs: I,\n              precedence: number, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.operator = operator;\n    this.rhs = rhs;\n    this.precedence = precedence;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return PrefixOperatorWriter.write(output, this.recon, this.operator, this.rhs,\n                                      this.precedence, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, operator: string, rhs: I, precedence: number): number {\n    let size = 0;\n    size += Utf8.sizeOf(operator);\n    if (recon.precedence(rhs) < precedence) {\n      size += 1; // '('\n      size += recon.sizeOfItem(rhs);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(rhs);\n    }\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, operator: string, rhs: I,\n                     precedence: number, part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (part === void 0) {\n        part = Unicode.writeString(output, operator);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 3;\n        }\n      } else {\n        step = 3;\n      }\n    }\n    if (step === 3) {\n      if (part === void 0) {\n        part = recon.writeItem(output, rhs);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4) {\n      if (recon.precedence(rhs) < precedence) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          return Writer.end();\n        }\n      } else {\n        return Writer.end();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new PrefixOperatorWriter<I, V>(recon, operator, rhs, precedence, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class InvokeOperatorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly func: V;\n  private readonly args: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, func: V, args: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.func = func;\n    this.args = args;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return InvokeOperatorWriter.write(output, this.recon, this.func, this.args,\n                                      this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, func: V, args: V): number {\n    let size = 0;\n    size += recon.sizeOfValue(func);\n    size += 1; // '('\n    size += recon.sizeOfBlockValue(args);\n    size += 1; // ')'\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, func: V, args: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (part === void 0) {\n        part = recon.writeValue(output, func);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 2;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(40/*'('*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (part === void 0) {\n        part = recon.writeBlockValue(output, args);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(41/*')'*/);\n      return Writer.end();\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new InvokeOperatorWriter<I, V>(recon, func, args, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class LiteralSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly item: I;\n  private readonly then: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, item: I, then: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.item = item;\n    this.then = then;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return LiteralSelectorWriter.write(output, this.recon, this.item, this.then,\n                                       this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, item: I, then: V): number {\n    let size = 0;\n    if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n      size += 1; // '('\n      size += recon.sizeOfItem(item);\n      size += 1; // ')'\n    } else {\n      size += recon.sizeOfItem(item);\n    }\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, item: I, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1) {\n      if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n        if (output.isCont()) {\n          output = output.write(40/*'('*/);\n          step = 2;\n        }\n      } else {\n        step = 2;\n      }\n    }\n    if (step === 2) {\n      if (part === void 0) {\n        part = recon.writeItem(output, item);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 3;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 3) {\n      if (recon.precedence(item) < recon.precedence(recon.item(then))) {\n        if (output.isCont()) {\n          output = output.write(41/*')'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new LiteralSelectorWriter<I, V>(recon, item, then, part, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class GetSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly key: V;\n  private readonly then: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, then: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.key = key;\n    this.then = then;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return GetSelectorWriter.write(output, this.recon, this.key, this.then, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, then: V): number {\n    let size = 1; // '$' | '.'\n    if (recon.isRecord(recon.item(key))) {\n      size += 1; // '{'\n      size += recon.sizeOfBlockValue(key);\n      size += 1; // '}'\n    } else {\n      size += recon.sizeOfValue(key);\n    }\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (recon.isRecord(recon.item(key))) {\n        if (output.isCont()) {\n          output = output.write(123/*'{'*/);\n          step = 4;\n        }\n      } else {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (part === void 0) {\n        if (recon.isRecord(recon.item(key))) {\n          part = recon.writeBlockValue(output, key);\n        } else {\n          part = recon.writeValue(output, key);\n        }\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 5;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 5) {\n      if (recon.isRecord(recon.item(key))) {\n        if (output.isCont()) {\n          output = output.write(125/*'}'*/);\n          step = 6;\n        }\n      } else {\n        step = 6;\n      }\n    }\n    if (step === 6) {\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetSelectorWriter<I, V>(recon, key, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V): Writer {\n    return GetSelectorWriter.write(output, recon, key, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class GetAttrSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly key: V;\n  private readonly then: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, key: V, then: V, part?: Writer, step?: number) {\n    super();\n    this.recon  = recon;\n    this.key = key;\n    this.then = then;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return GetAttrSelectorWriter.write(output, this.recon, this.key, this.then,\n                                       this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, key: V, then: V): number {\n    let size = 2; // ('$' | '.') '@'\n    size += recon.sizeOfValue(key);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(64/*'@'*/);\n      step = 4;\n    }\n    if (step === 4) {\n      if (part === void 0) {\n        part = recon.writeValue(output, key);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return recon.writeThen(output, then);\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetAttrSelectorWriter<I, V>(recon, key, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, key: V, then: V): Writer {\n    return GetAttrSelectorWriter.write(output, recon, key, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class GetItemSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly index: V;\n  private readonly then: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, index: V, then: V, part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.index = index;\n    this.then = then;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return GetItemSelectorWriter.write(output, this.recon, this.index, this.then,\n                                       this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, index: V, then: V): number {\n    let size = 2; // \"$#\"\n    size += recon.sizeOfValue(index);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static sizeOfThen<I, V>(recon: ReconWriter<I, V>, index: V, then: V): number {\n    let size = 1; // '#'\n    size += recon.sizeOfValue(index);\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, index: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 2;\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(35/*'#'*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (part === void 0) {\n        part = recon.writeValue(output, index);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        return recon.writeThen(output, then);\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new GetItemSelectorWriter<I, V>(recon, index, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, index: V, then: V): Writer {\n    return GetItemSelectorWriter.write(output, recon, index, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class KeysSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly then: V;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this.recon = recon;\n    this.then = then;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return KeysSelectorWriter.write(output, this.recon, this.then, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') '*' ':'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new KeysSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return KeysSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class ValuesSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly then: V;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this.recon = recon;\n    this.then = then;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return ValuesSelectorWriter.write(output, this.recon, this.then, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') ':' '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(58/*':'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ValuesSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return ValuesSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class ChildrenSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly then: V;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this.recon = recon;\n    this.then = then;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return ChildrenSelectorWriter.write(output, this.recon, this.then, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 2; // ('$' | '.') '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new ChildrenSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return ChildrenSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class DescendantsSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly then: V;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, then: V, step?: number) {\n    super();\n    this.recon = recon;\n    this.then = then;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return DescendantsSelectorWriter.write(output, this.recon, this.then, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, then: V): number {\n    let size = 3; // ('$' | '.') '*' '*'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, then: V,\n                     step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 3;\n    } else if (step === 2 && output.isCont()) {\n      output = output.write(46/*'.'*/);\n      step = 3;\n    }\n    if (step === 3 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      step = 4;\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(42/*'*'*/);\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new DescendantsSelectorWriter<I, V>(recon, then, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>, then: V): Writer {\n    return DescendantsSelectorWriter.write(output, recon, then, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {ReconWriter} from \"./ReconWriter\";\n\n/** @internal */\nexport class FilterSelectorWriter<I, V> extends Writer {\n  private readonly recon: ReconWriter<I, V>;\n  private readonly predicate: V;\n  private readonly then: V;\n  private readonly part: Writer | undefined;\n  private readonly step: number | undefined;\n\n  constructor(recon: ReconWriter<I, V>, predicate: V, then: V,\n              part?: Writer, step?: number) {\n    super();\n    this.recon = recon;\n    this.predicate = predicate;\n    this.then = then;\n    this.part = part;\n    this.step = step;\n  }\n\n  override pull(output: Output): Writer {\n    return FilterSelectorWriter.write(output, this.recon, this.predicate,\n                                      this.then, this.part, this.step);\n  }\n\n  static sizeOf<I, V>(recon: ReconWriter<I, V>, predicate: V, then: V): number {\n    let size = 2; // '$' '['\n    size += recon.sizeOfValue(predicate);\n    size += 1; // ']'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static sizeOfThen<I, V>(recon: ReconWriter<I, V>, predicate: V, then: V): number {\n    let size = 1; // '['\n    size += recon.sizeOfValue(predicate);\n    size += 1; // ']'\n    size += recon.sizeOfThen(then);\n    return size;\n  }\n\n  static write<I, V>(output: Output, recon: ReconWriter<I, V>, predicate: V, then: V,\n                     part?: Writer, step: number = 1): Writer {\n    if (step === 1 && output.isCont()) {\n      output = output.write(36/*'$'*/);\n      step = 2;\n    }\n    if (step === 2 && output.isCont()) {\n      output = output.write(91/*'['*/);\n      step = 3;\n    }\n    if (step === 3) {\n      if (part === void 0) {\n        part = recon.writeValue(output, predicate);\n      } else {\n        part = part.pull(output);\n      }\n      if (part.isDone()) {\n        part = void 0;\n        step = 4;\n      } else if (part.isError()) {\n        return part.asError();\n      }\n    }\n    if (step === 4 && output.isCont()) {\n      output = output.write(93/*']'*/);\n      return recon.writeThen(output, then);\n    }\n    if (output.isDone()) {\n      return Writer.error(new WriterException(\"truncated\"));\n    } else if (output.isError()) {\n      return Writer.error(output.trap());\n    }\n    return new FilterSelectorWriter<I, V>(recon, predicate, then, part, step);\n  }\n\n  static writeThen<I, V>(output: Output, recon: ReconWriter<I, V>,\n                         predicate: V, then: V): Writer {\n    return FilterSelectorWriter.write(output, recon, predicate, then, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Strings} from \"@swim/util\";\nimport type {Cursor} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Recon} from \"../Recon\";\nimport {AttrWriter} from \"./AttrWriter\";\nimport {SlotWriter} from \"./SlotWriter\";\nimport {BlockWriter} from \"./BlockWriter\";\nimport {PrimaryWriter} from \"./PrimaryWriter\";\nimport {MarkupTextWriter} from \"./MarkupTextWriter\";\nimport {DataWriter} from \"./DataWriter\";\nimport {IdentWriter} from \"./IdentWriter\";\nimport {StringWriter} from \"./StringWriter\";\nimport {LambdaFuncWriter} from \"./LambdaFuncWriter\";\nimport {ConditionalOperatorWriter} from \"./ConditionalOperatorWriter\";\nimport {InfixOperatorWriter} from \"./InfixOperatorWriter\";\nimport {PrefixOperatorWriter} from \"./PrefixOperatorWriter\";\nimport {InvokeOperatorWriter} from \"./InvokeOperatorWriter\";\nimport {LiteralSelectorWriter} from \"./LiteralSelectorWriter\";\nimport {GetSelectorWriter} from \"./GetSelectorWriter\";\nimport {GetAttrSelectorWriter} from \"./GetAttrSelectorWriter\";\nimport {GetItemSelectorWriter} from \"./GetItemSelectorWriter\";\nimport {KeysSelectorWriter} from \"./KeysSelectorWriter\";\nimport {ValuesSelectorWriter} from \"./ValuesSelectorWriter\";\nimport {ChildrenSelectorWriter} from \"./ChildrenSelectorWriter\";\nimport {DescendantsSelectorWriter} from \"./DescendantsSelectorWriter\";\nimport {FilterSelectorWriter} from \"./FilterSelectorWriter\";\n\n/**\n * Factory for constructing Recon writers.\n * @public\n */\nexport abstract class ReconWriter<I, V> {\n  abstract isField(item: I): boolean;\n\n  abstract isAttr(item: I): boolean;\n\n  abstract isSlot(item: I): boolean;\n\n  abstract isValue(item: I): boolean;\n\n  abstract isRecord(item: I): boolean;\n\n  abstract isText(item: I): boolean;\n\n  abstract isNum(item: I): boolean;\n\n  abstract isBool(item: I): boolean;\n\n  abstract isExpression(item: I): boolean;\n\n  abstract isExtant(item: I): boolean;\n\n  abstract items(item: I): Cursor<I>;\n\n  abstract item(value: V): I;\n\n  abstract key(item: I): V;\n\n  abstract value(item: I): V;\n\n  abstract string(item: I): string;\n\n  abstract precedence(item: I): number;\n\n  abstract sizeOfItem(item: I): number;\n\n  abstract writeItem(output: Output, item: I): Writer;\n\n  abstract sizeOfValue(value: V): number;\n\n  abstract writeValue(output: Output, value: V): Writer;\n\n  abstract sizeOfBlockValue(value: V): number;\n\n  abstract writeBlockValue(output: Output, value: V): Writer;\n\n  sizeOfAttr(key: V, value: V): number {\n    return AttrWriter.sizeOf(this, key, value);\n  }\n\n  writeAttr(output: Output, key: V, value: V): Writer {\n    return AttrWriter.write(output, this, key, value);\n  }\n\n  sizeOfSlot(key: V, value: V): number {\n    return SlotWriter.sizeOf(this, key, value);\n  }\n\n  writeSlot(output: Output, key: V, value: V): Writer {\n    return SlotWriter.write(output, this, key, value);\n  }\n\n  abstract sizeOfBlockItem(item: I): number;\n\n  abstract writeBlockItem(output: Output, item: I): Writer;\n\n  sizeOfBlock(item: I): number;\n  sizeOfBlock(items: Cursor<I>, inBlock: boolean, inMarkup: boolean): number;\n  sizeOfBlock(item: I | Cursor<I>, inBlock?: boolean, inMarkup?: boolean): number {\n    if (arguments.length === 3) {\n      return BlockWriter.sizeOf(this, item as Cursor<I>, inBlock!, inMarkup!);\n    } else {\n      const items = this.items(item as I);\n      if (items.hasNext()) {\n        return BlockWriter.sizeOf(this, items, this.isBlockSafe(this.items(item as I)), false);\n      } else {\n        return 2; // \"{}\"\n      }\n    }\n  }\n\n  writeBlock(output: Output, item: I): Writer;\n  writeBlock(output: Output, items: Cursor<I>, inBlock: boolean, inMarkup: boolean): Writer;\n  writeBlock(output: Output, item: I | Cursor<I>, inBlock?: boolean, inMarkup?: boolean): Writer {\n    if (arguments.length === 4) {\n      return BlockWriter.write(output, this, item as Cursor<I>, inBlock!, inMarkup!);\n    } else {\n      const items = this.items(item as I);\n      if (items.hasNext()) {\n        return BlockWriter.write(output, this, items, this.isBlockSafe(this.items(item as I)), false);\n      } else {\n        return Unicode.writeString(output, \"{}\");\n      }\n    }\n  }\n\n  sizeOfRecord(item: I): number {\n    const items = this.items(item);\n    if (items.hasNext()) {\n      return BlockWriter.sizeOf(this, items, false, false);\n    } else {\n      return 2; // \"{}\"\n    }\n  }\n\n  writeRecord(output: Output, item: I): Writer {\n    const items = this.items(item);\n    if (items.hasNext()) {\n      return BlockWriter.write(output, this, items, false, false);\n    } else {\n      return Unicode.writeString(output, \"{}\");\n    }\n  }\n\n  sizeOfPrimary(value: V): number {\n    if (this.isRecord(this.item(value))) {\n      const items = this.items(this.item(value));\n      if (items.hasNext()) {\n        return PrimaryWriter.sizeOf(this, items);\n      }\n    } else if (!this.isExtant(this.item(value))) {\n      return this.sizeOfValue(value);\n    }\n    return 2; // \"()\"\n  }\n\n  writePrimary(output: Output, value: V): Writer {\n    if (this.isRecord(this.item(value))) {\n      const items = this.items(this.item(value));\n      if (items.hasNext()) {\n        return PrimaryWriter.write(output, this, items);\n      }\n    } else if (!this.isExtant(this.item(value))) {\n      return this.writeValue(output, value);\n    }\n    return Unicode.writeString(output, \"()\");\n  }\n\n  isBlockSafe(items: Cursor<I>): boolean {\n    while (items.hasNext()) {\n      if (this.isAttr(items.next().value!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  isMarkupSafe(items: Cursor<I>): boolean {\n    if (!items.hasNext() || !this.isAttr(items.next().value!)) {\n      return false;\n    }\n    while (items.hasNext()) {\n      if (this.isAttr(items.next().value!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sizeOfMarkupText(item: I | string): number {\n    if (typeof item !== \"string\") {\n      item = this.string(item);\n    }\n    return MarkupTextWriter.sizeOf(item);\n  }\n\n  writeMarkupText(output: Output, item: I | string): Writer {\n    if (typeof item !== \"string\") {\n      item = this.string(item);\n    }\n    return MarkupTextWriter.write(output, item);\n  }\n\n  sizeOfData(length: number): number {\n    return DataWriter.sizeOf(length);\n  }\n\n  writeData(output: Output, value: Uint8Array | undefined): Writer {\n    if (value !== void 0) {\n      return DataWriter.write(output, value);\n    } else {\n      return Unicode.writeString(output, \"%\");\n    }\n  }\n\n  isIdent(value: I | string): boolean {\n    if (typeof value !== \"string\") {\n      value = this.string(value);\n    }\n    const n = value.length;\n    let c: number | undefined;\n    if (n === 0 || (c = value.codePointAt(0), c !== void 0 && !Recon.isIdentStartChar(c))) {\n      return false;\n    }\n    for (let i = Strings.offsetByCodePoints(value, 0, 1); i < n; i = Strings.offsetByCodePoints(value, i, 1)) {\n      c = value.codePointAt(i);\n      if (c === void 0 || !Recon.isIdentChar(c)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  sizeOfText(value: string): number {\n    if (this.isIdent(value)) {\n      return IdentWriter.sizeOf(value);\n    } else {\n      return StringWriter.sizeOf(value);\n    }\n  }\n\n  writeText(output: Output, value: string): Writer {\n    if (this.isIdent(value)) {\n      return IdentWriter.write(output, value);\n    } else {\n      return StringWriter.write(output, value);\n    }\n  }\n\n  sizeOfNum(value: number): number {\n    if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {\n      let size = Base10.countDigits(value);\n      if (value < 0) {\n        size += 1;\n      }\n      return size;\n    } else {\n      return (\"\" + value).length;\n    }\n  }\n\n  writeNum(output: Output, value: number): Writer {\n    if (isFinite(value) && Math.floor(value) === value && Math.abs(value) < 2147483648) {\n      return Base10.writeInteger(output, value);\n    } else {\n      return Unicode.writeString(output, \"\" + value);\n    }\n  }\n\n  sizeOfUint32(value: number): number {\n    return 10;\n  }\n\n  writeUint32(output: Output, value: number): Writer {\n    return Base16.lowercase.writeIntegerLiteral(output, value, 8);\n  }\n\n  sizeOfUint64(value: number): number {\n    return 18;\n  }\n\n  writeUint64(output: Output, value: number): Writer {\n    return Base16.lowercase.writeIntegerLiteral(output, value, 16);\n  }\n\n  sizeOfBool(value: boolean): number {\n    return value ? 4 : 5;\n  }\n\n  writeBool(output: Output, value: boolean): Writer {\n    return Unicode.writeString(output, value ? \"true\" : \"false\");\n  }\n\n  sizeOfLambdaFunc(bindings: V, template: V): number {\n    return LambdaFuncWriter.sizeOf(this, bindings, template);\n  }\n\n  writeLambdaFunc(output: Output, bindings: V, template: V): Writer {\n    return LambdaFuncWriter.write(output, this, bindings, template);\n  }\n\n  sizeOfConditionalOperator(ifTerm: I, thenTerm: I, elseTerm: I, precedence: number): number {\n    return ConditionalOperatorWriter.sizeOf(this, ifTerm, thenTerm, elseTerm, precedence);\n  }\n\n  writeConditionalOperator(output: Output, ifTerm: I, thenTerm: I, elseTerm: I, precedence: number): Writer {\n    return ConditionalOperatorWriter.write(output, this, ifTerm, thenTerm, elseTerm, precedence);\n  }\n\n  sizeOfInfixOperator(lhs: I, operator: string, rhs: I, precedence: number): number {\n    return InfixOperatorWriter.sizeOf(this, lhs, operator, rhs, precedence);\n  }\n\n  writeInfixOperator(output: Output, lhs: I, operator: string, rhs: I, precedence: number): Writer {\n    return InfixOperatorWriter.write(output, this, lhs, operator, rhs, precedence);\n  }\n\n  sizeOfPrefixOperator(operator: string, rhs: I, precedence: number): number {\n    return PrefixOperatorWriter.sizeOf(this, operator, rhs, precedence);\n  }\n\n  writePrefixOperator(output: Output, operator: string, rhs: I, precedence: number): Writer {\n    return PrefixOperatorWriter.write(output, this, operator, rhs, precedence);\n  }\n\n  sizeOfInvokeOperator(func: V, args: V): number {\n    return InvokeOperatorWriter.sizeOf(this, func, args);\n  }\n\n  writeInvokeOperator(output: Output, func: V, args: V): Writer {\n    return InvokeOperatorWriter.write(output, this, func, args);\n  }\n\n  abstract sizeOfThen(then: V): number;\n\n  abstract writeThen(output: Output, then: V): Writer;\n\n  sizeOfIdentitySelector(): number {\n    return 0;\n  }\n\n  writeIdentitySelector(output: Output): Writer {\n    return Writer.end();\n  }\n\n  sizeOfThenIdentitySelector(): number {\n    return 0;\n  }\n\n  writeThenIdentitySelector(output: Output): Writer {\n    return Writer.end();\n  }\n\n  sizeOfLiteralSelector(item: I, then: V): number {\n    return LiteralSelectorWriter.sizeOf(this, item, then);\n  }\n\n  writeLiteralSelector(output: Output, item: I, then: V): Writer {\n    return LiteralSelectorWriter.write(output, this, item, then);\n  }\n\n  sizeOfThenLiteralSelector(item: I, then: V): number {\n    return 0;\n  }\n\n  writeThenLiteralSelector(output: Output, item: I, then: V): Writer {\n    return Writer.end();\n  }\n\n  sizeOfGetSelector(key: V, then: V): number {\n    return GetSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeGetSelector(output: Output, key: V, then: V): Writer {\n    return GetSelectorWriter.write(output, this, key, then);\n  }\n\n  sizeOfThenGetSelector(key: V, then: V): number {\n    return GetSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeThenGetSelector(output: Output, key: V, then: V): Writer {\n    return GetSelectorWriter.writeThen(output, this, key, then);\n  }\n\n  sizeOfGetAttrSelector(key: V, then: V): number {\n    return GetAttrSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeGetAttrSelector(output: Output, key: V, then: V): Writer {\n    return GetAttrSelectorWriter.write(output, this, key, then);\n  }\n\n  sizeOfThenGetAttrSelector(key: V, then: V): number {\n    return GetAttrSelectorWriter.sizeOf(this, key, then);\n  }\n\n  writeThenGetAttrSelector(output: Output, key: V, then: V): Writer {\n    return GetAttrSelectorWriter.writeThen(output, this, key, then);\n  }\n\n  sizeOfGetItemSelector(index: V, then: V): number {\n    return GetItemSelectorWriter.sizeOf(this, index, then);\n  }\n\n  writeGetItemSelector(output: Output, index: V, then: V): Writer {\n    return GetItemSelectorWriter.write(output, this, index, then);\n  }\n\n  sizeOfThenGetItemSelector(index: V, then: V): number {\n    return GetItemSelectorWriter.sizeOfThen(this, index, then);\n  }\n\n  writeThenGetItemSelector(output: Output, index: V, then: V): Writer {\n    return GetItemSelectorWriter.writeThen(output, this, index, then);\n  }\n\n  sizeOfKeysSelector(then: V): number {\n    return KeysSelectorWriter.sizeOf(this, then);\n  }\n\n  writeKeysSelector(output: Output, then: V): Writer {\n    return KeysSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenKeysSelector(then: V): number {\n    return KeysSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenKeysSelector(output: Output, then: V): Writer {\n    return KeysSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfValuesSelector(then: V): number {\n    return ValuesSelectorWriter.sizeOf(this, then);\n  }\n\n  writeValuesSelector(output: Output, then: V): Writer {\n    return ValuesSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenValuesSelector(then: V): number {\n    return ValuesSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenValuesSelector(output: Output, then: V): Writer {\n    return ValuesSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfChildrenSelector(then: V): number {\n    return ChildrenSelectorWriter.sizeOf(this, then);\n  }\n\n  writeChildrenSelector(output: Output, then: V): Writer {\n    return ChildrenSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenChildrenSelector(then: V): number {\n    return ChildrenSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenChildrenSelector(output: Output, then: V): Writer {\n    return ChildrenSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfDescendantsSelector(then: V): number {\n    return DescendantsSelectorWriter.sizeOf(this, then);\n  }\n\n  writeDescendantsSelector(output: Output, then: V): Writer {\n    return DescendantsSelectorWriter.write(output, this, then);\n  }\n\n  sizeOfThenDescendantsSelector(then: V): number {\n    return DescendantsSelectorWriter.sizeOf(this, then);\n  }\n\n  writeThenDescendantsSelector(output: Output, then: V): Writer {\n    return DescendantsSelectorWriter.writeThen(output, this, then);\n  }\n\n  sizeOfFilterSelector(predicate: V, then: V): number {\n    return FilterSelectorWriter.sizeOf(this, predicate, then);\n  }\n\n  writeFilterSelector(output: Output, predicate: V, then: V): Writer {\n    return FilterSelectorWriter.write(output, this, predicate, then);\n  }\n\n  sizeOfThenFilterSelector(predicate: V, then: V): number {\n    return FilterSelectorWriter.sizeOfThen(this, predicate, then);\n  }\n\n  writeThenFilterSelector(output: Output, predicate: V, then: V): Writer {\n    return FilterSelectorWriter.writeThen(output, this, predicate, then);\n  }\n\n  sizeOfExtant(): number {\n    return 0;\n  }\n\n  writeExtant(output: Output): Writer {\n    return Writer.end();\n  }\n\n  sizeOfAbsent(): number {\n    return 0;\n  }\n\n  writeAbsent(output: Output): Writer {\n    return Writer.end();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Cursor} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport {WriterException} from \"@swim/codec\";\nimport {Writer} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Field} from \"@swim/structure\";\nimport {Attr} from \"@swim/structure\";\nimport {Slot} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Data} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Num} from \"@swim/structure\";\nimport {Bool} from \"@swim/structure\";\nimport {Expression} from \"@swim/structure\";\nimport {Operator} from \"@swim/structure\";\nimport {Selector} from \"@swim/structure\";\nimport {Func} from \"@swim/structure\";\nimport {Extant} from \"@swim/structure\";\nimport {Absent} from \"@swim/structure\";\nimport {ChildrenSelector} from \"@swim/structure\";\nimport {DescendantsSelector} from \"@swim/structure\";\nimport {FilterSelector} from \"@swim/structure\";\nimport {GetAttrSelector} from \"@swim/structure\";\nimport {GetItemSelector} from \"@swim/structure\";\nimport {GetSelector} from \"@swim/structure\";\nimport {IdentitySelector} from \"@swim/structure\";\nimport {KeysSelector} from \"@swim/structure\";\nimport {LiteralSelector} from \"@swim/structure\";\nimport {ValuesSelector} from \"@swim/structure\";\nimport {BinaryOperator} from \"@swim/structure\";\nimport {ConditionalOperator} from \"@swim/structure\";\nimport {InvokeOperator} from \"@swim/structure\";\nimport {UnaryOperator} from \"@swim/structure\";\nimport {BridgeFunc} from \"@swim/structure\";\nimport {LambdaFunc} from \"@swim/structure\";\nimport {ReconWriter} from \"./ReconWriter\";\n\n/** @public */\nexport class ReconStructureWriter extends ReconWriter<Item, Value> {\n  override isField(item: Item): boolean {\n    return item instanceof Field;\n  }\n\n  override isAttr(item: Item): boolean {\n    return item instanceof Attr;\n  }\n\n  override isSlot(item: Item): boolean {\n    return item instanceof Slot;\n  }\n\n  override isValue(item: Item): boolean {\n    return item instanceof Value;\n  }\n\n  override isRecord(item: Item): boolean {\n    return item instanceof Record;\n  }\n\n  override isText(item: Item): boolean {\n    return item instanceof Text;\n  }\n\n  override isNum(item: Item): boolean {\n    return item instanceof Num;\n  }\n\n  override isBool(item: Item): boolean {\n    return item instanceof Bool;\n  }\n\n  override isExpression(item: Item): boolean {\n    return item instanceof Expression;\n  }\n\n  override isExtant(item: Item): boolean {\n    return item instanceof Extant;\n  }\n\n  override items(item: Item): Cursor<Item> {\n    return item.iterator();\n  }\n\n  override item(value: Value): Item {\n    return value;\n  }\n\n  override key(item: Item): Value {\n    return item.key;\n  }\n\n  override value(item: Item): Value {\n    return item.toValue();\n  }\n\n  override string(item: Item): string {\n    return item.stringValue(\"\");\n  }\n\n  override precedence(item: Item): number {\n    return item.precedence;\n  }\n\n  override sizeOfItem(item: Item): number {\n    if (item instanceof Field) {\n      if (item instanceof Attr) {\n        return this.sizeOfAttr(item.key, item.value);\n      } else if (item instanceof Slot) {\n        return this.sizeOfSlot(item.key, item.value);\n      }\n    } else if (item instanceof Value) {\n      return this.sizeOfValue(item);\n    }\n    throw new WriterException(\"No Recon serialization for \" + item);\n  }\n\n  override writeItem(output: Output, item: Item): Writer {\n    if (item instanceof Field) {\n      if (item instanceof Attr) {\n        return this.writeAttr(output, item.key, item.value);\n      } else if (item instanceof Slot) {\n        return this.writeSlot(output, item.key, item.value);\n      }\n    } else if (item instanceof Value) {\n      return this.writeValue(output, item);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + item));\n  }\n\n  override sizeOfValue(value: Value): number {\n    if (value instanceof Record) {\n      return this.sizeOfRecord(value);\n    } else if (value instanceof Data) {\n      return this.sizeOfData(value.size);\n    } else if (value instanceof Text) {\n      return this.sizeOfText(value.value);\n    } else if (value instanceof Num) {\n      if (value.isUint32()) {\n        return this.sizeOfUint32(value.value);\n      } else if (value.isUint64()) {\n        return this.sizeOfUint64(value.value);\n      } else {\n        return this.sizeOfNum(value.value);\n      }\n    } else if (value instanceof Bool) {\n      return this.sizeOfBool(value.value);\n    } else if (value instanceof Selector) {\n      return this.sizeOfSelector(value);\n    } else if (value instanceof Operator) {\n      return this.sizeOfOperator(value);\n    } else if (value instanceof Func) {\n      return this.sizeOfFunc(value);\n    } else if (value instanceof Extant) {\n      return this.sizeOfExtant();\n    } else if (value instanceof Absent) {\n      return this.sizeOfAbsent();\n    }\n    throw new WriterException(\"No Recon serialization for \" + value);\n  }\n\n  override writeValue(output: Output, value: Value): Writer {\n    if (value instanceof Record) {\n      return this.writeRecord(output, value);\n    } else if (value instanceof Data) {\n      return this.writeData(output, value.asUint8Array());\n    } else if (value instanceof Text) {\n      return this.writeText(output, value.value);\n    } else if (value instanceof Num) {\n      if (value.isUint32()) {\n        return this.writeUint32(output, value.value);\n      } else if (value.isUint64()) {\n        return this.writeUint64(output, value.value);\n      } else {\n        return this.writeNum(output, value.value);\n      }\n    } else if (value instanceof Bool) {\n      return this.writeBool(output, value.value);\n    } else if (value instanceof Selector) {\n      return this.writeSelector(output, value);\n    } else if (value instanceof Operator) {\n      return this.writeOperator(output, value);\n    } else if (value instanceof Func) {\n      return this.writeFunc(output, value);\n    } else if (value instanceof Extant) {\n      return this.writeExtant(output);\n    } else if (value instanceof Absent) {\n      return this.writeAbsent(output);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + value));\n  }\n\n  sizeOfSelector(selector: Selector): number {\n    if (selector instanceof IdentitySelector) {\n      return this.sizeOfIdentitySelector();\n    } else if (selector instanceof LiteralSelector) {\n      return this.sizeOfLiteralSelector(selector.item, selector.then);\n    } else if (selector instanceof GetSelector) {\n      return this.sizeOfGetSelector(selector.item, selector.then);\n    } else if (selector instanceof GetAttrSelector) {\n      return this.sizeOfGetAttrSelector(selector.item, selector.then);\n    } else if (selector instanceof GetItemSelector) {\n      return this.sizeOfGetItemSelector(selector.item, selector.then);\n    } else if (selector instanceof KeysSelector) {\n      return this.sizeOfKeysSelector(selector.then);\n    } else if (selector instanceof ValuesSelector) {\n      return this.sizeOfValuesSelector(selector.then);\n    } else if (selector instanceof ChildrenSelector) {\n      return this.sizeOfChildrenSelector(selector.then);\n    } else if (selector instanceof DescendantsSelector) {\n      return this.sizeOfDescendantsSelector(selector.then);\n    } else if (selector instanceof FilterSelector) {\n      return this.sizeOfFilterSelector(selector.predicate, selector.then);\n    }\n    throw new WriterException(\"No Recon serialization for \" + selector);\n  }\n\n  writeSelector(output: Output, selector: Selector): Writer {\n    if (selector instanceof IdentitySelector) {\n      return this.writeIdentitySelector(output);\n    } else if (selector instanceof LiteralSelector) {\n      return this.writeLiteralSelector(output, selector.item, selector.then);\n    } else if (selector instanceof GetSelector) {\n      return this.writeGetSelector(output, selector.item, selector.then);\n    } else if (selector instanceof GetAttrSelector) {\n      return this.writeGetAttrSelector(output, selector.item, selector.then);\n    } else if (selector instanceof GetItemSelector) {\n      return this.writeGetItemSelector(output, selector.item, selector.then);\n    } else if (selector instanceof KeysSelector) {\n      return this.writeKeysSelector(output, selector.then);\n    } else if (selector instanceof ValuesSelector) {\n      return this.writeValuesSelector(output, selector.then);\n    } else if (selector instanceof ChildrenSelector) {\n      return this.writeChildrenSelector(output, selector.then);\n    } else if (selector instanceof DescendantsSelector) {\n      return this.writeDescendantsSelector(output, selector.then);\n    } else if (selector instanceof FilterSelector) {\n      return this.writeFilterSelector(output, selector.predicate, selector.then);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + selector));\n  }\n\n  sizeOfOperator(operator: Operator): number {\n    if (operator instanceof BinaryOperator) {\n      return this.sizeOfInfixOperator(operator.operand1, operator.operator, operator.operand2, operator.precedence);\n    } else if (operator instanceof UnaryOperator) {\n      return this.sizeOfPrefixOperator(operator.operator, operator.operand, operator.precedence);\n    } else if (operator instanceof InvokeOperator) {\n      return this.sizeOfInvokeOperator(operator.func, operator.args);\n    } else if (operator instanceof ConditionalOperator) {\n      return this.sizeOfConditionalOperator(operator.ifTerm, operator.thenTerm, operator.elseTerm, operator.precedence);\n    }\n    throw new WriterException(\"No Recon serialization for \" + operator);\n  }\n\n  writeOperator(output: Output, operator: Operator): Writer {\n    if (operator instanceof BinaryOperator) {\n      return this.writeInfixOperator(output, operator.operand1, operator.operator, operator.operand2, operator.precedence);\n    } else if (operator instanceof UnaryOperator) {\n      return this.writePrefixOperator(output, operator.operator, operator.operand, operator.precedence);\n    } else if (operator instanceof InvokeOperator) {\n      return this.writeInvokeOperator(output, operator.func, operator.args);\n    } else if (operator instanceof ConditionalOperator) {\n      return this.writeConditionalOperator(output, operator.ifTerm, operator.thenTerm, operator.elseTerm, operator.precedence);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + operator));\n  }\n\n  sizeOfFunc(func: Func): number {\n    if (func instanceof LambdaFunc) {\n      return this.sizeOfLambdaFunc(func.bindings, func.template);\n    } else if (func instanceof BridgeFunc) {\n      return 0;\n    }\n    throw new WriterException(\"No Recon serialization for \" + func);\n  }\n\n  writeFunc(output: Output, func: Func): Writer {\n    if (func instanceof LambdaFunc) {\n      return this.writeLambdaFunc(output, func.bindings, func.template);\n    } else if (func instanceof BridgeFunc) {\n      return Writer.end();\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + func));\n  }\n\n  override sizeOfBlockItem(item: Item): number {\n    if (item instanceof Field) {\n      return this.sizeOfItem(item);\n    } else if (item instanceof Value) {\n      return this.sizeOfBlockValue(item);\n    }\n    throw new WriterException(\"No Recon serialization for \" + item);\n  }\n\n  override writeBlockItem(output: Output, item: Item): Writer {\n    if (item instanceof Field) {\n      return this.writeItem(output, item);\n    } else if (item instanceof Value) {\n      return this.writeBlockValue(output, item);\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + item));\n  }\n\n  override sizeOfBlockValue(value: Value): number {\n    if (value instanceof Record) {\n      return this.sizeOfBlock(value);\n    }\n    return this.sizeOfValue(value);\n  }\n\n  override writeBlockValue(output: Output, value: Value): Writer {\n    if (value instanceof Record) {\n      return this.writeBlock(output, value);\n    }\n    return this.writeValue(output, value);\n  }\n\n  override sizeOfThen(then: Value): number {\n    if (then instanceof Selector) {\n      if (then instanceof IdentitySelector) {\n        return this.sizeOfThenIdentitySelector();\n      } else if (then instanceof LiteralSelector) {\n        return this.sizeOfThenLiteralSelector(then.item, then.then);\n      } else if (then instanceof GetSelector) {\n        return this.sizeOfThenGetSelector(then.item, then.then);\n      } else if (then instanceof GetAttrSelector) {\n        return this.sizeOfThenGetAttrSelector(then.item, then.then);\n      } else if (then instanceof GetItemSelector) {\n        return this.sizeOfThenGetItemSelector(then.item, then.then);\n      } else if (then instanceof KeysSelector) {\n        return this.sizeOfThenKeysSelector(then.then);\n      } else if (then instanceof ValuesSelector) {\n        return this.sizeOfThenValuesSelector(then.then);\n      } else if (then instanceof ChildrenSelector) {\n        return this.sizeOfThenChildrenSelector(then.then);\n      } else if (then instanceof DescendantsSelector) {\n        return this.sizeOfThenDescendantsSelector(then.then);\n      } else if (then instanceof FilterSelector) {\n        return this.sizeOfThenFilterSelector(then.predicate, then.then);\n      }\n    }\n    throw new WriterException(\"No Recon serialization for \" + then);\n  }\n\n  override writeThen(output: Output, then: Value): Writer {\n    if (then instanceof Selector) {\n      if (then instanceof IdentitySelector) {\n        return this.writeThenIdentitySelector(output);\n      } else if (then instanceof LiteralSelector) {\n        return this.writeThenLiteralSelector(output, then.item, then.then);\n      } else if (then instanceof GetSelector) {\n        return this.writeThenGetSelector(output, then.item, then.then);\n      } else if (then instanceof GetAttrSelector) {\n        return this.writeThenGetAttrSelector(output, then.item, then.then);\n      } else if (then instanceof GetItemSelector) {\n        return this.writeThenGetItemSelector(output, then.item, then.then);\n      } else if (then instanceof KeysSelector) {\n        return this.writeThenKeysSelector(output, then.then);\n      } else if (then instanceof ValuesSelector) {\n        return this.writeThenValuesSelector(output, then.then);\n      } else if (then instanceof ChildrenSelector) {\n        return this.writeThenChildrenSelector(output, then.then);\n      } else if (then instanceof DescendantsSelector) {\n        return this.writeThenDescendantsSelector(output, then.then);\n      } else if (then instanceof FilterSelector) {\n        return this.writeThenFilterSelector(output, then.predicate, then.then);\n      }\n    }\n    return Writer.error(new WriterException(\"No Recon serialization for \" + then));\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\nimport type {UriSchemeLike} from \"./UriScheme\";\nimport {UriScheme} from \"./\"; // forward import\nimport type {UriAuthorityLike} from \"./UriAuthority\";\nimport type {UriAuthorityInit} from \"./UriAuthority\";\nimport {UriAuthority} from \"./\"; // forward import\nimport type {UriUserLike} from \"./UriUser\";\nimport type {UriUser} from \"./UriUser\";\nimport type {UriHostLike} from \"./UriHost\";\nimport type {UriHost} from \"./UriHost\";\nimport type {UriPortLike} from \"./UriPort\";\nimport type {UriPort} from \"./UriPort\";\nimport type {UriPathLike} from \"./UriPath\";\nimport {UriPath} from \"./\"; // forward import\nimport {UriPathBuilder} from \"./\"; // forward import\nimport type {UriQueryLike} from \"./UriQuery\";\nimport {UriQuery} from \"./\"; // forward import\nimport {UriQueryBuilder} from \"./\"; // forward import\nimport type {UriFragmentLike} from \"./UriFragment\";\nimport {UriFragment} from \"./\"; // forward import\nimport {UriSchemeParser} from \"./\"; // forward import\nimport {UriAuthorityParser} from \"./\"; // forward import\nimport {UriPathParser} from \"./\"; // forward import\nimport {UriQueryParser} from \"./\"; // forward import\nimport {UriFragmentParser} from \"./\"; // forward import\n\n/** @public */\nexport type UriLike = Uri | UriInit | string;\n\n/** @public */\nexport const UriLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriLike {\n    return instance instanceof Uri\n        || UriInit[Symbol.hasInstance](instance)\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport interface UriInit extends UriAuthorityInit {\n  /** @internal */\n  readonly typeid?: \"UriInit\";\n  scheme?: UriSchemeLike;\n  authority?: UriAuthorityLike;\n  path?: UriPathLike;\n  query?: UriQueryLike;\n  fragment?: UriFragmentLike;\n}\n\n/** @public */\nexport const UriInit = {\n  [Symbol.hasInstance](instance: unknown): instance is UriInit {\n    return Objects.hasAnyKey<UriInit>(instance, \"scheme\", \"authority\", \"path\", \"query\", \"fragment\");\n  },\n};\n\n/** @public */\nexport class Uri implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  constructor(scheme: UriScheme, authority: UriAuthority, path: UriPath,\n              query: UriQuery, fragment: UriFragment) {\n    this.scheme = scheme;\n    this.authority = authority;\n    this.path = path;\n    this.query = query;\n    this.fragment = fragment;\n    this.hashValue = void 0;\n    this.stringValue = void 0;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"Uri\";\n\n  likeType?(like: UriInit | string): void;\n\n  isDefined(): boolean {\n    return this.scheme.isDefined() || this.authority.isDefined() || this.path.isDefined()\n        || this.query.isDefined() || this.fragment.isDefined();\n  }\n\n  isEmpty(): boolean {\n    return !this.scheme.isDefined() && !this.authority.isDefined() && this.path.isEmpty()\n        && !this.query.isDefined() && !this.fragment.isDefined();\n  }\n\n  readonly scheme: UriScheme;\n\n  withScheme(scheme: UriSchemeLike): Uri {\n    scheme = UriScheme.fromLike(scheme);\n    if (scheme === this.scheme) {\n      return this;\n    }\n    return this.copy(scheme, this.authority, this.path, this.query, this.fragment);\n  }\n\n  get schemePart(): string {\n    return this.scheme.toString();\n  }\n\n  withSchemePart(schemePart: string): Uri {\n    return this.withScheme(UriScheme.parse(schemePart));\n  }\n\n  get schemeName(): string {\n    return this.scheme.name;\n  }\n\n  withSchemeName(schemeName: string): Uri {\n    return this.withScheme(UriScheme.create(schemeName));\n  }\n\n  readonly authority: UriAuthority;\n\n  withAuthority(authority: UriAuthorityLike): Uri {\n    authority = UriAuthority.fromLike(authority);\n    if (authority === this.authority) {\n      return this;\n    }\n    return this.copy(this.scheme, authority, this.path, this.query, this.fragment);\n  }\n\n  get authorityPart(): string {\n    return this.authority.toString();\n  }\n\n  withAuthorityPart(authorityPart: string): Uri {\n    return this.withAuthority(UriAuthority.parse(authorityPart));\n  }\n\n  get user(): UriUser {\n    return this.authority.user;\n  }\n\n  withUser(user: UriUserLike): Uri {\n    return this.withAuthority(this.authority.withUser(user));\n  }\n\n  get userPart(): string {\n    return this.authority.userPart;\n  }\n\n  withUserPart(userPart: string): Uri {\n    return this.withAuthority(this.authority.withUserPart(userPart));\n  }\n\n  get username(): string | undefined {\n    return this.authority.username;\n  }\n\n  withUsername(username: string | undefined, password?: string): Uri {\n    if (arguments.length === 1) {\n      return this.withAuthority(this.authority.withUsername(username));\n    } else if (arguments.length === 2) {\n      return this.withAuthority(this.authority.withUsername(username, password));\n    }\n    throw new Error(arguments.toString());\n  }\n\n  get password(): string | undefined {\n    return this.authority.password;\n  }\n\n  withPassword(password: string | undefined): Uri {\n    return this.withAuthority(this.authority.withPassword(password));\n  }\n\n  get host(): UriHost {\n    return this.authority.host;\n  }\n\n  withHost(host: UriHostLike): Uri {\n    return this.withAuthority(this.authority.withHost(host));\n  }\n\n  get hostPart(): string {\n    return this.authority.hostPart;\n  }\n\n  withHostPart(hostPart: string): Uri {\n    return this.withAuthority(this.authority.withHostPart(hostPart));\n  }\n\n  get hostAddress(): string {\n    return this.authority.hostAddress;\n  }\n\n  get hostName(): string | undefined {\n    return this.authority.hostName;\n  }\n\n  withHostName(hostName: string): Uri {\n    return this.withAuthority(this.authority.withHostName(hostName));\n  }\n\n  get hostIPv4(): string | undefined {\n    return this.authority.hostIPv4;\n  }\n\n  withHostIPv4(hostIPv4: string): Uri {\n    return this.withAuthority(this.authority.withHostIPv4(hostIPv4));\n  }\n\n  get hostIPv6(): string | undefined {\n    return this.authority.hostIPv6;\n  }\n\n  withHostIPv6(hostIPv6: string): Uri {\n    return this.withAuthority(this.authority.withHostIPv6(hostIPv6));\n  }\n\n  get port(): UriPort {\n    return this.authority.port;\n  }\n\n  withPort(port: UriPortLike): Uri {\n    return this.withAuthority(this.authority.withPort(port));\n  }\n\n  get portPart(): string {\n    return this.authority.portPart;\n  }\n\n  withPortPart(portPart: string): Uri {\n    return this.withAuthority(this.authority.withPortPart(portPart));\n  }\n\n  get portNumber(): number {\n    return this.authority.portNumber;\n  }\n\n  withPortNumber(portNumber: number): Uri {\n    return this.withAuthority(this.authority.withPortNumber(portNumber));\n  }\n\n  readonly path: UriPath;\n\n  withPath(...components: UriPathLike[]): Uri {\n    const path = UriPath.of(...components);\n    if (path === this.path) {\n      return this;\n    }\n    return this.copy(this.scheme, this.authority, path, this.query, this.fragment);\n  }\n\n  get pathPart(): string {\n    return this.path.toString();\n  }\n\n  withPathPart(pathPart: string): Uri {\n    return this.withPath(UriPath.parse(pathPart));\n  }\n\n  get pathName(): string {\n    return this.path.name;\n  }\n\n  withPathName(pathName: string): Uri {\n    return this.withPath(this.path.withName(pathName));\n  }\n\n  parentPath(): UriPath {\n    return this.path.parent();\n  }\n\n  basePath(): UriPath {\n    return this.path.base();\n  }\n\n  parent(): Uri {\n    return Uri.create(this.scheme, this.authority, this.path.parent());\n  }\n\n  base(): Uri {\n    return Uri.create(this.scheme, this.authority, this.path.base());\n  }\n\n  appendedPath(...components: UriPathLike[]): Uri {\n    return this.withPath(this.path.appended(...components));\n  }\n\n  appendedSlash(): Uri {\n    return this.withPath(this.path.appendedSlash());\n  }\n\n  appendedSegment(segment: string): Uri {\n    return this.withPath(this.path.appendedSegment(segment));\n  }\n\n  prependedPath(...components: UriPathLike[]): Uri {\n    return this.withPath(this.path.prepended(...components));\n  }\n\n  prependedSlash(): Uri {\n    return this.withPath(this.path.prependedSlash());\n  }\n\n  prependedSegment(segment: string): Uri {\n    return this.withPath(this.path.prependedSegment(segment));\n  }\n\n  readonly query: UriQuery;\n\n  withQuery(query: UriQueryLike): Uri {\n    query = UriQuery.fromLike(query);\n    if (query === this.query) {\n      return this;\n    }\n    return this.copy(this.scheme, this.authority, this.path, query, this.fragment);\n  }\n\n  get queryPart(): string {\n    return this.query.toString();\n  }\n\n  withQueryPart(query: string): Uri {\n    return this.withQuery(UriQuery.parse(query));\n  }\n\n  updatedQuery(key: string, value: string): Uri {\n    return this.withQuery(this.query.updated(key, value));\n  }\n\n  removedQuery(key: string): Uri {\n    return this.withQuery(this.query.removed(key));\n  }\n\n  appendedQuery(key: string | undefined, value: string): Uri;\n  appendedQuery(params: UriQueryLike): Uri;\n  appendedQuery(key: UriQueryLike | undefined, value?: string): Uri {\n    return this.withQuery(this.query.appended(key as any, value as any));\n  }\n\n  prependedQuery(key: string | undefined, value: string): Uri;\n  prependedQuery(params: UriQueryLike): Uri;\n  prependedQuery(key: UriQueryLike | undefined, value?: string): Uri {\n    return this.withQuery(this.query.prepended(key as any, value as any));\n  }\n\n  readonly fragment: UriFragment;\n\n  withFragment(fragment: UriFragmentLike): Uri {\n    fragment = UriFragment.fromLike(fragment);\n    if (fragment === this.fragment) {\n      return this;\n    }\n    return Uri.create(this.scheme, this.authority, this.path, this.query, fragment);\n  }\n\n  get fragmentPart(): string {\n    return this.fragment.toString();\n  }\n\n  withFragmentPart(fragmentPart: string): Uri {\n    return this.withFragment(UriFragment.parse(fragmentPart));\n  }\n\n  get fragmentIdentifier(): string | undefined {\n    return this.fragment.identifier;\n  }\n\n  withFragmentIdentifier(fragmentIdentifier: string | undefined): Uri {\n    return this.withFragment(UriFragment.create(fragmentIdentifier));\n  }\n\n  endpoint(): Uri {\n    if (!this.path.isDefined() && !this.query.isDefined() && !this.fragment.isDefined()) {\n      return this;\n    }\n    return Uri.create(this.scheme, this.authority);\n  }\n\n  resolve(relative: UriLike): Uri {\n    const that = Uri.fromLike(relative);\n    if (that.scheme.isDefined()) {\n      return this.copy(that.scheme,\n                       that.authority,\n                       that.path.removeDotSegments(),\n                       that.query,\n                       that.fragment);\n    } else if (that.authority.isDefined()) {\n      return this.copy(this.scheme,\n                       that.authority,\n                       that.path.removeDotSegments(),\n                       that.query,\n                       that.fragment);\n    } else if (that.path.isEmpty()) {\n      return this.copy(this.scheme,\n                       this.authority,\n                       this.path,\n                       that.query.isDefined() ? that.query : this.query,\n                       that.fragment);\n    } else if (that.path.isAbsolute()) {\n      return this.copy(this.scheme,\n                       this.authority,\n                       that.path.removeDotSegments(),\n                       that.query,\n                       that.fragment);\n    }\n    return this.copy(this.scheme,\n                     this.authority,\n                     this.merge(that.path).removeDotSegments(),\n                     that.query,\n                     that.fragment);\n  }\n\n  /** @internal */\n  merge(relative: UriPath): UriPath {\n    if (this.authority.isDefined() && this.path.isEmpty()) {\n      return relative.prependedSlash();\n    } else if (this.path.isEmpty()) {\n      return relative;\n    }\n    return this.path.merge(relative);\n  }\n\n  unresolve(absolute: UriLike): Uri {\n    const that = Uri.fromLike(absolute);\n    if (!this.scheme.equals(that.scheme) || !this.authority.equals(that.authority)) {\n      return that;\n    }\n    return Uri.create(UriScheme.undefined(),\n                      UriAuthority.undefined(),\n                      this.path.unmerge(that.path),\n                      that.query,\n                      that.fragment);\n  }\n\n  protected copy(scheme: UriScheme, authority: UriAuthority, path: UriPath,\n                 query: UriQuery, fragment: UriFragment): Uri {\n    return Uri.create(scheme, authority, path, query, fragment);\n  }\n\n  toLike(): {scheme?: string, username?: string, password?: string, host?: string,\n             port?: number, path: string[], query?: {[key: string]: string},\n             fragment?: string} {\n    const uri = {} as {scheme?: string, username?: string, password?: string, host?: string,\n                       port?: number, path: string[], query?: {[key: string]: string},\n                       fragment?: string};\n    uri.scheme = this.scheme.toLike();\n    this.authority.toLike(uri);\n    uri.path = this.path.toLike();\n    uri.query = this.query.toLike();\n    uri.fragment = this.fragment.toLike();\n    return uri;\n  }\n\n  /** @override */\n  compareTo(that: Uri): number {\n    if (that instanceof Uri) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof Uri) {\n      return this.toString() === that.toString();\n    }\n    return false;\n  }\n\n  /** @internal */\n  readonly hashValue: number | undefined;\n\n  /** @override */\n  hashCode(): number {\n    let hashValue = this.hashValue;\n    if (hashValue === void 0) {\n      hashValue = Strings.hash(this.toString());\n      (this as Mutable<this>).hashValue = hashValue;\n    }\n    return hashValue;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Uri\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"parse\").write(40/*'('*/).write(34/*'\"'*/).display(this).write(34/*'\"'*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"empty\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else {\n      if (this.scheme.isDefined()) {\n        output = output.display(this.scheme).write(58/*':'*/);\n      }\n      if (this.authority.isDefined()) {\n        output = output.write(47/*'/'*/).write(47/*'/'*/).display(this.authority);\n      }\n      output = output.display(this.path);\n      if (this.query.isDefined()) {\n        output = output.write(63/*'?'*/).display(this.query);\n      }\n      if (this.fragment.isDefined()) {\n        output = output.write(35/*'#'*/).display(this.fragment);\n      }\n    }\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  @Lazy\n  static empty(): Uri {\n    return new Uri(UriScheme.undefined(), UriAuthority.undefined(), UriPath.empty(),\n                         UriQuery.undefined(), UriFragment.undefined());\n  }\n\n  static create(scheme: UriScheme = UriScheme.undefined(),\n                authority: UriAuthority = UriAuthority.undefined(),\n                path: UriPath = UriPath.empty(),\n                query: UriQuery = UriQuery.undefined(),\n                fragment: UriFragment = UriFragment.undefined()): Uri {\n    if (!scheme.isDefined() && !authority.isDefined() && !path.isDefined()\n        && !query.isDefined() && !fragment.isDefined()) {\n      return Uri.empty();\n    }\n    return new Uri(scheme, authority, path, query, fragment);\n  }\n\n  static fromLike<T extends UriLike | null | undefined>(value: T): Uri | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof Uri) {\n      return value as Uri | Uninitable<T>;\n    } else if (typeof value === \"object\") {\n      return Uri.fromInit(value);\n    } else if (typeof value === \"string\") {\n      return Uri.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: UriInit): Uri {\n    const scheme = UriScheme.fromLike(init.scheme);\n    const authority = UriAuthority.fromLike(init.authority);\n    const path = UriPath.fromLike(init.path);\n    const query = UriQuery.fromLike(init.query);\n    const fragment = UriFragment.fromLike(init.fragment);\n    return this.create(scheme, authority, path, query, fragment);\n  }\n\n  static scheme(scheme: UriSchemeLike): Uri {\n    scheme = UriScheme.fromLike(scheme);\n    return Uri.create(scheme, void 0, void 0, void 0, void 0);\n  }\n\n  static schemePart(schemePart: string): Uri {\n    const scheme = UriScheme.parse(schemePart);\n    return Uri.create(scheme, void 0, void 0, void 0, void 0);\n  }\n\n  static schemeName(name: string): Uri {\n    const scheme = UriScheme.create(name);\n    return Uri.create(scheme, void 0, void 0, void 0, void 0);\n  }\n\n  static authority(authority: UriAuthorityLike): Uri {\n    authority = UriAuthority.fromLike(authority);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static authorityPart(authorityPart: string): Uri {\n    const authority = UriAuthority.parse(authorityPart);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static user(user: UriUserLike): Uri {\n    const authority = UriAuthority.user(user);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static userPart(userPart: string): Uri {\n    const authority = UriAuthority.userPart(userPart);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static username(username: string, password?: string): Uri {\n    const authority = UriAuthority.username(username, password);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static password(password: string): Uri {\n    const authority = UriAuthority.password(password);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static host(host: UriHostLike): Uri {\n    const authority = UriAuthority.host(host);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static hostPart(hostPart: string): Uri {\n    const authority = UriAuthority.hostPart(hostPart);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static hostName(hostName: string): Uri {\n    const authority = UriAuthority.hostName(hostName);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static hostIPv4(hostIPv4: string): Uri {\n    const authority = UriAuthority.hostIPv4(hostIPv4);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static hostIPv6(hostIPv6: string): Uri {\n    const authority = UriAuthority.hostIPv6(hostIPv6);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static port(port: UriPortLike): Uri {\n    const authority = UriAuthority.port(port);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static portPart(portPart: string): Uri {\n    const authority = UriAuthority.portPart(portPart);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static portNumber(portNumber: number): Uri {\n    const authority = UriAuthority.portNumber(portNumber);\n    return Uri.create(void 0, authority, void 0, void 0, void 0);\n  }\n\n  static path(...components: UriPathLike[]): Uri {\n    const path = UriPath.of(...components);\n    return Uri.create(void 0, void 0, path, void 0, void 0);\n  }\n\n  static pathPart(pathPart: string): Uri {\n    const path = UriPath.parse(pathPart);\n    return Uri.create(void 0, void 0, path, void 0, void 0);\n  }\n\n  static query(query: UriQueryLike): Uri {\n    query = UriQuery.fromLike(query);\n    return Uri.create(void 0, void 0, void 0, query, void 0);\n  }\n\n  static queryPart(queryPart: string): Uri {\n    const query = UriQuery.parse(queryPart);\n    return Uri.create(void 0, void 0, void 0, query, void 0);\n  }\n\n  static fragment(fragment: UriFragmentLike): Uri {\n    fragment = UriFragment.fromLike(fragment);\n    return Uri.create(void 0, void 0, void 0, void 0, fragment);\n  }\n\n  static fragmentPart(fragmentPart: string): Uri {\n    const fragment = UriFragment.parse(fragmentPart);\n    return Uri.create(void 0, void 0, void 0, void 0, fragment);\n  }\n\n  static fragmentIdentifier(fragmentIdentifier: string | undefined): Uri {\n    const fragment = UriFragment.create(fragmentIdentifier);\n    return Uri.create(void 0, void 0, void 0, void 0, fragment);\n  }\n\n  /** @internal */\n  static ParseCacheCapacity: number = 256;\n\n  /** @internal */\n  @Lazy\n  static parseCache(): Map<string, Uri> {\n    return new Map<string, Uri>();\n  }\n\n  static parse(input: Input): Parser<Uri>;\n  static parse(string: string): Uri;\n  static parse(string: Input | string): Parser<Uri> | Uri {\n    const parseCache = this.parseCache();\n    let uri: Uri | undefined;\n    if (typeof string === \"string\") {\n      uri = parseCache.get(string);\n      if (uri !== void 0) {\n        parseCache.delete(string);\n      }\n    }\n\n    let parser: Parser<Uri>;\n    if (uri === void 0) {\n      const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n      parser = UriParser.parse(input);\n      if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n        parser = Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n\n    if (typeof string === \"string\") {\n      if (uri === void 0) {\n        uri = parser!.bind();\n      }\n      parseCache.set(string, uri);\n      const capacity = Uri.ParseCacheCapacity;\n      let size = parseCache.size;\n      if (size > capacity) {\n        const keys = parseCache.keys();\n        let next: IteratorResult<string>;\n        while (size > capacity && (next = keys.next()).done !== true) {\n          parseCache.delete(next.value);\n          size -= 1;\n        }\n      }\n      return uri;\n    }\n    return parser!;\n  }\n\n  static pathBuilder(): UriPathBuilder {\n    return new UriPathBuilder();\n  }\n\n  static queryBuilder(): UriQueryBuilder {\n    return new UriQueryBuilder();\n  }\n\n  @Lazy\n  static form(): Form<Uri, UriLike> {\n    return new UriForm(Uri.empty());\n  }\n\n  /** @internal */\n  static isUnreservedChar(c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c === 45/*'-'*/ || c === 46/*'.'*/\n        || c === 95/*'_'*/ || c === 126/*'~'*/;\n  }\n\n  /** @internal */\n  static isSubDelimChar(c: number): boolean {\n    return c === 33/*'!'*/ || c === 36/*'$'*/\n        || c === 38/*'&'*/ || c === 40/*'('*/\n        || c === 41/*')'*/ || c === 42/*'*'*/\n        || c === 43/*'+'*/ || c === 44/*','*/\n        || c === 59/*';'*/ || c === 61/*'='*/\n        || c === 39/*'\\''*/;\n  }\n\n  /** @internal */\n  static isSchemeChar(c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/\n        || c >= 48/*'0'*/ && c <= 57/*'9'*/\n        || c === 43/*'+'*/ || c === 45/*'-'*/\n        || c === 46/*'.'*/;\n  }\n\n  /** @internal */\n  static isUserInfoChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c)\n        || c === 58/*':'*/;\n  }\n\n  /** @internal */\n  static isUserChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c);\n  }\n\n  /** @internal */\n  static isHostChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c);\n  }\n\n  /** @internal */\n  static isPathChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c)\n        || c === 58/*':'*/ || c === 64/*'@'*/;\n  }\n\n  /** @internal */\n  static isQueryChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c)\n        || c === 47/*'/'*/ || c === 58/*':'*/\n        || c === 63/*'?'*/ || c === 64/*'@'*/;\n  }\n\n  /** @internal */\n  static isParamChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || c === 33/*'!'*/ || c === 36/*'$'*/\n        || c === 40/*'('*/ || c === 41/*')'*/\n        || c === 42/*'*'*/ || c === 43/*'+'*/\n        || c === 44/*','*/ || c === 47/*'/'*/\n        || c === 58/*':'*/ || c === 59/*';'*/\n        || c === 63/*'?'*/ || c === 64/*'@'*/\n        || c === 39/*'\\''*/;\n  }\n\n  /** @internal */\n  static isFragmentChar(c: number): boolean {\n    return Uri.isUnreservedChar(c)\n        || Uri.isSubDelimChar(c)\n        || c === 47/*'/'*/ || c === 58/*':'*/\n        || c === 63/*'?'*/ || c === 64/*'@'*/;\n  }\n\n  /** @internal */\n  static isAlpha(c: number): boolean {\n    return c >= 65/*'A'*/ && c <= 90/*'Z'*/\n        || c >= 97/*'a'*/ && c <= 122/*'z'*/;\n  }\n\n  /** @internal */\n  static toLowerCase(c: number): number {\n    if (c >= 65/*'A'*/ && c <= 90/*'Z'*/) {\n      return c + (97/*'a'*/ - 65/*'A'*/);\n    }\n    return c;\n  }\n\n  /** @internal */\n  static writeScheme<T>(output: Output<T>, scheme: string): Output<T> {\n    if (scheme.length === 0 || !Uri.isAlpha(scheme.charCodeAt(0))) {\n      return Output.error(new Error(\"Invalid scheme: \" + scheme));\n    }\n    for (let i = 0; i < scheme.length; i += 1) {\n      const c = scheme.charCodeAt(i);\n      if (!Uri.isSchemeChar(c)) {\n        return Output.error(new Error(\"Invalid scheme: \" + scheme));\n      }\n      output = output.write(c);\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeUserInfo<T>(output: Output<T>, userInfo: string): Output<T> {\n    for (let i = 0; i < userInfo.length; i += 1) {\n      const c = userInfo.charCodeAt(i);\n      if (Uri.isUserInfoChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeUser<T>(output: Output<T>, user: string): Output<T> {\n    for (let i = 0; i < user.length; i += 1) {\n      const c = user.charCodeAt(i);\n      if (Uri.isUserChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeHost<T>(output: Output<T>, address: string): Output<T> {\n    for (let i = 0; i < address.length; i += 1) {\n      const c = address.charCodeAt(i);\n      if (Uri.isHostChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeHostLiteral<T>(output: Output<T>, address: string): Output<T> {\n    for (let i = 0; i < address.length; i += 1) {\n      const c = address.charCodeAt(i);\n      if (Uri.isHostChar(c) || c === 58/*':'*/) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writePathSegment<T>(output: Output<T>, segment: string): Output<T> {\n    for (let i = 0; i < segment.length; i += 1) {\n      const c = segment.charCodeAt(i);\n      if (Uri.isPathChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeQuery<T>(output: Output<T>, query: string): Output<T> {\n    for (let i = 0; i < query.length; i += 1) {\n      const c = query.charCodeAt(i);\n      if (Uri.isQueryChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeParam<T>(output: Output<T>, param: string): Output<T> {\n    for (let i = 0; i < param.length; i += 1) {\n      const c = param.charCodeAt(i);\n      if (Uri.isParamChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeFragment<T>(output: Output<T>, fragment: string): Output<T> {\n    for (let i = 0; i < fragment.length; i += 1) {\n      const c = fragment.charCodeAt(i);\n      if (Uri.isFragmentChar(c)) {\n        output = output.write(c);\n      } else {\n        output = Uri.writeEncoded(output, c);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writeEncoded<T>(output: Output<T>, c: number): Output<T> {\n    if (c === 0x00) { // modified UTF-8\n      output = Uri.writePctEncoded(output, 0xC0);\n      output = Uri.writePctEncoded(output, 0x80);\n    } else if (c >= 0x00 && c <= 0x7F) { // U+0000..U+007F\n      output = Uri.writePctEncoded(output, c);\n    } else if (c >= 0x80 && c <= 0x07FF) { // U+0080..U+07FF\n      output = Uri.writePctEncoded(output, 0xC0 | (c >>> 6));\n      output = Uri.writePctEncoded(output, 0x80 | (c & 0x3F));\n    } else if (c >= 0x0800 && c <= 0xFFFF) { // U+0800..U+D7FF, U+E000..U+FFFF, and surrogates\n      output = Uri.writePctEncoded(output, 0xE0 | (c >>> 12));\n      output = Uri.writePctEncoded(output, 0x80 | (c >>> 6 & 0x3F));\n      output = Uri.writePctEncoded(output, 0x80 | (c & 0x3F));\n    } else if (c >= 0x10000 && c <= 0x10FFFF) { // U+10000..U+10FFFF\n      output = Uri.writePctEncoded(output, 0xF0 | (c >>> 18));\n      output = Uri.writePctEncoded(output, 0x80 | (c >>> 12 & 0x3F));\n      output = Uri.writePctEncoded(output, 0x80 | (c >>> 6 & 0x3F));\n      output = Uri.writePctEncoded(output, 0x80 | (c & 0x3F));\n    } else { // surrogate or invalid code point\n      output = Uri.writePctEncoded(output, 0xEF);\n      output = Uri.writePctEncoded(output, 0xBF);\n      output = Uri.writePctEncoded(output, 0xBD);\n    }\n    return output;\n  }\n\n  /** @internal */\n  static writePctEncoded<T>(output: Output<T>, c: number): Output<T> {\n    const base16 = Base16.lowercase;\n    output = output.write(37/*'%'*/)\n                   .write(base16.encodeDigit(c >>> 4 & 0xF))\n                   .write(base16.encodeDigit(c       & 0xF));\n    return output;\n  }\n}\n\n/** @internal */\nexport class UriForm extends Form<Uri, UriLike> {\n  constructor(unit: Uri | undefined) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: Uri | undefined;\n\n  override withUnit(unit: Uri | undefined): Form<Uri, UriLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new UriForm(unit);\n  }\n\n  override mold(object: UriLike, item?: Item): Item {\n    object = Uri.fromLike(object);\n    if (item === void 0) {\n      return Text.from(object.toString());\n    } else {\n      return item.concat(Text.from(object.toString()));\n    }\n  }\n\n  override cast(item: Item, object?: Uri): Uri | undefined {\n    const value = item.target;\n    try {\n      const string = value.stringValue();\n      if (typeof string === \"string\") {\n        return Uri.parse(string);\n      }\n    } catch (error) {\n      // swallow\n    }\n    return void 0;\n  }\n}\n\n/** @internal */\nexport class UriParser extends Parser<Uri> {\n  private readonly schemeParser: Parser<UriScheme> | undefined;\n  private readonly authorityParser: Parser<UriAuthority> | undefined;\n  private readonly pathParser: Parser<UriPath> | undefined;\n  private readonly queryParser: Parser<UriQuery> | undefined;\n  private readonly fragmentParser: Parser<UriFragment> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(schemeParser?: Parser<UriScheme>, authorityParser?: Parser<UriAuthority>,\n              pathParser?: Parser<UriPath>, queryParser?: Parser<UriQuery>,\n              fragmentParser?: Parser<UriFragment>, step?: number) {\n    super();\n    this.schemeParser = schemeParser;\n    this.authorityParser = authorityParser;\n    this.pathParser = pathParser;\n    this.queryParser = queryParser;\n    this.fragmentParser = fragmentParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<Uri> {\n    return UriParser.parse(input, this.schemeParser, this.authorityParser, this.pathParser,\n                           this.queryParser, this.fragmentParser, this.step);\n  }\n\n  static parse(input: Input, schemeParser?: Parser<UriScheme>, authorityParser?: Parser<UriAuthority>,\n               pathParser?: Parser<UriPath>, queryParser?: Parser<UriQuery>,\n               fragmentParser?: Parser<UriFragment>, step: number = 1): Parser<Uri> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        const look = input.clone();\n        while (look.isCont() && (c = look.head(), Uri.isSchemeChar(c))) {\n          look.step();\n        }\n        if (look.isCont() && c === 58/*':'*/) {\n          step = 2;\n        } else {\n          step = 3;\n        }\n      } else if (input.isDone()) {\n        step = 3;\n      }\n    }\n    if (step === 2) {\n      if (schemeParser === void 0) {\n        schemeParser = UriSchemeParser.parse(input);\n      } else {\n        schemeParser = schemeParser.feed(input);\n      }\n      if (schemeParser.isDone()) {\n        if (input.isCont() && input.head() === 58/*':'*/) {\n          input = input.step();\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(58/*':'*/, input));\n        }\n      } else if (schemeParser.isError()) {\n        return schemeParser.asError();\n      }\n    }\n    if (step === 3) {\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 47/*'/'*/) {\n          input = input.step();\n          step = 4;\n        } else if (c === 63/*'?'*/) {\n          input = input.step();\n          step = 7;\n        } else if (c === 35/*'#'*/) {\n          input = input.step();\n          step = 8;\n        } else {\n          step = 6;\n        }\n      } else if (input.isDone()) {\n        return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                      void 0, void 0, void 0, void 0));\n      }\n    }\n    if (step === 4) {\n      if (input.isCont() && input.head() === 47/*'/'*/) {\n        input = input.step();\n        step = 5;\n      } else if (input.isCont()) {\n        const pathBuilder = new UriPathBuilder();\n        pathBuilder.addSlash();\n        pathParser = UriPathParser.parse(input, pathBuilder);\n        step = 6;\n      } else if (input.isDone()) {\n        return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                      void 0, UriPath.slash(), void 0, void 0));\n      }\n    }\n    if (step === 5) {\n      if (authorityParser === void 0) {\n        authorityParser = UriAuthorityParser.parse(input);\n      } else {\n        authorityParser = authorityParser.feed(input);\n      }\n      if (authorityParser.isDone()) {\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 63/*'?'*/) {\n            input = input.step();\n            step = 7;\n          } else if (c === 35/*'#'*/) {\n            input = input.step();\n            step = 8;\n          } else {\n            step = 6;\n          }\n        } else if (input.isDone()) {\n          return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                        authorityParser !== void 0 ? authorityParser.bind() : void 0,\n                                        void 0, void 0, void 0));\n        }\n      } else if (authorityParser.isError()) {\n        return authorityParser.asError();\n      }\n    }\n    if (step === 6) {\n      if (pathParser === void 0) {\n        pathParser = UriPathParser.parse(input);\n      } else {\n        pathParser = pathParser.feed(input);\n      }\n      if (pathParser.isDone()) {\n        if (input.isCont() && input.head() === 63/*'?'*/) {\n          input = input.step();\n          step = 7;\n        } else if (input.isCont() && input.head() === 35/*'#'*/) {\n          input = input.step();\n          step = 8;\n        } else if (!input.isEmpty()) {\n          return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                        authorityParser !== void 0 ? authorityParser.bind() : void 0,\n                                        pathParser.bind(), void 0, void 0));\n        }\n      } else if (pathParser.isError()) {\n        return pathParser.asError();\n      }\n    }\n    if (step === 7) {\n      if (queryParser === void 0) {\n        queryParser = UriQueryParser.parse(input);\n      } else {\n        queryParser = queryParser.feed(input);\n      }\n      if (queryParser.isDone()) {\n        if (input.isCont() && input.head() === 35/*'#'*/) {\n          input = input.step();\n          step = 8;\n        } else if (!input.isEmpty()) {\n          return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                        authorityParser !== void 0 ? authorityParser.bind() : void 0,\n                                        pathParser !== void 0 ? pathParser.bind() : void 0,\n                                        queryParser.bind(), void 0));\n        }\n      } else if (queryParser.isError()) {\n        return queryParser.asError();\n      }\n    }\n    if (step === 8) {\n      if (fragmentParser === void 0) {\n        fragmentParser = UriFragmentParser.parse(input);\n      } else {\n        fragmentParser = fragmentParser.feed(input);\n      }\n      if (fragmentParser.isDone()) {\n        return Parser.done(Uri.create(schemeParser !== void 0 ? schemeParser.bind() : void 0,\n                                      authorityParser !== void 0 ? authorityParser.bind() : void 0,\n                                      pathParser !== void 0 ? pathParser.bind() : void 0,\n                                      queryParser !== void 0 ? queryParser.bind() : void 0,\n                                      fragmentParser.bind()));\n      } else if (fragmentParser.isError()) {\n        return fragmentParser.asError();\n      }\n    }\n    return new UriParser(schemeParser, authorityParser, pathParser,\n                         queryParser, fragmentParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport type UriSchemeLike = UriScheme | string;\n\n/** @public */\nexport const UriSchemeLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriSchemeLike {\n    return instance instanceof UriScheme\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class UriScheme implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  constructor(name: string) {\n    this.name = name;\n  }\n\n  likeType?(like: string): void;\n\n  isDefined(): boolean {\n    return this.name.length !== 0;\n  }\n\n  readonly name: string;\n\n  toLike(): string | undefined {\n    return this.name.length !== 0 ? this.name : void 0;\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof UriScheme) {\n      return this.name.localeCompare(that.name);\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriScheme) {\n      return this.name === that.name;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.name);\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriScheme\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"parse\").write(40/*'('*/).write(34/*'\"'*/)\n                     .display(this).write(34/*'\"'*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"undefined\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    output = Uri.writeScheme(output, this.name);\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    return this.name;\n  }\n\n  @Lazy\n  static undefined(): UriScheme {\n    return new UriScheme(\"\");\n  }\n\n  static create(schemeName: string): UriScheme {\n    return new UriScheme(schemeName);\n  }\n\n  static fromLike<T extends UriSchemeLike | null | undefined>(value: T): UriScheme | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriScheme) {\n      return value as UriScheme | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return UriScheme.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriScheme>;\n  static parse(string: string): UriScheme;\n  static parse(string: Input | string): Parser<UriScheme> | UriScheme {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriSchemeParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriSchemeParser extends Parser<UriScheme> {\n  private readonly output: Output<string> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(output?: Output<string>, step?: number) {\n    super();\n    this.output = output;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriScheme> {\n    return UriSchemeParser.parse(input, this.output, this.step);\n  }\n\n  static parse(input: Input, output?: Output<string>, step: number = 1): Parser<UriScheme> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont() && (c = input.head(), Uri.isAlpha(c))) {\n        input = input.step();\n        output = output || Utf8.decodedString();\n        output = output.write(Uri.toLowerCase(c));\n        step = 2;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"scheme\", input));\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Uri.isSchemeChar(c))) {\n        input = input.step();\n        output!.write(Uri.toLowerCase(c));\n      }\n      if (!input.isEmpty()) {\n        return Parser.done(UriScheme.create(output!.bind()));\n      }\n    }\n    return new UriSchemeParser(output, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {UriUserLike} from \"./UriUser\";\nimport type {UriUserInit} from \"./UriUser\";\nimport {UriUser} from \"./\"; // forward import\nimport type {UriHostLike} from \"./UriHost\";\nimport {UriHost} from \"./\"; // forward import\nimport type {UriPortLike} from \"./UriPort\";\nimport {UriPort} from \"./\"; // forward import\nimport {UriUserParser} from \"./\"; // forward import\nimport {UriHostParser} from \"./\"; // forward import\nimport {UriPortParser} from \"./\"; // forward import\n\n/** @public */\nexport type UriAuthorityLike = UriAuthority | UriAuthorityInit | string;\n\n/** @public */\nexport const UriAuthorityLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriAuthorityLike {\n    return instance instanceof UriAuthority\n        || UriAuthorityInit[Symbol.hasInstance](instance)\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport interface UriAuthorityInit extends UriUserInit {\n  /** @internal */\n  readonly typeid?: \"UriAuthorityInit\" | \"UriInit\";\n  user?: UriUserLike;\n  host?: UriHostLike;\n  port?: UriPortLike;\n}\n\n/** @public */\nexport const UriAuthorityInit = {\n  [Symbol.hasInstance](instance: unknown): instance is UriAuthorityInit {\n    return Objects.hasAnyKey<UriAuthorityInit>(instance, \"user\", \"host\", \"port\");\n  },\n};\n\n/** @public */\nexport class UriAuthority implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  constructor(user: UriUser, host: UriHost, port: UriPort) {\n    this.user = user;\n    this.host = host;\n    this.port = port;\n    this.hashValue = void 0;\n    this.stringValue = void 0;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"UriAuthority\";\n\n  likeType?(like: UriAuthorityInit | string): void;\n\n  isDefined(): boolean {\n    return this.user.isDefined() || this.host.isDefined() || this.port.isDefined();\n  }\n\n  readonly user: UriUser;\n\n  withUser(user: UriUserLike): UriAuthority {\n    user = UriUser.fromLike(user);\n    if (user === this.user) {\n      return this;\n    }\n    return this.copy(user, this.host, this.port);\n  }\n\n  get userPart(): string {\n    return this.user.toString();\n  }\n\n  withUserPart(userPart: string): UriAuthority {\n    return this.withUser(UriUser.parse(userPart));\n  }\n\n  get username(): string | undefined {\n    return this.user.username;\n  }\n\n  withUsername(username: string | undefined, password?: string): UriAuthority {\n    if (arguments.length === 1) {\n      return this.withUser(this.user.withUsername(username));\n    } else if (arguments.length === 2) {\n      return this.withUser(UriUser.create(username, password));\n    }\n    throw new Error(arguments.toString());\n  }\n\n  get password(): string | undefined {\n    return this.user.password;\n  }\n\n  withPassword(password: string | undefined): UriAuthority {\n    return this.withUser(this.user.withPassword(password));\n  }\n\n  readonly host: UriHost;\n\n  withHost(host: UriHostLike): UriAuthority {\n    host = UriHost.fromLike(host);\n    if (host === this.host) {\n      return this;\n    }\n    return this.copy(this.user, host, this.port);\n  }\n\n  get hostPart(): string {\n    return this.host.toString();\n  }\n\n  withHostPart(hostPart: string): UriAuthority {\n    return this.withHost(UriHost.parse(hostPart));\n  }\n\n  get hostAddress(): string {\n    return this.host.address;\n  }\n\n  get hostName(): string | undefined {\n    return this.host.name;\n  }\n\n  withHostName(hostName: string): UriAuthority {\n    return this.withHost(UriHost.hostname(hostName));\n  }\n\n  get hostIPv4(): string | undefined {\n    return this.host.ipv4;\n  }\n\n  withHostIPv4(hostIPv4: string): UriAuthority {\n    return this.withHost(UriHost.ipv4(hostIPv4));\n  }\n\n  get hostIPv6(): string | undefined {\n    return this.host.ipv6;\n  }\n\n  withHostIPv6(hostIPv5: string): UriAuthority {\n    return this.withHost(UriHost.ipv6(hostIPv5));\n  }\n\n  readonly port: UriPort;\n\n  withPort(port: UriPortLike): UriAuthority {\n    port = UriPort.fromLike(port);\n    if (port === this.port) {\n      return this;\n    }\n    return this.copy(this.user, this.host, port);\n  }\n\n  get portPart(): string {\n    return this.port.toString();\n  }\n\n  withPortPart(portPart: string): UriAuthority {\n    return this.withPort(UriPort.parse(portPart));\n  }\n\n  get portNumber(): number {\n    return this.port.number;\n  }\n\n  withPortNumber(portNumber: number): UriAuthority {\n    return this.withPort(UriPort.create(portNumber));\n  }\n\n  protected copy(user: UriUser, host: UriHost, port: UriPort): UriAuthority {\n    return UriAuthority.create(user, host, port);\n  }\n\n  toLike(authority?: {username?: string, password?: string, host?: string, port?: number}):\n      {username?: string, password?: string, host?: string, port?: number} | undefined {\n    if (this.isDefined()) {\n      if (authority === void 0) {\n        authority = {};\n      }\n      this.user.toLike(authority);\n      if (this.host.isDefined()) {\n        authority.host = this.host.toLike();\n      }\n      if (this.port.isDefined()) {\n        authority.port = this.port.toLike();\n      }\n    }\n    return authority;\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof UriAuthority) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriAuthority) {\n      return this.toString() === that.toString();\n    }\n    return false;\n  }\n\n  /** @internal */\n  readonly hashValue: number | undefined;\n\n  /** @override */\n  hashCode(): number {\n    let hashValue = this.hashValue;\n    if (hashValue === void 0) {\n      hashValue = Strings.hash(this.toString());\n      (this as Mutable<this>).hashValue = hashValue;\n    }\n    return hashValue;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriAuthority\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"parse\").write(40/*'('*/).write(34/*'\"'*/)\n                     .display(this).write(34/*'\"'*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"undefined\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else {\n      const user = this.user;\n      if (user.isDefined()) {\n        output = output.display(user).write(64/*'@'*/);\n      }\n      output = output.display(this.host);\n      const port = this.port;\n      if (port.isDefined()) {\n        output = output.write(58/*':'*/).display(port);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  /** @override */\n  toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  @Lazy\n  static undefined(): UriAuthority {\n    return new UriAuthority(UriUser.undefined(), UriHost.undefined(), UriPort.undefined());\n  }\n\n  static create(user: UriUser = UriUser.undefined(),\n                host: UriHost = UriHost.undefined(),\n                port: UriPort = UriPort.undefined()): UriAuthority {\n    if (!user.isDefined() && !host.isDefined() && !port.isDefined()) {\n      return UriAuthority.undefined();\n    }\n    return new UriAuthority(user, host, port);\n  }\n\n  static fromLike<T extends UriAuthorityLike | null | undefined>(value: T): UriAuthority | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriAuthority) {\n      return value as UriAuthority | Uninitable<T>;\n    } else if (typeof value === \"object\") {\n      return UriAuthority.fromInit(value);\n    } else if (typeof value === \"string\") {\n      return UriAuthority.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: UriAuthorityInit): UriAuthority {\n    const user = UriUser.fromLike(init.user);\n    const host = UriHost.fromLike(init.host);\n    const port = UriPort.fromLike(init.port);\n    return this.create(user, host, port);\n  }\n\n  static user(user: UriUserLike): UriAuthority {\n    user = UriUser.fromLike(user);\n    return this.create(user, void 0, void 0);\n  }\n\n  static userPart(userPart: string): UriAuthority {\n    const user = UriUser.parse(userPart);\n    return this.create(user, void 0, void 0);\n  }\n\n  static username(username: string, password?: string | undefined): UriAuthority {\n    const user = UriUser.create(username, password);\n    return this.create(user, void 0, void 0);\n  }\n\n  static password(password: string): UriAuthority {\n    const user = UriUser.create(\"\", password);\n    return this.create(user, void 0, void 0);\n  }\n\n  static host(host: UriHostLike): UriAuthority {\n    host = UriHost.fromLike(host);\n    return this.create(void 0, host, void 0);\n  }\n\n  static hostPart(hostPart: string): UriAuthority {\n    const host = UriHost.parse(hostPart);\n    return this.create(void 0, host, void 0);\n  }\n\n  static hostName(hostName: string): UriAuthority {\n    const host = UriHost.hostname(hostName);\n    return this.create(void 0, host, void 0);\n  }\n\n  static hostIPv4(hostIPv4: string): UriAuthority {\n    const host = UriHost.ipv4(hostIPv4);\n    return this.create(void 0, host, void 0);\n  }\n\n  static hostIPv6(hostIPv6: string): UriAuthority {\n    const host = UriHost.ipv6(hostIPv6);\n    return this.create(void 0, host, void 0);\n  }\n\n  static port(port: UriPortLike): UriAuthority {\n    port = UriPort.fromLike(port);\n    return this.create(void 0, void 0, port);\n  }\n\n  static portPart(portPart: string): UriAuthority {\n    const port = UriPort.parse(portPart);\n    return this.create(void 0, void 0, port);\n  }\n\n  static portNumber(portNumber: number): UriAuthority {\n    const port = UriPort.create(portNumber);\n    return this.create(void 0, void 0, port);\n  }\n\n  static parse(input: Input): Parser<UriAuthority>;\n  static parse(string: string): UriAuthority;\n  static parse(string: Input | string): Parser<UriAuthority> | UriAuthority {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriAuthorityParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriAuthorityParser extends Parser<UriAuthority> {\n  private readonly userParser: Parser<UriUser> | undefined;\n  private readonly hostParser: Parser<UriHost> | undefined;\n  private readonly portParser: Parser<UriPort> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(userParser?: Parser<UriUser>, hostParser?: Parser<UriHost>,\n              portParser?: Parser<UriPort>, step?: number) {\n    super();\n    this.userParser = userParser;\n    this.hostParser = hostParser;\n    this.portParser = portParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriAuthority> {\n    return UriAuthorityParser.parse(input, this.userParser, this.hostParser,\n                                    this.portParser, this.step);\n  }\n\n  static parse(input: Input, userParser?: Parser<UriUser>, hostParser?: Parser<UriHost>,\n               portParser?: Parser<UriPort>, step: number = 1): Parser<UriAuthority> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont()) {\n        const look = input.clone();\n        while (look.isCont() && (c = look.head(), c !== 64/*'@'*/ && c !== 47/*'/'*/)) {\n          look.step();\n        }\n        if (look.isCont() && c === 64/*'@'*/) {\n          step = 2;\n        } else {\n          step = 3;\n        }\n      } else if (input.isDone()) {\n        step = 3;\n      }\n    }\n    if (step === 2) {\n      if (userParser === void 0) {\n        userParser = UriUserParser.parse(input);\n      } else {\n        userParser = userParser.feed(input);\n      }\n      if (userParser.isDone()) {\n        if (input.isCont() && input.head() === 64/*'@'*/) {\n          input = input.step();\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(64/*'@'*/, input));\n        }\n      } else if (userParser.isError()) {\n        return userParser.asError();\n      }\n    }\n    if (step === 3) {\n      if (hostParser === void 0) {\n        hostParser = UriHostParser.parse(input);\n      } else {\n        hostParser = hostParser.feed(input);\n      }\n      if (hostParser.isDone()) {\n        if (input.isCont() && input.head() === 58/*':'*/) {\n          input = input.step();\n          step = 4;\n        } else if (!input.isEmpty()) {\n          return Parser.done(UriAuthority.create(userParser !== void 0 ? userParser.bind() : void 0,\n                                                 hostParser.bind()));\n        }\n      } else if (hostParser.isError()) {\n        return hostParser.asError();\n      }\n    }\n    if (step === 4) {\n      if (portParser === void 0) {\n        portParser = UriPortParser.parse(input);\n      } else {\n        portParser = portParser.feed(input);\n      }\n      if (portParser.isDone()) {\n        return Parser.done(UriAuthority.create(userParser !== void 0 ? userParser.bind() : void 0,\n                                               hostParser!.bind(),\n                                               portParser.bind()));\n      } else if (portParser.isError()) {\n        return portParser.asError();\n      }\n    }\n    return new UriAuthorityParser(userParser, hostParser, portParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport type UriUserLike = UriUser | UriUserInit | string;\n\n/** @public */\nexport const UriUserLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriUserLike {\n    return instance instanceof UriUser\n        || UriUserInit[Symbol.hasInstance](instance)\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport interface UriUserInit {\n  /** @internal */\n  readonly typeid?: \"UriUserInit\" | \"UriAuthorityInit\" | \"UriInit\";\n  username?: string;\n  password?: string;\n}\n\n/** @public */\nexport const UriUserInit = {\n  [Symbol.hasInstance](instance: unknown): instance is UriUserInit {\n    return Objects.hasAnyKey<UriUserInit>(instance, \"username\", \"password\");\n  },\n};\n\n/** @public */\nexport class UriUser implements HashCode, Debug, Display {\n  /** @internal */\n  constructor(username: string | undefined, password: string | undefined) {\n    this.username = username;\n    this.password = password;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"UriUser\";\n\n  likeType?(like: UriUserInit | string): void;\n\n  isDefined(): boolean {\n    return this.username !== void 0;\n  }\n\n  readonly username: string | undefined;\n\n  withUsername(username: string | undefined): UriUser {\n    if (username === this.username) {\n      return this;\n    }\n    return this.copy(username, this.password);\n  }\n\n  readonly password: string | undefined;\n\n  withPassword(password: string | undefined): UriUser {\n    if (password === this.password) {\n      return this;\n    }\n    return this.copy(this.username, password);\n  }\n\n  protected copy(username: string | undefined, password: string | undefined): UriUser {\n    return UriUser.create(username, password);\n  }\n\n  toLike(user?: {username?: string, password?: string}): {username?: string, password?: string} | undefined {\n    if (this.username !== void 0) {\n      if (user === void 0) {\n        user = {};\n      }\n      user.username = this.username;\n      if (this.password !== void 0) {\n        user.password = this.password;\n      }\n    }\n    return user;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriUser) {\n      return this.username === that.username && this.password === that.password;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.toString());\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriUser\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"parse\").write(40/*'('*/).write(34/*'\"'*/)\n                     .display(this).write(34/*'\"'*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"undefined\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    if (this.username !== void 0) {\n      output = Uri.writeUser(output, this.username);\n      if (this.password !== void 0) {\n        output = output.write(58/*':'*/);\n        output = Uri.writeUser(output, this.password);\n      }\n    }\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    return Format.display(this);\n  }\n\n  @Lazy\n  static undefined(): UriUser {\n    return new UriUser(void 0, void 0);\n  }\n\n  static create(username: string | undefined, password?: string | undefined): UriUser {\n    if (username === void 0 && password === void 0) {\n      return UriUser.undefined();\n    }\n    return new UriUser(username, password);\n  }\n\n  static fromInit(init: UriUserInit): UriUser {\n    return UriUser.create(init.username, init.password);\n  }\n\n  static fromLike<T extends UriUserLike | null | undefined>(value: T): UriUser | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriUser) {\n      return value as UriUser | Uninitable<T>;\n    } else if (typeof value === \"object\") {\n      return UriUser.fromInit(value);\n    } else if (typeof value === \"string\") {\n      return UriUser.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriUser>;\n  static parse(string: string): UriUser;\n  static parse(string: Input | string): Parser<UriUser> | UriUser {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriUserParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriUserParser extends Parser<UriUser> {\n  private readonly usernameOutput: Output<string> | undefined;\n  private readonly passwordOutput: Output<string> | undefined;\n  private readonly c1: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(usernameOutput?: Output<string>, passwordOutput?: Output<string>,\n              c1?: number, step?: number) {\n    super();\n    this.usernameOutput = usernameOutput;\n    this.passwordOutput = passwordOutput;\n    this.c1 = c1;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriUser> {\n    return UriUserParser.parse(input, this.usernameOutput, this.passwordOutput,\n                               this.c1, this.step);\n  }\n\n  static parse(input: Input, usernameOutput?: Output<string>, passwordOutput?: Output<string>,\n               c1: number = 0, step: number = 1): Parser<UriUser> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        usernameOutput = usernameOutput || Utf8.decodedString();\n        while (input.isCont() && (c = input.head(), Uri.isUserChar(c))) {\n          input = input.step();\n          usernameOutput!.write(c);\n        }\n        if (input.isCont() && c === 58/*':'*/) {\n          input = input.step();\n          step = 4;\n        } else if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else if (!input.isEmpty()) {\n          return Parser.done(UriUser.create(usernameOutput.bind()));\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          usernameOutput!.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 1;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 4) {\n        passwordOutput = passwordOutput || Utf8.decodedString();\n        while (input.isCont() && (c = input.head(), Uri.isUserInfoChar(c))) {\n          input = input.step();\n          passwordOutput.write(c);\n        }\n        if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 5;\n        } else if (!input.isEmpty()) {\n          return Parser.done(UriUser.create(usernameOutput!.bind(), passwordOutput.bind()));\n        }\n      }\n      if (step === 5) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 6;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 6) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          passwordOutput!.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 4;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new UriUserParser(usernameOutput, passwordOutput, c1, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport type UriHostLike = UriHost | string;\n\n/** @public */\nexport const UriHostLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriHostLike {\n    return instance instanceof UriHost\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class UriHost implements HashCode, Compare, Debug, Display {\n  protected constructor() {\n    // nop\n  }\n\n  likeType?(like: string): void;\n\n  isDefined(): boolean {\n    return true;\n  }\n\n  abstract readonly address: string;\n\n  get name(): string | undefined {\n    return void 0;\n  }\n\n  get ipv4(): string | undefined {\n    return void 0;\n  }\n\n  get ipv6(): string | undefined {\n    return void 0;\n  }\n\n  toLike(): string {\n    return this.toString();\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof UriHost) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriHost) {\n      return this.toString() === that.toString();\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.toString());\n  }\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  abstract display<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  abstract toString(): string;\n\n  @Lazy\n  static undefined(): UriHost {\n    return new UriHostUndefined();\n  }\n\n  static hostname(name: string): UriHost {\n    return new UriHostName(name);\n  }\n\n  static ipv4(ipv4: string): UriHost {\n    return new UriHostIPv4(ipv4);\n  }\n\n  static ipv6(ipv6: string): UriHost {\n    return new UriHostIPv6(ipv6);\n  }\n\n  static fromLike<T extends UriHostLike | null | undefined>(value: T): UriHost | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriHost) {\n      return value as UriHost | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return UriHost.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriHost>;\n  static parse(string: string): UriHost;\n  static parse(string: Input | string): Parser<UriHost> | UriHost {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriHostParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriHostUndefined extends UriHost {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override isDefined(): boolean {\n    return false;\n  }\n\n  override get address(): string {\n    return \"\";\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriHost\").write(46/*'.'*/).write(\"undefined\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    return output; // blank\n  }\n\n  override toString(): string {\n    return \"\";\n  }\n}\n\n/** @internal */\nexport class UriHostName extends UriHost {\n  /** @internal */\n  constructor(address: string) {\n    super();\n    this.address = address;\n  }\n\n  override readonly address: string;\n\n  override get name(): string {\n    return this.address;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriHost\").write(46/*'.'*/).write(\"hostname\")\n                   .write(40/*'('*/).debug(this.address).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = Uri.writeHost(output, this.address);\n    return output;\n  }\n\n  override toString(): string {\n    return this.address;\n  }\n}\n\n/** @internal */\nexport class UriHostIPv4 extends UriHost {\n  /** @internal */\n  constructor(address: string) {\n    super();\n    this.address = address;\n  }\n\n  override readonly address: string;\n\n  override get ipv4(): string {\n    return this.address;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriHost\").write(46/*'.'*/).write(\"ipv4\")\n                   .write(40/*'('*/).debug(this.address).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = Uri.writeHost(output, this.address);\n    return output;\n  }\n\n  override toString(): string {\n    return this.address;\n  }\n}\n\n/** @internal */\nexport class UriHostIPv6 extends UriHost {\n  /** @internal */\n  constructor(address: string) {\n    super();\n    this.address = address;\n  }\n\n  override readonly address: string;\n\n  override get ipv6(): string {\n    return this.address;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriHost\").write(46/*'.'*/).write(\"ipv6\")\n                   .write(40/*'('*/).debug(this.address).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    output = output.write(91/*'['*/);\n    output = Uri.writeHostLiteral(output, this.address);\n    output = output.write(93/*']'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return \"[\" + this.address + \"]\";\n  }\n}\n\n/** @internal */\nexport class UriHostParser extends Parser<UriHost> {\n  override feed(input: Input): Parser<UriHost> {\n    return UriHostParser.parse(input);\n  }\n\n  static parse(input: Input): Parser<UriHost> {\n    if (input.isCont()) {\n      const c = input.head();\n      if (c === 91/*'['*/) {\n        return UriHostLiteralParser.parse(input);\n      } else {\n        return UriHostAddressParser.parse(input);\n      }\n    } else if (input.isDone()) {\n      return Parser.done(UriHost.hostname(\"\"));\n    }\n    return new UriHostParser();\n  }\n}\n\n/** @internal */\nexport class UriHostAddressParser extends Parser<UriHost> {\n  private readonly output: Output<string> | undefined;\n  private readonly c1: number | undefined;\n  private readonly x: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(output?: Output<string>, c1?: number, x?: number, step?: number) {\n    super();\n    this.output = output;\n    this.c1 = c1;\n    this.x = x;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriHost> {\n    return UriHostAddressParser.parse(input, this.output, this.c1, this.x, this.step);\n  }\n\n  static parse(input: Input, output?: Output<string>, c1: number = 0,\n               x: number = 0, step: number = 1): Parser<UriHost> {\n    let c = 0;\n    output = output || Utf8.decodedString();\n    while (step <= 4) {\n      while (input.isCont() && (c = input.head(), Base10.isDigit(c))) {\n        input = input.step();\n        output = output.write(c);\n        x = 10 * x + Base10.decodeDigit(c);\n      }\n      if (input.isCont()) {\n        if (c === 46/*'.'*/ && step < 4 && x <= 255) {\n          input = input.step();\n          output = output.write(c);\n          x = 0;\n          step += 1;\n        } else if (!Uri.isHostChar(c) && c !== 37/*'%'*/ && step === 4 && x <= 255) {\n          return Parser.done(UriHost.ipv4(output.bind()));\n        } else {\n          x = 0;\n          step = 5;\n          break;\n        }\n      } else if (!input.isEmpty()) {\n        if (step === 4 && x <= 255) {\n          return Parser.done(UriHost.ipv4(output.bind()));\n        } else {\n          return Parser.done(UriHost.hostname(output.bind()));\n        }\n      } else {\n        break;\n      }\n    }\n    do {\n      if (step === 5) {\n        while (input.isCont() && (c = input.head(), Uri.isHostChar(c))) {\n          input = input.step();\n          output!.write(Uri.toLowerCase(c));\n        }\n        if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 6;\n        } else if (!input.isEmpty()) {\n          return Parser.done(UriHost.hostname(output!.bind()));\n        }\n      }\n      if (step === 6) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 7;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 7) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          output!.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 5;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new UriHostAddressParser(output, c1, x, step);\n  }\n}\n\n/** @internal */\nexport class UriHostLiteralParser extends Parser<UriHost> {\n  private readonly output: Output<string> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(output?: Output<string>, step?: number) {\n    super();\n    this.output = output;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriHost> {\n    return UriHostLiteralParser.parse(input, this.output, this.step);\n  }\n\n  static parse(input: Input, output?: Output<string>, step: number = 1): Parser<UriHost> {\n    let c = 0;\n    if (step === 1) {\n      if (input.isCont() && input.head() === 91/*'['*/) {\n        input = input.step();\n        step = 2;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(91/*'['*/, input));\n      }\n    }\n    if (step === 2) {\n      output = output || Utf8.decodedString();\n      while (input.isCont() && (c = input.head(), Uri.isHostChar(c) || c === 58/*':'*/)) {\n        input = input.step();\n        output = output.write(Uri.toLowerCase(c));\n      }\n      if (input.isCont() && c === 93/*']'*/) {\n        input = input.step();\n        return Parser.done(UriHost.ipv6(output.bind()));\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(93/*']'*/, input));\n      }\n    }\n    return new UriHostLiteralParser(output, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\n\n/** @public */\nexport type UriPortLike = UriPort | number | string;\n\n/** @public */\nexport const UriPortLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriPortLike {\n    return instance instanceof UriPort\n        || typeof instance === \"number\"\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class UriPort implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  constructor(portNumber: number) {\n    this.number = portNumber;\n  }\n\n  likeType?(like: number | string): void;\n\n  isDefined(): boolean {\n    return this.number !== 0;\n  }\n\n  readonly number!: number;\n\n  valueOf(): number {\n    return this.number;\n  }\n\n  toLike(): number {\n    return this.number;\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof UriPort) {\n      return this.number < that.number ? -1 : this.number > that.number ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriPort) {\n      return this.number === that.number;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.toString());\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriPort\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"create\").write(40/*'('*/);\n      output = Format.displayNumber(output, this.number);\n    } else {\n      output = output.write(\"undefined\").write(40/*'('*/);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    output = Format.displayNumber(output, this.number);\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    return \"\" + this.number;\n  }\n\n  @Lazy\n  static undefined(): UriPort {\n    return new UriPort(0);\n  }\n\n  static create(number: number): UriPort {\n    if (number < 0) {\n      throw new TypeError(\"\" + number);\n    } else if (number === 0) {\n      return UriPort.undefined();\n    }\n    return new UriPort(number);\n  }\n\n  static fromLike<T extends UriPortLike | null | undefined>(value: T): UriPort | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriPort) {\n      return value as UriPort | Uninitable<T>;\n    } else if (typeof value === \"number\") {\n      return UriPort.create(value);\n    } else if (typeof value === \"string\") {\n      return UriPort.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriPort>;\n  static parse(string: string): UriPort;\n  static parse(string: Input | string): Parser<UriPort> | UriPort {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriPortParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriPortParser extends Parser<UriPort> {\n  private readonly number: number | undefined;\n\n  constructor(number?: number) {\n    super();\n    this.number = number;\n  }\n\n  override feed(input: Input): Parser<UriPort> {\n    return UriPortParser.parse(input, this.number);\n  }\n\n  static parse(input: Input, number: number = 0): Parser<UriPort> {\n    let c = 0;\n    while (input.isCont() && (c = input.head(), Base10.isDigit(c))) {\n      input = input.step();\n      number = 10 * number + Base10.decodeDigit(c);\n    }\n    if (!input.isEmpty()) {\n      return Parser.done(UriPort.create(number));\n    }\n    return new UriPortParser(number);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport type {Builder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport type UriPathLike = UriPath | readonly string[] | string;\n\n/** @public */\nexport const UriPathLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriPathLike {\n    return instance instanceof UriPath\n        || Array.isArray(instance)\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class UriPath implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  protected constructor() {\n    // sealed\n  }\n\n  likeType?(like: readonly string[] | string): void;\n\n  abstract isDefined(): boolean;\n\n  abstract isAbsolute(): boolean;\n\n  abstract isRelative(): boolean;\n\n  abstract isSegment(): boolean;\n\n  abstract isEmpty(): boolean;\n\n  get length(): number {\n    let n = 0;\n    let path: UriPath = this;\n    while (!path.isEmpty()) {\n      n += 1;\n      path = path.tail();\n    }\n    return n;\n  }\n\n  get(index: number): string | undefined {\n    let i = 0;\n    let path: UriPath = this;\n    while (!path.isEmpty()) {\n      if (i >= index) {\n        return path.head();\n      }\n      i += 1;\n      path = path.tail();\n    }\n    return void 0;\n  }\n\n  abstract head(): string;\n\n  abstract tail(): UriPath;\n\n  /** @internal */\n  abstract setTail(tail: UriPath): void;\n\n  /** @internal */\n  abstract dealias(): UriPath;\n\n  abstract parent(): UriPath;\n\n  abstract base(): UriPath;\n\n  get name(): string {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n    let path: UriPath = this;\n    do {\n      const tail = path.tail();\n      if (tail.isEmpty()) {\n        return path.isRelative() ? path.head() : \"\";\n      }\n      path = tail;\n    } while (true);\n  }\n\n  withName(name: string): UriPath {\n    const builder = new UriPathBuilder();\n    builder.addPath(this.base());\n    builder.addSegment(name);\n    return builder.build();\n  }\n\n  body(): UriPath {\n    if (this.isEmpty()) {\n      return this;\n    }\n    const builder = new UriPathBuilder();\n    let path: UriPath = this;\n    do {\n      const tail = path.tail();\n      if (tail.isEmpty()) {\n        return builder.build();\n      } else if (path.isSegment()) {\n        builder.addSegment(path.head());\n      } else if (path.isAbsolute()) {\n        builder.addSlash();\n      }\n      path = tail;\n    } while (true);\n  }\n\n  foot(): UriPath {\n    if (this.isEmpty()) {\n      return this;\n    }\n    let path: UriPath = this;\n    do {\n      const tail = path.tail();\n      if (tail.isEmpty()) {\n        return path;\n      }\n      path = tail;\n    } while (true);\n  }\n\n  isSubpathOf(b: UriPathLike): boolean {\n    b = UriPath.fromLike(b);\n    let a: UriPath = this;\n    while (!a.isEmpty() && !b.isEmpty()) {\n      if (a.isRelative() != b.isRelative() || a.head() !== b.head()) {\n        return false;\n      }\n      a = a.tail();\n      b = b.tail();\n    }\n    return b.isEmpty();\n  }\n\n  appended(...components: UriPathLike[]): UriPath {\n    if (arguments.length === 0) {\n      return this;\n    }\n    const builder = new UriPathBuilder();\n    builder.addPath(this);\n    builder.push(...components);\n    return builder.build();\n  }\n\n  appendedSlash(): UriPath {\n    const builder = new UriPathBuilder();\n    builder.addPath(this);\n    builder.addSlash();\n    return builder.build();\n  }\n\n  appendedSegment(segment: string): UriPath {\n    const builder = new UriPathBuilder();\n    builder.addPath(this);\n    builder.addSegment(segment);\n    return builder.build();\n  }\n\n  prepended(...components: UriPathLike[]): UriPath {\n    if (arguments.length === 0) {\n      return this;\n    }\n    const builder = new UriPathBuilder();\n    builder.push(...components);\n    builder.addPath(this);\n    return builder.build();\n  }\n\n  prependedSlash(): UriPath {\n    return new UriPathSlash(this);\n  }\n\n  prependedSegment(segment: string): UriPath {\n    if (this.isEmpty() || this.isAbsolute()) {\n      return UriPath.segment(segment, this);\n    }\n    return UriPath.segment(segment, this.prependedSlash());\n  }\n\n  resolve(that: UriPath): UriPath {\n    if (that.isEmpty()) {\n      return this;\n    } else if (that.isAbsolute() || this.isEmpty()) {\n      return that.removeDotSegments();\n    }\n    return this.merge(that).removeDotSegments();\n  }\n\n  removeDotSegments(): UriPath {\n    let path: UriPath = this;\n    const builder = new UriPathBuilder();\n    while (!path.isEmpty()) {\n      const head = path.head();\n      if (head === \".\" || head === \"..\") {\n        path = path.tail();\n        if (!path.isEmpty()) {\n          path = path.tail();\n        }\n      } else if (path.isAbsolute()) {\n        const rest = path.tail();\n        if (!rest.isEmpty()) {\n          const next = rest.head();\n          if (next === \".\") {\n            path = rest.tail();\n            if (path.isEmpty()) {\n              path = UriPath.slash();\n            }\n          } else if (next === \"..\") {\n            path = rest.tail();\n            if (path.isEmpty()) {\n              path = UriPath.slash();\n            }\n            if (!builder.isEmpty() && !builder.pop().isAbsolute()) {\n              if (!builder.isEmpty()) {\n                builder.pop();\n              }\n            }\n          } else {\n            builder.push(head, next);\n            path = rest.tail();\n          }\n        } else {\n          builder.push(path.head());\n          path = path.tail();\n        }\n      } else {\n        builder.push(path.head());\n        path = path.tail();\n      }\n    }\n    return builder.build();\n  }\n\n  merge(that: UriPath): UriPath {\n    if (this.isEmpty()) {\n      return that;\n    }\n    const builder = new UriPathBuilder();\n    let prev: UriPath = this;\n    do {\n      const next = prev.tail();\n      if (next.isEmpty()) {\n        if (prev.isAbsolute()) {\n          builder.addSlash();\n        }\n        break;\n      } else if (prev.isAbsolute()) {\n        builder.addSlash();\n      } else {\n        builder.addSegment(prev.head());\n      }\n      prev = next;\n    } while (true);\n    builder.addPath(that);\n    return builder.build();\n  }\n\n  unmerge(that: UriPath): UriPath {\n    let base: UriPath = this;\n    let relative = that;\n    if (base.isEmpty()) {\n      return relative;\n    }\n    do {\n      if (base.isEmpty()) {\n        if (relative.isEmpty() || relative.tail().isEmpty()) {\n          return relative;\n        }\n        return relative.tail();\n      } else if (base.isRelative()) {\n        return relative;\n      } else if (relative.isRelative()) {\n        return relative.prependedSlash();\n      }\n      let a = base.tail();\n      let b = relative.tail();\n      if (!a.isEmpty() && b.isEmpty()) {\n        return UriPath.slash();\n      } else if (a.isEmpty() || b.isEmpty()\n          || a.isRelative() != b.isRelative()\n          || a.head() !== b.head()) {\n        return b;\n      }\n      a = a.tail();\n      b = b.tail();\n      if (!a.isEmpty() && b.isEmpty()) {\n        return that;\n      }\n      base = a;\n      relative = b;\n    } while (true);\n  }\n\n  /**\n   * Returns this path relative to the given `base` path.\n   */\n  relativeTo(base: UriPath): UriPath {\n    return UriPath.difference(base, this);\n  }\n\n  /** @internal */\n  static difference(base: UriPath, target: UriPath): UriPath {\n    let commonSlash = false;\n    while (!base.isEmpty() && !target.isEmpty()\n        && base.isRelative() === target.isRelative()\n        && base.head() === target.head()) {\n      commonSlash = base.isAbsolute();\n      base = base.tail();\n      target = target.tail();\n    }\n    if (base.isEmpty()) {\n      return target;\n    }\n    const builder = new UriPathBuilder();\n    while (!base.isEmpty()) {\n      if (base.isRelative()) {\n        builder.addSegment(\"..\");\n      }\n      base = base.tail();\n    }\n    if (commonSlash) {\n      builder.addSlash();\n    }\n    builder.addPath(target);\n    return builder.build();\n  }\n\n  toLike(): string[] {\n    const components = [];\n    let path: UriPath = this;\n    while (!path.isEmpty()) {\n      components.push(path.head());\n      path = path.tail();\n    }\n    return components;\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof UriPath) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriPath) {\n      return this.toString() === that.toString();\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.toString());\n  }\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    let path: UriPath = this;\n    while (!path.isEmpty()) {\n      if (path.isAbsolute()) {\n        output = output.write(47/*'/'*/);\n      } else {\n        output = Uri.writePathSegment(output, path.head());\n      }\n      path = path.tail();\n    }\n    return output;\n  }\n\n  /** @override */\n  abstract toString(): string;\n\n  static builder(): UriPathBuilder {\n    return new UriPathBuilder();\n  }\n\n  @Lazy\n  static empty(): UriPath {\n    return new UriPathEmpty();\n  }\n\n  static slash(segment?: string | UriPath): UriPath {\n    if (segment === void 0) {\n      return UriPathSlash.slash();\n    } else if (typeof segment === \"string\") {\n      segment = this.segment(segment);\n    }\n    return new UriPathSlash(segment);\n  }\n\n  static segment(segment: string, tail?: UriPath): UriPath {\n    if (tail === void 0) {\n      tail = UriPath.empty();\n    }\n    return new UriPathSegment(segment, tail);\n  }\n\n  static of(...components: UriPathLike[]): UriPath {\n    const builder = new UriPathBuilder();\n    builder.push(...components);\n    return builder.build();\n  }\n\n  static fromLike<T extends UriPathLike | null | undefined>(value: T): UriPath | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriPath) {\n      return value as UriPath | Uninitable<T>;\n    } else if (Array.isArray(value)) {\n      return UriPath.of(...value);\n    } else if (typeof value === \"string\") {\n      return UriPath.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriPath>;\n  static parse(string: string): UriPath;\n  static parse(string: Input | string): Parser<UriPath> | UriPath {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriPathParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n\n  @Lazy\n  static pathForm(): Form<UriPath, UriPathLike> {\n    return new UriPathForm(UriPath.empty());\n  }\n}\n\n/** @internal */\nexport class UriPathEmpty extends UriPath {\n  /** @internal */\n  constructor() {\n    super();\n  }\n\n  override isDefined(): boolean {\n    return false;\n  }\n\n  override isAbsolute(): boolean {\n    return false;\n  }\n\n  override isRelative(): boolean {\n    return true;\n  }\n\n  override isSegment(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return true;\n  }\n\n  override head(): string {\n    throw new Error(\"empty path\");\n  }\n\n  override tail(): UriPath {\n    throw new Error(\"empty path\");\n  }\n\n  /** @internal */\n  override setTail(tail: UriPath): void {\n    throw new Error(\"empty path\");\n  }\n\n  /** @internal */\n  override dealias(): UriPath {\n    return this;\n  }\n\n  override parent(): UriPath {\n    return this;\n  }\n\n  override base(): UriPath {\n    return this;\n  }\n\n  override appended(...components: UriPathLike[]): UriPath {\n    return UriPath.of(...components);\n  }\n\n  override appendedSlash(): UriPath {\n    return UriPath.slash();\n  }\n\n  override appendedSegment(segment: string): UriPath {\n    return UriPath.segment(segment);\n  }\n\n  override prepended(...components: UriPathLike[]): UriPath {\n    return UriPath.of(...components);\n  }\n\n  override prependedSlash(): UriPath {\n    return UriPath.slash();\n  }\n\n  override prependedSegment(segment: string): UriPath {\n    return UriPath.segment(segment);\n  }\n\n  override merge(that: UriPath): UriPath {\n    return that;\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriPath\").write(46/*'.'*/).write(\"empty\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    return output; // blank\n  }\n\n  override toString(): string {\n    return \"\";\n  }\n}\n\n/** @internal */\nexport class UriPathSlash extends UriPath {\n  /** @internal */\n  constructor(tail: UriPath) {\n    super();\n    this.rest = tail;\n    this.stringValue = void 0;\n  }\n\n  /** @internal */\n  readonly rest: UriPath;\n\n  override isDefined(): boolean {\n    return true;\n  }\n\n  override isAbsolute(): boolean {\n    return true;\n  }\n\n  override isRelative(): boolean {\n    return false;\n  }\n\n  override isSegment(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override head(): string {\n    return \"/\";\n  }\n\n  override tail(): UriPath {\n    return this.rest;\n  }\n\n  /** @internal */\n  override setTail(tail: UriPath): void {\n    (this as Mutable<this>).rest = tail;\n  }\n\n  /** @internal */\n  override dealias(): UriPath {\n    return new UriPathSlash(this.rest);\n  }\n\n  override parent(): UriPath {\n    const tail = this.rest;\n    if (tail.isEmpty()) {\n      return UriPath.empty();\n    }\n    const rest = tail.tail();\n    if (rest.isEmpty()) {\n      return UriPath.slash();\n    }\n    return new UriPathSlash(tail.parent());\n  }\n\n  override base(): UriPath {\n    const tail = this.rest;\n    if (tail.isEmpty()) {\n      return this;\n    }\n    return new UriPathSlash(tail.base());\n  }\n\n  override prependedSegment(segment: string): UriPath {\n    return UriPath.segment(segment, this);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriPath\").write(46/*'.'*/).write(\"parse\").write(40/*'('*/)\n                   .write(34/*'\"'*/) .display(this).write(34/*'\"'*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else {\n      output = super.display(output);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  /** @internal */\n  @Lazy\n  static override slash(): UriPathSlash {\n    return new UriPathSlash(UriPath.empty());\n  }\n}\n\n/** @internal */\nexport class UriPathSegment extends UriPath {\n  /** @internal */\n  constructor(head: string, tail: UriPath) {\n    super();\n    this.segment = head;\n    this.rest = tail;\n    this.stringValue = void 0;\n  }\n\n  /** @internal */\n  readonly segment: string;\n\n  /** @internal */\n  readonly rest: UriPath;\n\n  override isDefined(): boolean {\n    return true;\n  }\n\n  override isAbsolute(): boolean {\n    return false;\n  }\n\n  override isRelative(): boolean {\n    return true;\n  }\n\n  override isSegment(): boolean {\n    return true;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override head(): string {\n    return this.segment;\n  }\n\n  override tail(): UriPath {\n    return this.rest;\n  }\n\n  /** @internal */\n  override setTail(tail: UriPath): void {\n    if (tail instanceof UriPathSegment) {\n      throw new Error(\"adjacent path segments\");\n    }\n    (this as Mutable<this>).rest = tail;\n  }\n\n  /** @internal */\n  override dealias(): UriPath {\n    return new UriPathSegment(this.segment, this.rest);\n  }\n\n  override parent(): UriPath {\n    const tail = this.rest;\n    if (tail.isEmpty()) {\n      return UriPath.empty();\n    }\n    const rest = tail.tail();\n    if (rest.isEmpty()) {\n      return UriPath.empty();\n    }\n    return new UriPathSegment(this.segment, tail.parent());\n  }\n\n  override base(): UriPath {\n    const tail = this.rest;\n    if (tail.isEmpty()) {\n      return UriPath.empty();\n    }\n    return new UriPathSegment(this.segment, tail.base());\n  }\n\n  override prependedSegment(segment: string): UriPath {\n    return UriPath.segment(segment, this.prependedSlash());\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriPath\").write(46/*'.'*/).write(\"parse\").write(40/*'('*/)\n                   .write(34/*'\"'*/).display(this).write(34/*'\"'*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else {\n      output = super.display(output);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n}\n\n/** @public */\nexport class UriPathBuilder implements Builder<string, UriPath> {\n  /** @internal */\n  first: UriPath;\n  /** @internal */\n  last: UriPath | null;\n  /** @internal */\n  size: number;\n  /** @internal */\n  aliased: number;\n\n  constructor() {\n    this.first = UriPath.empty();\n    this.last = null;\n    this.size = 0;\n    this.aliased = 0;\n  }\n\n  isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  push(...components: UriPathLike[]): void {\n    for (let i = 0; i < components.length; i += 1) {\n      const component = components[i]!;\n      if (component instanceof UriPath) {\n        this.addPath(component);\n      } else if (Array.isArray(component)) {\n        this.push(...component);\n      } else if (component === \"/\") {\n        this.addSlash();\n      } else {\n        this.addSegment(component as string);\n      }\n    }\n  }\n\n  build(): UriPath {\n    this.aliased = 0;\n    return this.first;\n  }\n\n  addSlash(): void {\n    const tail = UriPath.slash().dealias();\n    const size = this.size;\n    if (size === 0) {\n      this.first = tail;\n    } else {\n      this.dealias(size - 1).setTail(tail);\n    }\n    this.last = tail;\n    this.size = size + 1;\n    this.aliased += 1;\n  }\n\n  addSegment(segment: string): void {\n    const tail = UriPath.segment(segment, UriPath.empty());\n    let size = this.size;\n    if (size === 0) {\n      this.first = tail;\n    } else {\n      const last = this.dealias(size - 1);\n      if (last.isAbsolute()) {\n        last.setTail(tail);\n      } else {\n        last.setTail(tail.prependedSlash());\n        size += 1;\n        this.aliased += 1;\n      }\n    }\n    this.last = tail;\n    this.size = size + 1;\n    this.aliased += 1;\n  }\n\n  addPath(path: UriPath): void {\n    if (path.isEmpty()) {\n      return;\n    }\n    let size = this.size;\n    if (size === 0) {\n      this.first = path;\n    } else {\n      const last = this.dealias(size - 1);\n      if (last.isAbsolute() || path.isAbsolute()) {\n        last.setTail(path);\n      } else {\n        last.setTail(path.prependedSlash());\n        size += 1;\n        this.aliased += 1;\n      }\n    }\n    size += 1;\n    do {\n      const tail = path.tail();\n      if (tail.isEmpty()) {\n        break;\n      }\n      path = tail;\n      size += 1;\n    } while (true);\n    this.last = path;\n    this.size = size;\n  }\n\n  pop(): UriPath {\n    const size = this.size;\n    const aliased = this.aliased;\n    if (size === 0) {\n      throw new Error(\"Empty UriPath\");\n    } else if (size === 1) {\n      const first = this.first;\n      this.first = first.tail();\n      if (first.tail().isEmpty()) {\n        this.last = null;\n      }\n      this.size = size - 1;\n      if (aliased > 0) {\n        this.aliased = aliased - 1;\n      }\n      return first;\n    }\n    const last = this.dealias(size - 2);\n    last.setTail(UriPath.empty());\n    this.last = last;\n    this.size = size - 1;\n    this.aliased = aliased - 1;\n    return last.tail();\n  }\n\n  /** @internal */\n  dealias(n: number): UriPath {\n    let i = 0;\n    let xi: UriPath | null = null;\n    let xs = this.first;\n    if (this.aliased <= n) {\n      while (i < this.aliased) {\n        xi = xs;\n        xs = xs.tail();\n        i += 1;\n      }\n      while (i <= n) {\n        const xn = xs.dealias();\n        if (i === 0) {\n          this.first = xn;\n        } else {\n          xi!.setTail(xn);\n        }\n        xi = xn;\n        xs = xs.tail();\n        i += 1;\n      }\n      if (i === this.size) {\n        this.last = xi;\n      }\n      this.aliased = i;\n    } else if (n === 0) {\n      xi = this.first;\n    } else if (n === this.size - 1) {\n      xi = this.last;\n    } else {\n      while (i <= n) {\n        xi = xs;\n        xs = xs.tail();\n        i += 1;\n      }\n    }\n    return xi!;\n  }\n\n  /** @override */\n  toString(): string {\n    return this.build().toString();\n  }\n}\n\n/** @internal */\nexport class UriPathForm extends Form<UriPath, UriPathLike> {\n  constructor(unit: UriPath | undefined) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: UriPath | undefined;\n\n  override withUnit(unit: UriPath | undefined): Form<UriPath, UriPathLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new UriPathForm(unit);\n  }\n\n  override mold(object: UriPathLike, item?: Item): Item {\n    object = UriPath.fromLike(object);\n    if (item === void 0) {\n      return Text.from(object.toString());\n    } else {\n      return item.concat(Text.from(object.toString()));\n    }\n  }\n\n  override cast(item: Item, object?: UriPath): UriPath | undefined {\n    const value = item.target;\n    try {\n      const string = value.stringValue();\n      if (typeof string === \"string\") {\n        return UriPath.parse(string);\n      }\n    } catch (error) {\n      // swallow\n    }\n    return void 0;\n  }\n}\n\n/** @internal */\nexport class UriPathParser extends Parser<UriPath> {\n  private readonly builder: UriPathBuilder | undefined;\n  private readonly output: Output<string> | undefined;\n  private readonly c1: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(builder?: UriPathBuilder, output?: Output<string>,\n              c1?: number, step?: number) {\n    super();\n    this.builder = builder;\n    this.output = output;\n    this.c1 = c1;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriPath> {\n    return UriPathParser.parse(input, this.builder, this.output, this.c1, this.step);\n  }\n\n  static parse(input: Input, builder?: UriPathBuilder, output?: Output<string>,\n               c1: number = 0, step: number = 1): Parser<UriPath> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Uri.isPathChar(c))) {\n          output = output || Utf8.decodedString();\n          input = input.step();\n          output = output.write(c);\n        }\n        if (input.isCont() && c === 47/*'/'*/) {\n          input = input.step();\n          builder = builder || new UriPathBuilder();\n          if (output !== void 0) {\n            builder.addSegment(output.bind());\n            output = void 0;\n          }\n          builder.addSlash();\n          continue;\n        } else if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else if (!input.isEmpty()) {\n          if (output !== void 0) {\n            builder = builder || new UriPathBuilder();\n            builder.addSegment(output.bind());\n          }\n          if (builder !== void 0) {\n            return Parser.done(builder.build());\n          } else {\n            return Parser.done(UriPath.empty());\n          }\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          output = output || Utf8.decodedString();\n          input = input.step();\n          output = output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 1;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new UriPathParser(builder, output, c1, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport type {PairBuilder} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Utf8} from \"@swim/codec\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport type UriQueryLike = UriQuery | {[key: string]: string} | string;\n\n/** @public */\nexport const UriQueryLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriQueryLike {\n    return instance instanceof UriQuery\n        || typeof instance === \"object\" && instance !== null\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class UriQuery implements HashCode, Compare, Debug, Display {\n  likeType?(like: {[key: string]: string} | string): void;\n\n  abstract isDefined(): boolean;\n\n  abstract isEmpty(): boolean;\n\n  get length(): number {\n    let n = 0;\n    let query: UriQuery = this;\n    while (!query.isEmpty()) {\n      n += 1;\n      query = query.tail();\n    }\n    return n;\n  }\n\n  abstract head(): [string | undefined, string];\n\n  abstract readonly key: string | undefined;\n\n  abstract readonly value: string;\n\n  abstract tail(): UriQuery;\n\n  /** @internal */\n  abstract setTail(tail: UriQuery): void;\n\n  /** @internal */\n  abstract dealias(): UriQuery;\n\n  has(key: string): boolean {\n    let query: UriQuery = this;\n    while (!query.isEmpty()) {\n      if (key === query.key) {\n        return true;\n      }\n      query = query.tail();\n    }\n    return false;\n  }\n\n  get(key: string): string | undefined {\n    let query: UriQuery = this;\n    while (!query.isEmpty()) {\n      if (key === query.key) {\n        return query.value;\n      }\n      query = query.tail();\n    }\n    return void 0;\n  }\n\n  updated(key: string, value: string): UriQuery {\n    let query: UriQuery = this;\n    const builder = new UriQueryBuilder();\n    let updated = false;\n    while (!query.isEmpty()) {\n      if (key === query.key) {\n        builder.addParam(key, value);\n        updated = true;\n      } else {\n        builder.addParam(query.key, query.value);\n      }\n      query = query.tail();\n    }\n    if (!updated) {\n      builder.addParam(key, value);\n    }\n    return builder.build();\n  }\n\n  removed(key: string): UriQuery {\n    let query: UriQuery = this;\n    const builder = new UriQueryBuilder();\n    let updated = false;\n    while (!query.isEmpty()) {\n      if (key === query.key) {\n        updated = true;\n      } else {\n        builder.addParam(query.key, query.value);\n      }\n      query = query.tail();\n    }\n    if (!updated) {\n      return this;\n    }\n    return builder.build();\n  }\n\n  appended(key: string | undefined, value: string): UriQuery;\n  appended(params: UriQueryLike): UriQuery;\n  appended(key: UriQueryLike | undefined, value?: string): UriQuery {\n    const builder = new UriQueryBuilder();\n    builder.addQuery(this);\n    builder.add(key as any, value as any);\n    return builder.build();\n  }\n\n  prepended(key: string | undefined, value: string): UriQuery;\n  prepended(params: UriQueryLike): UriQuery;\n  prepended(key: UriQueryLike | undefined, value?: string): UriQuery {\n    const builder = new UriQueryBuilder();\n    builder.add(key as any, value as any);\n    builder.addQuery(this);\n    return builder.build();\n  }\n\n  toLike(params?: {[key: string]: string}): {[key: string]: string} | undefined {\n    if (this.isDefined()) {\n      params = params || {};\n      let query: UriQuery = this;\n      let i = 0;\n      while (!query.isEmpty()) {\n        const key = query.key;\n        if (key !== void 0) {\n          params[key] = query.value;\n        } else {\n          params[\"$\" + i] = query.value;\n        }\n        query = query.tail();\n        i += 1;\n      }\n    }\n    return params;\n  }\n\n  /** @override */\n  compareTo(that: UriQuery): number {\n    if (that instanceof UriQuery) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriQuery) {\n      return this.toString() === that.toString();\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.toString());\n  }\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    let query: UriQuery = this;\n    let first = true;\n    while (!query.isEmpty()) {\n      if (!first) {\n        output = output.write(38/*'&'*/);\n      } else {\n        first = false;\n      }\n      const key = query.key;\n      if (key !== void 0) {\n        output = Uri.writeParam(output, key);\n        output = output.write(61/*'='*/);\n      }\n      output = Uri.writeQuery(output, query.value);\n      query = query.tail();\n    }\n    return output;\n  }\n\n  /** @override */\n  abstract toString(): string;\n\n  static builder(): UriQueryBuilder {\n    return new UriQueryBuilder();\n  }\n\n  @Lazy\n  static undefined(): UriQuery {\n    return new UriQueryUndefined();\n  }\n\n  static param(value: string, tail?: UriQuery): UriQuery;\n  static param(key: string | undefined, value: string, tail?: UriQuery): UriQuery;\n  static param(key: string | undefined, value?: UriQuery | string, tail?: UriQuery): UriQuery {\n    if (tail === void 0) {\n      tail = value as UriQuery | undefined;\n      value = key!;\n      key = void 0;\n    }\n    if (tail === void 0) {\n      tail = UriQuery.undefined();\n    }\n    return new UriQueryParam(key, value as string, tail);\n  }\n\n  static fromLike<T extends UriQueryLike | null | undefined>(value: T): UriQuery | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriQuery) {\n      return value as UriQuery | Uninitable<T>;\n    } else if (typeof value === \"object\") {\n      const builder = new UriQueryBuilder();\n      builder.add(value);\n      return builder.build();\n    } else if (typeof value === \"string\") {\n      return UriQuery.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriQuery>;\n  static parse(string: string): UriQuery;\n  static parse(string: Input | string): Parser<UriQuery> | UriQuery {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriQueryParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriQueryUndefined extends UriQuery {\n  override isDefined(): boolean {\n    return false;\n  }\n\n  override isEmpty(): boolean {\n    return true;\n  }\n\n  override head(): [string | undefined, string] {\n    throw new Error(\"undefined query\");\n  }\n\n  override get key(): string | undefined {\n    throw new Error(\"undefined query\");\n  }\n\n  override get value(): string {\n    throw new Error(\"undefined query\");\n  }\n\n  override tail(): UriQuery {\n    throw new Error(\"undefined query\");\n  }\n\n  /** @internal */\n  override setTail(tail: UriQuery): void {\n    throw new Error(\"undefined query\");\n  }\n\n  /** @internal */\n  override dealias(): UriQuery {\n    return this;\n  }\n\n  override updated(key: string, value: string): UriQuery {\n    return UriQuery.param(key, value, this);\n  }\n\n  override removed(key: string): UriQuery {\n    return this;\n  }\n\n  override appended(key: string | undefined, value: string): UriQuery;\n  override appended(params: UriQueryLike): UriQuery;\n  override appended(key: UriQueryLike | undefined, value?: string): UriQuery {\n    const builder = new UriQueryBuilder();\n    builder.add(key as any, value as any);\n    return builder.build();\n  }\n\n  override prepended(key: string | undefined, value: string): UriQuery;\n  override prepended(params: UriQueryLike): UriQuery;\n  override prepended(key: UriQueryLike | undefined, value?: string): UriQuery {\n    const builder = new UriQueryBuilder();\n    builder.add(key as any, value as any);\n    return builder.build();\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriQuery\").write(46/*'.'*/).write(\"undefined\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    return output; // blank\n  }\n\n  override toString(): string {\n    return \"\";\n  }\n}\n\n/** @internal */\nexport class UriQueryParam extends UriQuery {\n  constructor(key: string | undefined, value: string, tail: UriQuery) {\n    super();\n    this.key = key;\n    this.value = value;\n    this.rest = tail;\n    this.stringValue = void 0;\n  }\n\n  override readonly key: string | undefined;\n\n  override readonly value: string;\n\n  /** @internal */\n  readonly rest: UriQuery;\n\n  override isDefined(): boolean {\n    return true;\n  }\n\n  override isEmpty(): boolean {\n    return false;\n  }\n\n  override head(): [string | undefined, string] {\n    return [this.key, this.value];\n  }\n\n  override tail(): UriQuery {\n    return this.rest;\n  }\n\n  /** @internal */\n  override setTail(tail: UriQuery): void {\n    (this as Mutable<this>).rest = tail;\n  }\n\n  /** @internal */\n  override dealias(): UriQuery {\n    return new UriQueryParam(this.key, this.value, this.rest);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriQuery\").write(46/*'.'*/).write(\"parse\").write(40/*'('*/)\n                   .write(34/*'\"'*/).display(this).write(34/*'\"'*/).write(41/*')'*/);\n    return output;\n  }\n\n  override display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else {\n      output = super.display(output);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n}\n\n/** @public */\nexport class UriQueryBuilder implements PairBuilder<string | undefined, string, UriQuery> {\n  /** @internal */\n  first: UriQuery;\n  /** @internal */\n  last: UriQuery | null;\n  /** @internal */\n  size: number;\n  /** @internal */\n  aliased: number;\n\n  constructor() {\n    this.first = UriQuery.undefined();\n    this.last = null;\n    this.size = 0;\n    this.aliased = 0;\n  }\n\n  isEmpty(): boolean {\n    return this.size === 0;\n  }\n\n  add(key: string | undefined, value: string): void;\n  add(params: UriQueryLike): void;\n  add(key: UriQueryLike | undefined, value?: string): void {\n    if (value !== void 0) {\n      this.addParam(key as string | undefined, value);\n    } else if (typeof key === \"string\") {\n      this.addParam(void 0, key);\n    } else if (key instanceof UriQuery) {\n      this.addQuery(key);\n    } else {\n      const params = key!;\n      for (const k in params) {\n        let key = k as string | undefined;\n        const value = params[k]!;\n        if (k.charCodeAt(0) === 36/*'$'*/) {\n          key = void 0;\n        }\n        this.addParam(key, value);\n      }\n    }\n  }\n\n  build(): UriQuery {\n    this.aliased = 0;\n    return this.first;\n  }\n\n  addParam(value: string): void;\n  addParam(key: string | undefined, value: string): void;\n  addParam(key: string | undefined, value?: string): void {\n    if (value === void 0) {\n      value = key!;\n      key = void 0;\n    }\n    const tail = UriQuery.param(key, value, UriQuery.undefined());\n    const size = this.size;\n    if (size === 0) {\n      this.first = tail;\n    } else {\n      this.dealias(size - 1).setTail(tail);\n    }\n    this.last = tail;\n    this.size = size + 1;\n    this.aliased += 1;\n  }\n\n  addQuery(query: UriQuery): void {\n    if (query.isEmpty()) {\n      return;\n    }\n    let size = this.size;\n    if (size === 0) {\n      this.first = query;\n    } else {\n      this.dealias(size - 1).setTail(query);\n    }\n    size += 1;\n    do {\n      const tail = query.tail();\n      if (tail.isEmpty()) {\n        break;\n      }\n      query = tail;\n      size += 1;\n    } while (true);\n    this.last = query;\n    this.size = size;\n  }\n\n  /** @internal */\n  dealias(n: number): UriQuery {\n    let i = 0;\n    let xi: UriQuery | null = null;\n    let xs = this.first;\n    if (this.aliased <= n) {\n      while (i < this.aliased) {\n        xi = xs;\n        xs = xs.tail();\n        i += 1;\n      }\n      while (i <= n) {\n        const xn = xs.dealias();\n        if (i === 0) {\n          this.first = xn;\n        } else {\n          xi!.setTail(xn);\n        }\n        xi = xn;\n        xs = xs.tail();\n        i += 1;\n      }\n      if (i === this.size) {\n        this.last = xi;\n      }\n      this.aliased = i;\n    } else if (n === 0) {\n      xi = this.first;\n    } else if (n === this.size - 1) {\n      xi = this.last;\n    } else {\n      while (i <= n) {\n        xi = xs;\n        xs = xs.tail();\n        i += 1;\n      }\n    }\n    return xi!;\n  }\n\n  /** @override */\n  toString(): string {\n    return this.build().toString();\n  }\n}\n\n/** @internal */\nexport class UriQueryParser extends Parser<UriQuery> {\n  private readonly builder: UriQueryBuilder | undefined;\n  private readonly keyOutput: Output<string> | undefined;\n  private readonly valueOutput: Output<string> | undefined;\n  private readonly c1: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(builder?: UriQueryBuilder, keyOutput?: Output<string>,\n              valueOutput?: Output<string>, c1?: number, step?: number) {\n    super();\n    this.builder = builder;\n    this.keyOutput = keyOutput;\n    this.valueOutput = valueOutput;\n    this.c1 = c1;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriQuery> {\n    return UriQueryParser.parse(input, this.builder, this.keyOutput,\n                                this.valueOutput, this.c1, this.step);\n  }\n\n  static parse(input: Input, builder?: UriQueryBuilder, keyOutput?: Output<string>,\n               valueOutput?: Output<string>, c1: number = 0, step: number = 1): Parser<UriQuery> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        keyOutput = keyOutput || Utf8.decodedString();\n        while (input.isCont() && (c = input.head(), Uri.isParamChar(c))) {\n          input = input.step();\n          keyOutput.write(c);\n        }\n        if (input.isCont() && c === 61/*'='*/) {\n          input = input.step();\n          step = 4;\n        } else if (input.isCont() && c === 38/*'&'*/) {\n          input = input.step();\n          builder = builder || new UriQueryBuilder();\n          builder.addParam(keyOutput.bind());\n          keyOutput = void 0;\n          continue;\n        } else if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else if (!input.isEmpty()) {\n          builder = builder || new UriQueryBuilder();\n          builder.addParam(keyOutput.bind());\n          return Parser.done(builder.build());\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          keyOutput!.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 1;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 4) {\n        valueOutput = valueOutput || Utf8.decodedString();\n        while (input.isCont() && (c = input.head(), Uri.isParamChar(c) || c === 61/*'='*/)) {\n          input = input.step();\n          valueOutput.write(c);\n        }\n        if (input.isCont() && c === 38/*'&'*/) {\n          input = input.step();\n          builder = builder || new UriQueryBuilder();\n          builder.addParam(keyOutput!.bind(), valueOutput.bind());\n          keyOutput = void 0;\n          valueOutput = void 0;\n          step = 1;\n          continue;\n        } else if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 5;\n        } else if (!input.isEmpty()) {\n          builder = builder || new UriQueryBuilder();\n          builder.addParam(keyOutput!.bind(), valueOutput.bind());\n          return Parser.done(builder.build());\n        }\n      }\n      if (step === 5) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 6;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 6) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          valueOutput!.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 4;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new UriQueryParser(builder, keyOutput, valueOutput, c1, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Strings} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base16} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Uri} from \"./Uri\";\nimport {Utf8} from \"@swim/codec\";\n\n/** @public */\nexport type UriFragmentLike = UriFragment | string;\n\n/** @public */\nexport const UriFragmentLike = {\n  [Symbol.hasInstance](instance: unknown): instance is UriFragmentLike {\n    return instance instanceof UriFragment\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class UriFragment implements HashCode, Compare, Debug, Display {\n  /** @internal */\n  constructor(identifier: string | undefined) {\n    this.identifier = identifier;\n    this.stringValue = void 0;\n  }\n\n  likeType?(like: string): void;\n\n  isDefined(): boolean {\n    return this.identifier !== void 0;\n  }\n\n  readonly identifier: string | undefined;\n\n  toLike(): string | undefined {\n    return this.identifier;\n  }\n\n  /** @override */\n  compareTo(that: UriFragment): number {\n    if (that instanceof UriFragment) {\n      return this.toString().localeCompare(that.toString());\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof UriFragment) {\n      return this.identifier === that.identifier;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Strings.hash(this.identifier);\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"UriFragment\").write(46/*'.'*/);\n    if (this.isDefined()) {\n      output = output.write(\"parse\").write(40/*'('*/).write(34/*'\"'*/)\n                     .display(this).write(34/*'\"'*/).write(41/*')'*/);\n    } else {\n      output = output.write(\"undefined\").write(40/*'('*/).write(41/*')'*/);\n    }\n    return output;\n  }\n\n  /** @override */\n  display<T>(output: Output<T>): Output<T> {\n    const stringValue = this.stringValue;\n    if (stringValue !== void 0) {\n      output = output.write(stringValue);\n    } else if (this.identifier !== void 0) {\n      output = Uri.writeFragment(output, this.identifier);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  /** @override */\n  toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = Format.display(this);\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  @Lazy\n  static undefined(): UriFragment {\n    return new UriFragment(void 0);\n  }\n\n  static create(identifier: string | undefined): UriFragment {\n    if (identifier === void 0) {\n      return UriFragment.undefined();\n    }\n    return new UriFragment(identifier);\n  }\n\n  static fromLike<T extends UriFragmentLike | null | undefined>(value: T): UriFragment | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof UriFragment) {\n      return value as UriFragment | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return UriFragment.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(input: Input): Parser<UriFragment>;\n  static parse(string: string): UriFragment;\n  static parse(string: Input | string): Parser<UriFragment> | UriFragment {\n    const input = typeof string === \"string\" ? Unicode.stringInput(string) : string;\n    let parser = UriFragmentParser.parse(input);\n    if (typeof string === \"string\" && input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return typeof string === \"string\" ? parser.bind() : parser;\n  }\n}\n\n/** @internal */\nexport class UriFragmentParser extends Parser<UriFragment> {\n  private readonly output: Output<string> | undefined;\n  private readonly c1: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(output?: Output<string>, c1?: number, step?: number) {\n    super();\n    this.output = output;\n    this.c1 = c1;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<UriFragment> {\n    return UriFragmentParser.parse(input, this.output, this.c1, this.step);\n  }\n\n  static parse(input: Input, output?: Output<string>,\n               c1: number = 0, step: number = 1): Parser<UriFragment> {\n    let c = 0;\n    output = output || Utf8.decodedString();\n    do {\n      if (step === 1) {\n        while (input.isCont() && (c = input.head(), Uri.isFragmentChar(c))) {\n          input = input.step();\n          output = output.write(c);\n        }\n        if (input.isCont() && c === 37/*'%'*/) {\n          input = input.step();\n          step = 2;\n        } else if (!input.isEmpty()) {\n          return Parser.done(UriFragment.create(output.bind()));\n        }\n      }\n      if (step === 2) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          c1 = c;\n          step = 3;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      if (step === 3) {\n        if (input.isCont() && (c = input.head(), Base16.isDigit(c))) {\n          input = input.step();\n          output = output.write((Base16.decodeDigit(c1) << 4) | Base16.decodeDigit(c));\n          c1 = 0;\n          step = 1;\n          continue;\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.expected(\"hex digit\", input));\n        }\n      }\n      break;\n    } while (true);\n    return new UriFragmentParser(output, c1, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Attr} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\n\n/** @public */\nexport type LengthUnits = \"px\" | \"em\" | \"rem\" | \"%\" | \"\";\n\n/** @public */\nexport interface LengthBasis {\n  emUnit?: Node | number;\n  remUnit?: number;\n  pctUnit?: number;\n}\n\n/** @public */\nexport type LengthLike = Length | number | string;\n\n/** @public */\nexport const LengthLike = {\n  [Symbol.hasInstance](instance: unknown): instance is LengthLike {\n    return instance instanceof Length\n        || typeof instance === \"number\"\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class Length implements Interpolate<Length>, HashCode, Equivalent, Compare, Debug {\n  isDefined(): boolean {\n    return isFinite(this.value);\n  }\n\n  likeType?(like: number | string): void;\n\n  abstract readonly value: number;\n\n  abstract readonly units: LengthUnits;\n\n  plus(that: LengthLike, units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    that = Length.fromLike(that);\n    return Length.of(this.toValue(units, basis) + that.toValue(units, basis), units);\n  }\n\n  negative(units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    return Length.of(-this.toValue(units, basis), units);\n  }\n\n  minus(that: LengthLike, units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    that = Length.fromLike(that);\n    return Length.of(this.toValue(units, basis) - that.toValue(units, basis), units);\n  }\n\n  times(scalar: number, units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    return Length.of(this.toValue(units, basis) * scalar, units);\n  }\n\n  divide(scalar: number, units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    return Length.of(this.toValue(units, basis) / scalar, units);\n  }\n\n  combine(that: LengthLike, scalar: number = 1, units: LengthUnits = this.units, basis?: LengthBasis | number): Length {\n    that = Length.fromLike(that);\n    return Length.of(this.toValue(units, basis) + that.toValue(units, basis) * scalar, units);\n  }\n\n  abstract pxValue(basis?: LengthBasis | number): number;\n\n  emValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.pxValue(basis) / Length.emUnit(basis) : 0;\n  }\n\n  remValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.pxValue(basis) / Length.remUnit(basis) : 0;\n  }\n\n  pctValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.pxValue(basis) / Length.pctUnit(basis) : 0;\n  }\n\n  px(basis?: LengthBasis | number): PxLength {\n    return PxLength.of(this.pxValue(basis));\n  }\n\n  em(basis?: LengthBasis | number): EmLength {\n    return EmLength.of(this.emValue(basis));\n  }\n\n  rem(basis?: LengthBasis | number): RemLength {\n    return RemLength.of(this.remValue(basis));\n  }\n\n  pct(basis?: LengthBasis | number): PctLength {\n    return PctLength.of(this.pctValue(basis));\n  }\n\n  toValue(): Value;\n  toValue(units: LengthUnits, basis?: LengthBasis | number): number;\n  toValue(units?: LengthUnits, basis?: LengthBasis | number): Value | number {\n    if (units === void 0) {\n      return Text.from(this.toString());\n    }\n    switch (units) {\n      case \"px\": return this.pxValue(basis);\n      case \"em\": return this.emValue(basis);\n      case \"rem\": return this.remValue(basis);\n      case \"%\": return this.pctValue(basis);\n      default: throw new Error(\"unknown length units: \" + units);\n    }\n  }\n\n  to(units: LengthUnits, basis?: LengthBasis | number): Length {\n    switch (units) {\n      case \"px\": return this.px(basis);\n      case \"em\": return this.em(basis);\n      case \"rem\": return this.rem(basis);\n      case \"%\": return this.pct(basis);\n      default: throw new Error(\"unknown length units: \" + units);\n    }\n  }\n\n  abstract toCssValue(): CSSUnitValue | null;\n\n  /** @override */\n  interpolateTo(that: Length): Interpolator<Length>;\n  interpolateTo(that: unknown): Interpolator<Length> | null;\n  interpolateTo(that: unknown): Interpolator<Length> | null {\n    if (that instanceof Length) {\n      return LengthInterpolator(this, that);\n    }\n    return null;\n  }\n\n  /** @override */\n  abstract compareTo(that: unknown): number;\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  /** @override */\n  abstract hashCode(): number;\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  abstract toString(): string;\n\n  static zero(units?: LengthUnits): Length {\n    switch (units) {\n      case void 0:\n      case \"px\": return PxLength.zero();\n      case \"em\": return EmLength.zero();\n      case \"rem\": return RemLength.zero();\n      case \"%\": return PctLength.zero();\n      case \"\": return UnitlessLength.zero();\n      default: throw new Error(\"unknown length units: \" + units);\n    }\n  }\n\n  static px(value: number): PxLength {\n    return PxLength.of(value);\n  }\n\n  static em(value: number): EmLength {\n    return EmLength.of(value);\n  }\n\n  static rem(value: number): RemLength {\n    return RemLength.of(value);\n  }\n\n  static pct(value: number): PctLength {\n    return PctLength.of(value);\n  }\n\n  static unitless(value: number): UnitlessLength {\n    return UnitlessLength.of(value);\n  }\n\n  static of(value: number, units?: LengthUnits): Length {\n    switch (units) {\n      case void 0:\n      case \"px\": return PxLength.of(value);\n      case \"em\": return EmLength.of(value);\n      case \"rem\": return RemLength.of(value);\n      case \"%\": return PctLength.of(value);\n      case \"\": return UnitlessLength.of(value);\n      default: throw new Error(\"unknown length units: \" + units);\n    }\n  }\n\n  static fromCssValue(value: CSSStyleValue): Length {\n    if (value instanceof CSSUnitValue) {\n      return Length.of(value.value, value.unit as LengthUnits);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromLike<T extends LengthLike | null | undefined>(value: T, defaultUnits?: LengthUnits): Length | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof Length) {\n      return value as Length | Uninitable<T>;\n    } else if (typeof value === \"number\") {\n      return Length.of(value, defaultUnits);\n    } else if (typeof value === \"string\") {\n      return Length.parse(value, defaultUnits);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromValue(value: Value): Length | null {\n    if (value.length !== 2) {\n      return null;\n    }\n    const num = value.getItem(0).numberValue(void 0);\n    const units = value.getItem(1);\n    if (num === void 0 || !isFinite(num) || !(units instanceof Attr) || units.value !== Value.extant()) {\n      return null;\n    }\n    switch (units.key.value) {\n      case \"px\": return PxLength.of(num);\n      case \"em\": return EmLength.of(num);\n      case \"rem\": return RemLength.of(num);\n      case \"pct\": return PctLength.of(num);\n      default: return null;\n    }\n  }\n\n  static parse(string: string, defaultUnits?: LengthUnits): Length {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = LengthParser.parse(input, defaultUnits);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n\n  @Lazy\n  static form(): Form<Length, LengthLike> {\n    return new LengthForm(void 0, Length.zero());\n  }\n\n  /** @internal */\n  static emUnit(basis?: LengthBasis | number): number {\n    if (basis === void 0 || typeof basis === \"number\") {\n      throw new Error(\"unknown em unit: \" + basis);\n    }\n    const emUnit = basis.emUnit;\n    if (typeof emUnit === \"number\") {\n      return emUnit;\n    } else if (!(emUnit instanceof Node)) {\n      throw new Error(\"unknown em unit: \" + emUnit);\n    }\n    let node: Node | null = emUnit;\n    while (node !== null) {\n      if (node instanceof Element) {\n        const fontSize = getComputedStyle(node).fontSize;\n        if (typeof fontSize === \"string\") {\n          return parseFloat(fontSize);\n        }\n      }\n      node = node.parentNode;\n    }\n    throw new Error(\"unknown em unit: \" + emUnit);\n  }\n\n  /** @internal */\n  static remUnit(basis?: LengthBasis | number): number {\n    if (basis !== void 0 && typeof basis !== \"number\") {\n      const remUnit = basis.remUnit;\n      if (typeof remUnit === \"number\") {\n        return remUnit;\n      }\n    }\n    const fontSize = getComputedStyle(document.documentElement).fontSize;\n    if (typeof fontSize === \"string\") {\n      return parseFloat(fontSize);\n    }\n    throw new Error(\"unknown rem unit\");\n  }\n\n  /** @internal */\n  static pctUnit(basis?: LengthBasis | number): number {\n    if (typeof basis === \"number\") {\n      return basis;\n    } else if (basis !== void 0) {\n      const pctUnit = basis.pctUnit;\n      if (typeof pctUnit === \"number\") {\n        return pctUnit;\n      }\n    }\n    throw new Error(\"unknown percentage unit\");\n  }\n}\n\n/** @public */\nexport class PxLength extends Length {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"px\" {\n    return \"px\";\n  }\n\n  override pxValue(basis?: LengthBasis | number): number {\n    return this.value;\n  }\n\n  override px(basis?: LengthBasis | number): PxLength {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"px\");\n    }\n    return null;\n  }\n\n  override valueOf(): number {\n    return this.value;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Length) {\n      const x = this.value;\n      const y = that.pxValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Length) {\n      return Numbers.equivalent(this.value, that.pxValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof PxLength) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(PxLength), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Length\").write(46/*'.'*/).write(\"px\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"px\";\n  }\n\n  @Lazy\n  static override zero(): PxLength {\n    return new PxLength(0);\n  }\n\n  static override of(value: number): PxLength {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new PxLength(value);\n  }\n}\n\n/** @public */\nexport class EmLength extends Length {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"em\" {\n    return \"em\";\n  }\n\n  override pxValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.value * Length.emUnit(basis) : 0;\n  }\n\n  override emValue(basis?: LengthBasis | number): number {\n    return this.value;\n  }\n\n  override em(basis?: LengthBasis | number): EmLength {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"em\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Length) {\n      const x = this.value;\n      const y = that.emValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Length) {\n      return Numbers.equivalent(this.value, that.emValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof EmLength) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(EmLength), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Length\").write(46/*'.'*/).write(\"em\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"em\";\n  }\n\n  @Lazy\n  static override zero(): EmLength {\n    return new EmLength(0);\n  }\n\n  static override of(value: number): EmLength {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new EmLength(value);\n  }\n}\n\n/** @public */\nexport class RemLength extends Length {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"rem\" {\n    return \"rem\";\n  }\n\n  override pxValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.value * Length.remUnit(basis) : 0;\n  }\n\n  override remValue(basis?: LengthBasis | number): number {\n    return this.value;\n  }\n\n  override rem(basis?: LengthBasis | number): RemLength {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"rem\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof RemLength) {\n      const x = this.value;\n      const y = that.remValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof RemLength) {\n      return Numbers.equivalent(this.value, that.remValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof RemLength) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(RemLength), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Length\").write(46/*'.'*/).write(\"rem\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"rem\";\n  }\n\n  @Lazy\n  static override zero(): RemLength {\n    return new RemLength(0);\n  }\n\n  static override of(value: number): RemLength {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new RemLength(value);\n  }\n}\n\n/** @public */\nexport class PctLength extends Length {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"%\" {\n    return \"%\";\n  }\n\n  override pxValue(basis?: LengthBasis | number): number {\n    return this.value !== 0 ? this.value * Length.pctUnit(basis) / 100 : 0;\n  }\n\n  override pctValue(basis?: LengthBasis | number): number {\n    return this.value;\n  }\n\n  override pct(basis?: LengthBasis | number): PctLength {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"percent\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Length) {\n      const x = this.value;\n      const y = that.pctValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Length) {\n      return Numbers.equivalent(this.value, that.pctValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof PctLength) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(PctLength), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Length\").write(46/*'.'*/).write(\"pct\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"%\";\n  }\n\n  @Lazy\n  static override zero(): PctLength {\n    return new PctLength(0);\n  }\n\n  static override of(value: number): PctLength {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new PctLength(value);\n  }\n}\n\n/** @public */\nexport class UnitlessLength extends Length {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"\" {\n    return \"\";\n  }\n\n  override pxValue(basis?: LengthBasis | number): number {\n    throw new Error(\"unitless length\");\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Length) {\n      const x = this.value;\n      const y = that.value;\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Length) {\n      return Numbers.equivalent(this.value, that.value);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof UnitlessLength) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(UnitlessLength), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Length\").write(46/*'.'*/).write(\"unitless\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"\";\n  }\n\n  @Lazy\n  static override zero(): UnitlessLength {\n    return new UnitlessLength(0);\n  }\n\n  static override of(value: number): UnitlessLength {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new UnitlessLength(value);\n  }\n}\n\n/** @internal */\nexport const LengthInterpolator = (function (_super: typeof Interpolator) {\n  const LengthInterpolator = function (l0: Length, l1: Length): Interpolator<Length> {\n    const interpolator = function (u: number): Length {\n      const l0 = interpolator[0];\n      const l1 = interpolator[1];\n      return Length.of(l0.value + u * (l1.value - l0.value), l1.units);\n    } as Interpolator<Length>;\n    Object.setPrototypeOf(interpolator, LengthInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = l0.to(l1.units);\n    (interpolator as Mutable<typeof interpolator>)[1] = l1;\n    return interpolator;\n  } as {\n    (l0: Length, l1: Length): Interpolator<Length>;\n\n    /** @internal */\n    prototype: Interpolator<Length>;\n  };\n\n  LengthInterpolator.prototype = Object.create(_super.prototype);\n  LengthInterpolator.prototype.constructor = LengthInterpolator;\n\n  return LengthInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class LengthForm extends Form<Length, LengthLike> {\n  constructor(defaultUnits: LengthUnits | undefined, unit: Length | undefined) {\n    super();\n    this.defaultUnits = defaultUnits;\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  readonly defaultUnits: LengthUnits | undefined;\n\n  override readonly unit: Length | undefined;\n\n  override withUnit(unit: Length | undefined): Form<Length, LengthLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new LengthForm(this.defaultUnits, unit);\n  }\n\n  override mold(length: LengthLike): Item {\n    length = Length.fromLike(length, this.defaultUnits);\n    return Text.from(length.toString());\n  }\n\n  override cast(item: Item): Length | undefined {\n    const value = item.toValue();\n    let length: Length | null = null;\n    try {\n      length = Length.fromValue(value);\n      if (length !== void 0) {\n        const string = value.stringValue(void 0);\n        if (string !== void 0) {\n          length = Length.parse(string, this.defaultUnits);\n        }\n      }\n    } catch (e) {\n      // swallow\n    }\n    return length !== null ? length : void 0;\n  }\n}\n\n/** @internal */\nexport class LengthParser extends Parser<Length> {\n  private readonly defaultUnits: LengthUnits | undefined;\n  private readonly valueParser: Parser<number> | undefined;\n  private readonly unitsOutput: Output<string> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(defaultUnits?: LengthUnits, valueParser?: Parser<number>,\n              unitsOutput?: Output<string>, step?: number) {\n    super();\n    this.defaultUnits = defaultUnits;\n    this.valueParser = valueParser;\n    this.unitsOutput = unitsOutput;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<Length> {\n    return LengthParser.parse(input, this.defaultUnits, this.valueParser,\n                              this.unitsOutput, this.step);\n  }\n\n  static parse(input: Input, defaultUnits?: LengthUnits, valueParser?: Parser<number>,\n               unitsOutput?: Output<string>, step: number = 1): Parser<Length> {\n    let c = 0;\n    if (step === 1) {\n      if (valueParser === void 0) {\n        valueParser = Base10.parseDecimal(input);\n      } else {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 2;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 2) {\n      unitsOutput = unitsOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || c === 37/*'%'*/)) {\n        input = input.step();\n        unitsOutput.push(c);\n      }\n      if (!input.isEmpty()) {\n        const value = valueParser!.bind();\n        const units = unitsOutput.bind() || defaultUnits;\n        switch (units) {\n          case \"px\": return Parser.done(Length.px(value));\n          case \"em\": return Parser.done(Length.em(value));\n          case \"rem\": return Parser.done(Length.rem(value));\n          case \"%\": return Parser.done(Length.pct(value));\n          case \"\":\n          case void 0: return Parser.done(Length.unitless(value));\n          default: return Parser.error(Diagnostic.message(\"unknown length units: \" + units, input));\n        }\n      }\n    }\n    return new LengthParser(defaultUnits, valueParser, unitsOutput, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Attr} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\n\n/** @public */\nexport type AngleUnits = \"deg\" | \"rad\" | \"grad\" | \"turn\";\n\n/** @public */\nexport type AngleLike = Angle | string | number;\n\n/** @public */\nexport const AngleLike = {\n  [Symbol.hasInstance](instance: unknown): instance is AngleLike {\n    return instance instanceof Angle\n        || typeof instance === \"number\"\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class Angle implements Interpolate<Angle>, HashCode, Equivalent, Compare, Debug {\n  isDefined(): boolean {\n    return isFinite(this.value);\n  }\n\n  likeType?(like: string | number): void;\n\n  abstract readonly value: number;\n\n  abstract readonly units: AngleUnits;\n\n  plus(that: AngleLike, units: AngleUnits = this.units): Angle {\n    that = Angle.fromLike(that);\n    return Angle.of(this.toValue(units) + that.toValue(units), units);\n  }\n\n  negative(units: AngleUnits = this.units): Angle {\n    return Angle.of(-this.toValue(units), units);\n  }\n\n  minus(that: AngleLike, units: AngleUnits = this.units): Angle {\n    that = Angle.fromLike(that);\n    return Angle.of(this.toValue(units) - that.toValue(units), units);\n  }\n\n  times(scalar: number, units: AngleUnits = this.units): Angle {\n    return Angle.of(this.toValue(units) * scalar, units);\n  }\n\n  divide(scalar: number, units: AngleUnits = this.units): Angle {\n    return Angle.of(this.toValue(units) / scalar, units);\n  }\n\n  combine(that: AngleLike, scalar: number = 1, units: AngleUnits = this.units): Angle {\n    that = Angle.fromLike(that);\n    return Angle.of(this.toValue(units) + that.toValue(units) * scalar, units);\n  }\n\n  norm(total: AngleLike, units: AngleUnits = this.units): Angle {\n    total = Angle.fromLike(total);\n    return Angle.of(this.toValue(units) / total.toValue(units), units);\n  }\n\n  abstract degValue(): number;\n\n  abstract gradValue(): number;\n\n  abstract radValue(): number;\n\n  abstract turnValue(): number;\n\n  deg(): DegAngle {\n    return DegAngle.of(this.degValue());\n  }\n\n  rad(): RadAngle {\n    return RadAngle.of(this.radValue());\n  }\n\n  grad(): GradAngle {\n    return GradAngle.of(this.gradValue());\n  }\n\n  turn(): TurnAngle {\n    return TurnAngle.of(this.turnValue());\n  }\n\n  toValue(): Value;\n  toValue(units: AngleUnits): number;\n  toValue(units?: AngleUnits): Value | number {\n    if (units === void 0) {\n      return Text.from(this.toString());\n    }\n    switch (units) {\n      case \"deg\": return this.degValue();\n      case \"rad\": return this.radValue();\n      case \"grad\": return this.gradValue();\n      case \"turn\": return this.turnValue();\n      default: throw new Error(\"unknown angle units: \" + units);\n    }\n  }\n\n  to(units: AngleUnits): Angle {\n    switch (units) {\n      case \"deg\": return this.deg();\n      case \"rad\": return this.rad();\n      case \"grad\": return this.grad();\n      case \"turn\": return this.turn();\n      default: throw new Error(\"unknown angle units: \" + units);\n    }\n  }\n\n  abstract toCssValue(): CSSUnitValue | null;\n\n  /** @override */\n  interpolateTo(that: Angle): Interpolator<Angle>;\n  interpolateTo(that: unknown): Interpolator<Angle> | null;\n  interpolateTo(that: unknown): Interpolator<Angle> | null {\n    if (that instanceof Angle) {\n      return AngleInterpolator(this, that);\n    }\n    return null;\n  }\n\n  /** @override */\n  abstract compareTo(that: unknown): number;\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  /** @override */\n  abstract hashCode(): number;\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  abstract toString(): string;\n\n  static zero(units?: AngleUnits): Angle {\n    switch (units) {\n      case \"deg\": return DegAngle.zero();\n      case void 0:\n      case \"rad\": return RadAngle.zero();\n      case \"grad\": return GradAngle.zero();\n      case \"turn\": return TurnAngle.zero();\n      default: throw new Error(\"unknown angle units: \" + units);\n    }\n  }\n\n  static deg(value: number): DegAngle {\n    return DegAngle.of(value);\n  }\n\n  static rad(value: number): RadAngle {\n    return RadAngle.of(value);\n  }\n\n  static grad(value: number): GradAngle {\n    return GradAngle.of(value);\n  }\n\n  static turn(value: number): TurnAngle {\n    return TurnAngle.of(value);\n  }\n\n  static of(value: number, units?: AngleUnits): Angle {\n    switch (units) {\n      case \"deg\": return DegAngle.of(value);\n      case void 0:\n      case \"rad\": return RadAngle.of(value);\n      case \"grad\": return GradAngle.of(value);\n      case \"turn\": return TurnAngle.of(value);\n      default: throw new Error(\"unknown angle units: \" + units);\n    }\n  }\n\n  static fromCssValue(value: CSSStyleValue): Angle {\n    if (value instanceof CSSUnitValue) {\n      return Angle.of(value.value, value.unit as AngleUnits);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromLike<T extends AngleLike | null | undefined>(value: T, defaultUnits?: AngleUnits): Angle | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof Angle) {\n      return value as Angle | Uninitable<T>;\n    } else if (typeof value === \"number\") {\n      return Angle.of(value, defaultUnits);\n    } else if (typeof value === \"string\") {\n      return Angle.parse(value, defaultUnits);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromValue(value: Value): Angle | null {\n    if (value.length !== 2) {\n      return null;\n    }\n    const num = value.getItem(0).numberValue();\n    const units = value.getItem(1);\n    if (num === void 0 || !isFinite(num) || !(units instanceof Attr) || units.toValue() !== Value.extant()) {\n      return null;\n    }\n    switch (units.key.value) {\n      case \"deg\": return DegAngle.of(num);\n      case \"rad\": return RadAngle.of(num);\n      case \"grad\": return GradAngle.of(num);\n      case \"turn\": return TurnAngle.of(num);\n      default: return null;\n    }\n  }\n\n  static parse(string: string, defaultUnits?: AngleUnits): Angle {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = AngleParser.parse(input, defaultUnits);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n\n  @Lazy\n  static form(): Form<Angle, AngleLike> {\n    return new AngleForm(void 0, Angle.zero());\n  }\n}\n\n/** @public */\nexport class DegAngle extends Angle {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"deg\" {\n    return \"deg\";\n  }\n\n  override degValue(): number {\n    return this.value;\n  }\n\n  override gradValue(): number {\n    return this.value * 10 / 9;\n  }\n\n  override radValue(): number {\n    return this.value * Math.PI / 180;\n  }\n\n  override turnValue(): number {\n    return this.value / 360;\n  }\n\n  override deg(): DegAngle {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"deg\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Angle) {\n      const x = this.value;\n      const y = that.degValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Angle) {\n      return Numbers.equivalent(this.value, that.degValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof DegAngle) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(DegAngle), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Angle\").write(46/*'.'*/).write(\"deg\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"deg\";\n  }\n\n  @Lazy\n  static override zero(): DegAngle {\n    return new DegAngle(0);\n  }\n\n  static override of(value: number): DegAngle {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new DegAngle(value);\n  }\n}\n\n/** @public */\nexport class RadAngle extends Angle {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"rad\" {\n    return \"rad\";\n  }\n\n  override degValue(): number {\n    return this.value * 180 / Math.PI;\n  }\n\n  override gradValue(): number {\n    return this.value * 200 / Math.PI;\n  }\n\n  override radValue(): number {\n    return this.value;\n  }\n\n  override turnValue(): number {\n    return this.value / (2 * Math.PI);\n  }\n\n  override rad(): RadAngle {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"rad\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Angle) {\n      const x = this.value;\n      const y = that.radValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Angle) {\n      return Numbers.equivalent(this.value, that.radValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof RadAngle) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(RadAngle), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Angle\").write(46/*'.'*/).write(\"rad\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"rad\";\n  }\n\n  @Lazy\n  static override zero(): RadAngle {\n    return new RadAngle(0);\n  }\n\n  static override of(value: number): RadAngle {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new RadAngle(value);\n  }\n}\n\n/** @public */\nexport class GradAngle extends Angle {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  override readonly value: number;\n\n  override get units(): \"grad\" {\n    return \"grad\";\n  }\n\n  override degValue(): number {\n    return this.value * 0.9;\n  }\n\n  override gradValue(): number {\n    return this.value;\n  }\n\n  override radValue(): number {\n    return this.value * Math.PI / 200;\n  }\n\n  override turnValue(): number {\n    return this.value / 400;\n  }\n\n  override grad(): GradAngle {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"grad\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Angle) {\n      const x = this.value;\n      const y = that.gradValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Angle) {\n      return Numbers.equivalent(this.value, that.gradValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof GradAngle) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(GradAngle), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Angle\").write(46/*'.'*/).write(\"grad\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"grad\";\n  }\n\n  @Lazy\n  static override zero(): GradAngle {\n    return new GradAngle(0);\n  }\n\n  static override of(value: number): GradAngle {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new GradAngle(value);\n  }\n}\n\n/** @public */\nexport class TurnAngle extends Angle {\n  constructor(value: number) {\n    super();\n    this.value = value;\n  }\n\n  readonly value: number;\n\n  override get units(): \"turn\" {\n    return \"turn\";\n  }\n\n  override degValue(): number {\n    return this.value * 360;\n  }\n\n  override gradValue(): number {\n    return this.value * 400;\n  }\n\n  override radValue(): number {\n    return this.value * (2 * Math.PI);\n  }\n\n  override turnValue(): number {\n    return this.value;\n  }\n\n  override turn(): TurnAngle {\n    return this;\n  }\n\n  override toCssValue(): CSSUnitValue | null {\n    if (typeof CSSUnitValue !== \"undefined\") {\n      return new CSSUnitValue(this.value, \"turn\");\n    }\n    return null;\n  }\n\n  override compareTo(that: unknown): number {\n    if (that instanceof Angle) {\n      const x = this.value;\n      const y = that.turnValue();\n      return x < y ? -1 : x > y ? 1 : isNaN(y) ? (isNaN(x) ? 0 : -1) : isNaN(x) ? 1 : 0;\n    }\n    return NaN;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof Angle) {\n      return Numbers.equivalent(this.value, that.turnValue());\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof TurnAngle) {\n      return this.value === that.value;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(TurnAngle), Numbers.hash(this.value)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Angle\").write(46/*'.'*/).write(\"turn\")\n                   .write(40/*'('*/).debug(this.value).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return this.value + \"turn\";\n  }\n\n  @Lazy\n  static override zero(): TurnAngle {\n    return new TurnAngle(0);\n  }\n\n  static override of(value: number): TurnAngle {\n    if (value === 0) {\n      return this.zero();\n    }\n    return new TurnAngle(value);\n  }\n}\n\n/** @internal */\nexport const AngleInterpolator = (function (_super: typeof Interpolator) {\n  const AngleInterpolator = function (a0: Angle, a1: Angle): Interpolator<Angle> {\n    const interpolator = function (u: number): Angle {\n      const a0 = interpolator[0];\n      const a1 = interpolator[1];\n      return Angle.of(a0.value + u * (a1.value - a0.value), a1.units);\n    } as Interpolator<Angle>;\n    Object.setPrototypeOf(interpolator, AngleInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = a0.to(a1.units);\n    (interpolator as Mutable<typeof interpolator>)[1] = a1;\n    return interpolator;\n  } as {\n    (a0: Angle, a1: Angle): Interpolator<Angle>;\n\n    /** @internal */\n    prototype: Interpolator<Angle>;\n  };\n\n  AngleInterpolator.prototype = Object.create(_super.prototype);\n  AngleInterpolator.prototype.constructor = AngleInterpolator;\n\n  return AngleInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class AngleForm extends Form<Angle, AngleLike> {\n  constructor(defaultUnits: AngleUnits | undefined, unit: Angle | undefined) {\n    super();\n    this.defaultUnits = defaultUnits;\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  readonly defaultUnits: AngleUnits | undefined;\n\n  override readonly unit: Angle | undefined;\n\n  override withUnit(unit: Angle | undefined): Form<Angle, AngleLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new AngleForm(this.defaultUnits, unit);\n  }\n\n  override mold(angle: AngleLike): Item {\n    angle = Angle.fromLike(angle, this.defaultUnits);\n    return Text.from(angle.toString());\n  }\n\n  override cast(item: Item): Angle | undefined {\n    const value = item.toValue();\n    let angle: Angle | null = null;\n    try {\n      angle = Angle.fromValue(value);\n      if (angle === void 0) {\n        const string = value.stringValue(void 0);\n        if (string !== void 0) {\n          angle = Angle.parse(string, this.defaultUnits);\n        }\n      }\n    } catch (e) {\n      // swallow\n    }\n    return angle !== null ? angle : void 0;\n  }\n}\n\n/** @internal */\nexport class AngleParser extends Parser<Angle> {\n  private readonly defaultUnits: AngleUnits | undefined;\n  private readonly valueParser: Parser<number> | undefined;\n  private readonly unitsOutput: Output<string> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(defaultUnits?: AngleUnits, valueParser?: Parser<number>,\n              unitsOutput?: Output<string>, step?: number) {\n    super();\n    this.defaultUnits = defaultUnits;\n    this.valueParser = valueParser;\n    this.unitsOutput = unitsOutput;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<Angle> {\n    return AngleParser.parse(input, this.defaultUnits, this.valueParser,\n                             this.unitsOutput, this.step);\n  }\n\n  static parse(input: Input, defaultUnits?: AngleUnits, valueParser?: Parser<number>,\n               unitsOutput?: Output<string>, step: number = 1): Parser<Angle> {\n    let c = 0;\n    if (step === 1) {\n      if (valueParser === void 0) {\n        valueParser = Base10.parseDecimal(input);\n      } else {\n        valueParser = valueParser.feed(input);\n      }\n      if (valueParser.isDone()) {\n        step = 2;\n      } else if (valueParser.isError()) {\n        return valueParser.asError();\n      }\n    }\n    if (step === 2) {\n      unitsOutput = unitsOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input = input.step();\n        unitsOutput.push(c);\n      }\n      if (!input.isEmpty()) {\n        const value = valueParser!.bind();\n        const units = unitsOutput.bind() || defaultUnits;\n        switch (units) {\n          case \"deg\": return Parser.done(Angle.deg(value));\n          case \"\":\n          case \"rad\": return Parser.done(Angle.rad(value));\n          case \"grad\": return Parser.done(Angle.grad(value));\n          case \"turn\": return Parser.done(Angle.turn(value));\n          default: return Parser.error(Diagnostic.message(\"unknown units: \" + units, input));\n        }\n      }\n    }\n    return new AngleParser(defaultUnits, valueParser, unitsOutput, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\n\n/** @public */\nexport type R2VectorLike = R2Vector | R2VectorInit;\n\n/** @public */\nexport const R2VectorLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2VectorLike {\n    return instance instanceof R2Vector\n        || R2VectorInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface R2VectorInit {\n  /** @internal */\n  readonly typeid?: \"R2VectorInit\";\n  x: number;\n  y: number;\n}\n\n/** @public */\nexport const R2VectorInit = {\n  [Symbol.hasInstance](instance: unknown): instance is R2VectorInit {\n    return Objects.hasAllKeys<R2VectorInit>(instance, \"x\", \"y\");\n  },\n};\n\n/** @public */\nexport class R2Vector implements Interpolate<R2Vector>, Equivalent, HashCode, Debug {\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"R2Vector\";\n\n  likeType?(like: R2VectorInit): void;\n\n  isDefined(): boolean {\n    return isFinite(this.x) && isFinite(this.y);\n  }\n\n  readonly x: number;\n\n  readonly y: number;\n\n  plus(that: R2VectorLike): R2Vector {\n    return new R2Vector(this.x + that.x, this.y + that.y);\n  }\n\n  negative(): R2Vector {\n    return new R2Vector(-this.x, -this.y);\n  }\n\n  minus(that: R2VectorLike): R2Vector {\n    return new R2Vector(this.x - that.x, this.y - that.y);\n  }\n\n  times(scalar: number): R2Vector {\n    return new R2Vector(this.x * scalar, this.y * scalar);\n  }\n\n  toLike(): R2VectorInit {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: R2Vector): Interpolator<R2Vector>;\n  interpolateTo(that: unknown): Interpolator<R2Vector> | null;\n  interpolateTo(that: unknown): Interpolator<R2Vector> | null {\n    if (that instanceof R2Vector) {\n      return R2VectorInterpolator(this, that);\n    }\n    return null;\n  }\n\n  /** @override */\n  equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Vector) {\n      return Numbers.equivalent(this.x, that.x, epsilon)\n          && Numbers.equivalent(this.y, that.y, epsilon);\n    }\n    return false;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Vector) {\n      return this.x === that.x && this.y === that.y;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(R2Vector),\n        Numbers.hash(this.x)), Numbers.hash(this.y)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Vector\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.x).write(\", \").debug(this.y).write(41/*')'*/);\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static zero(): R2Vector {\n    return new R2Vector(0, 0);\n  }\n\n  static of(x: number, y: number): R2Vector {\n    return new R2Vector(x, y);\n  }\n\n  static fromLike<T extends R2VectorLike | null | undefined>(value: T): R2Vector | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Vector) {\n      return value as R2Vector | Uninitable<T>;\n    } else if (R2VectorInit[Symbol.hasInstance](value)) {\n      return R2Vector.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: R2VectorInit): R2Vector {\n    return new R2Vector(init.x, init.y);\n  }\n}\n\n/** @internal */\nexport const R2VectorInterpolator = (function (_super: typeof Interpolator) {\n  const R2VectorInterpolator = function (v0: R2Vector, v1: R2Vector): Interpolator<R2Vector> {\n    const interpolator = function (u: number): R2Vector {\n      const v0 = interpolator[0];\n      const v1 = interpolator[1];\n      const x = v0.x + u * (v1.x - v0.x);\n      const y = v0.y + u * (v1.y - v0.y);\n      return new R2Vector(x, y);\n    } as Interpolator<R2Vector>;\n    Object.setPrototypeOf(interpolator, R2VectorInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = v0;\n    (interpolator as Mutable<typeof interpolator>)[1] = v1;\n    return interpolator;\n  } as {\n    (v0: R2Vector, v1: R2Vector): Interpolator<R2Vector>;\n\n    /** @internal */\n    prototype: Interpolator<R2Vector>;\n  };\n\n  R2VectorInterpolator.prototype = Object.create(_super.prototype);\n  R2VectorInterpolator.prototype.constructor = R2VectorInterpolator;\n\n  return R2VectorInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Equals} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {R2Function} from \"./R2Function\";\nimport {R2PointInit} from \"./\"; // forward import\nimport {R2PointTuple} from \"./\"; // forward import\nimport {R2Point} from \"./\"; // forward import\nimport {R2SegmentInit} from \"./\"; // forward import\nimport {R2Segment} from \"./\"; // forward import\nimport {R2Path} from \"./\"; // forward import\nimport {R2BoxInit} from \"./\"; // forward import\nimport {R2Box} from \"./\"; // forward import\nimport {R2CircleInit} from \"./\"; // forward import\nimport {R2Circle} from \"./\"; // forward import\n\n/** @public */\nexport type R2ShapeLike = R2Shape\n                        | R2PointInit\n                        | R2PointTuple\n                        | R2SegmentInit\n                        | R2BoxInit\n                        | R2CircleInit\n                        | string;\n\n/** @public */\nexport const R2ShapeLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2ShapeLike {\n    return instance instanceof R2Shape\n        || R2PointInit[Symbol.hasInstance](instance)\n        || R2PointTuple[Symbol.hasInstance](instance)\n        || R2SegmentInit[Symbol.hasInstance](instance)\n        || R2BoxInit[Symbol.hasInstance](instance)\n        || R2Circle[Symbol.hasInstance](instance)\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class R2Shape implements Equals, Equivalent {\n  /** @internal */\n  declare readonly typeid?: string;\n\n  likeType?(like: R2PointInit\n                | R2PointTuple\n                | R2SegmentInit\n                | R2BoxInit\n                | R2CircleInit\n                | string): void;\n\n  abstract isDefined(): boolean;\n\n  abstract readonly xMin: number;\n\n  abstract readonly yMin: number;\n\n  abstract readonly xMax: number;\n\n  abstract readonly yMax: number;\n\n  abstract contains(that: R2ShapeLike): boolean;\n\n  abstract contains(x: number, y: number): boolean;\n\n  abstract intersects(that: R2ShapeLike): boolean;\n\n  union(that: R2ShapeLike): R2Shape {\n    that = R2Shape.fromLike(that);\n    return new R2Box(Math.min(this.xMin, that.xMin),\n                     Math.min(this.yMin, that.yMin),\n                     Math.max(this.xMax, that.xMax),\n                     Math.max(this.yMax, that.yMax));\n  }\n\n  abstract transform(f: R2Function): R2Shape;\n\n  get bounds(): R2Box {\n    return new R2Box(this.xMin, this.yMin, this.xMax, this.yMax);\n  }\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  static fromLike<T extends R2ShapeLike | null | undefined>(value: T): R2Shape | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Shape) {\n      return value as R2Shape | Uninitable<T>;\n    } else if (R2PointInit[Symbol.hasInstance](value)) {\n      return R2Point.fromInit(value);\n    } else if (R2PointTuple[Symbol.hasInstance](value)) {\n      return R2Point.fromTuple(value);\n    } else if (R2SegmentInit[Symbol.hasInstance](value)) {\n      return R2Segment.fromInit(value);\n    } else if (R2BoxInit[Symbol.hasInstance](value)) {\n      return R2Box.fromInit(value);\n    } else if (R2CircleInit[Symbol.hasInstance](value)) {\n      return R2Circle.fromInit(value);\n    } else if (typeof value === \"string\") {\n      return R2Path.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2VectorLike} from \"./R2Vector\";\nimport {R2Vector} from \"./R2Vector\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\n\n/** @public */\nexport type R2PointLike = R2Point | R2PointInit | R2PointTuple;\n\n/** @public */\nexport const R2PointLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2PointLike {\n    return instance instanceof R2Point\n        || R2PointInit[Symbol.hasInstance](instance)\n        || R2PointTuple[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface R2PointInit {\n  /** @internal */\n  readonly typeid?: \"R2PointInit\";\n  x: number;\n  y: number;\n}\n\n/** @public */\nexport const R2PointInit = {\n  [Symbol.hasInstance](instance: unknown): instance is R2PointInit {\n    return Objects.hasAllKeys<R2PointInit>(instance, \"x\", \"y\");\n  },\n};\n\n/** @public */\nexport type R2PointTuple = [number, number];\n\n/** @public */\nexport const R2PointTuple = {\n  [Symbol.hasInstance](instance: unknown): instance is R2PointTuple {\n    return Array.isArray(instance) && instance.length === 2\n        && typeof instance[0] === \"number\"\n        && typeof instance[1] === \"number\";\n  },\n};\n\n/** @public */\nexport class R2Point extends R2Shape implements Interpolate<R2Point>, HashCode, Debug {\n  constructor(x: number, y: number) {\n    super();\n    this.x = x;\n    this.y = y;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"R2Point\";\n\n  override likeType?(like: R2PointInit | R2PointTuple): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.x) && isFinite(this.y);\n  }\n\n  readonly x: number;\n\n  readonly y: number;\n\n  override get xMin(): number {\n    return this.x;\n  }\n\n  override get yMin(): number {\n    return this.y;\n  }\n\n  override get xMax(): number {\n    return this.x;\n  }\n\n  override get yMax(): number {\n    return this.y;\n  }\n\n  plus(vector: R2VectorLike): R2Point {\n    return new R2Point(this.x + vector.x, this.y + vector.y);\n  }\n\n  minus(vector: R2Vector): R2Point;\n  minus(that: R2Point): R2Vector;\n  minus(that: R2Vector | R2Point): R2Point | R2Vector {\n    if (that instanceof R2Vector) {\n      return new R2Point(this.x - that.x, this.y - that.y);\n    }\n    return new R2Vector(this.x - that.x, this.y - that.y);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    if (typeof that === \"number\") {\n      return this.x === that && this.y === y!;\n    }\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.x === that.x && this.y === that.y;\n    } else if (that instanceof R2Shape) {\n      return this.x <= that.xMin && that.xMax <= this.x\n          && this.y <= that.yMin && that.yMax <= this.y;\n    }\n    return false;\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    that = R2Shape.fromLike(that);\n    return that.intersects(this);\n  }\n\n  override transform(f: R2Function): R2Point {\n    return new R2Point(f.transformX(this.x, this.y), f.transformY(this.x, this.y));\n  }\n\n  toLike(): R2PointInit {\n    return {\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: R2Point): Interpolator<R2Point>;\n  interpolateTo(that: unknown): Interpolator<R2Point> | null;\n  interpolateTo(that: unknown): Interpolator<R2Point> | null {\n    if (that instanceof R2Point) {\n      return R2PointInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Point) {\n      return Numbers.equivalent(this.x, that.x, epsilon)\n          && Numbers.equivalent(this.y, that.y, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Point) {\n      return this.x === that.x && this.y === that.y;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(R2Point),\n        Numbers.hash(this.x)), Numbers.hash(this.y)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Point\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.x).write(\", \").debug(this.y).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static undefined(): R2Point {\n    return new R2Point(NaN, NaN);\n  }\n\n  @Lazy\n  static origin(): R2Point {\n    return new R2Point(0, 0);\n  }\n\n  static of(x: number, y: number): R2Point {\n    return new R2Point(x, y);\n  }\n\n  static override fromLike<T extends R2PointLike | null | undefined>(value: T): R2Point | Uninitable<T>;\n  static override fromLike<T extends R2ShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends R2PointLike | null | undefined>(value: T): R2Point | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Point) {\n      return value as R2Point | Uninitable<T>;\n    } else if (R2PointInit[Symbol.hasInstance](value)) {\n      return R2Point.fromInit(value);\n    } else if (R2PointTuple[Symbol.hasInstance](value)) {\n      return R2Point.fromTuple(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: R2PointInit): R2Point {\n    return new R2Point(init.x, init.y);\n  }\n\n  static fromTuple(tuple: R2PointTuple): R2Point {\n    return new R2Point(tuple[0], tuple[1]);\n  }\n}\n\n/** @internal */\nexport const R2PointInterpolator = (function (_super: typeof Interpolator) {\n  const R2PointInterpolator = function (p0: R2Point, p1: R2Point): Interpolator<R2Point> {\n    const interpolator = function (u: number): R2Point {\n      const p0 = interpolator[0];\n      const p1 = interpolator[1];\n      const x = p0.x + u * (p1.x - p0.x);\n      const y = p0.y + u * (p1.y - p0.y);\n      return new R2Point(x, y);\n    } as Interpolator<R2Point>;\n    Object.setPrototypeOf(interpolator, R2PointInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = p0;\n    (interpolator as Mutable<typeof interpolator>)[1] = p1;\n    return interpolator;\n  } as {\n    (p0: R2Point, p1: R2Point): Interpolator<R2Point>;\n\n    /** @internal */\n    prototype: Interpolator<R2Point>;\n  };\n\n  R2PointInterpolator.prototype = Object.create(_super.prototype);\n  R2PointInterpolator.prototype.constructor = R2PointInterpolator;\n\n  return R2PointInterpolator;\n})(Interpolator);\n"," // Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {OutputSettingsLike} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport {R2Shape} from \"./R2Shape\";\nimport type {R2Point} from \"./R2Point\";\nimport {R2Segment} from \"./\"; // forward import\nimport {R2SegmentParser} from \"./\"; // forward import\nimport {R2QuadraticCurve} from \"./\"; // forward import\nimport {R2QuadraticCurveParser} from \"./\"; // forward import\nimport {R2CubicCurve} from \"./\"; // forward import\nimport {R2CubicCurveParser} from \"./\"; // forward import\nimport {R2EllipticCurve} from \"./\"; // forward import\nimport {R2EllipticCurveParser} from \"./\"; // forward import\n\n/** @public */\nexport interface R2CurveContext {\n  moveTo(x: number, y: number): void;\n\n  lineTo(x: number, y: number): void;\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): void;\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): void;\n\n  arcTo(x1: number, y1: number, x2: number, y2: number, r: number): void;\n\n  arc(cx: number, cy: number, r: number, a0: number, a1: number, ccw?: boolean): void;\n\n  ellipse(cx: number, cy: number, rx: number, ry: number, phi: number, a0: number, a1: number, ccw?: boolean): void;\n}\n\n/** @public */\nexport abstract class R2Curve extends R2Shape {\n  abstract interpolateX(u: number): number;\n\n  abstract interpolateY(u: number): number;\n\n  abstract interpolate(u: number): R2Point;\n\n  abstract split(u: number): [R2Curve, R2Curve];\n\n  abstract override transform(f: R2Function): R2Curve;\n\n  abstract drawMove(context: R2CurveContext): void;\n\n  abstract drawRest(context: R2CurveContext): void;\n\n  draw(context: R2CurveContext): void {\n    this.drawMove(context);\n    this.drawRest(context);\n  }\n\n  abstract transformDrawMove(context: R2CurveContext, f: R2Function): void;\n\n  abstract transformDrawRest(context: R2CurveContext, f: R2Function): void;\n\n  transformDraw(context: R2CurveContext, f: R2Function): void {\n    this.transformDrawMove(context, f);\n    this.transformDrawRest(context, f);\n  }\n\n  abstract writeMove<T>(output: Output<T>): Output<T>;\n\n  abstract writeRest<T>(output: Output<T>): Output<T>;\n\n  writePath<T>(output: Output<T>): Output<T> {\n    output = this.writeMove(output);\n    output = this.writeRest(output);\n    return output;\n  }\n\n  toPathString(outputSettings?: OutputSettingsLike): string {\n    let output = Unicode.stringOutput(outputSettings);\n    output = this.writePath(output);\n    return output.toString();\n  }\n\n  static linear(x0: number, y0: number, x1: number, y1: number): R2Curve {\n    return new R2Segment(x0, y0, x1, y1);\n  }\n\n  static quadratic(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number): R2Curve {\n    return new R2QuadraticCurve(x0, y0, x1, y1, x2, y2);\n  }\n\n  static cubic(x0: number, y0: number, x1: number, y1: number,\n               x2: number, y2: number, x3: number, y3: number): R2Curve {\n    return new R2CubicCurve(x0, y0, x1, y1, x2, y2, x3, y3);\n  }\n\n  static elliptic(cx: number, cy: number, rx: number, ry: number,\n                  phi: number, a0: number, da: number): R2Curve {\n    return new R2EllipticCurve(cx, cy, rx, ry, phi, a0, da);\n  }\n\n  static parse(string: string): R2Curve {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = R2CurveParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @public */\nexport abstract class R2BezierCurve extends R2Curve {\n  abstract override transform(f: R2Function): R2BezierCurve;\n}\n\n/** @internal */\nexport class R2CurveParser extends Parser<R2Curve> {\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              command?: number, step?: number) {\n    super();\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2Curve> {\n    return R2CurveParser.parse(input, this.x0Parser, this.y0Parser,\n                               this.command, this.step);\n  }\n\n  static parse(input: Input, x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               command?: number, step: number = 1): Parser<R2Curve> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 77/*'M'*/ || c === 109/*'m'*/) {\n          input = input.step();\n          command = c;\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"moveto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (x0Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x0Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x0Parser = x0Parser.feed(input);\n      }\n      if (x0Parser !== void 0) {\n        if (x0Parser.isDone()) {\n          step = 3;\n        } else if (x0Parser.isError()) {\n          return x0Parser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (y0Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y0Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y0Parser = y0Parser.feed(input);\n      }\n      if (y0Parser !== void 0) {\n        if (y0Parser.isDone()) {\n          step = 5;\n        } else if (y0Parser.isError()) {\n          return y0Parser.asError();\n        }\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        switch (c) {\n          case 76/*'L'*/:\n          case 108/*'l'*/:\n          case 72/*'H'*/:\n          case 104/*'h'*/:\n          case 86/*'V'*/:\n          case 118/*'v'*/:\n            return R2SegmentParser.parse(input, x0Parser, y0Parser);\n          case 81/*'Q'*/:\n          case 113/*'q'*/:\n            return R2QuadraticCurveParser.parse(input, x0Parser, y0Parser);\n          case 84/*'T'*/:\n            return R2QuadraticCurveParser.parse(input, x0Parser, y0Parser,\n                                                x0Parser, y0Parser);\n          case 116/*'t'*/:\n            return R2QuadraticCurveParser.parse(input, x0Parser, y0Parser,\n                                                Parser.done(0), Parser.done(0));\n          case 67/*'C'*/:\n          case 99/*'c'*/:\n            return R2CubicCurveParser.parse(input, x0Parser, y0Parser);\n          case 83/*'S'*/:\n            return R2CubicCurveParser.parse(input, x0Parser, y0Parser,\n                                             x0Parser, y0Parser);\n          case 115/*'s'*/:\n            return R2CubicCurveParser.parse(input, x0Parser, y0Parser,\n                                             Parser.done(0), Parser.done(0));\n          case 65/*'A'*/:\n          case 97/*'a'*/:\n            return R2EllipticCurveParser.parse(input, x0Parser, y0Parser);\n          case 44/*','*/:\n            input = input.step();\n          case 43/*'+'*/:\n          case 45/*'-'*/:\n          case 46/*'.'*/:\n          case 48/*'0'*/:\n          case 49/*'1'*/:\n          case 50/*'2'*/:\n          case 51/*'3'*/:\n          case 52/*'4'*/:\n          case 53/*'5'*/:\n          case 54/*'6'*/:\n          case 55/*'7'*/:\n          case 56/*'8'*/:\n          case 57/*'9'*/:\n            switch (command) {\n              case 77/*'M'*/:\n              case 109/*'m'*/:\n                return R2SegmentParser.parseRest(input, command, x0Parser, y0Parser);\n            }\n          default:\n            return Parser.error(Diagnostic.expected(\"draw command\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    return new R2CurveParser(x0Parser, y0Parser, command, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2CurveContext} from \"./R2Curve\";\nimport {R2BezierCurve} from \"./R2Curve\";\n\n/** @public */\nexport type R2SegmentLike = R2Segment | R2SegmentInit;\n\n/** @public */\nexport const R2SegmentLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2SegmentLike {\n    return instance instanceof R2Segment\n        || R2SegmentInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface R2SegmentInit {\n  /** @internal */\n  readonly typeid?: \"R2SegmentInit\";\n  x0: number;\n  y0: number;\n  x1: number;\n  y1: number;\n}\n\n/** @public */\nexport const R2SegmentInit = {\n  [Symbol.hasInstance](instance: unknown): instance is R2SegmentInit {\n    return Objects.hasAllKeys<R2SegmentInit>(instance, \"x0\", \"y0\", \"x1\", \"y1\");\n  },\n};\n\n/** @public */\nexport class R2Segment extends R2BezierCurve implements Interpolate<R2Segment>, HashCode, Debug {\n  constructor(x0: number, y0: number, x1: number, y1: number) {\n    super();\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"R2Segment\";\n\n  override likeType?(like: R2SegmentInit): void;\n\n  isDefined(): boolean {\n    return isFinite(this.x0) && isFinite(this.y0)\n        && isFinite(this.x1) && isFinite(this.y1);\n  }\n\n  readonly x0: number;\n\n  readonly y0: number;\n\n  readonly x1: number;\n\n  readonly y1: number;\n\n  override get xMin(): number {\n    return Math.min(this.x0, this.x1);\n  }\n\n  override get yMin(): number {\n    return Math.min(this.y0, this.y1);\n  }\n\n  override get xMax(): number {\n    return Math.max(this.x0, this.x1);\n  }\n\n  override get yMax(): number {\n    return Math.max(this.y0, this.y1);\n  }\n\n  override interpolateX(u: number): number {\n    return (1.0 - u) * this.x0 + u * this.x1;\n  }\n\n  override interpolateY(u: number): number {\n    return (1.0 - u) * this.y0 + u * this.y1;\n  }\n\n  override interpolate(u: number): R2Point {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    return new R2Point(x01, y01);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    if (typeof that === \"number\") {\n      return R2Segment.contains(this.x0, this.y0, this.x1, this.y1, that, y!);\n    }\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.containsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.containsSegment(that);\n    }\n    return false;\n  }\n\n  /** @internal */\n  containsPoint(that: R2Point): boolean {\n    return R2Segment.contains(this.x0, this.y0, this.x1, this.y1, that.x, that.y);\n  }\n\n  /** @internal */\n  containsSegment(that: R2Segment): boolean {\n    return R2Segment.contains(this.x0, this.y0, this.x1, this.y1, that.x0, that.y0)\n        && R2Segment.contains(this.x0, this.y0, this.x1, this.y1, that.x1, that.y1);\n  }\n\n  /** @internal */\n  static contains(ax: number, ay: number, bx: number, by: number, cx: number, cy: number): boolean {\n    return (ax <= cx && cx <= bx || bx <= cx && cx <= ax)\n        && (ay <= cy && cy <= by || by <= cy && cy <= ay)\n        && (bx - ax) * (cy - ay) === (cx - ax) * (by - ay);\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.intersectsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.intersectsSegment(that);\n    }\n    return that.intersects(this);\n  }\n\n  /** @internal */\n  intersectsPoint(that: R2Point): boolean {\n    return R2Segment.contains(this.x0, this.y0, this.x1, this.y1, that.x, that.y);\n  }\n\n  /** @internal */\n  intersectsSegment(that: R2Segment): boolean {\n    return R2Segment.intersects(this.x0, this.y0, this.x1 - this.x0, this.y1 - this.y0,\n                                that.x0, that.y0, that.x1 - that.x0, that.y1 - that.y0);\n  }\n\n  /** @internal */\n  static intersects(px: number, py: number, rx: number, ry: number,\n                    qx: number, qy: number, sx: number, sy: number): boolean {\n    const pqx = qx - px;\n    const pqy = qy - py;\n    const pqr = pqx * ry - pqy * rx;\n    const rs = rx * sy - ry * sx;\n    if (pqr === 0 && rs === 0) { // collinear\n      const rr = rx * rx + ry * ry;\n      const sr = sx * rx + sy * ry;\n      const t0 = (pqx * rx + pqy * ry) / rr;\n      const t1 = t0 + sr / rr;\n      return sr >= 0 ? 0 < t1 && t0 < 1 : 0 < t0 && t1 < 1;\n    } else if (rs === 0) { // parallel\n      return false;\n    }\n    const pqs = pqx * sy - pqy * sx;\n    const t = pqs / rs; // (q − p) × s / (r × s)\n    const u = pqr / rs; // (q − p) × r / (r × s)\n    return 0 <= t && t <= 1 && 0 <= u && u <= 1;\n  }\n\n  override split(u: number): [R2Segment, R2Segment] {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    const c0 = new R2Segment(this.x0, this.y0, x01, y01);\n    const c1 = new R2Segment(x01, y01, this.x1, this.y1);\n    return [c0, c1];\n  }\n\n  override transform(f: R2Function): R2Segment {\n    return new R2Segment(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0),\n                         f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1));\n  }\n\n  toLike(): R2SegmentInit {\n    return {\n      x0: this.x0,\n      y0: this.y0,\n      x1: this.x1,\n      y1: this.y1,\n    };\n  }\n\n  override drawMove(context: R2CurveContext): void {\n    context.moveTo(this.x0, this.y0);\n  }\n\n  override drawRest(context: R2CurveContext): void {\n    context.lineTo(this.x1, this.y1);\n  }\n\n  override transformDrawMove(context: R2CurveContext, f: R2Function): void {\n    context.moveTo(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0));\n  }\n\n  override transformDrawRest(context: R2CurveContext, f: R2Function): void {\n    context.lineTo(f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1));\n  }\n\n  override writeMove<T>(output: Output<T>): Output<T> {\n    output = output.write(77/*'M'*/);\n    output = Format.displayNumber(output, this.x0);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y0);\n    return output;\n  }\n\n  override writeRest<T>(output: Output<T>): Output<T> {\n    output = output.write(76/*'L'*/);\n    output = Format.displayNumber(output, this.x1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y1);\n    return output;\n  }\n\n  /** @override */\n  interpolateTo(that: R2Segment): Interpolator<R2Segment>;\n  interpolateTo(that: unknown): Interpolator<R2Segment> | null;\n  interpolateTo(that: unknown): Interpolator<R2Segment> | null {\n    if (that instanceof R2Segment) {\n      return R2SegmentInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Segment) {\n      return Numbers.equivalent(this.x0, that.x0, epsilon)\n          && Numbers.equivalent(this.y0, that.y0, epsilon)\n          && Numbers.equivalent(this.x1, that.x1, epsilon)\n          && Numbers.equivalent(this.y1, that.y1, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Segment) {\n      return this.x0 === that.x0 && this.y0 === that.y0\n          && this.x1 === that.x1 && this.y1 === that.y1;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Constructors.hash(R2Segment), Numbers.hash(this.x0)), Numbers.hash(this.y0)),\n        Numbers.hash(this.x1)), Numbers.hash(this.y1)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Segment\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.x0).write(\", \").debug(this.y0).write(\", \")\n                   .debug(this.x1).write(\", \").debug(this.y1).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static of(x0: number, y0: number, x1: number, y1: number): R2Segment {\n    return new R2Segment(x0, y0, x1, y1);\n  }\n\n  static override fromLike<T extends R2SegmentLike | null | undefined>(value: T): R2Segment | Uninitable<T>;\n  static override fromLike<T extends R2ShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends R2SegmentLike | null | undefined>(value: T): R2Segment | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Segment) {\n      return value as R2Segment | Uninitable<T>;\n    } else if (R2SegmentInit[Symbol.hasInstance](value)) {\n      return R2Segment.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: R2SegmentInit): R2Segment {\n    return new R2Segment(init.x0, init.y0, init.x1, init.y1);\n  }\n}\n\n/** @internal */\nexport const R2SegmentInterpolator = (function (_super: typeof Interpolator) {\n  const R2SegmentInterpolator = function (s0: R2Segment, s1: R2Segment): Interpolator<R2Segment> {\n    const interpolator = function (u: number): R2Segment {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const x0 = s0.x0 + u * (s1.x0 - s0.x0);\n      const y0 = s0.y0 + u * (s1.y0 - s0.y0);\n      const x1 = s0.x1 + u * (s1.x1 - s0.x1);\n      const y1 = s0.y1 + u * (s1.y1 - s0.y1);\n      return new R2Segment(x0, y0, x1, y1);\n    } as Interpolator<R2Segment>;\n    Object.setPrototypeOf(interpolator, R2SegmentInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: R2Segment, s1: R2Segment): Interpolator<R2Segment>;\n\n    /** @internal */\n    prototype: Interpolator<R2Segment>;\n  };\n\n  R2SegmentInterpolator.prototype = Object.create(_super.prototype);\n  R2SegmentInterpolator.prototype.constructor = R2SegmentInterpolator;\n\n  return R2SegmentInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class R2SegmentParser extends Parser<R2Segment> {\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly x1Parser: Parser<number> | undefined;\n  private readonly y1Parser: Parser<number> | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n              command?: number, step?: number) {\n    super();\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.x1Parser = x1Parser;\n    this.y1Parser = y1Parser;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2Segment> {\n    return R2SegmentParser.parse(input, this.x0Parser, this.y0Parser,\n                                 this.x1Parser, this.y1Parser,\n                                 this.command, this.step);\n  }\n\n  static parse(input: Input, x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n               command?: number, step: number = 1): Parser<R2Segment> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        switch (c) {\n          case 77/*'M'*/:\n          case 109/*'m'*/:\n          case 76/*'L'*/:\n          case 108/*'l'*/:\n            input = input.step();\n            command = c;\n            step = 2;\n            break;\n          case 72/*'H'*/:\n            input = input.step();\n            y1Parser = y0Parser;\n            command = c;\n            step = 2;\n            break;\n          case 104/*'h'*/:\n            input = input.step();\n            y1Parser = Parser.done(0);\n            command = c;\n            step = 2;\n            break;\n          case 86/*'V'*/:\n            input = input.step();\n            x1Parser = x0Parser;\n            command = c;\n            step = 4;\n            break;\n          case 118/*'v'*/:\n            input = input.step();\n            x1Parser = Parser.done(0);\n            command = c;\n            step = 4;\n            break;\n          default:\n            return Parser.error(Diagnostic.expected(\"lineto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (x1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x1Parser = x1Parser.feed(input);\n      }\n      if (x1Parser !== void 0) {\n        if (x1Parser.isDone()) {\n          if (y1Parser === void 0 || !y1Parser.isDone()) {\n            step = 3;\n          } else { // H or h\n            step = 4;\n          }\n        } else if (x1Parser.isError()) {\n          return x1Parser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (y1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y1Parser = y1Parser.feed(input);\n      }\n      if (y1Parser !== void 0) {\n        if (y1Parser.isDone()) {\n          const x0 = x0Parser!.bind();\n          const y0 = y0Parser!.bind();\n          let x1 = x1Parser!.bind();\n          let y1 = y1Parser.bind();\n          if (command === 109/*'m'*/ || command === 108/*'l'*/ ||\n              command === 104/*'h'*/ || command === 118/*'v'*/) {\n            x1 += x0;\n            y1 += y0;\n          }\n          return Parser.done(new R2Segment(x0, y0, x1, y1));\n        } else if (y1Parser.isError()) {\n          return y1Parser.asError();\n        }\n      }\n    }\n    return new R2SegmentParser(x0Parser, y0Parser, x1Parser, y1Parser, command, step);\n  }\n\n  static parseRest(input: Input, command?: number, x0Parser?: Parser<number>,\n                   y0Parser?: Parser<number>): Parser<R2Segment> {\n    let x1Parser: Parser<number> | undefined;\n    let y1Parser: Parser<number> | undefined;\n    let step: number;\n    switch (command) {\n      case 72/*'H'*/:\n        y1Parser = y0Parser;\n        step = 2;\n        break;\n      case 104/*'h'*/:\n        y1Parser = Parser.done(0);\n        step = 2;\n        break;\n      case 86/*'V'*/:\n        x1Parser = x0Parser;\n        step = 4;\n        break;\n      case 118/*'v'*/:\n        x1Parser = Parser.done(0);\n        step = 4;\n        break;\n      default:\n        step = 2;\n    }\n    return this.parse(input, x0Parser, y0Parser, x1Parser, y1Parser, command, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Numbers} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2CurveContext} from \"./R2Curve\";\nimport {R2BezierCurve} from \"./R2Curve\";\n\n/** @public */\nexport class R2QuadraticCurve extends R2BezierCurve implements Debug {\n  constructor(x0: number, y0: number, x1: number, y1: number, x2: number, y2: number) {\n    super();\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n  }\n\n  override isDefined(): boolean {\n    return isFinite(this.x0) && isFinite(this.y0)\n        && isFinite(this.x1) && isFinite(this.y1)\n        && isFinite(this.x2) && isFinite(this.y2);\n  }\n\n  readonly x0: number;\n\n  readonly y0: number;\n\n  readonly x1: number;\n\n  readonly y1: number;\n\n  readonly x2: number;\n\n  readonly y2: number;\n\n  override get xMin(): number {\n    return Math.min(this.x0, this.x1, this.x2);\n  }\n\n  override get yMin(): number {\n    return Math.min(this.y0, this.y1, this.y2);\n  }\n\n  override get xMax(): number {\n    return Math.max(this.x0, this.x1, this.x2);\n  }\n\n  override get yMax(): number {\n    return Math.max(this.y0, this.y1, this.y2);\n  }\n\n  override interpolateX(u: number): number {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const x12 = v * this.x1 + u * this.x2;\n    return v * x01 + u * x12;\n  }\n\n  override interpolateY(u: number): number {\n    const v = 1.0 - u;\n    const y01 = v * this.y0 + u * this.y1;\n    const y12 = v * this.y1 + u * this.y2;\n    return v * y01 + u * y12;\n  }\n\n  override interpolate(u: number): R2Point {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    const x12 = v * this.x1 + u * this.x2;\n    const y12 = v * this.y1 + u * this.y2;\n    const x02 = v * x01 + u * x12;\n    const y02 = v * y01 + u * y12;\n    return new R2Point(x02, y02);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override split(u: number): [R2QuadraticCurve, R2QuadraticCurve] {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    const x12 = v * this.x1 + u * this.x2;\n    const y12 = v * this.y1 + u * this.y2;\n    const x02 = v * x01 + u * x12;\n    const y02 = v * y01 + u * y12;\n    const c0 = new R2QuadraticCurve(this.x0, this.y0, x01, y01, x02, y02);\n    const c1 = new R2QuadraticCurve(x02, y02, x12, y12, this.x2, this.y2);\n    return [c0, c1];\n  }\n\n  override transform(f: R2Function): R2QuadraticCurve {\n    return new R2QuadraticCurve(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0),\n                                f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1),\n                                f.transformX(this.x2, this.y2), f.transformY(this.x2, this.y2));\n  }\n\n  override drawMove(context: R2CurveContext): void {\n    context.moveTo(this.x0, this.y0);\n  }\n\n  override drawRest(context: R2CurveContext): void {\n    context.quadraticCurveTo(this.x1, this.y1, this.x2, this.y2);\n  }\n\n  override transformDrawMove(context: R2CurveContext, f: R2Function): void {\n    context.moveTo(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0));\n  }\n\n  override transformDrawRest(context: R2CurveContext, f: R2Function): void {\n    context.quadraticCurveTo(f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1),\n                             f.transformX(this.x2, this.y2), f.transformY(this.x2, this.y2));\n  }\n\n  override writeMove<T>(output: Output<T>): Output<T> {\n    output = output.write(77/*'M'*/);\n    output = Format.displayNumber(output, this.x0);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y0);\n    return output;\n  }\n\n  override writeRest<T>(output: Output<T>): Output<T> {\n    output = output.write(81/*'Q'*/);\n    output = Format.displayNumber(output, this.x1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.x2);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y2);\n    return output;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2QuadraticCurve) {\n      return Numbers.equivalent(this.x0, that.x0, epsilon)\n          && Numbers.equivalent(this.y0, that.y0, epsilon)\n          && Numbers.equivalent(this.x1, that.x1, epsilon)\n          && Numbers.equivalent(this.y1, that.y1, epsilon)\n          && Numbers.equivalent(this.x2, that.x2, epsilon)\n          && Numbers.equivalent(this.y2, that.y2, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2QuadraticCurve) {\n      return this.x0 === that.x0 && this.y0 === that.y0\n          && this.x1 === that.x1 && this.y1 === that.y1\n          && this.x2 === that.x2 && this.y2 === that.y2;\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Curve\").write(46/*'.'*/).write(\"quadratic\").write(40/*'('*/)\n                   .debug(this.x0).write(\", \").debug(this.y0).write(\", \")\n                   .debug(this.x1).write(\", \").debug(this.y1).write(\", \")\n                   .debug(this.x2).write(\", \").debug(this.y2).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n}\n\n/** @internal */\nexport class R2QuadraticCurveParser extends Parser<R2QuadraticCurve> {\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly x1Parser: Parser<number> | undefined;\n  private readonly y1Parser: Parser<number> | undefined;\n  private readonly x2Parser: Parser<number> | undefined;\n  private readonly y2Parser: Parser<number> | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n              x2Parser?: Parser<number>, y2Parser?: Parser<number>,\n              command?: number, step?: number) {\n    super();\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.x1Parser = x1Parser;\n    this.y1Parser = y1Parser;\n    this.x2Parser = x2Parser;\n    this.y2Parser = y2Parser;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2QuadraticCurve> {\n    return R2QuadraticCurveParser.parse(input, this.x0Parser, this.y0Parser,\n                                        this.x1Parser, this.y1Parser,\n                                        this.x2Parser, this.y2Parser,\n                                        this.command, this.step);\n  }\n\n  static parse(input: Input, x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n               x2Parser?: Parser<number>, y2Parser?: Parser<number>,\n               command?: number, step: number = 1): Parser<R2QuadraticCurve> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        switch (c) {\n          case 81/*'Q'*/:\n          case 113/*'q'*/:\n            input = input.step();\n            command = c;\n            step = 2;\n            break;\n          case 84/*'T'*/:\n          case 116/*'t'*/:\n            input = input.step();\n            command = c;\n            step = 6;\n            break;\n          default:\n            return Parser.error(Diagnostic.expected(\"curveto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (x1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x1Parser = x1Parser.feed(input);\n      }\n      if (x1Parser !== void 0) {\n        if (x1Parser.isDone()) {\n          step = 3;\n        } else if (x1Parser.isError()) {\n          return x1Parser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (y1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y1Parser = y1Parser.feed(input);\n      }\n      if (y1Parser !== void 0) {\n        if (y1Parser.isDone()) {\n          step = 5;\n        } else if (y1Parser.isError()) {\n          return y1Parser.asError();\n        }\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 6;\n      } else if (!input.isEmpty()) {\n        step = 6;\n      }\n    }\n    if (step === 6) {\n      if (x2Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x2Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x2Parser = x2Parser.feed(input);\n      }\n      if (x2Parser !== void 0) {\n        if (x2Parser.isDone()) {\n          step = 7;\n        } else if (x2Parser.isError()) {\n          return x2Parser.asError();\n        }\n      }\n    }\n    if (step === 7) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 8;\n      } else if (!input.isEmpty()) {\n        step = 8;\n      }\n    }\n    if (step === 8) {\n      if (y2Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y2Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y2Parser = y2Parser.feed(input);\n      }\n      if (y2Parser !== void 0) {\n        if (y2Parser.isDone()) {\n          const x0 = x0Parser!.bind();\n          const y0 = y0Parser!.bind();\n          let x1 = x1Parser!.bind();\n          let y1 = y1Parser!.bind();\n          let x2 = x2Parser!.bind();\n          let y2 = y2Parser.bind();\n          if (command === 113/*'q'*/ || command === 116/*'t'*/) {\n            x1 += x0;\n            y1 += y0;\n            x2 += x0;\n            y2 += y0;\n          }\n          return Parser.done(new R2QuadraticCurve(x0, y0, x1, y1, x2, y2));\n        } else if (y2Parser.isError()) {\n          return y2Parser.asError();\n        }\n      }\n    }\n    return new R2QuadraticCurveParser(x0Parser, y0Parser, x1Parser, y1Parser,\n                                      x2Parser, y2Parser, command, step);\n  }\n\n  static parseRest(input: Input, command?: number, x0Parser?: Parser<number>,\n                   y0Parser?: Parser<number>, x1Parser?: Parser<number>,\n                   y1Parser?: Parser<number>): Parser<R2QuadraticCurve> {\n    const step = command === 84/*'T'*/ || command === 116/*'t'*/ ? 6 : 2;\n    return R2QuadraticCurveParser.parse(input, x0Parser, y0Parser, x1Parser, y1Parser,\n                                        void 0, void 0, command, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Numbers} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2CurveContext} from \"./R2Curve\";\nimport {R2BezierCurve} from \"./R2Curve\";\n\n/** @public */\nexport class R2CubicCurve extends R2BezierCurve implements Debug {\n  constructor(x0: number, y0: number, x1: number, y1: number,\n              x2: number, y2: number, x3: number, y3: number) {\n    super();\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.x2 = x2;\n    this.y2 = y2;\n    this.x3 = x3;\n    this.y3 = y3;\n  }\n\n  override isDefined(): boolean {\n    return isFinite(this.x0) && isFinite(this.y0)\n        && isFinite(this.x1) && isFinite(this.y1)\n        && isFinite(this.x2) && isFinite(this.y2)\n        && isFinite(this.x3) && isFinite(this.y3);\n  }\n\n  readonly x0: number;\n\n  readonly y0: number;\n\n  readonly x1: number;\n\n  readonly y1: number;\n\n  readonly x2: number;\n\n  readonly y2: number;\n\n  readonly x3: number;\n\n  readonly y3: number;\n\n  override get xMin(): number {\n    return Math.min(this.x0, this.x1, this.x2, this.x3);\n  }\n\n  override get yMin(): number {\n    return Math.min(this.y0, this.y1, this.y2, this.y3);\n  }\n\n  override get xMax(): number {\n    return Math.max(this.x0, this.x1, this.x2, this.x3);\n  }\n\n  override get yMax(): number {\n    return Math.max(this.y0, this.y1, this.y2, this.y3);\n  }\n\n  override interpolateX(u: number): number {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const x12 = v * this.x1 + u * this.x2;\n    const x23 = v * this.x2 + u * this.x3;\n    const x02 = v * x01 + u * x12;\n    const x13 = v * x12 + u * x23;\n    return v * x02 + u * x13;\n  }\n\n  override interpolateY(u: number): number {\n    const v = 1.0 - u;\n    const y01 = v * this.y0 + u * this.y1;\n    const y12 = v * this.y1 + u * this.y2;\n    const y23 = v * this.y2 + u * this.y3;\n    const y02 = v * y01 + u * y12;\n    const y13 = v * y12 + u * y23;\n    return v * y02 + u * y13;\n  }\n\n  override interpolate(u: number): R2Point {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    const x12 = v * this.x1 + u * this.x2;\n    const y12 = v * this.y1 + u * this.y2;\n    const x23 = v * this.x2 + u * this.x3;\n    const y23 = v * this.y2 + u * this.y3;\n    const x02 = v * x01 + u * x12;\n    const y02 = v * y01 + u * y12;\n    const x13 = v * x12 + u * x23;\n    const y13 = v * y12 + u * y23;\n    const x03 = v * x02 + u * x13;\n    const y03 = v * y02 + u * y13;\n    return new R2Point(x03, y03);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override split(u: number): [R2CubicCurve, R2CubicCurve] {\n    const v = 1.0 - u;\n    const x01 = v * this.x0 + u * this.x1;\n    const y01 = v * this.y0 + u * this.y1;\n    const x12 = v * this.x1 + u * this.x2;\n    const y12 = v * this.y1 + u * this.y2;\n    const x23 = v * this.x2 + u * this.x3;\n    const y23 = v * this.y2 + u * this.y3;\n    const x02 = v * x01 + u * x12;\n    const y02 = v * y01 + u * y12;\n    const x13 = v * x12 + u * x23;\n    const y13 = v * y12 + u * y23;\n    const x03 = v * x02 + u * x13;\n    const y03 = v * y02 + u * y13;\n    const c0 = new R2CubicCurve(this.x0, this.y0, x01, y01, x02, y02, x03, y03);\n    const c1 = new R2CubicCurve(x03, y03, x13, y13, x23, y23, this.x3, this.y3);\n    return [c0, c1];\n  }\n\n  override transform(f: R2Function): R2CubicCurve {\n    return new R2CubicCurve(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0),\n                            f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1),\n                            f.transformX(this.x2, this.y2), f.transformY(this.x2, this.y2),\n                            f.transformX(this.x3, this.y3), f.transformY(this.x3, this.y3));\n  }\n\n  override drawMove(context: R2CurveContext): void {\n    context.moveTo(this.x0, this.y0);\n  }\n\n  override drawRest(context: R2CurveContext): void {\n    context.bezierCurveTo(this.x1, this.y1, this.x2, this.y2, this.x3, this.y3);\n  }\n\n  override transformDrawMove(context: R2CurveContext, f: R2Function): void {\n    context.moveTo(f.transformX(this.x0, this.y0), f.transformY(this.x0, this.y0));\n  }\n\n  override transformDrawRest(context: R2CurveContext, f: R2Function): void {\n    context.bezierCurveTo(f.transformX(this.x1, this.y1), f.transformY(this.x1, this.y1),\n                          f.transformX(this.x2, this.y2), f.transformY(this.x2, this.y2),\n                          f.transformX(this.x3, this.y3), f.transformY(this.x3, this.y3));\n  }\n\n  override writeMove<T>(output: Output<T>): Output<T> {\n    output = output.write(77/*'M'*/);\n    output = Format.displayNumber(output, this.x0);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y0);\n    return output;\n  }\n\n  override writeRest<T>(output: Output<T>): Output<T> {\n    output = output.write(67/*'C'*/);\n    output = Format.displayNumber(output, this.x1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.x2);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y2);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.x3);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, this.y3);\n    return output;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2CubicCurve) {\n      return Numbers.equivalent(this.x0, that.x0, epsilon)\n          && Numbers.equivalent(this.y0, that.y0, epsilon)\n          && Numbers.equivalent(this.x1, that.x1, epsilon)\n          && Numbers.equivalent(this.y1, that.y1, epsilon)\n          && Numbers.equivalent(this.x2, that.x2, epsilon)\n          && Numbers.equivalent(this.y2, that.y2, epsilon)\n          && Numbers.equivalent(this.x3, that.x3, epsilon)\n          && Numbers.equivalent(this.y3, that.y3, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2CubicCurve) {\n      return this.x0 === that.x0 && this.y0 === that.y0\n          && this.x1 === that.x1 && this.y1 === that.y1\n          && this.x2 === that.x2 && this.y2 === that.y2\n          && this.x3 === that.x3 && this.y3 === that.y3;\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Curve\").write(46/*'.'*/).write(\"cubic\").write(40/*'('*/)\n                   .debug(this.x0).write(\", \").debug(this.y0).write(\", \")\n                   .debug(this.x1).write(\", \").debug(this.y1).write(\", \")\n                   .debug(this.x2).write(\", \").debug(this.y2).write(\", \")\n                   .debug(this.x3).write(\", \").debug(this.y3).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n}\n\n/** @internal */\nexport class R2CubicCurveParser extends Parser<R2CubicCurve> {\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly x1Parser: Parser<number> | undefined;\n  private readonly y1Parser: Parser<number> | undefined;\n  private readonly x2Parser: Parser<number> | undefined;\n  private readonly y2Parser: Parser<number> | undefined;\n  private readonly x3Parser: Parser<number> | undefined;\n  private readonly y3Parser: Parser<number> | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n              x2Parser?: Parser<number>, y2Parser?: Parser<number>,\n              x3Parser?: Parser<number>, y3Parser?: Parser<number>,\n              command?: number, step?: number) {\n    super();\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.x1Parser = x1Parser;\n    this.y1Parser = y1Parser;\n    this.x2Parser = x2Parser;\n    this.y2Parser = y2Parser;\n    this.x3Parser = x3Parser;\n    this.y3Parser = y3Parser;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2CubicCurve> {\n    return R2CubicCurveParser.parse(input, this.x0Parser, this.y0Parser,\n                                    this.x1Parser, this.y1Parser,\n                                    this.x2Parser, this.y2Parser,\n                                    this.x3Parser, this.y3Parser,\n                                    this.command, this.step);\n  }\n\n  static parse(input: Input, x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n               x2Parser?: Parser<number>, y2Parser?: Parser<number>,\n               x3Parser?: Parser<number>, y3Parser?: Parser<number>,\n               command?: number, step: number = 1): Parser<R2CubicCurve> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        switch (c) {\n          case 67/*'C'*/:\n          case 99/*'c'*/:\n            input = input.step();\n            command = c;\n            step = 2;\n            break;\n          case 83/*'S'*/:\n          case 115/*'s'*/:\n            input = input.step();\n            command = c;\n            step = 6;\n            break;\n          default:\n            return Parser.error(Diagnostic.expected(\"curveto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (x1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x1Parser = x1Parser.feed(input);\n      }\n      if (x1Parser !== void 0) {\n        if (x1Parser.isDone()) {\n          step = 3;\n        } else if (x1Parser.isError()) {\n          return x1Parser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (y1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y1Parser = y1Parser.feed(input);\n      }\n      if (y1Parser !== void 0) {\n        if (y1Parser.isDone()) {\n          step = 5;\n        } else if (y1Parser.isError()) {\n          return y1Parser.asError();\n        }\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 6;\n      } else if (!input.isEmpty()) {\n        step = 6;\n      }\n    }\n    if (step === 6) {\n      if (x2Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x2Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x2Parser = x2Parser.feed(input);\n      }\n      if (x2Parser !== void 0) {\n        if (x2Parser.isDone()) {\n          step = 7;\n        } else if (x2Parser.isError()) {\n          return x2Parser.asError();\n        }\n      }\n    }\n    if (step === 7) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 8;\n      } else if (!input.isEmpty()) {\n        step = 8;\n      }\n    }\n    if (step === 8) {\n      if (y2Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y2Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y2Parser = y2Parser.feed(input);\n      }\n      if (y2Parser !== void 0) {\n        if (y2Parser.isDone()) {\n          step = 9;\n        } else if (y2Parser.isError()) {\n          return y2Parser.asError();\n        }\n      }\n    }\n    if (step === 9) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 10;\n      } else if (!input.isEmpty()) {\n        step = 10;\n      }\n    }\n    if (step === 10) {\n      if (x3Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x3Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x3Parser = x3Parser.feed(input);\n      }\n      if (x3Parser !== void 0) {\n        if (x3Parser.isDone()) {\n          step = 11;\n        } else if (x3Parser.isError()) {\n          return x3Parser.asError();\n        }\n      }\n    }\n    if (step === 11) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 12;\n      } else if (!input.isEmpty()) {\n        step = 12;\n      }\n    }\n    if (step === 12) {\n      if (y3Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y3Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y3Parser = y3Parser.feed(input);\n      }\n      if (y3Parser !== void 0) {\n        if (y3Parser.isDone()) {\n          const x0 = x0Parser!.bind();\n          const y0 = y0Parser!.bind();\n          let x1 = x1Parser!.bind();\n          let y1 = y1Parser!.bind();\n          let x2 = x2Parser!.bind();\n          let y2 = y2Parser!.bind();\n          let x3 = x3Parser!.bind();\n          let y3 = y3Parser.bind();\n          if (command === 99/*'c'*/ || command === 115/*'s'*/) {\n            x1 += x0;\n            y1 += y0;\n            x2 += x0;\n            y2 += y0;\n            x3 += x0;\n            y3 += y0;\n          }\n          return Parser.done(new R2CubicCurve(x0, y0, x1, y1, x2, y2, x3, y3));\n        } else if (y3Parser.isError()) {\n          return y3Parser.asError();\n        }\n      }\n    }\n    return new R2CubicCurveParser(x0Parser, y0Parser, x1Parser, y1Parser,\n                                  x2Parser, y2Parser, x3Parser, y3Parser,\n                                  command, step);\n  }\n\n  static parseRest(input: Input, command?: number, x0Parser?: Parser<number>,\n                   y0Parser?: Parser<number>, x1Parser?: Parser<number>,\n                   y1Parser?: Parser<number>): Parser<R2CubicCurve> {\n    const step = command === 83/*'S'*/ || command === 115/*'s'*/ ? 6 : 2;\n    return R2CubicCurveParser.parse(input, x0Parser, y0Parser, x1Parser, y1Parser,\n                                    void 0, void 0, void 0, void 0, command, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Numbers} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2CurveContext} from \"./R2Curve\";\nimport {R2Curve} from \"./R2Curve\";\n\n/** @public */\nexport class R2EllipticCurve extends R2Curve implements Debug {\n  constructor(cx: number, cy: number, rx: number, ry: number,\n              phi: number, a0: number, da: number) {\n    super();\n    this.cx = cx;\n    this.cy = cy;\n    this.rx = rx;\n    this.ry = ry;\n    this.phi = phi;\n    this.a0 = a0;\n    this.da = da;\n  }\n\n  override isDefined(): boolean {\n    return isFinite(this.cx) && isFinite(this.cy)\n        && isFinite(this.rx) && isFinite(this.ry)\n        && isFinite(this.phi)\n        && isFinite(this.a0) && isFinite(this.da);\n  }\n\n  readonly cx: number;\n\n  readonly cy: number;\n\n  readonly rx: number;\n\n  readonly ry: number;\n\n  readonly phi: number;\n\n  readonly a0: number;\n\n  readonly da: number;\n\n  override get xMin(): number {\n    return this.cx - Math.max(this.rx, this.ry);\n  }\n\n  override get yMin(): number {\n    return this.cy - Math.max(this.rx, this.ry);\n  }\n\n  override get xMax(): number {\n    return this.cx + Math.max(this.rx, this.ry);\n  }\n\n  override get yMax(): number {\n    return this.cy + Math.max(this.rx, this.ry);\n  }\n\n  override interpolateX(u: number): number {\n    const a0 = this.a0;\n    const da = this.da;\n    const a = a0 + u * da;\n    const dx = this.rx * Math.cos(a);\n    const dy = this.ry * Math.sin(a);\n    const phi = this.phi;\n    if (phi === 0) {\n      return this.cx + dx;\n    }\n    return this.cx + dx * Math.cos(phi) - dy * Math.sin(phi);\n  }\n\n  override interpolateY(u: number): number {\n    const a0 = this.a0;\n    const da = this.da;\n    const a = a0 + u * da;\n    const dx = this.rx * Math.cos(a);\n    const dy = this.ry * Math.sin(a);\n    const phi = this.phi;\n    if (phi === 0) {\n      return this.cy + dy;\n    }\n    return this.cy + dx * Math.sin(phi) + dy * Math.cos(phi);\n  }\n\n  override interpolate(u: number): R2Point {\n    const a0 = this.a0;\n    const da = this.da;\n    const a = a0 + u * da;\n    const dx = this.rx * Math.cos(a);\n    const dy = this.ry * Math.sin(a);\n    const phi = this.phi;\n    if (phi === 0) {\n      return new R2Point(this.cx + dx, this.cy + dy);\n    }\n    return new R2Point(this.cx + dx * Math.cos(phi) - dy * Math.sin(phi),\n                       this.cy + dx * Math.sin(phi) + dy * Math.cos(phi));\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override split(u: number): [R2EllipticCurve, R2EllipticCurve] {\n    const a0 = this.a0;\n    const da = this.da;\n    const a = a0 + u * da;\n    const c0 = new R2EllipticCurve(this.cx, this.cy, this.rx, this.ry,\n                                   this.phi, a0, a - a0);\n    const c1 = new R2EllipticCurve(this.cx, this.cy, this.rx, this.ry,\n                                   this.phi, a, a0 + da - a);\n    return [c0, c1];\n  }\n\n  override transform(f: R2Function): R2EllipticCurve {\n    const cx = f.transformX(this.cx, this.cy);\n    const cy = f.transformY(this.cx, this.cy);\n    const rx = f.transformX(this.cx + this.rx, this.cy + this.ry) - cx;\n    const ry = f.transformY(this.cx + this.rx, this.cy + this.ry) - cy;\n    const a0 = this.a0;\n    const da = this.da;\n    const a1 = a0 + da;\n    const a0x = Math.cos(a0);\n    const a0y = Math.sin(a0);\n    const a1x = Math.cos(a1);\n    const a1y = Math.sin(a1);\n    const b0x = f.transformX(this.cx + a0x, this.cy - a0y) - cx;\n    const b0y = f.transformY(this.cx + a0x, this.cy - a0y) - cy;\n    const b1x = f.transformX(this.cx + a1x, this.cy - a1y) - cx;\n    const b1y = f.transformY(this.cx + a1x, this.cy - a1y) - cy;\n    const b0 = Math.atan2(b0y, b0x);\n    let b1 = Math.atan2(b1y, b1x);\n    if (Math.abs(da) > Math.PI) {\n      if (b1 > 0) {\n        b1 = -2 * Math.PI + b1;\n      } else if (b1 < 0) {\n        b1 = 2 * Math.PI - b1;\n      }\n    }\n    const db = b1 - b0;\n    return new R2EllipticCurve(cx, cy, rx, ry, this.phi, b0, db);\n  }\n\n  override drawMove(context: R2CurveContext): void {\n    const {x0, y0} = this.toEndpoints();\n    context.moveTo(x0, y0);\n  }\n\n  override drawRest(context: R2CurveContext): void {\n    context.ellipse(this.cx, this.cy, this.rx, this.ry, this.phi,\n                    this.a0, this.a0 + this.da, this.da < 0);\n  }\n\n  override transformDrawMove(context: R2CurveContext, f: R2Function): void {\n    const {x0, y0} = this.toEndpoints();\n    context.moveTo(f.transformX(x0, y0), f.transformY(x0, y0));\n  }\n\n  override transformDrawRest(context: R2CurveContext, f: R2Function): void {\n    const cx = f.transformX(this.cx, this.cy);\n    const cy = f.transformY(this.cx, this.cy);\n    const rx = f.transformX(this.cx + this.rx, this.cy + this.ry) - cx;\n    const ry = f.transformY(this.cx + this.rx, this.cy + this.ry) - cy;\n    const a0 = this.a0;\n    const da = this.da;\n    const a1 = a0 + da;\n    const a0x = Math.cos(a0);\n    const a0y = Math.sin(a0);\n    const a1x = Math.cos(a1);\n    const a1y = Math.sin(a1);\n    const b0x = f.transformX(this.cx + a0x, this.cy - a0y) - cx;\n    const b0y = f.transformY(this.cx + a0x, this.cy - a0y) - cy;\n    const b1x = f.transformX(this.cx + a1x, this.cy - a1y) - cx;\n    const b1y = f.transformY(this.cx + a1x, this.cy - a1y) - cy;\n    const b0 = Math.atan2(b0y, b0x);\n    let b1 = Math.atan2(b1y, b1x);\n    if (Math.abs(da) > Math.PI) {\n      if (b1 > 0) {\n        b1 = -2 * Math.PI + b1;\n      } else if (b1 < 0) {\n        b1 = 2 * Math.PI - b1;\n      }\n    }\n    const ccw = b1 < b0;\n    context.ellipse(cx, cy, rx, ry, this.phi, b0, b1, ccw);\n  }\n\n  override writeMove<T>(output: Output<T>): Output<T> {\n    const {x0, y0} = this.toEndpoints();\n    output = output.write(77/*'M'*/);\n    output = Format.displayNumber(output, x0);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, y0);\n    return output;\n  }\n\n  override writeRest<T>(output: Output<T>): Output<T> {\n    const {rx, ry, phi, large, sweep, x1, y1} = this.toEndpoints();\n    output = output.write(65/*'A'*/);\n    output = Format.displayNumber(output, rx);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, ry);\n    output = output.write(32/*' '*/);\n    output = Format.displayNumber(output, phi);\n    output = output.write(32/*' '*/);\n    output = output.write(large ? 49/*'1'*/ : 48/*'0'*/);\n    output = output.write(44/*','*/);\n    output = output.write(sweep ? 49/*'1'*/ : 48/*'0'*/);\n    output = output.write(32/*' '*/);\n    output = Format.displayNumber(output, x1);\n    output = output.write(44/*','*/);\n    output = Format.displayNumber(output, y1);\n    return output;\n  }\n\n  toEndpoints(): {x0: number, y0: number, rx: number, ry: number, phi: number,\n                  large: boolean, sweep: boolean, x1: number, y1: number} {\n    const cx = this.cx;\n    const cy = this.cy;\n    const rx = this.rx;\n    const ry = this.ry;\n    const phi = this.phi;\n    const a0 = this.a0;\n    const da = this.da;\n    const a1 = a0 + da;\n\n    const cosPhi = Math.cos(phi);\n    const sinPhi = Math.sin(phi);\n    const cosA0 = Math.cos(a0);\n    const sinA0 = Math.sin(a0);\n    const cosA1 = Math.cos(a1);\n    const sinA1 = Math.sin(a1);\n    const x0 = cosPhi * rx * cosA0 - sinPhi * ry * sinA0 + cx;\n    const y0 = sinPhi * rx * cosA0 + cosPhi * ry * sinA0 + cy;\n    const x1 = cosPhi * rx * cosA1 - sinPhi * ry * sinA1 + cx;\n    const y1 = sinPhi * rx * cosA1 + cosPhi * ry * sinA1 + cy;\n    const large = Math.abs(da) > Math.PI;\n    const sweep = da > 0;\n    return {x0, y0, rx, ry, phi, large, sweep, x1, y1};\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2EllipticCurve) {\n      return Numbers.equivalent(this.cx, that.cx, epsilon)\n          && Numbers.equivalent(this.cy, that.cy, epsilon)\n          && Numbers.equivalent(this.rx, that.rx, epsilon)\n          && Numbers.equivalent(this.ry, that.ry, epsilon)\n          && Numbers.equivalent(this.phi, that.phi, epsilon)\n          && Numbers.equivalent(this.a0, that.a0, epsilon)\n          && Numbers.equivalent(this.da, that.da, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2EllipticCurve) {\n      return this.cx === that.cx && this.cy === that.cy\n          && this.rx === that.rx && this.ry === that.ry\n          && this.phi === that.phi && this.a0 === that.a0\n          && this.da === that.da;\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Curve\").write(46/*'.'*/).write(\"elliptic\").write(40/*'('*/)\n                   .debug(this.cx).write(\", \").debug(this.cy).write(\", \")\n                   .debug(this.rx).write(\", \").debug(this.ry).write(\", \")\n                   .debug(this.phi).write(\", \").debug(this.a0).write(\", \")\n                   .debug(this.da).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static fromEndpoints(x0: number, y0: number, rx: number, ry: number, phi: number,\n                       large: boolean, sweep: boolean, x1: number, y1: number): R2EllipticCurve {\n    const cosPhi = Math.cos(phi);\n    const sinPhi = Math.sin(phi);\n    const x0p =  cosPhi * ((x0 - x1) / 2) + sinPhi * ((y0 - y1) / 2);\n    const y0p = -sinPhi * ((x0 - x1) / 2) + cosPhi * ((y0 - y1) / 2);\n\n    const rx2 = rx * rx;\n    const ry2 = ry * ry;\n    const x0p2 = x0p * x0p;\n    const y0p2 = y0p * y0p;\n    let sp = Math.sqrt((rx2 * ry2 - rx2 * y0p2 - ry2 * x0p2) / (rx2 * y0p2 + ry2 * x0p2));\n    if (large === sweep) {\n      sp = -sp;\n    }\n    const cxp =  sp * rx * y0p / ry;\n    const cyp = -sp * ry * x0p / rx;\n    const cx = cosPhi * cxp - sinPhi * cyp + (x0 + x1) / 2;\n    const cy = sinPhi * cxp + cosPhi * cyp + (y0 + y1) / 2;\n\n    function angle(ux: number, uy: number, vx: number, vy: number): number {\n      const uv = ux * vx + uy * vy;\n      const uu = ux * ux + uy * uy;\n      const vv = vx * vx + vy * vy;\n      let a = Math.acos(uv / (Math.sqrt(uu) * Math.sqrt(vv)));\n      if (ux * vy - uy * vx < 0) {\n        a = -a;\n      }\n      return a;\n    }\n    const a0 = angle(1, 0, (x0p - cxp) / rx, (y0p - cyp) / ry);\n    let da = angle((x0p - cxp) / rx, (y0p - cyp) / ry, (-x0p - cxp) / rx, (-y0p - cyp) / ry) % (2 * Math.PI);\n    if (sweep && da < 0) {\n      da += 2 * Math.PI;\n    } else if (!sweep && da > 0) {\n      da -= 2 * Math.PI;\n    }\n\n    return new R2EllipticCurve(cx, cy, rx, ry, phi, a0, da);\n  }\n}\n\n/** @internal */\nexport class R2EllipticCurveParser extends Parser<R2EllipticCurve> {\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly rxParser: Parser<number> | undefined;\n  private readonly ryParser: Parser<number> | undefined;\n  private readonly phiParser: Parser<number> | undefined;\n  private readonly large: boolean | undefined;\n  private readonly sweep: boolean | undefined;\n  private readonly x1Parser: Parser<number> | undefined;\n  private readonly y1Parser: Parser<number> | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              rxParser?: Parser<number>, ryParser?: Parser<number>,\n              phiParser?: Parser<number>, large?: boolean, sweep?: boolean,\n              x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n              command?: number, step?: number) {\n    super();\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.rxParser = rxParser;\n    this.ryParser = ryParser;\n    this.phiParser = phiParser;\n    this.large = large;\n    this.sweep = sweep;\n    this.x1Parser = x1Parser;\n    this.y1Parser = y1Parser;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2EllipticCurve> {\n    return R2EllipticCurveParser.parse(input, this.x0Parser, this.y0Parser,\n                                       this.rxParser, this.ryParser,\n                                       this.phiParser, this.large, this.sweep,\n                                       this.x1Parser, this.y1Parser,\n                                       this.command, this.step);\n  }\n\n  static parse(input: Input, x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               rxParser?: Parser<number>, ryParser?: Parser<number>,\n               phiParser?: Parser<number>, large?: boolean, sweep?: boolean,\n               x1Parser?: Parser<number>, y1Parser?: Parser<number>,\n               command?: number, step: number = 1): Parser<R2EllipticCurve> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        switch (c) {\n          case 65/*'A'*/:\n          case 97/*'a'*/:\n            input = input.step();\n            command  = c;\n            step = 2;\n            break;\n          default:\n            return Parser.error(Diagnostic.expected(\"arcto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (rxParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          rxParser = Base10.parseDecimal(input);\n        }\n      } else {\n        rxParser = rxParser.feed(input);\n      }\n      if (rxParser !== void 0) {\n        if (rxParser.isDone()) {\n          step = 3;\n        } else if (rxParser.isError()) {\n          return rxParser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (ryParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          ryParser = Base10.parseDecimal(input);\n        }\n      } else {\n        ryParser = ryParser.feed(input);\n      }\n      if (ryParser !== void 0) {\n        if (ryParser.isDone()) {\n          step = 5;\n        } else if (ryParser.isError()) {\n          return ryParser.asError();\n        }\n      }\n    }\n    if (step === 5) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 6;\n      } else if (!input.isEmpty()) {\n        step = 6;\n      }\n    }\n    if (step === 6) {\n      if (phiParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          phiParser = Base10.parseDecimal(input);\n        }\n      } else {\n        phiParser = phiParser.feed(input);\n      }\n      if (phiParser !== void 0) {\n        if (phiParser.isDone()) {\n          step = 7;\n        } else if (phiParser.isError()) {\n          return phiParser.asError();\n        }\n      }\n    }\n    if (step === 7) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 8;\n      } else if (!input.isEmpty()) {\n        step = 8;\n      }\n    }\n    if (step === 8) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 48/*'0'*/) {\n          input = input.step();\n          large = false;\n          step = 9;\n        } else if (c === 49/*'1'*/) {\n          input = input.step();\n          large = true;\n          step = 9;\n        } else {\n          return Parser.error(Diagnostic.expected(\"flag\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 9) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 10;\n      } else if (!input.isEmpty()) {\n        step = 10;\n      }\n    }\n    if (step === 10) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 48/*'0'*/) {\n          input = input.step();\n          sweep = false;\n          step = 11;\n        } else if (c === 49/*'1'*/) {\n          input = input.step();\n          sweep = true;\n          step = 11;\n        } else {\n          return Parser.error(Diagnostic.expected(\"flag\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 11) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 12;\n      } else if (!input.isEmpty()) {\n        step = 12;\n      }\n    }\n    if (step === 12) {\n      if (x1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x1Parser = x1Parser.feed(input);\n      }\n      if (x1Parser !== void 0) {\n        if (x1Parser.isDone()) {\n          step = 13;\n        } else if (x1Parser.isError()) {\n          return x1Parser.asError();\n        }\n      }\n    }\n    if (step === 13) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 14;\n      } else if (!input.isEmpty()) {\n        step = 14;\n      }\n    }\n    if (step === 14) {\n      if (y1Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y1Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y1Parser = y1Parser.feed(input);\n      }\n      if (y1Parser !== void 0) {\n        if (y1Parser.isDone()) {\n          const x0 = x0Parser!.bind();\n          const y0 = y0Parser!.bind();\n          const rx = rxParser!.bind();\n          const ry = ryParser!.bind();\n          const phi = phiParser!.bind() * Math.PI / 180;\n          let x1 = x1Parser!.bind();\n          let y1 = y1Parser.bind();\n          if (command === 97/*'a'*/) {\n            x1 += x0;\n            y1 += y0;\n          }\n          return Parser.done(R2EllipticCurve.fromEndpoints(x0, y0, rx, ry, phi, large!, sweep!, x1, y1));\n        } else if (y1Parser.isError()) {\n          return y1Parser.asError();\n        }\n      }\n    }\n    return new R2EllipticCurveParser(x0Parser, y0Parser, rxParser, ryParser,\n                                     phiParser, large, sweep, x1Parser, y1Parser,\n                                     command, step);\n  }\n\n  static parseRest(input: Input, command?: number, x0Parser?: Parser<number>,\n                   y0Parser?: Parser<number>): Parser<R2EllipticCurve> {\n    return R2EllipticCurveParser.parse(input, x0Parser, y0Parser, void 0, void 0, void 0,\n                                       void 0, void 0, void 0, void 0, command, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {OutputSettingsLike} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2CurveContext} from \"./R2Curve\";\nimport {R2Curve} from \"./R2Curve\";\nimport {R2Segment} from \"./R2Segment\";\nimport {R2SegmentParser} from \"./R2Segment\";\nimport {R2QuadraticCurve} from \"./R2QuadraticCurve\";\nimport {R2QuadraticCurveParser} from \"./R2QuadraticCurve\";\nimport {R2CubicCurve} from \"./R2CubicCurve\";\nimport {R2CubicCurveParser} from \"./R2CubicCurve\";\nimport {R2EllipticCurve} from \"./R2EllipticCurve\";\nimport {R2EllipticCurveParser} from \"./R2EllipticCurve\";\nimport {R2Box} from \"./\"; // forward import\n\n/** @public */\nexport interface R2SplineContext extends R2CurveContext {\n  rect(x: number, y: number, w: number, h: number): void;\n\n  closePath(): void;\n}\n\n/** @public */\nexport class R2Spline extends R2Curve implements Debug {\n  constructor(curves: readonly R2Curve[], closed: boolean) {\n    super();\n    this.curves = curves;\n    this.closed = closed;\n    this.boundingBox = null;\n    this.pathString = void 0;\n  }\n\n  readonly curves: readonly R2Curve[];\n\n  /** @internal */\n  readonly closed: boolean;\n\n  override isDefined(): boolean {\n    return this.curves.length !== 0;\n  }\n\n  isClosed(): boolean {\n    return this.closed;\n  }\n\n  override get xMin(): number {\n    return this.bounds.xMin;\n  }\n\n  override get yMin(): number {\n    return this.bounds.yMin;\n  }\n\n  override get xMax(): number {\n    return this.bounds.xMax;\n  }\n\n  override get yMax(): number {\n    return this.bounds.yMax;\n  }\n\n  override interpolateX(u: number): number {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n - 1);\n    const v = n * (u - k * l);\n    return curves[k]!.interpolateX(v);\n  }\n\n  override interpolateY(u: number): number {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n - 1);\n    const v = n * (u - k * l);\n    return curves[k]!.interpolateY(v);\n  }\n\n  override interpolate(u: number): R2Point {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return R2Point.undefined();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n - 1);\n    const v = n * (u - k * l);\n    return curves[k]!.interpolate(v);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override split(u: number): [R2Spline, R2Spline] {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return [R2Spline.empty(), R2Spline.empty()];\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n - 1);\n    const v = n * (u - k * l);\n    const [c0, c1] = curves[k]!.split(v);\n    const curves0 = new Array<R2Curve>(k + 1);\n    const curves1 = new Array<R2Curve>(n - k);\n    for (let i = 0; i < k; i += 1) {\n      curves0[i] = curves[i]!;\n    }\n    curves0[k] = c0;\n    curves1[0] = c1;\n    for (let i = k + 1; i < n; i += 1) {\n      curves1[i - k] = curves[i]!;\n    }\n    return [new R2Spline(curves0, false), new R2Spline(curves1, false)];\n  }\n\n  subdivide(u: number): R2Spline {\n    const oldCurves = this.curves;\n    const n = oldCurves.length;\n    if (n === 0) {\n      return R2Spline.empty();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n - 1);\n    const v = n * (u - k * l);\n    const [c0, c1] = oldCurves[k]!.split(v);\n    const newCurves = new Array<R2Curve>(n + 1);\n    for (let i = 0; i < k; i += 1) {\n      newCurves[i] = oldCurves[i]!;\n    }\n    newCurves[k] = c0;\n    newCurves[k + 1] = c1;\n    for (let i = k + 1; i < n; i += 1) {\n      newCurves[i + 1] = oldCurves[i]!;\n    }\n    return new R2Spline(newCurves, this.closed);\n  }\n\n  override transform(f: R2Function): R2Spline {\n    const oldCurves = this.curves;\n    const n = oldCurves.length;\n    if (n === 0) {\n      return R2Spline.empty();\n    }\n    const newCurves = new Array<R2Curve>(n);\n    for (let i = 0; i < n; i += 1) {\n      newCurves[i] = oldCurves[i]!.transform(f);\n    }\n    return new R2Spline(newCurves, this.closed);\n  }\n\n  /** @internal */\n  readonly boundingBox: R2Box | null;\n\n  override get bounds(): R2Box {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let xMin = Infinity;\n      let yMin = Infinity;\n      let xMax = -Infinity;\n      let yMax = -Infinity;\n      const curves = this.curves;\n      for (let i = 0; i < curves.length; i += 1) {\n        const curve = curves[i]!;\n        xMin = Math.min(xMin, curve.xMin);\n        yMin = Math.min(yMin, curve.yMin);\n        xMax = Math.max(curve.xMax, xMax);\n        yMax = Math.max(curve.yMax, yMax);\n      }\n      boundingBox = new R2Box(xMin, yMin, xMax, yMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  override drawMove(context: R2SplineContext): void {\n    const curves = this.curves;\n    if (curves.length !== 0) {\n      curves[0]!.drawMove(context);\n    }\n  }\n\n  override drawRest(context: R2SplineContext): void {\n    const curves = this.curves;\n    const closed = this.closed;\n    const n = curves.length - (closed && context.closePath !== void 0 ? 1 : 0);\n    for (let i = 0; i < n; i += 1) {\n      curves[i]!.drawRest(context);\n    }\n    if (closed && context.closePath !== void 0) {\n      context.closePath();\n    }\n  }\n\n  override transformDrawMove(context: R2SplineContext, f: R2Function): void {\n    const curves = this.curves;\n    if (curves.length !== 0) {\n      curves[0]!.transformDrawMove(context, f);\n    }\n  }\n\n  override transformDrawRest(context: R2SplineContext, f: R2Function): void {\n    const curves = this.curves;\n    const closed = this.closed;\n    const n = curves.length - (closed && context.closePath !== void 0 ? 1 : 0);\n    for (let i = 0; i < n; i += 1) {\n      curves[i]!.transformDrawRest(context, f);\n    }\n    if (closed && context.closePath !== void 0) {\n      context.closePath();\n    }\n  }\n\n  override writeMove<T>(output: Output<T>): Output<T> {\n    const curves = this.curves;\n    if (curves.length !== 0) {\n      output = curves[0]!.writeMove(output);\n    }\n    return output;\n  }\n\n  override writeRest<T>(output: Output<T>): Output<T> {\n    const curves = this.curves;\n    const closed = this.closed;\n    const n = curves.length - (closed ? 1 : 0);\n    for (let i = 0; i < n; i += 1) {\n      output = curves[i]!.writeRest(output);\n    }\n    if (closed) {\n      output = output.write(90/*'Z'*/);\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly pathString: string | undefined;\n\n  override toPathString(outputSettings?: OutputSettingsLike): string {\n    let pathString: string | undefined;\n    if (outputSettings !== void 0 || (pathString = this.pathString, pathString === void 0)) {\n      const output = Unicode.stringOutput(outputSettings);\n      this.writePath(output);\n      pathString = output.bind();\n      if (outputSettings === void 0) {\n        (this as Mutable<this>).pathString = pathString;\n      }\n    }\n    return pathString;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Spline) {\n      return Arrays.equivalent(this.curves, that.curves, epsilon)\n          && this.closed === that.closed;\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Spline) {\n      return Arrays.equal(this.curves, that.curves)\n          && this.closed === that.closed;\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const curves = this.curves;\n    const n = curves.length;\n    output = output.write(\"R2Spline\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else if (n !== 0) {\n      output = output.write(this.closed ? \"closed\" : \"open\").write(40/*'('*/);\n      output = output.debug(curves[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(curves[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static builder(): R2SplineBuilder {\n    return new R2SplineBuilder();\n  }\n\n  @Lazy\n  static empty(): R2Spline {\n    return new R2Spline(Arrays.empty(), false);\n  }\n\n  static open(...curves: R2Curve[]): R2Spline {\n    return new R2Spline(curves, false);\n  }\n\n  static closed(...curves: R2Curve[]): R2Spline {\n    return new R2Spline(curves, true);\n  }\n\n  static override parse(string: string): R2Spline {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = R2SplineParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @public */\nexport class R2SplineBuilder implements R2SplineContext {\n  /** @internal */\n  curves: R2Curve[];\n  /** @internal */\n  closed: boolean;\n  /** @internal */\n  aliased: boolean;\n  /** @internal */\n  x0: number;\n  /** @internal */\n  y0: number;\n  /** @internal */\n  x: number;\n  /** @internal */\n  y: number;\n\n  constructor() {\n    this.curves = [];\n    this.closed = false;\n    this.aliased = false;\n    this.x0 = 0;\n    this.y0 = 0;\n    this.x = 0;\n    this.y = 0;\n  }\n\n  private dealias(): void {\n    if (!this.aliased) {\n      return;\n    }\n    this.curves = this.curves.slice(0);\n    this.aliased = false;\n  }\n\n  moveTo(x: number, y: number): void {\n    if (this.aliased) {\n      this.curves = [];\n      this.aliased = false;\n    } else {\n      this.curves.length = 0;\n    }\n    this.closed = false;\n    this.x0 = x;\n    this.y0 = y;\n    this.x = x;\n    this.y = y;\n  }\n\n  closePath(): void {\n    this.dealias();\n    this.curves.push(new R2Segment(this.x, this.y, this.x0, this.y0));\n    this.closed = true;\n    this.x = this.x0;\n    this.y = this.y0;\n  }\n\n  lineTo(x: number, y: number): void {\n    this.dealias();\n    this.curves.push(new R2Segment(this.x, this.y, x, y));\n    this.x = x;\n    this.y = y;\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): void {\n    this.dealias();\n    this.curves.push(new R2QuadraticCurve(this.x, this.y, x1, y1, x, y));\n    this.x = x;\n    this.y = y;\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): void {\n    this.dealias();\n    this.curves.push(new R2CubicCurve(this.x, this.y, x1, y1, x2, y2, x, y));\n    this.x = x;\n    this.y = y;\n  }\n\n  arcTo(x1: number, y1: number, x2: number, y2: number, r: number): void {\n    this.dealias();\n    const x0 = this.x;\n    const y0 = this.y;\n    const dx01 = x1 - x0;\n    const dy01 = y1 - y0;\n    const dx12 = x2 - x1;\n    const dy12 = y2 - y1;\n    const a0 = Math.atan2(dy01, dx01) - Math.PI / 2;\n    const a1 = Math.atan2(dy12, dx12) - Math.PI / 2;\n    const da = a1 - a0;\n    const r0x = Math.cos(a0);\n    const r0y = Math.sin(a0);\n    const r1x = Math.cos(a1);\n    const r1y = Math.sin(a1);\n    const r0x0 = x0 - r0x;\n    const r0y0 = y0 - r0y;\n    const r0x1 = x1 - r0x;\n    const r0y1 = y1 - r0y;\n    const r1x1 = x1 - r1x;\n    const r1y1 = y1 - r1y;\n    const r1x2 = x2 - r1x;\n    const r1y2 = y2 - r1y;\n    const u = R2SplineBuilder.intersection(r0x0, r0y0, r0x1 - r0x0, r0y1 - r0y0,\n                                           r1x1, r1y1, r1x2 - r1x1, r1y2 - r1y1);\n    const cx = r0x0 + u * (r0x1 - r0x0);\n    const cy = r0y0 + u * (r0y1 - r0y0);\n    this.curves.push(new R2EllipticCurve(cx, cy, r, r, 0, a0, da));\n    this.x = x2;\n    this.y = y2;\n  }\n\n  private static intersection(px: number, py: number, rx: number, ry: number,\n                              qx: number, qy: number, sx: number, sy: number): number {\n    const pqx = qx - px;\n    const pqy = qy - py;\n    const pqr = pqx * ry - pqy * rx;\n    const rs = rx * sy - ry * sx;\n    if (pqr === 0 && rs === 0) { // collinear\n      const rr = rx * rx + ry * ry;\n      const sr = sx * rx + sy * ry;\n      const t0 = (pqx * rx + pqy * ry) / rr;\n      const t1 = t0 + sr / rr;\n      if (sr >= 0 ? 0 < t1 && t0 < 1 : 0 < t0 && t1 < 1) {\n        return t0;\n      } else {\n        return NaN;\n      }\n    } else if (rs === 0) { // parallel\n      return NaN;\n    }\n    const pqs = pqx * sy - pqy * sx;\n    const t = pqs / rs; // (q − p) × s / (r × s)\n    const u = pqr / rs; // (q − p) × r / (r × s)\n    if (t < 0 || t > 1 || u < 0 || u > 1) {\n      return NaN;\n    }\n    return t;\n  }\n\n  arc(cx: number, cy: number, r: number, a0: number, a1: number, ccw: boolean = false): void {\n    this.dealias();\n    let da = a1 - a0;\n    if (ccw === true && da > 0) {\n      da -= 2 * Math.PI;\n    } else if (ccw === false && da < 0) {\n      da += 2 * Math.PI;\n    }\n    const curve = new R2EllipticCurve(cx, cy, r, r, 0, a0, da);\n    this.curves.push(curve);\n    const {x, y} = curve.interpolate(1);\n    this.x = x;\n    this.y = y;\n  }\n\n  ellipse(cx: number, cy: number, rx: number, ry: number, phi: number, a0: number, a1: number, ccw?: boolean): void {\n    this.dealias();\n    let da = a1 - a0;\n    if (ccw === true && da > 0) {\n      da -= 2 * Math.PI;\n    } else if (ccw === false && da < 0) {\n      da += 2 * Math.PI;\n    }\n    const curve = new R2EllipticCurve(cx, cy, rx, ry, phi, a0, da);\n    this.curves.push(curve);\n    const {x, y} = curve.interpolate(1);\n    this.x = x;\n    this.y = y;\n  }\n\n  rect(x: number, y: number, w: number, h: number): void {\n    this.dealias();\n    this.curves.push(new R2Segment(x, y, x + w, y),\n                     new R2Segment(x + w, y, x + w, y + h),\n                     new R2Segment(x + w, y + h, x, y + h),\n                     new R2Segment(x, y + h, x, y));\n    this.x = x;\n    this.y = y;\n  }\n\n  build(): R2Spline {\n    this.aliased = true;\n    return new R2Spline(this.curves, this.closed);\n  }\n}\n\n/** @internal */\nexport class R2SplineParser extends Parser<R2Spline> {\n  private readonly xParser: Parser<number> | undefined;\n  private readonly yParser: Parser<number> | undefined;\n  private readonly x0Parser: Parser<number> | undefined;\n  private readonly y0Parser: Parser<number> | undefined;\n  private readonly curveParser: Parser<R2Curve> | undefined;\n  private readonly curves: R2Curve[] | undefined;\n  private readonly command: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(xParser?: Parser<number>, yParser?: Parser<number>,\n              x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n              curveParser?: Parser<R2Curve>, curves?: R2Curve[],\n              command?: number, step?: number) {\n    super();\n    this.xParser = xParser;\n    this.yParser = yParser;\n    this.x0Parser = x0Parser;\n    this.y0Parser = y0Parser;\n    this.curveParser = curveParser;\n    this.curves = curves;\n    this.command = command;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2Spline> {\n    return R2SplineParser.parse(input, this.xParser, this.yParser,\n                                this.x0Parser, this.y0Parser,\n                                this.curveParser, this.curves,\n                                this.command, this.step);\n  }\n\n  static parse(input: Input, xParser?: Parser<number>, yParser?: Parser<number>,\n               x0Parser?: Parser<number>, y0Parser?: Parser<number>,\n               curveParser?: Parser<R2Curve>, curves?: R2Curve[],\n               command?: number, step: number = 1): Parser<R2Spline> {\n    let c = 0;\n    if (step === 1) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 77/*'M'*/ || c === 109/*'m'*/) {\n          input = input.step();\n          command = c;\n          step = 2;\n        } else {\n          return Parser.error(Diagnostic.expected(\"moveto\", input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 2) {\n      if (x0Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          x0Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        x0Parser = x0Parser.feed(input);\n      }\n      if (x0Parser !== void 0) {\n        if (x0Parser.isDone()) {\n          if (command === 109/*'m'*/ && xParser !== void 0) {\n            x0Parser = Parser.done(xParser.bind() + x0Parser.bind());\n          }\n          xParser = x0Parser;\n          step = 3;\n        } else if (x0Parser.isError()) {\n          return x0Parser.asError();\n        }\n      }\n    }\n    if (step === 3) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont()) {\n        if (c === 44/*','*/) {\n          input = input.step();\n        }\n        step = 4;\n      } else if (!input.isEmpty()) {\n        step = 4;\n      }\n    }\n    if (step === 4) {\n      if (y0Parser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input = input.step();\n        }\n        if (!input.isEmpty()) {\n          y0Parser = Base10.parseDecimal(input);\n        }\n      } else {\n        y0Parser = y0Parser.feed(input);\n      }\n      if (y0Parser !== void 0) {\n        if (y0Parser.isDone()) {\n          if (command === 109/*'m'*/ && yParser !== void 0) {\n            y0Parser = Parser.done(yParser.bind() + y0Parser.bind());\n          }\n          yParser = y0Parser;\n          step = 5;\n        } else if (y0Parser.isError()) {\n          return y0Parser.asError();\n        }\n      }\n    }\n    do {\n      if (step === 5) {\n        if (curveParser === void 0) {\n          while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n            input = input.step();\n          }\n          if (input.isCont()) {\n            const prevCurve = curves !== void 0 && curves.length !== 0 ? curves[curves.length - 1] : null;\n            switch (c) {\n              case 76/*'L'*/:\n              case 108/*'l'*/:\n              case 72/*'H'*/:\n              case 104/*'h'*/:\n              case 86/*'V'*/:\n              case 118/*'v'*/:\n                curveParser = R2SegmentParser.parse(input, xParser, yParser);\n                command = c;\n                break;\n              case 81/*'Q'*/:\n              case 113/*'q'*/:\n                curveParser = R2QuadraticCurveParser.parse(input, xParser, yParser);\n                command = c;\n                break;\n              case 84/*'T'*/:\n                if (prevCurve instanceof R2QuadraticCurve) {\n                  const dx = prevCurve.x2 - prevCurve.x1;\n                  const dy = prevCurve.y2 - prevCurve.y1;\n                  const x1 = xParser!.bind() + dx;\n                  const y1 = yParser!.bind() + dy;\n                  curveParser = R2QuadraticCurveParser.parse(input, xParser, yParser,\n                                                             Parser.done(x1), Parser.done(y1));\n                } else {\n                  curveParser = R2QuadraticCurveParser.parse(input, xParser, yParser,\n                                                             xParser, yParser);\n                }\n                command = c;\n                break;\n              case 116/*'t'*/:\n                if (prevCurve instanceof R2QuadraticCurve) {\n                  const dx = prevCurve.x2 - prevCurve.x1;\n                  const dy = prevCurve.y2 - prevCurve.y1;\n                  curveParser = R2QuadraticCurveParser.parse(input, xParser, yParser,\n                                                             Parser.done(dx), Parser.done(dy));\n                } else {\n                  curveParser = R2QuadraticCurveParser.parse(input, xParser, yParser,\n                                                             Parser.done(0), Parser.done(0));\n                }\n                command = c;\n                break;\n              case 67/*'C'*/:\n              case 99/*'c'*/:\n                curveParser = R2CubicCurveParser.parse(input, xParser, yParser);\n                command = c;\n                break;\n              case 83/*'S'*/:\n                if (prevCurve instanceof R2CubicCurve) {\n                  const dx = prevCurve.x3 - prevCurve.x2;\n                  const dy = prevCurve.y3 - prevCurve.y2;\n                  const x1 = xParser!.bind() + dx;\n                  const y1 = yParser!.bind() + dy;\n                  curveParser = R2CubicCurveParser.parse(input, xParser, yParser,\n                                                         Parser.done(x1), Parser.done(y1));\n                } else {\n                  curveParser = R2CubicCurveParser.parse(input, xParser, yParser,\n                                                         xParser, yParser);\n                }\n                command = c;\n                break;\n              case 115/*'s'*/:\n                if (prevCurve instanceof R2CubicCurve) {\n                  const dx = prevCurve.x3 - prevCurve.x2;\n                  const dy = prevCurve.y3 - prevCurve.y2;\n                  curveParser = R2CubicCurveParser.parse(input, xParser, yParser,\n                                                         Parser.done(dx), Parser.done(dy));\n                } else {\n                  curveParser = R2CubicCurveParser.parse(input, xParser, yParser,\n                                                         Parser.done(0), Parser.done(0));\n                }\n                command = c;\n                break;\n              case 65/*'A'*/:\n              case 97/*'a'*/:\n                curveParser = R2EllipticCurveParser.parse(input, xParser, yParser);\n                command = c;\n                break;\n              case 90/*'Z'*/:\n              case 122/*'z'*/:\n                input = input.step();\n                if (curves === void 0) {\n                  curves = [];\n                }\n                curves.push(new R2Segment(xParser!.bind(), yParser!.bind(),\n                                          x0Parser!.bind(), y0Parser!.bind()));\n                return Parser.done(new R2Spline(curves, true));\n              case 44/*','*/:\n                input = input.step();\n              case 43/*'+'*/:\n              case 45/*'-'*/:\n              case 46/*'.'*/:\n              case 48/*'0'*/:\n              case 49/*'1'*/:\n              case 50/*'2'*/:\n              case 51/*'3'*/:\n              case 52/*'4'*/:\n              case 53/*'5'*/:\n              case 54/*'6'*/:\n              case 55/*'7'*/:\n              case 56/*'8'*/:\n              case 57/*'9'*/:\n                switch (command) {\n                  case 77/*'M'*/:\n                  case 109/*'m'*/:\n                  case 76/*'L'*/:\n                  case 108/*'l'*/:\n                  case 72/*'H'*/:\n                  case 104/*'h'*/:\n                  case 86/*'V'*/:\n                  case 118/*'v'*/:\n                    curveParser = R2SegmentParser.parseRest(input, command, xParser, yParser);\n                    break;\n                  case 81/*'Q'*/:\n                  case 113/*'q'*/:\n                    curveParser = R2QuadraticCurveParser.parseRest(input, command, xParser, yParser);\n                    break;\n                  case 84/*'T'*/:\n                    if (prevCurve instanceof R2QuadraticCurve) {\n                      const dx = prevCurve.x2 - prevCurve.x1;\n                      const dy = prevCurve.y2 - prevCurve.y1;\n                      const x1 = xParser!.bind() + dx;\n                      const y1 = yParser!.bind() + dy;\n                      curveParser = R2QuadraticCurveParser.parseRest(input, command, xParser, yParser,\n                                                                     Parser.done(x1), Parser.done(y1));\n                    } else {\n                      curveParser = R2QuadraticCurveParser.parseRest(input, command, xParser, yParser,\n                                                                     xParser, yParser);\n                    }\n                    break;\n                  case 116/*'t'*/:\n                    if (prevCurve instanceof R2QuadraticCurve) {\n                      const dx = prevCurve.x2 - prevCurve.x1;\n                      const dy = prevCurve.y2 - prevCurve.y1;\n                      curveParser = R2QuadraticCurveParser.parseRest(input, command, xParser, yParser,\n                                                                     Parser.done(dx), Parser.done(dy));\n                    } else {\n                      curveParser = R2QuadraticCurveParser.parseRest(input, command, xParser, yParser,\n                                                                     Parser.done(0), Parser.done(0));\n                    }\n                    break;\n                  case 67/*'C'*/:\n                  case 99/*'c'*/:\n                    curveParser = R2CubicCurveParser.parseRest(input, command, xParser, yParser);\n                    break;\n                  case 83/*'S'*/:\n                    if (prevCurve instanceof R2CubicCurve) {\n                      const dx = prevCurve.x3 - prevCurve.x2;\n                      const dy = prevCurve.y3 - prevCurve.y2;\n                      const x1 = xParser!.bind() + dx;\n                      const y1 = yParser!.bind() + dy;\n                      curveParser = R2CubicCurveParser.parseRest(input, command, xParser, yParser,\n                                                                 Parser.done(x1), Parser.done(y1));\n                    } else {\n                      curveParser = R2CubicCurveParser.parseRest(input, command, xParser, yParser,\n                                                                 xParser, yParser);\n                    }\n                    break;\n                  case 115/*'s'*/:\n                    if (prevCurve instanceof R2CubicCurve) {\n                      const dx = prevCurve.x3 - prevCurve.x2;\n                      const dy = prevCurve.y3 - prevCurve.y2;\n                      curveParser = R2CubicCurveParser.parseRest(input, command, xParser, yParser,\n                                                                 Parser.done(dx), Parser.done(dy));\n                    } else {\n                      curveParser = R2CubicCurveParser.parseRest(input, command, xParser, yParser,\n                                                                 Parser.done(0), Parser.done(0));\n                    }\n                    break;\n                  case 65/*'A'*/:\n                  case 97/*'a'*/:\n                    curveParser = R2EllipticCurveParser.parseRest(input, command, xParser, yParser);\n                    break;\n                  default:\n                    if (curves !== void 0) {\n                      return Parser.done(new R2Spline(curves, false));\n                    } else {\n                      return Parser.done(R2Spline.empty());\n                    }\n                }\n                break;\n              default:\n                if (curves !== void 0) {\n                  return Parser.done(new R2Spline(curves, false));\n                } else {\n                  return Parser.done(R2Spline.empty());\n                }\n            }\n          } else if (!input.isEmpty()) {\n            if (curves !== void 0) {\n              return Parser.done(new R2Spline(curves, false));\n            } else {\n              return Parser.done(R2Spline.empty());\n            }\n          }\n        } else {\n          curveParser = curveParser.feed(input);\n        }\n        if (curveParser !== void 0) {\n          if (curveParser.isDone()) {\n            const curve = curveParser.bind();\n            curveParser = void 0;\n            if (curves === void 0) {\n              curves = [];\n            }\n            curves.push(curve);\n            xParser = Parser.done(curve.interpolateX(1));\n            yParser = Parser.done(curve.interpolateY(1));\n            continue;\n          } else if (curveParser.isError()) {\n            return curveParser.asError();\n          }\n        }\n      }\n      break;\n    } while (true);\n    return new R2SplineParser(xParser, yParser, x0Parser, y0Parser,\n                              curveParser, curves, command, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {OutputSettingsLike} from \"@swim/codec\";\nimport {OutputSettings} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport type {R2Curve} from \"./R2Curve\";\nimport type {R2SplineContext} from \"./R2Spline\";\nimport {R2Spline} from \"./R2Spline\";\nimport {R2SplineBuilder} from \"./R2Spline\";\nimport {R2SplineParser} from \"./R2Spline\";\nimport {R2Box} from \"./\"; // forward import\n\n/** @public */\nexport interface R2PathContext extends R2SplineContext {\n}\n\n/** @public */\nexport type R2PathLike = R2Path | string;\n\n/** @public */\nexport const R2PathLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2PathLike {\n    return instance instanceof R2Path\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class R2Path extends R2Shape implements Debug {\n  constructor(splines: readonly R2Spline[]) {\n    super();\n    this.splines = splines;\n    this.boundingBox = null;\n    this.pathString = void 0;\n  }\n\n  override likeType?(like: string): void;\n\n  readonly splines: readonly R2Spline[];\n\n  override isDefined(): boolean {\n    return this.splines.length !== 0;\n  }\n\n  override get xMin(): number {\n    return this.bounds.xMin;\n  }\n\n  override get yMin(): number {\n    return this.bounds.yMin;\n  }\n\n  override get xMax(): number {\n    return this.bounds.xMax;\n  }\n\n  override get yMax(): number {\n    return this.bounds.yMax;\n  }\n\n  interpolateX(u: number): number {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolateX(v);\n  }\n\n  interpolateY(u: number): number {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolateY(v);\n  }\n\n  interpolate(u: number): R2Point {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return R2Point.undefined();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolate(v);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  split(u: number): [R2Path, R2Path] {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return [R2Path.empty(), R2Path.empty()];\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const [s0, s1] = splines[k]!.split(v);\n    const splines0 = new Array<R2Spline>(k + 1);\n    const splines1 = new Array<R2Spline>(n - k);\n    for (let i = 0; i < k; i += 1) {\n      splines0[i] = splines[i]!;\n    }\n    splines0[k] = s0;\n    splines1[0] = s1;\n    for (let i = k + 1; i < n; i += 1) {\n      splines1[i - k] = splines[i]!;\n    }\n    return [new R2Path(splines0), new R2Path(splines1)];\n  }\n\n  subdivide(u: number): R2Path {\n    const oldSplines = this.splines;\n    const n = oldSplines.length;\n    if (n === 0) {\n      return R2Path.empty();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const newSplines = new Array<R2Spline>(n);\n    for (let i = 0; i < k; i += 1) {\n      newSplines[i] = oldSplines[i]!;\n    }\n    newSplines[k] = oldSplines[k]!.subdivide(v);\n    for (let i = k + 1; i < n; i += 1) {\n      newSplines[i] = oldSplines[i]!;\n    }\n    return new R2Path(newSplines);\n  }\n\n  override transform(f: R2Function): R2Path {\n    const oldSplines = this.splines;\n    const n = oldSplines.length;\n    if (n === 0) {\n      return R2Path.empty();\n    }\n    const newSplines = new Array<R2Spline>(n);\n    for (let i = 0; i < n; i += 1) {\n      newSplines[i] = oldSplines[i]!.transform(f);\n    }\n    return new R2Path(newSplines);\n  }\n\n  /** @internal */\n  readonly boundingBox: R2Box | null;\n\n  override get bounds(): R2Box {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let xMin = Infinity;\n      let yMin = Infinity;\n      let xMax = -Infinity;\n      let yMax = -Infinity;\n      const splines = this.splines;\n      for (let i = 0; i < splines.length; i += 1) {\n        const spline = splines[i]!;\n        xMin = Math.min(xMin, spline.xMin);\n        yMin = Math.min(yMin, spline.yMin);\n        xMax = Math.max(spline.xMax, xMax);\n        yMax = Math.max(spline.yMax, yMax);\n      }\n      boundingBox = new R2Box(xMin, yMin, xMax, yMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  draw(context: R2PathContext): void {\n    const splines = this.splines;\n    for (let i = 0; i < splines.length; i += 1) {\n      splines[i]!.draw(context);\n    }\n  }\n\n  transformDraw(context: R2PathContext, f: R2Function): void {\n    const splines = this.splines;\n    for (let i = 0; i < splines.length; i += 1) {\n      splines[i]!.transformDraw(context, f);\n    }\n  }\n\n  writePath<T>(output: Output<T>): Output<T> {\n    const splines = this.splines;\n    const n = splines.length;\n    if (output.settings === OutputSettings.standard()) {\n      for (let i = 0; i < n; i += 1) {\n        output = output.write(splines[i]!.toPathString()); // write memoized subpath strings\n      }\n    } else {\n      for (let i = 0; i < n; i += 1) {\n        output = splines[i]!.writePath(output);\n      }\n    }\n    return output;\n  }\n\n  /** @internal */\n  readonly pathString: string | undefined;\n\n  toPathString(outputSettings?: OutputSettingsLike): string {\n    let pathString: string | undefined;\n    if (outputSettings !== void 0 || (pathString = this.pathString, pathString === void 0)) {\n      const output = Unicode.stringOutput(outputSettings);\n      this.writePath(output);\n      pathString = output.bind();\n      if (outputSettings === void 0) {\n        (this as Mutable<this>).pathString = pathString;\n      }\n    }\n    return pathString;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Path) {\n      return Arrays.equivalent(this.splines, that.splines, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Path) {\n      return Arrays.equal(this.splines, that.splines);\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const splines = this.splines;\n    const n = splines.length;\n    output = output.write(\"R2Path\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else if (n === 1) {\n      const spline = splines[0]!;\n      output = output.write(spline.closed ? \"closed\" : \"open\").write(40/*'('*/);\n      const curves = spline.curves;\n      const m = curves.length;\n      if (m !== 0) {\n        output = output.debug(curves[0]!);\n        for (let i = 1; i < m; i += 1) {\n          output = output.write(\", \").debug(curves[i]!);\n        }\n      }\n    } else {\n      output = output.write(\"of\").write(40/*'('*/);\n      output = output.debug(splines[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(splines[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  toAttributeString(): string {\n    return this.toPathString();\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static builder(): R2PathBuilder {\n    return new R2PathBuilder();\n  }\n\n  @Lazy\n  static empty(): R2Path {\n    return new R2Path(Arrays.empty());\n  }\n\n  static of(...splines: R2Spline[]): R2Path {\n    return new R2Path(splines);\n  }\n\n  static open(...curves: R2Curve[]): R2Path {\n    return new R2Path([new R2Spline(curves, false)]);\n  }\n\n  static closed(...curves: R2Curve[]): R2Path {\n    return new R2Path([new R2Spline(curves, true)]);\n  }\n\n  static override fromLike<T extends R2PathLike | null | undefined>(value: T): R2Path | Uninitable<T>;\n  static override fromLike<T extends R2ShapeLike | null | undefined>(value: T): R2Path | never;\n  static override fromLike<T extends R2PathLike | null | undefined>(value: T): R2Path | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Path) {\n      return value as R2Path | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return R2Path.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static parse(string: string): R2Path {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = R2PathParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @public */\nexport class R2PathBuilder implements R2PathContext {\n  /** @internal */\n  splines: R2Spline[];\n  /** @internal */\n  builder: R2SplineBuilder | null;\n\n  constructor() {\n    this.splines = [];\n    this.builder = null;\n  }\n\n  moveTo(x: number, y: number): void {\n    let builder = this.builder;\n    if (builder !== null) {\n      const spline = builder.build();\n      if (spline.isDefined()) {\n        this.splines.push(spline);\n      }\n    }\n    builder = new R2SplineBuilder();\n    this.builder = builder;\n    builder.moveTo(x, y);\n  }\n\n  closePath(): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.closePath();\n    } else {\n      throw new Error();\n    }\n  }\n\n  lineTo(x: number, y: number): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.lineTo(x, y);\n    } else {\n      throw new Error();\n    }\n  }\n\n  quadraticCurveTo(x1: number, y1: number, x: number, y: number): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.quadraticCurveTo(x1, y1, x, y);\n    } else {\n      throw new Error();\n    }\n  }\n\n  bezierCurveTo(x1: number, y1: number, x2: number, y2: number, x: number, y: number): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.bezierCurveTo(x1, y1, x2, y2, x, y);\n    } else {\n      throw new Error();\n    }\n  }\n\n  arcTo(x1: number, y1: number, x2: number, y2: number, r: number): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.arcTo(x1, y1, x2, y2, r);\n    } else {\n      throw new Error();\n    }\n  }\n\n  arc(cx: number, cy: number, r: number, a0: number, a1: number, ccw?: boolean): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.arc(cx, cy, r, a0, a1, ccw);\n    } else {\n      throw new Error();\n    }\n  }\n\n  ellipse(cx: number, cy: number, rx: number, ry: number, phi: number, a0: number, a1: number, ccw?: boolean): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.ellipse(cx, cy, rx, ry, phi, a0, a1, ccw);\n    } else {\n      throw new Error();\n    }\n  }\n\n  rect(x: number, y: number, w: number, h: number): void {\n    const builder = this.builder;\n    if (builder !== null) {\n      builder.rect(x, y, w, h);\n    } else {\n      throw new Error();\n    }\n  }\n\n  build(): R2Path {\n    const splines = this.splines.slice(0);\n    const builder = this.builder;\n    if (builder !== null) {\n      const spline = builder.build();\n      if (spline.isDefined()) {\n        splines.push(spline);\n      }\n    }\n    return new R2Path(splines);\n  }\n}\n\n/** @internal */\nexport class R2PathParser extends Parser<R2Path> {\n  private readonly splineParser: Parser<R2Spline> | undefined;\n  private readonly splines: R2Spline[] | undefined;\n  private readonly step: number | undefined;\n\n  constructor(splineParser?: Parser<R2Spline>, splines?: R2Spline[], step?: number) {\n    super();\n    this.splineParser = splineParser;\n    this.splines = splines;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<R2Path> {\n    return R2PathParser.parse(input, this.splineParser, this.splines, this.step);\n  }\n\n  static parse(input: Input, splineParser?: Parser<R2Spline>,\n               splines?: R2Spline[], step: number = 1): Parser<R2Path> {\n    let c = 0;\n    do {\n      if (step === 1) {\n        if (splineParser === void 0) {\n          while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n            input = input.step();\n          }\n          if (input.isCont()) {\n            switch (c) {\n              case 77/*'M'*/:\n                splineParser = R2SplineParser.parse(input);\n                break;\n              case 109/*'m'*/: {\n                let xParser: Parser<number> | undefined;\n                let yParser: Parser<number> | undefined;\n                if (splines !== void 0 && splines.length !== 0) {\n                  const spline = splines[splines.length - 1]!;\n                  xParser = Parser.done(spline.interpolateX(1));\n                  yParser = Parser.done(spline.interpolateY(1));\n                }\n                splineParser = R2SplineParser.parse(input, xParser, yParser);\n                break;\n              }\n              case 110/*'n'*/:\n                step = 2;\n                break;\n              default:\n                if (splines !== void 0) {\n                  return Parser.done(new R2Path(splines));\n                } else {\n                  return Parser.done(R2Path.empty());\n                }\n            }\n          } else if (!input.isEmpty()) {\n            if (splines !== void 0) {\n              return Parser.done(new R2Path(splines));\n            } else {\n              return Parser.done(R2Path.empty());\n            }\n          }\n        } else {\n          splineParser = splineParser.feed(input);\n        }\n        if (splineParser !== void 0) {\n          if (splineParser.isDone()) {\n            const spline = splineParser.bind();\n            splineParser = void 0;\n            if (spline.isDefined()) {\n              if (splines === void 0) {\n                splines = [];\n              }\n              splines.push(spline);\n            }\n            continue;\n          } else if (splineParser.isError()) {\n            return splineParser.asError();\n          }\n        }\n      }\n      break;\n    } while (true);\n    if (step >= 2 && step <= 5) {\n      do {\n        if (input.isCont()) {\n          if (input.head() === \"none\".charCodeAt(step - 2)) {\n            input = input.step();\n            if (step < 5) {\n              step += 1;\n              continue;\n            } else {\n              return Parser.done(R2Path.empty());\n            }\n          } else {\n            return Parser.error(Diagnostic.expected(\"none\", input));\n          }\n        } else if (!input.isEmpty()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n        break;\n      } while (true);\n    }\n    return new R2PathParser(splineParser, splines, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport {R2Segment} from \"./R2Segment\";\nimport {R2Box} from \"./R2Box\";\n\n/** @public */\nexport type R2CircleLike = R2Circle | R2CircleInit;\n\n/** @public */\nexport const R2CircleLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2CircleLike {\n    return instance instanceof R2Circle\n        || R2CircleInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface R2CircleInit {\n  /** @internal */\n  readonly typeid?: \"R2CircleInit\";\n  cx: number;\n  cy: number;\n  r: number;\n}\n\n/** @public */\nexport const R2CircleInit = {\n  [Symbol.hasInstance](instance: unknown): instance is R2CircleInit {\n    return Objects.hasAllKeys<R2CircleInit>(instance, \"cx\", \"cy\", \"r\");\n  },\n};\n\n/** @public */\nexport class R2Circle extends R2Shape implements Interpolate<R2Circle>, HashCode, Equivalent, Debug {\n  constructor(cx: number, cy: number, r: number) {\n    super();\n    this.cx = cx;\n    this.cy = cy;\n    this.r = r;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"R2Circle\";\n\n  override likeType?(like: R2CircleInit): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.cx) && isFinite(this.cy) && isFinite(this.r);\n  }\n\n  readonly cx: number;\n\n  readonly cy: number;\n\n  readonly r: number;\n\n  override get xMin(): number {\n    return this.cx - this.r;\n  }\n\n  override get yMin(): number {\n    return this.cy - this.r;\n  }\n\n  override get xMax(): number {\n    return this.cx + this.r;\n  }\n\n  override get yMax(): number {\n    return this.cy + this.r;\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    if (typeof that === \"number\") {\n      const dx = that - this.cx;\n      const dy = y! - this.cy;\n      return dx * dx + dy * dy <= this.r * this.r;\n    }\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.containsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.containsSegment(that);\n    } else if (that instanceof R2Box) {\n      return this.containsBox(that);\n    } else if (that instanceof R2Circle) {\n      return this.containsCircle(that);\n    }\n    return false;\n  }\n\n  /** @internal */\n  containsPoint(that: R2Point): boolean {\n    const dx = that.x - this.cx;\n    const dy = that.y - this.cy;\n    return dx * dx + dy * dy <= this.r * this.r;\n  }\n\n  /** @internal */\n  containsSegment(that: R2Segment): boolean {\n    const dx0 = that.x0 - this.cx;\n    const dy0 = that.y0 - this.cy;\n    const dx1 = that.x1 - this.cx;\n    const dy1 = that.y1 - this.cy;\n    const r2 = this.r * this.r;\n    return dx0 * dx0 + dy0 * dy0 <= r2\n        && dx1 * dx1 + dy1 * dy1 <= r2;\n  }\n\n  /** @internal */\n  containsBox(that: R2Box): boolean {\n    const dxMin = that.xMin - this.cx;\n    const dyMin = that.yMin - this.cy;\n    const dxMax = that.xMax - this.cx;\n    const dyMax = that.yMax - this.cy;\n    const r2 = this.r * this.r;\n    return dxMin * dxMin + dyMin * dyMin <= r2\n        && dxMin * dxMin + dyMax * dyMax <= r2\n        && dxMax * dxMax + dyMin * dyMin <= r2\n        && dxMax * dxMax + dyMax * dyMax <= r2;\n  }\n\n  /** @internal */\n  containsCircle(that: R2Circle): boolean {\n    const dx = that.cx - this.cx;\n    const dy = that.cy - this.cy;\n    return dx * dx + dy * dy + that.r * that.r <= this.r * this.r;\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.intersectsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.intersectsSegment(that);\n    } else if (that instanceof R2Box) {\n      return this.intersectsBox(that);\n    } else if (that instanceof R2Circle) {\n      return this.intersectsCircle(that);\n    }\n    return that.intersects(this);\n  }\n\n  /** @internal */\n  intersectsPoint(that: R2Point): boolean {\n    const dx = that.x - this.cx;\n    const dy = that.y - this.cy;\n    return dx * dx + dy * dy <= this.r * this.r;\n  }\n\n  /** @internal */\n  intersectsSegment(that: R2Segment): boolean {\n    const cx = this.cx;\n    const cy = this.cy;\n    const r = this.r;\n    const x0 = that.x0;\n    const y0 = that.y0;\n    const x1 = that.x1;\n    const y1 = that.y1;\n    const dx = x1 - x0;\n    const dy = y1 - y0;\n    const l = Math.sqrt(dx * dx + dy * dy);\n    const unitX = dx / l;\n    const unitY = dy / l;\n    const d = (cx - x0) * unitY - (cy - y0) * unitX;\n    if (d < -r || r < d) {\n      return false;\n    }\n    const dcx0 = x0 - cx;\n    const dcy0 = y0 - cy;\n    const dcx1 = x1 - cx;\n    const dcy1 = y1 - cy;\n    const r2 = r * r;\n    if (dcx0 * dcx0 + dcy0 * dcy0 <= r2 || dcx1 * dcx1 + dcy1 * dcy1 <= r2) {\n      return true;\n    }\n    const uc = unitX * cx + unitY * cy;\n    const u0 = unitX * x0 + unitY * y0;\n    const u1 = unitX * x1 + unitY * y1;\n    return u0 < uc && uc <= u1 || u1 < uc && uc <= u0;\n  }\n\n  /** @internal */\n  intersectsBox(that: R2Box): boolean {\n    const dx = (this.cx < that.xMin ? that.xMin : that.xMax < this.cx ? that.xMax : this.cx) - this.cx;\n    const dy = (this.cy < that.yMin ? that.yMin : that.yMax < this.cy ? that.yMax : this.cy) - this.cy;\n    return dx * dx + dy * dy <= this.r * this.r;\n  }\n\n  /** @internal */\n  intersectsCircle(that: R2Circle): boolean {\n    const dx = that.cx - this.cx;\n    const dy = that.cy - this.cy;\n    const rr = this.r + that.r;\n    return dx * dx + dy * dy <= rr * rr;\n  }\n\n  override transform(f: R2Function): R2Circle {\n    const cx = f.transformX(this.cx, this.cy);\n    const cy = f.transformY(this.cx, this.cy);\n    const rx = f.transformX(this.cx + this.r, this.cy);\n    const ry = f.transformY(this.cx + this.r, this.cy);\n    const dx = rx - cx;\n    const dy = ry - cy;\n    const r = Math.sqrt(dx * dx + dy * dy);\n    return new R2Circle(cx, cy, r);\n  }\n\n  toLike(): R2CircleInit {\n    return {\n      cx: this.cx,\n      cy: this.cy,\n      r: this.r,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: R2Circle): Interpolator<R2Circle>;\n  interpolateTo(that: unknown): Interpolator<R2Circle> | null;\n  interpolateTo(that: unknown): Interpolator<R2Circle> | null {\n    if (that instanceof R2Circle) {\n      return R2CircleInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Circle) {\n      return Numbers.equivalent(this.cx, that.cx, epsilon)\n          && Numbers.equivalent(this.cy, that.cy, epsilon)\n          && Numbers.equivalent(this.r, that.r, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Circle) {\n      return this.cx === that.cx && this.cy === that.cy && this.r === that.r;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Constructors.hash(R2Circle),\n        Numbers.hash(this.cx)), Numbers.hash(this.cy)), Numbers.hash(this.r)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Circle\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.cx).write(\", \").debug(this.cy).write(\", \")\n                   .debug(this.r).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static of(cx: number, cy: number, r: number): R2Circle {\n    return new R2Circle(cx, cy, r);\n  }\n\n  static override fromLike<T extends R2CircleLike | null | undefined>(value: T): R2Circle | Uninitable<T>;\n  static override fromLike<T extends R2ShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends R2CircleLike | null | undefined>(value: T): R2Circle | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Circle) {\n      return value as R2Circle | Uninitable<T>;\n    } else if (R2CircleInit[Symbol.hasInstance](value)) {\n      return R2Circle.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: R2CircleInit): R2Circle {\n    return new R2Circle(init.cx, init.cy, init.r);\n  }\n}\n\n/** @internal */\nexport const R2CircleInterpolator = (function (_super: typeof Interpolator) {\n  const R2CircleInterpolator = function (s0: R2Circle, s1: R2Circle): Interpolator<R2Circle> {\n    const interpolator = function (u: number): R2Circle {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const cx = s0.cx + u * (s1.cx - s0.cx);\n      const cy = s0.cy + u * (s1.cy - s0.cy);\n      const r = s0.r + u * (s1.r - s0.r);\n      return new R2Circle(cx, cy, r);\n    } as Interpolator<R2Circle>;\n    Object.setPrototypeOf(interpolator, R2CircleInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: R2Circle, s1: R2Circle): Interpolator<R2Circle>;\n\n    /** @internal */\n    prototype: Interpolator<R2Circle>;\n  };\n\n  R2CircleInterpolator.prototype = Object.create(_super.prototype);\n  R2CircleInterpolator.prototype.constructor = R2CircleInterpolator;\n\n  return R2CircleInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\nimport {R2Point} from \"./R2Point\";\nimport {R2Segment} from \"./R2Segment\";\nimport {R2Circle} from \"./R2Circle\";\n\n/** @public */\nexport type R2BoxLike = R2Box | R2BoxInit;\n\n/** @public */\nexport const R2BoxLike = {\n  [Symbol.hasInstance](instance: unknown): instance is R2BoxLike {\n    return instance instanceof R2Box\n        || R2BoxInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface R2BoxInit {\n  /** @internal */\n  readonly typeid?: \"R2BoxInit\";\n  xMin: number;\n  yMin: number;\n  xMax: number;\n  yMax: number;\n}\n\n/** @public */\nexport const R2BoxInit = {\n  [Symbol.hasInstance](instance: unknown): instance is R2BoxInit {\n    return Objects.hasAllKeys<R2BoxInit>(instance, \"xMin\", \"yMin\", \"xMax\", \"yMax\");\n  },\n};\n\n/** @public */\nexport class R2Box extends R2Shape implements Interpolate<R2Box>, HashCode, Debug {\n  constructor(xMin: number, yMin: number, xMax: number, yMax: number) {\n    super();\n    this.xMin = xMin;\n    this.yMin = yMin;\n    this.xMax = xMax;\n    this.yMax = yMax;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"R2Box\";\n\n  override likeType?(like: R2BoxInit): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.xMin) && isFinite(this.yMin)\n        && isFinite(this.xMax) && isFinite(this.yMax);\n  }\n\n  override readonly xMin: number;\n\n  override readonly yMin: number;\n\n  override readonly xMax: number;\n\n  override readonly yMax: number;\n\n  get x(): number {\n    return this.xMin;\n  }\n\n  get y(): number {\n    return this.yMin;\n  }\n\n  get width(): number {\n    return this.xMax - this.xMin;\n  }\n\n  get height(): number {\n    return this.yMax - this.yMin;\n  }\n\n  get top(): number {\n    return this.yMin;\n  }\n\n  get right(): number {\n    return this.xMax;\n  }\n\n  get bottom(): number {\n    return this.yMax;\n  }\n\n  get left(): number {\n    return this.xMin;\n  }\n\n  get center(): R2Point {\n    return new R2Point((this.xMin + this.xMax) / 2, (this.yMin + this.yMax) / 2);\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    if (typeof that === \"number\") {\n      return this.xMin <= that && that <= this.xMax\n          && this.yMin <= y! && y! <= this.yMax;\n    }\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.containsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.containsSegment(that);\n    } else if (that instanceof R2Box) {\n      return this.containsBox(that);\n    } else if (that instanceof R2Circle) {\n      return this.containsCircle(that);\n    } else if (that instanceof R2Shape) {\n      return this.xMin <= that.xMin && that.xMax <= this.xMax\n          && this.yMin <= that.yMin && that.yMax <= this.yMax;\n    }\n    return false;\n  }\n\n  /** @internal */\n  containsPoint(that: R2Point): boolean {\n    return this.xMin <= that.x && that.x <= this.xMax\n        && this.yMin <= that.y && that.y <= this.yMax;\n  }\n\n  /** @internal */\n  containsSegment(that: R2Segment): boolean {\n    return this.xMin <= that.x0 && that.x0 <= this.xMax\n        && this.yMin <= that.y0 && that.y0 <= this.yMax\n        && this.xMin <= that.x1 && that.x1 <= this.xMax\n        && this.yMin <= that.y1 && that.y1 <= this.yMax;\n  }\n\n  /** @internal */\n  containsBox(that: R2Box): boolean {\n    return this.xMin <= that.xMin && that.xMax <= this.xMax\n        && this.yMin <= that.yMin && that.yMax <= this.yMax;\n  }\n\n  /** @internal */\n  containsCircle(that: R2Circle): boolean {\n    return this.xMin <= that.cx - that.r && that.cx + that.r <= this.xMax\n        && this.yMin <= that.cy - that.r && that.cy + that.r <= this.yMax;\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    that = R2Shape.fromLike(that);\n    if (that instanceof R2Point) {\n      return this.intersectsPoint(that);\n    } else if (that instanceof R2Segment) {\n      return this.intersectsSegment(that);\n    } else if (that instanceof R2Box) {\n      return this.intersectsBox(that);\n    } else if (that instanceof R2Circle) {\n      return this.intersectsCircle(that);\n    }\n    return that.intersects(this);\n  }\n\n  /** @internal */\n  intersectsPoint(that: R2Point): boolean {\n    return this.xMin <= that.x && that.x <= this.xMax\n        && this.yMin <= that.y && that.y <= this.yMax;\n  }\n\n  /** @internal */\n  intersectsSegment(that: R2Segment): boolean {\n    const xMin = this.xMin;\n    const yMin = this.yMin;\n    const xMax = this.xMax;\n    const yMax = this.yMax;\n    const x0 = that.x0;\n    const y0 = that.y0;\n    const x1 = that.x1;\n    const y1 = that.y1;\n    if (x0 < xMin && x1 < xMin || x0 > xMax && x1 > xMax ||\n        y0 < yMin && y1 < yMin || y0 > yMax && y1 > yMax) {\n      return false;\n    } else if (x0 > xMin && x0 < xMax && y0 > yMin && y0 < yMax) {\n      return true;\n    } else if ((R2Box.intersectsSegment(x0 - xMin, x1 - xMin, x0, y0, x1, y1) && R2Box.hitY > yMin && R2Box.hitY < yMax)\n            || (R2Box.intersectsSegment(y0 - yMin, y1 - yMin, x0, y0, x1, y1) && R2Box.hitX > xMin && R2Box.hitX < xMax)\n            || (R2Box.intersectsSegment(x0 - xMax, x1 - xMax, x0, y0, x1, y1) && R2Box.hitY > yMin && R2Box.hitY < yMax)\n            || (R2Box.intersectsSegment(y0 - yMax, y1 - yMax, x0, y0, x1, y1) && R2Box.hitX > xMin && R2Box.hitX < xMax)) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @internal */\n  static hitX: number = 0; // stack local hit register\n  /** @internal */\n  static hitY: number = 0; // stack local hit register\n  static intersectsSegment(d0: number, d1: number, x0: number, y0: number, x1: number, y1: number): boolean {\n    if (d0 === d1 && d0 * d1 >= 0) {\n      return false;\n    }\n    const scale = -d0 / (d1 - d0);\n    R2Box.hitX = x0 + (x1 - x0) * scale;\n    R2Box.hitY = y0 + (y1 - y0) * scale;\n    return true;\n  }\n\n  /** @internal */\n  intersectsBox(that: R2Box): boolean {\n    return this.xMin <= that.xMax && that.xMin <= this.xMax\n        && this.yMin <= that.yMax && that.yMin <= this.yMax;\n  }\n\n  /** @internal */\n  intersectsCircle(that: R2Circle): boolean {\n    const dx = (that.cx < this.xMin ? this.xMin : this.xMax < that.cx ? this.xMax : that.cx) - that.cx;\n    const dy = (that.cy < this.yMin ? this.yMin : this.yMax < that.cy ? this.yMax : that.cy) - that.cy;\n    return dx * dx + dy * dy <= that.r * that.r;\n  }\n\n  override union(that: R2ShapeLike): R2Box {\n    return super.union(that) as R2Box;\n  }\n\n  override transform(f: R2Function): R2Box {\n    return new R2Box(f.transformX(this.xMin, this.yMin), f.transformY(this.xMin, this.yMin),\n                     f.transformX(this.xMax, this.yMax), f.transformY(this.xMax, this.yMax));\n  }\n\n  override get bounds(): R2Box {\n    return this;\n  }\n\n  toLike(): R2BoxInit {\n    return {\n      xMin: this.xMin,\n      yMin: this.yMin,\n      xMax: this.xMax,\n      yMax: this.yMax,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: R2Box): Interpolator<R2Box>;\n  interpolateTo(that: unknown): Interpolator<R2Box> | null;\n  interpolateTo(that: unknown): Interpolator<R2Box> | null {\n    if (that instanceof R2Box) {\n      return R2BoxInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Box) {\n      return Numbers.equivalent(this.xMin, that.xMin, epsilon)\n          && Numbers.equivalent(this.yMin, that.yMin, epsilon)\n          && Numbers.equivalent(this.xMax, that.xMax, epsilon)\n          && Numbers.equivalent(this.yMax, that.yMax, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Box) {\n      return this.xMin === that.xMin && this.yMin === that.yMin\n          && this.xMax === that.xMax && this.yMax === that.yMax;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Constructors.hash(R2Box), Numbers.hash(this.xMin)), Numbers.hash(this.yMin)),\n        Numbers.hash(this.xMax)), Numbers.hash(this.yMax)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"R2Box\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.xMin).write(\", \").debug(this.yMin).write(\", \")\n                   .debug(this.xMax).write(\", \").debug(this.yMax).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static undefined(): R2Box {\n    return new R2Box(Infinity, Infinity, -Infinity, -Infinity);\n  }\n\n  static of(xMin: number, yMin: number, xMax?: number, yMax?: number): R2Box {\n    if (xMax === void 0) {\n      xMax = xMin;\n    }\n    if (yMax === void 0) {\n      yMax = yMin;\n    }\n    return new R2Box(xMin, yMin, xMax, yMax);\n  }\n\n  static override fromLike<T extends R2BoxLike | null | undefined>(value: T): R2Box | Uninitable<T>;\n  static override fromLike<T extends R2ShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends R2BoxLike | null | undefined>(value: T): R2Box | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof R2Box) {\n      return value as R2Box | Uninitable<T>;\n    } else if (R2BoxInit[Symbol.hasInstance](value)) {\n      return R2Box.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: R2BoxInit): R2Box {\n    return new R2Box(init.xMin, init.yMin, init.xMax, init.yMax);\n  }\n}\n\n/** @internal */\nexport const R2BoxInterpolator = (function (_super: typeof Interpolator) {\n  const R2BoxInterpolator = function (s0: R2Box, s1: R2Box): Interpolator<R2Box> {\n    const interpolator = function (u: number): R2Box {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const xMin = s0.xMin + u * (s1.xMin - s0.xMin);\n      const yMin = s0.yMin + u * (s1.yMin - s0.yMin);\n      const xMax = s0.xMax + u * (s1.xMax - s0.xMax);\n      const yMax = s0.yMax + u * (s1.yMax - s0.yMax);\n      return new R2Box(xMin, yMin, xMax, yMax);\n    } as Interpolator<R2Box>;\n    Object.setPrototypeOf(interpolator, R2BoxInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: R2Box, s1: R2Box): Interpolator<R2Box>;\n\n    /** @internal */\n    prototype: Interpolator<R2Box>;\n  };\n\n  R2BoxInterpolator.prototype = Object.create(_super.prototype);\n  R2BoxInterpolator.prototype.constructor = R2BoxInterpolator;\n\n  return R2BoxInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Equals} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Function} from \"./R2Function\";\nimport type {R2ShapeLike} from \"./R2Shape\";\nimport {R2Shape} from \"./R2Shape\";\nimport {R2Box} from \"./R2Box\";\n\n/** @public */\nexport class R2Group<S extends R2Shape = R2Shape> extends R2Shape implements Equals, Equivalent, Debug {\n  constructor(shapes: readonly S[]) {\n    super();\n    this.shapes = shapes;\n    this.boundingBox = null;\n  }\n\n  readonly shapes: readonly S[];\n\n  override isDefined(): boolean {\n    return this.shapes.length !== 0;\n  }\n\n  override get xMin(): number {\n    return this.bounds.xMin;\n  }\n\n  override get yMin(): number {\n    return this.bounds.yMin;\n  }\n\n  override get xMax(): number {\n    return this.bounds.xMax;\n  }\n\n  override get yMax(): number {\n    return this.bounds.yMax;\n  }\n\n  override contains(that: R2ShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: R2ShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: R2ShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override transform(f: R2Function): R2Group {\n    const oldShapes = this.shapes;\n    const n = oldShapes.length;\n    if (n === 0) {\n      return R2Group.empty();\n    }\n    const newShapes = new Array<R2Shape>(n);\n    for (let i = 0; i < n; i += 1) {\n      newShapes[i] = oldShapes[i]!.transform(f);\n    }\n    return new R2Group(newShapes);\n  }\n\n  /** @internal */\n  readonly boundingBox: R2Box | null;\n\n  override get bounds(): R2Box {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let xMin = Infinity;\n      let yMin = Infinity;\n      let xMax = -Infinity;\n      let yMax = -Infinity;\n      const shapes = this.shapes;\n      for (let i = 0; i < shapes.length; i += 1) {\n        const shape = shapes[i]!;\n        xMin = Math.min(xMin, shape.xMin);\n        yMin = Math.min(yMin, shape.yMin);\n        xMax = Math.max(shape.xMax, xMax);\n        yMax = Math.max(shape.yMax, yMax);\n      }\n      boundingBox = new R2Box(xMin, yMin, xMax, yMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Group) {\n      return Arrays.equivalent(this.shapes, that.shapes, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof R2Group) {\n      return Arrays.equal(this.shapes, that.shapes);\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const shapes = this.shapes;\n    const n = shapes.length;\n    output = output.write(\"R2Group\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else {\n      output = output.write(\"of\").write(40/*'('*/);\n      output = output.debug(shapes[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(shapes[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static empty<S extends R2Shape>(): R2Group<S> {\n    return new R2Group(Arrays.empty());\n  }\n\n  static of<S extends R2Shape>(...shapes: S[]): R2Group<S> {\n    return new R2Group(shapes);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport type {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\nimport type {LengthLike} from \"./Length\";\nimport {Length} from \"./Length\";\nimport {PxLength} from \"./Length\";\nimport type {AngleLike} from \"./Angle\";\nimport {Angle} from \"./Angle\";\nimport {DegAngle} from \"./Angle\";\nimport type {R2Operator} from \"./R2Function\";\nimport type {R2Point} from \"./R2Point\";\nimport {IdentityTransform} from \"./\"; // forward import\nimport {TranslateTransform} from \"./\"; // forward import\nimport {TranslateTransformParser} from \"./\"; // forward import\nimport {ScaleTransform} from \"./\"; // forward import\nimport {ScaleTransformParser} from \"./\"; // forward import\nimport {RotateTransform} from \"./\"; // forward import\nimport {RotateTransformParser} from \"./\"; // forward import\nimport {SkewTransform} from \"./\"; // forward import\nimport {SkewTransformParser} from \"./\"; // forward import\nimport {AffineTransform} from \"./\"; // forward import\nimport {AffineTransformInterpolator} from \"./\"; // forward import\nimport {AffineTransformParser} from \"./\"; // forward import\nimport {TransformList} from \"./\"; // forward import\nimport {TransformListParser} from \"./\"; // forward import\n\n/** @public */\nexport type TransformLike = Transform | string;\n\n/** @public */\nexport const TransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is TransformLike {\n    return instance instanceof Transform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport abstract class Transform implements R2Operator, Interpolate<Transform>, HashCode, Equivalent, Debug {\n  likeType?(like: string): void;\n\n  abstract transform(that: Transform): Transform;\n  abstract transform(x: number, y: number): R2Point;\n\n  abstract transformX(x: number, y: number): number;\n\n  abstract transformY(x: number, y: number): number;\n\n  abstract inverse(): Transform;\n\n  translate(x: LengthLike, y: LengthLike): Transform {\n    return this.transform(Transform.translate(x, y));\n  }\n\n  translateX(x: LengthLike): Transform {\n    return this.transform(Transform.translateX(x));\n  }\n\n  translateY(y: LengthLike): Transform {\n    return this.transform(Transform.translateY(y));\n  }\n\n  scale(x: number, y: number): Transform {\n    return this.transform(Transform.scale(x, y));\n  }\n\n  scaleX(x: number): Transform {\n    return this.transform(Transform.scaleX(x));\n  }\n\n  scaleY(y: number): Transform {\n    return this.transform(Transform.scaleY(y));\n  }\n\n  rotate(a: AngleLike): Transform {\n    return this.transform(Transform.rotate(a));\n  }\n\n  skew(x: AngleLike, y: AngleLike): Transform {\n    return this.transform(Transform.skew(x, y));\n  }\n\n  skewX(x: AngleLike): Transform {\n    return this.transform(Transform.skewX(x));\n  }\n\n  skewY(y: AngleLike): Transform {\n    return this.transform(Transform.skewY(y));\n  }\n\n  abstract toAffine(): AffineTransform;\n\n  toMatrix(): DOMMatrix {\n    return this.toAffine().toMatrix();\n  }\n\n  toCssTransformComponent(): CSSTransformComponent | null {\n    return null;\n  }\n\n  toCssValue(): CSSStyleValue | null {\n    if (typeof CSSTransformValue === \"undefined\") {\n      return null;\n    }\n    const component = this.toCssTransformComponent();\n    if (component === null) {\n      return null;\n    }\n    return new CSSTransformValue([component]);\n  }\n\n  abstract toValue(): Value;\n\n  /** @override */\n  interpolateTo(that: Transform): Interpolator<Transform>;\n  interpolateTo(that: unknown): Interpolator<Transform> | null;\n  interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof Transform) {\n      return AffineTransformInterpolator(this.toAffine(), that.toAffine());\n    }\n    return null;\n  }\n\n  abstract conformsTo(that: Transform): boolean;\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean;\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  /** @override */\n  abstract hashCode(): number;\n\n  /** @override */\n  abstract debug<T>(output: Output<T>): Output<T>;\n\n  /** @override */\n  abstract toString(): string;\n\n  toAttributeString(): string {\n    return this.toString();\n  }\n\n  @Lazy\n  static identity(): Transform {\n    return new IdentityTransform();\n  }\n\n  static translate(x: LengthLike, y: LengthLike): TranslateTransform {\n    x = Length.fromLike(x);\n    y = Length.fromLike(y);\n    return new TranslateTransform(x, y);\n  }\n\n  static translateX(x: LengthLike): TranslateTransform {\n    x = Length.fromLike(x);\n    return new TranslateTransform(x, PxLength.zero());\n  }\n\n  static translateY(y: LengthLike): TranslateTransform {\n    y = Length.fromLike(y);\n    return new TranslateTransform(PxLength.zero(), y);\n  }\n\n  static scale(x: number, y: number): ScaleTransform {\n    return new ScaleTransform(x, y);\n  }\n\n  static scaleX(x: number): ScaleTransform {\n    return new ScaleTransform(x, 1);\n  }\n\n  static scaleY(y: number): ScaleTransform {\n    return new ScaleTransform(1, y);\n  }\n\n  static rotate(a: AngleLike): RotateTransform {\n    a = Angle.fromLike(a, \"deg\");\n    return new RotateTransform(a);\n  }\n\n  static skew(x: AngleLike, y: AngleLike): SkewTransform {\n    x = Angle.fromLike(x, \"deg\");\n    y = Angle.fromLike(y, \"deg\");\n    return new SkewTransform(x, y);\n  }\n\n  static skewX(x: AngleLike): SkewTransform {\n    x = Angle.fromLike(x, \"deg\");\n    return new SkewTransform(x, DegAngle.zero());\n  }\n\n  static skewY(y: AngleLike): SkewTransform {\n    y = Angle.fromLike(y, \"deg\");\n    return new SkewTransform(DegAngle.zero(), y);\n  }\n\n  static affine(x0: number = 1, y0: number = 0,\n                x1: number = 0, y1: number = 1,\n                tx: number = 0, ty: number = 0): AffineTransform {\n    return new AffineTransform(x0, y0, x1, y1, tx, ty);\n  }\n\n  static list(...transforms: TransformLike[]): TransformList {\n    const list: Transform[] = [];\n    for (let i = 0; i < transforms.length; i += 1) {\n      const transform = Transform.fromLike(transforms[i]!);\n      if (transform instanceof TransformList) {\n        list.push(...transform.transforms);\n      } else if (!(transform instanceof IdentityTransform)) {\n        list.push(transform);\n      }\n    }\n    return new TransformList(list);\n  }\n\n  static fromCssValue(value: CSSStyleValue): Transform {\n    if (value instanceof CSSTransformValue) {\n      return Transform.fromCssTransform(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  /** @internal */\n  static fromCssTransform(value: CSSTransformValue): Transform {\n    const n = value.length;\n    if (n === 1) {\n      return Transform.fromCssTransformComponent(value[0]!);\n    }\n    const transforms = new Array<Transform>(n);\n    for (let i = 0; i < n; i += 1) {\n      transforms[i] = Transform.fromCssTransformComponent(value[i]!);\n    }\n    return new TransformList(transforms);\n  }\n\n  static fromCssTransformComponent(component: CSSTransformComponent): Transform {\n    if (component instanceof CSSTranslate) {\n      return TranslateTransform.fromCssTransformComponent(component);\n    } else if (component instanceof CSSRotate) {\n      return RotateTransform.fromCssTransformComponent(component);\n    } else if (component instanceof CSSScale) {\n      return ScaleTransform.fromCssTransformComponent(component);\n    } else if (component instanceof CSSSkew) {\n      return SkewTransform.fromCssTransformComponent(component);\n    } else if (component instanceof CSSMatrixComponent) {\n      return AffineTransform.fromCssTransformComponent(component);\n    }\n    throw new TypeError(\"\" + component);\n  }\n\n  static fromLike<T extends TransformLike | null | undefined>(value: T): Transform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof Transform) {\n      return value as Transform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return Transform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromValue(value: Value): Transform | null {\n    const tag = value.tag;\n    switch (tag) {\n      case \"identity\": return IdentityTransform.fromValue(value);\n      case \"translate\": return TranslateTransform.fromValue(value);\n      case \"scale\": return ScaleTransform.fromValue(value);\n      case \"rotate\": return RotateTransform.fromValue(value);\n      case \"skew\": return SkewTransform.fromValue(value);\n      case \"matrix\": return AffineTransform.fromValue(value);\n      default: return TransformList.fromValue(value);\n    }\n  }\n\n  static parse(string: string): Transform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = TransformListParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n\n  @Lazy\n  static form(): Form<Transform, TransformLike> {\n    return new TransformForm(Transform.identity());\n  }\n}\n\n/** @internal */\nexport class TransformForm extends Form<Transform, TransformLike> {\n  constructor(unit: Transform | undefined) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: Transform | undefined;\n\n  override withUnit(unit: Transform | undefined): Form<Transform, TransformLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new TransformForm(unit);\n  }\n\n  override mold(transform: TransformLike): Item {\n    transform = Transform.fromLike(transform);\n    return transform.toValue();\n  }\n\n  override cast(item: Item): Transform | undefined {\n    const value = item.toValue();\n    try {\n      if (value instanceof Record) {\n        const transform = Transform.fromValue(value);\n        return transform !== null ? transform : void 0;\n      } else {\n        const string = value.stringValue(void 0);\n        if (string !== void 0) {\n          return Transform.parse(string);\n        }\n      }\n    } catch (e) {\n      // swallow\n    }\n    return void 0;\n  }\n}\n\n/** @internal */\nexport class TransformParser extends Parser<Transform> {\n  private readonly identOutput: Output<string> | undefined;\n\n  constructor(identOutput?: Output<string>) {\n    super();\n    this.identOutput = identOutput;\n  }\n\n  override feed(input: Input): Parser<Transform> {\n    return TransformParser.parse(input, this.identOutput);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>): Parser<Transform> {\n    let c = 0;\n    identOutput = identOutput || Unicode.stringOutput();\n    while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || Unicode.isDigit(c) || c === 45/*'-'*/)) {\n      input = input.step();\n      identOutput.write(c);\n    }\n    if (!input.isEmpty()) {\n      const ident = identOutput.bind();\n      switch (ident) {\n        case \"translate3d\":\n        case \"translateX\":\n        case \"translateY\":\n        case \"translate\": return TranslateTransformParser.parseRest(input, identOutput);\n        case \"scaleX\":\n        case \"scaleY\":\n        case \"scale\": return ScaleTransformParser.parseRest(input, identOutput);\n        case \"rotate\": return RotateTransformParser.parseRest(input, identOutput);\n        case \"skewX\":\n        case \"skewY\":\n        case \"skew\": return SkewTransformParser.parseRest(input, identOutput);\n        case \"matrix\": return AffineTransformParser.parseRest(input, identOutput);\n        case \"none\": return Parser.done(Transform.identity());\n        default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n      }\n    }\n    return new TransformParser(identOutput);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Constructors} from \"@swim/util\";\nimport type {Interpolator} from \"@swim/util\";\nimport {IdentityInterpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {R2Point} from \"./R2Point\";\nimport {Transform} from \"./Transform\";\nimport {AffineTransform} from \"./\"; // forward import\n\n/** @public */\nexport class IdentityTransform extends Transform {\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      return new R2Point(x as number, y!);\n    } else if (x instanceof Transform) {\n      return x;\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    return x;\n  }\n\n  override transformY(x: number, y: number): number {\n    return y;\n  }\n\n  override inverse(): Transform {\n    return this;\n  }\n\n  override toAffine(): AffineTransform {\n    return new AffineTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  override toCssValue(): CSSStyleValue | null {\n    return new CSSKeywordValue(\"identity\");\n  }\n\n  override toValue(): Value {\n    return Record.create(1).attr(\"identity\");\n  }\n\n  override interpolateTo(that: IdentityTransform): Interpolator<IdentityTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof IdentityTransform) {\n      return IdentityInterpolator(this);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof IdentityTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    return that instanceof IdentityTransform;\n  }\n\n  override equals(that: unknown): boolean {\n    return that instanceof IdentityTransform;\n  }\n\n  override hashCode(): number {\n    return Constructors.hash(IdentityTransform);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"identity\")\n                   .write(40/*'('*/).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return \"none\";\n  }\n\n  static override fromValue(value: Value): IdentityTransform | null {\n    if (value.tag === \"identity\") {\n      return Transform.identity();\n    }\n    return null;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Length} from \"./Length\";\nimport {PxLength} from \"./Length\";\nimport {LengthParser} from \"./Length\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\nimport {AffineTransform} from \"./\"; // forward import\n\n/** @public */\nexport type TranslateTransformLike = TranslateTransform | string;\n\n/** @public */\nexport const TranslateTransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is TranslateTransformLike {\n    return instance instanceof TranslateTransform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class TranslateTransform extends Transform {\n  constructor(x: Length, y: Length) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.stringValue = void 0;\n  }\n\n  readonly x: Length;\n\n  readonly y: Length;\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      return new R2Point(this.x.pxValue() + (x as number), this.y.pxValue() + y!);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof TranslateTransform) {\n      return new TranslateTransform(this.x.plus(x.x), this.y.plus(x.y));\n    } else if (x instanceof Transform) {\n      return Transform.list(this, x);\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    return this.x.pxValue() + x;\n  }\n\n  override transformY(x: number, y: number): number {\n    return this.y.pxValue() + y;\n  }\n\n  override inverse(): Transform {\n    return new TranslateTransform(this.x.negative(), this.y.negative());\n  }\n\n  override toAffine(): AffineTransform {\n    return new AffineTransform(1, 0, 0, 1, this.x.pxValue(), this.y.pxValue());\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSTranslate(this.x.toCssValue()!, this.y.toCssValue()!);\n  }\n\n  override toValue(): Value {\n    return Record.create(1)\n                 .attr(\"translate\", Record.create(2).slot(\"x\", this.x.toValue())\n                                                    .slot(\"y\", this.y.toValue()));\n  }\n\n  override interpolateTo(that: TranslateTransform): Interpolator<TranslateTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof TranslateTransform) {\n      return TranslateTransformInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof TranslateTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof TranslateTransform) {\n      return this.x.equivalentTo(that.x, epsilon)\n          && this.y.equivalentTo(that.y, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof TranslateTransform) {\n      return this.x.equals(that.x) && this.y.equals(that.y);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(TranslateTransform),\n        this.x.hashCode()), this.y.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"translate\");\n    if (this.x.isDefined() && !this.y.isDefined()) {\n      output = output.write(\"X\").write(40/*'('*/).debug(this.x);\n    } else if (!this.x.isDefined() && this.y.isDefined()) {\n      output = output.write(\"Y\").write(40/*'('*/).debug(this.y);\n    } else {\n      output = output.write(40/*'('*/).debug(this.x).write(\", \").debug(this.y);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      if (this.x.isDefined() && !this.y.isDefined()) {\n        stringValue = \"translate(\" + this.x + \",0)\";\n      } else if (!this.x.isDefined() && this.y.isDefined()) {\n        stringValue = \"translate(0,\" + this.y + \")\";\n      } else {\n        stringValue = \"translate(\" + this.x + \",\" + this.y + \")\";\n      }\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  override toAttributeString(): string {\n    if (this.x.isDefined() && !this.y.isDefined()) {\n      return \"translate(\" + this.x.pxValue() + \",0)\";\n    } else if (!this.x.isDefined() && this.y.isDefined()) {\n      return \"translate(0,\" + this.y.pxValue() + \")\";\n    }\n    return \"translate(\" + this.x.pxValue() + \",\" + this.y.pxValue() + \")\";\n  }\n\n  static override fromCssTransformComponent(component: CSSTranslate): TranslateTransform {\n    const x = typeof component.x === \"number\"\n            ? Length.px(component.x)\n            : Length.fromCssValue(component.x);\n    const y = typeof component.y === \"number\"\n            ? Length.px(component.y)\n            : Length.fromCssValue(component.y);\n    return new TranslateTransform(x, y);\n  }\n\n  static override fromLike<T extends TranslateTransformLike | null | undefined>(value: T): TranslateTransform | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends TranslateTransformLike | null | undefined>(value: T): TranslateTransform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof TranslateTransform) {\n      return value as TranslateTransform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return TranslateTransform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static override fromValue(value: Value): TranslateTransform | null {\n    const header = value.header(\"translate\");\n    if (!header.isDefined()) {\n      return null;\n    }\n    let x = Length.zero();\n    let y = Length.zero();\n    header.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue();\n      if (key !== void 0) {\n        if (key === \"x\") {\n          x = item.toValue().cast(Length.form(), x);\n        } else if (key === \"y\") {\n          y = item.toValue().cast(Length.form(), y);\n        }\n      } else if (item instanceof Value) {\n        if (index === 0) {\n          x = item.cast(Length.form(), x);\n        } else if (index === 1) {\n          y = item.cast(Length.form(), y);\n        }\n      }\n    }, this);\n    return new TranslateTransform(x, y);\n  }\n\n  static override parse(string: string): TranslateTransform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = TranslateTransformParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @internal */\nexport const TranslateTransformInterpolator = (function (_super: typeof Interpolator) {\n  const TranslateTransformInterpolator = function (f0: TranslateTransform, f1: TranslateTransform): Interpolator<TranslateTransform> {\n    const interpolator = function (u: number): TranslateTransform {\n      const f0 = interpolator[0];\n      const f1 = interpolator[1];\n      const x = Length.of(f0.x.value + u * (f1.x.value - f0.x.value), f1.x.units);\n      const y = Length.of(f0.y.value + u * (f1.y.value - f0.y.value), f1.y.units);\n      return new TranslateTransform(x, y);\n    } as Interpolator<TranslateTransform>;\n    Object.setPrototypeOf(interpolator, TranslateTransformInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = f0.x.units === f1.x.units && f0.y.units === f1.y.units\n                                                      ? f0 : new TranslateTransform(f0.x.to(f1.x.units), f0.y.to(f1.y.units));\n    (interpolator as Mutable<typeof interpolator>)[1] = f1;\n    return interpolator;\n  } as {\n    (f0: TranslateTransform, f1: TranslateTransform): Interpolator<TranslateTransform>;\n\n    /** @internal */\n    prototype: Interpolator<TranslateTransform>;\n  };\n\n  TranslateTransformInterpolator.prototype = Object.create(_super.prototype);\n  TranslateTransformInterpolator.prototype.constructor = TranslateTransformInterpolator;\n\n  return TranslateTransformInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class TranslateTransformParser extends Parser<TranslateTransform> {\n  private readonly identOutput: Output<string> | undefined;\n  private readonly xParser: Parser<Length> | undefined;\n  private readonly yParser: Parser<Length> | undefined;\n  private readonly zParser: Parser<Length> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(identOutput?: Output<string>, xParser?: Parser<Length>,\n              yParser?: Parser<Length>, zParser?: Parser<Length>, step?: number) {\n    super();\n    this.identOutput = identOutput;\n    this.xParser = xParser;\n    this.yParser = yParser;\n    this.zParser = zParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<TranslateTransform> {\n    return TranslateTransformParser.parse(input, this.identOutput, this.xParser,\n                                          this.yParser, this.zParser, this.step);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>, xParser?: Parser<Length>,\n               yParser?: Parser<Length>, zParser?: Parser<Length>,\n               step: number = 1): Parser<TranslateTransform> {\n    let c = 0;\n    if (step === 1) {\n      identOutput = identOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c) || Unicode.isDigit(c) || c === 45/*'-'*/)) {\n        input = input.step();\n        identOutput.write(c);\n      }\n      if (!input.isEmpty()) {\n        const ident = identOutput.bind();\n        switch (ident) {\n          case \"translate3d\":\n          case \"translateX\":\n          case \"translateY\":\n          case \"translate\": step = 2; break;\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 40/*'('*/) {\n        input.step();\n        step = 3;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"(\", input));\n      }\n    }\n    if (step === 3) {\n      if (xParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          xParser = LengthParser.parse(input, \"px\");\n        }\n      } else {\n        xParser = xParser.feed(input);\n      }\n      if (xParser !== void 0) {\n        if (xParser.isDone()) {\n          step = 4;\n        } else if (xParser.isError()) {\n          return xParser.asError();\n        }\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 41/*')'*/) {\n          input.step();\n          const ident = identOutput!.bind();\n          switch (ident) {\n            case \"translateX\": return Parser.done(new TranslateTransform(xParser!.bind(), PxLength.zero()));\n            case \"translateY\": return Parser.done(new TranslateTransform(PxLength.zero(), xParser!.bind()));\n            default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n          }\n        } else if (c === 44/*','*/) {\n          input.step();\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\",\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 5) {\n      if (yParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          yParser = LengthParser.parse(input, \"px\");\n        }\n      } else {\n        yParser = yParser.feed(input);\n      }\n      if (yParser !== void 0) {\n        if (yParser.isDone()) {\n          step = 6;\n        } else if (yParser.isError()) {\n          return yParser.asError();\n        }\n      }\n    }\n    if (step === 6) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 41/*')'*/) {\n          input.step();\n          const ident = identOutput!.bind();\n          switch (ident) {\n            case \"translate\": return Parser.done(new TranslateTransform(xParser!.bind(), yParser!.bind()));\n            default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n          }\n        } else if (c === 44/*','*/) {\n          input.step();\n          step = 7;\n        } else {\n          return Parser.error(Diagnostic.expected(\",\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 7) {\n      if (zParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          zParser = LengthParser.parse(input, \"px\");\n        }\n      } else {\n        zParser = zParser.feed(input);\n      }\n      if (zParser !== void 0) {\n        if (zParser.isDone()) {\n          step = 8;\n        } else if (zParser.isError()) {\n          return zParser.asError();\n        }\n      }\n    }\n    if (step === 8) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont() && input.head() === 41/*')'*/) {\n        input.step();\n        const ident = identOutput!.bind();\n        switch (ident) {\n          case \"translate3d\":\n            if (zParser!.bind().value === 0) {\n              return Parser.done(new TranslateTransform(xParser!.bind(), yParser!.bind()));\n            }\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new TranslateTransformParser(identOutput, xParser, yParser, zParser, step);\n  }\n\n  /** @internal */\n  static parseRest(input: Input, identOutput?: Output<string>): Parser<TranslateTransform> {\n    return TranslateTransformParser.parse(input, identOutput, void 0, void 0, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\nimport {AffineTransform} from \"./\"; // forward import\n\n/** @public */\nexport type ScaleTransformLike = ScaleTransform | string;\n\n/** @public */\nexport const ScaleTransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is ScaleTransformLike {\n    return instance instanceof ScaleTransform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class ScaleTransform extends Transform {\n  constructor(x: number, y: number) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.stringValue = void 0;\n  }\n\n  readonly x: number;\n\n  readonly y: number;\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      return new R2Point(this.x * (x as number), this.y * y!);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof Transform) {\n      return Transform.list(this, x);\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    return this.x * x;\n  }\n\n  override transformY(x: number, y: number): number {\n    return this.y * y;\n  }\n\n  override inverse(): Transform {\n    return new ScaleTransform(1 / (this.x || 1), 1 / (this.y || 1));\n  }\n\n  toAffine(): AffineTransform {\n    return new AffineTransform(this.x, 0, 0, this.y, 0, 0);\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSScale(this.x, this.y);\n  }\n\n  override toValue(): Value {\n    return Record.create(1)\n                 .attr(\"scale\", Record.create(2).slot(\"x\", this.x)\n                                                .slot(\"y\", this.y));\n  }\n\n  override interpolateTo(that: ScaleTransform): Interpolator<ScaleTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof ScaleTransform) {\n      return ScaleTransformInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof ScaleTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof ScaleTransform) {\n      return Numbers.equivalent(this.x, that.x, epsilon)\n          && Numbers.equivalent(this.y, that.y, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof ScaleTransform) {\n      return this.x === that.x && this.y === that.y;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(ScaleTransform),\n        Numbers.hash(this.x)), Numbers.hash(this.y)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"scale\");\n    if (this.x !== 0 && this.y === 0) {\n      output = output.write(\"X\").write(40/*'('*/).debug(this.x);\n    } else if (this.x === 0 && this.y !== 0) {\n      output = output.write(\"Y\").write(40/*'('*/).debug(this.y);\n    } else {\n      output = output.write(40/*'('*/).debug(this.x).write(\", \").debug(this.y);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      if (this.x !== 0 && this.y === 0) {\n        stringValue = \"scaleX(\" + this.x + \")\";\n      } else if (this.x === 0 && this.y !== 0) {\n        stringValue = \"scaleY(\" + this.y + \")\";\n      } else {\n        stringValue = \"scale(\" + this.x + \",\" + this.y + \")\";\n      }\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  static override fromCssTransformComponent(component: CSSScale): ScaleTransform {\n    const x = typeof component.x === \"number\"\n            ? component.x\n            : component.x.to(\"number\").value;\n    const y = typeof component.y === \"number\"\n            ? component.y\n            : component.y.to(\"number\").value;\n    return new ScaleTransform(x, y);\n  }\n\n  static override fromLike<T extends ScaleTransformLike | null | undefined>(value: T): ScaleTransform | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends ScaleTransformLike | null | undefined>(value: T): ScaleTransform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof ScaleTransform) {\n      return value as ScaleTransform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return ScaleTransform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static override fromValue(value: Value): ScaleTransform | null {\n    const header = value.header(\"scale\");\n    if (!header.isDefined()) {\n      return null;\n    }\n    let x = 0;\n    let y = 0;\n    header.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue();\n      if (key !== void 0) {\n        if (key === \"x\") {\n          x = item.toValue().numberValue(x);\n        } else if (key === \"y\") {\n          y = item.toValue().numberValue(y);\n        }\n      } else if (item instanceof Value) {\n        if (index === 0) {\n          x = item.numberValue(x);\n        } else if (index === 1) {\n          y = item.numberValue(y);\n        }\n      }\n    }, this);\n    return new ScaleTransform(x, y);\n  }\n\n  static override parse(string: string): ScaleTransform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = ScaleTransformParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @internal */\nexport const ScaleTransformInterpolator = (function (_super: typeof Interpolator) {\n  const ScaleTransformInterpolator = function (f0: ScaleTransform, f1: ScaleTransform): Interpolator<ScaleTransform> {\n    const interpolator = function (u: number): ScaleTransform {\n      const f0 = interpolator[0];\n      const f1 = interpolator[1];\n      const x = f0.x + u * (f1.x - f0.x);\n      const y = f0.y + u * (f1.y - f0.y);\n      return new ScaleTransform(x, y);\n    } as Interpolator<ScaleTransform>;\n    Object.setPrototypeOf(interpolator, ScaleTransformInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = f0;\n    (interpolator as Mutable<typeof interpolator>)[1] = f1;\n    return interpolator;\n  } as {\n    (f0: ScaleTransform, f1: ScaleTransform): Interpolator<ScaleTransform>;\n\n    /** @internal */\n    prototype: Interpolator<ScaleTransform>;\n  };\n\n  ScaleTransformInterpolator.prototype = Object.create(_super.prototype);\n  ScaleTransformInterpolator.prototype.constructor = Interpolator;\n\n  return ScaleTransformInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class ScaleTransformParser extends Parser<ScaleTransform> {\n  private readonly identOutput: Output<string> | undefined;\n  private readonly xParser: Parser<number> | undefined;\n  private readonly yParser: Parser<number> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(identOutput?: Output<string>, xParser?: Parser<number>,\n              yParser?: Parser<number>, step?: number) {\n    super();\n    this.identOutput = identOutput;\n    this.xParser = xParser;\n    this.yParser = yParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<ScaleTransform> {\n    return ScaleTransformParser.parse(input, this.identOutput, this.xParser, this.yParser, this.step);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>, xParser?: Parser<number>,\n               yParser?: Parser<number>, step: number = 1): Parser<ScaleTransform> {\n    let c = 0;\n    if (step === 1) {\n      identOutput = identOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input = input.step();\n        identOutput.write(c);\n      }\n      if (!input.isEmpty()) {\n        const ident = identOutput.bind();\n        switch (ident) {\n          case \"scaleX\":\n          case \"scaleY\":\n          case \"scale\": step = 2; break;\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 40/*'('*/) {\n        input.step();\n        step = 3;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"(\", input));\n      }\n    }\n    if (step === 3) {\n      if (xParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          xParser = Base10.parseNumber(input);\n        }\n      } else {\n        xParser = xParser.feed(input);\n      }\n      if (xParser !== void 0) {\n        if (xParser!.isDone()) {\n          step = 4;\n        } else if (xParser.isError()) {\n          return xParser.asError();\n        }\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 41/*')'*/) {\n          input.step();\n          const ident = identOutput!.bind();\n          switch (ident) {\n            case \"scaleX\": return Parser.done(new ScaleTransform(xParser!.bind(), 1));\n            case \"scaleY\": return Parser.done(new ScaleTransform(1, xParser!.bind()));\n            default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n          }\n        } else if (c === 44/*','*/) {\n          input.step();\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\",\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 5) {\n      if (yParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          yParser = Base10.parseNumber(input);\n        }\n      } else {\n        yParser = yParser.feed(input);\n      }\n      if (yParser !== void 0) {\n        if (yParser.isDone()) {\n          step = 6;\n        } else if (yParser.isError()) {\n          return yParser.asError();\n        }\n      }\n    }\n    if (step === 6) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont() && input.head() === 41/*')'*/) {\n        input.step();\n        const ident = identOutput!.bind();\n        switch (ident) {\n          case \"scale\": return Parser.done(new ScaleTransform(xParser!.bind(), yParser!.bind()));\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new ScaleTransformParser(identOutput, xParser, yParser, step);\n  }\n\n  /** @internal */\n  static parseRest(input: Input, identOutput?: Output<string>): Parser<ScaleTransform> {\n    return ScaleTransformParser.parse(input, identOutput, void 0, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Angle} from \"./Angle\";\nimport {AngleParser} from \"./Angle\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\nimport {AffineTransform} from \"./\"; // forward import\n\n/** @public */\nexport type RotateTransformLike = RotateTransform | string;\n\n/** @public */\nexport const RotateTransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is RotateTransformLike {\n    return instance instanceof RotateTransform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class RotateTransform extends Transform {\n  constructor(angle: Angle) {\n    super();\n    this.angle = angle;\n    this.stringValue = void 0;\n  }\n\n  readonly angle: Angle;\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      const angle = this.angle.radValue();\n      const cosA = Math.cos(angle);\n      const sinA = Math.sin(angle);\n      return new R2Point((x as number) * cosA - y! * sinA,\n                         (x as number) * sinA + y! * cosA);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof Transform) {\n      return Transform.list(this, x);\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    const angle = this.angle.radValue();\n    return x * Math.cos(angle) - y * Math.sin(angle);\n  }\n\n  override transformY(x: number, y: number): number {\n    const angle = this.angle.radValue();\n    return x * Math.sin(angle) + y * Math.cos(angle);\n  }\n\n  override inverse(): Transform {\n    return new RotateTransform(this.angle.negative());\n  }\n\n  override toAffine(): AffineTransform {\n    const angle = this.angle.radValue();\n    return new AffineTransform(Math.cos(angle), Math.sin(angle),\n                              -Math.sin(angle), Math.cos(angle),\n                               0, 0);\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSRotate(this.angle.toCssValue()!);\n  }\n\n  override toValue(): Value {\n    return Record.create(1).attr(\"rotate\", this.angle.toString());\n  }\n\n  override interpolateTo(that: RotateTransform): Interpolator<RotateTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof RotateTransform) {\n      return RotateTransformInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof RotateTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof RotateTransform) {\n      return this.angle.equivalentTo(that.angle, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof RotateTransform) {\n      return this.angle.equals(that.angle);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(RotateTransform), this.angle.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"rotate\")\n                   .write(40/*'('*/).debug(this.angle).write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = \"rotate(\" + this.angle + \")\";\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  override toAttributeString(): string {\n    return \"rotate(\" + this.angle.degValue() + \")\";\n  }\n\n  static override fromCssTransformComponent(component: CSSRotate): RotateTransform {\n    const angle = Angle.fromCssValue(component.angle);\n    return new RotateTransform(angle);\n  }\n\n  static override fromLike<T extends RotateTransformLike | null | undefined>(value: T): RotateTransform | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends RotateTransformLike | null | undefined>(value: T): RotateTransform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof RotateTransform) {\n      return value as RotateTransform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return RotateTransform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static override fromValue(value: Value): RotateTransform | null {\n    const header = value.header(\"rotate\");\n    if (!header.isDefined()) {\n      return null;\n    }\n    let angle = Angle.zero();\n    header.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue();\n      if (key === \"angle\") {\n        angle = item.toValue().cast(Angle.form(), angle);\n      } else if (item instanceof Value && index === 0) {\n        angle = item.cast(Angle.form(), angle);\n      }\n    }, this);\n    return new RotateTransform(angle);\n  }\n\n  static override parse(string: string): RotateTransform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = RotateTransformParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @internal */\nexport const RotateTransformInterpolator = (function (_super: typeof Interpolator) {\n  const RotateTransformInterpolator = function (f0: RotateTransform, f1: RotateTransform): Interpolator<RotateTransform> {\n    const interpolator = function (u: number): RotateTransform {\n      const f0 = interpolator[0];\n      const f1 = interpolator[1];\n      const a = Angle.of(f0.angle.value + u * (f1.angle.value - f0.angle.value), f1.angle.units);\n      return new RotateTransform(a);\n    } as Interpolator<RotateTransform>;\n    Object.setPrototypeOf(interpolator, RotateTransformInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = f0.angle.units === f1.angle.units\n                                                      ? f0 : new RotateTransform(f0.angle.to(f1.angle.units));\n    (interpolator as Mutable<typeof interpolator>)[1] = f1;\n    return interpolator;\n  } as {\n    (f0: RotateTransform, f1: RotateTransform): Interpolator<RotateTransform>;\n\n    /** @internal */\n    prototype: Interpolator<RotateTransform>;\n  };\n\n  RotateTransformInterpolator.prototype = Object.create(_super.prototype);\n  RotateTransformInterpolator.prototype.constructor = RotateTransformInterpolator;\n\n  return RotateTransformInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class RotateTransformParser extends Parser<RotateTransform> {\n  private readonly identOutput: Output<string> | undefined;\n  private readonly angleParser: Parser<Angle> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(identOutput?: Output<string>, angleParser?: Parser<Angle>, step?: number) {\n    super();\n    this.identOutput = identOutput;\n    this.angleParser = angleParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<RotateTransform> {\n    return RotateTransformParser.parse(input, this.identOutput, this.angleParser, this.step);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>, angleParser?: Parser<Angle>,\n               step: number = 1): Parser<RotateTransform> {\n    let c = 0;\n    if (step === 1) {\n      identOutput = identOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input = input.step();\n        identOutput.write(c);\n      }\n      if (!input.isEmpty()) {\n        const ident = identOutput.bind();\n        switch (ident) {\n          case \"rotate\": step = 2; break;\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 40/*'('*/) {\n        input.step();\n        step = 3;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"(\", input));\n      }\n    }\n    if (step === 3) {\n      if (angleParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          angleParser = AngleParser.parse(input, \"deg\");\n        }\n      } else {\n        angleParser = angleParser.feed(input);\n      }\n      if (angleParser !== void 0) {\n        if (angleParser.isDone()) {\n          step = 4;\n        } else if (angleParser.isError()) {\n          return angleParser.asError();\n        }\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont() && input.head() === 41/*')'*/) {\n        input.step();\n        const ident = identOutput!.bind();\n        switch (ident) {\n          case \"rotate\": return Parser.done(new RotateTransform(angleParser!.bind()));\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new RotateTransformParser(identOutput, angleParser, step);\n  }\n\n  /** @internal */\n  static parseRest(input: Input, identOutput?: Output<string>): Parser<RotateTransform> {\n    return RotateTransformParser.parse(input, identOutput, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {Angle} from \"./Angle\";\nimport {DegAngle} from \"./Angle\";\nimport {AngleParser} from \"./Angle\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\nimport {AffineTransform} from \"./\"; // forward import\n\n/** @public */\nexport type SkewTransformLike = SkewTransform | string;\n\n/** @public */\nexport const SkewTransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is SkewTransformLike {\n    return instance instanceof SkewTransform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class SkewTransform extends Transform {\n  constructor(x: Angle, y: Angle) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.stringValue = void 0;\n  }\n\n  readonly x: Angle;\n\n  readonly y: Angle;\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      return new R2Point(Math.tan(this.x.radValue()) * y! + (x as number),\n                         Math.tan(this.y.radValue()) * (x as number) + y!);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof Transform) {\n      return Transform.list(this, x);\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    return Math.tan(this.x.radValue()) * y + x;\n  }\n\n  override transformY(x: number, y: number): number {\n    return Math.tan(this.y.radValue()) * x + y;\n  }\n\n  override inverse(): Transform {\n    return new SkewTransform(this.x.negative(), this.y.negative());\n  }\n\n  override toAffine(): AffineTransform {\n    const x = this.x.radValue();\n    const y = this.y.radValue();\n    return new AffineTransform(1, Math.tan(y), Math.tan(x), 1, 0, 0);\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSSkew(this.x.toCssValue()!, this.y.toCssValue()!);\n  }\n\n  override toValue(): Value {\n    return Record.create(1)\n                 .attr(\"skew\", Record.create(2).slot(\"x\", this.x.toValue())\n                                               .slot(\"y\", this.y.toValue()));\n  }\n\n  override interpolateTo(that: SkewTransform): Interpolator<SkewTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof SkewTransform) {\n      return SkewTransformInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof SkewTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof SkewTransform) {\n      return this.x.equivalentTo(that.x, epsilon)\n          && this.y.equivalentTo(that.y, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof SkewTransform) {\n      return this.x.equals(that.x) && this.y.equals(that.y);\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(SkewTransform),\n        this.x.hashCode()), this.y.hashCode()));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"skew\");\n    if (this.x.isDefined() && !this.y.isDefined()) {\n      output = output.write(\"X\").write(40/*'('*/).debug(this.x);\n    } else if (!this.x.isDefined() && this.y.isDefined()) {\n      output = output.write(\"Y\").write(40/*'('*/).debug(this.y);\n    } else {\n      output = output.write(40/*'('*/).debug(this.x).write(\", \").debug(this.y);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      if (this.x.isDefined() && !this.y.isDefined()) {\n        stringValue = \"skewX(\" + this.x + \")\";\n      } else if (!this.x.isDefined() && this.y.isDefined()) {\n        stringValue = \"skewY(\" + this.y + \")\";\n      } else {\n        stringValue = \"skew(\" + this.x + \",\" + this.y + \")\";\n      }\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  override toAttributeString(): string {\n    if (this.x.isDefined() && !this.y.isDefined()) {\n      return \"skewX(\" + this.x.degValue() + \")\";\n    } else if (!this.x.isDefined() && this.y.isDefined()) {\n      return \"skewY(\" + this.y.degValue() + \")\";\n    }\n    return \"skew(\" + this.x.degValue() + \",\" + this.y.degValue() + \")\";\n  }\n\n  static override fromCssTransformComponent(component: CSSSkew): SkewTransform {\n    const x = typeof component.ax === \"number\"\n            ? Angle.rad(component.ax)\n            : Angle.fromCssValue(component.ax);\n    const y = typeof component.ay === \"number\"\n            ? Angle.rad(component.ay)\n            : Angle.fromCssValue(component.ay);\n    return new SkewTransform(x, y);\n  }\n\n  static override fromLike<T extends SkewTransformLike | null | undefined>(value: T): SkewTransform | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends SkewTransformLike | null | undefined>(value: T): SkewTransform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof SkewTransform) {\n      return value as SkewTransform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return SkewTransform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static override fromValue(value: Value): SkewTransform | null {\n    const header = value.header(\"skew\");\n    if (!header.isDefined()) {\n      return null;\n    }\n    let x = Angle.zero();\n    let y = Angle.zero();\n    header.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue();\n      if (key !== void 0) {\n        if (key === \"x\") {\n          x = item.toValue().cast(Angle.form(), x);\n        } else if (key === \"y\") {\n          y = item.toValue().cast(Angle.form(), y);\n        }\n      } else if (item instanceof Value) {\n        if (index === 0) {\n          x = item.cast(Angle.form(), x);\n        } else if (index === 1) {\n          y = item.cast(Angle.form(), y);\n        }\n      }\n    }, this);\n    return new SkewTransform(x, y);\n  }\n\n  static override parse(string: string): SkewTransform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = SkewTransformParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @internal */\nexport const SkewTransformInterpolator = (function (_super: typeof Interpolator) {\n  const SkewTransformInterpolator = function (f0: SkewTransform, f1: SkewTransform): Interpolator<SkewTransform> {\n    const interpolator = function (u: number): SkewTransform {\n      const f0 = interpolator[0];\n      const f1 = interpolator[1];\n      const x = Angle.of(f0.x.value + u * (f1.x.value - f0.x.value), f1.x.units);\n      const y = Angle.of(f0.y.value + u * (f1.y.value - f0.y.value), f1.y.units);\n      return new SkewTransform(x, y);\n    } as Interpolator<SkewTransform>;\n    Object.setPrototypeOf(interpolator, SkewTransformInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = f0.x.units === f1.x.units && f0.y.units === f1.y.units\n                                                      ? f0 : new SkewTransform(f0.x.to(f1.x.units), f0.y.to(f1.y.units));\n    (interpolator as Mutable<typeof interpolator>)[1] = f1;\n    return interpolator;\n  } as {\n    (f0: SkewTransform, f1: SkewTransform): Interpolator<SkewTransform>;\n\n    /** @internal */\n    prototype: Interpolator<SkewTransform>;\n  };\n\n  SkewTransformInterpolator.prototype = Object.create(_super.prototype);\n  SkewTransformInterpolator.prototype.constructor = SkewTransformInterpolator;\n\n  return SkewTransformInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class SkewTransformParser extends Parser<SkewTransform> {\n  private readonly identOutput: Output<string> | undefined;\n  private readonly xParser: Parser<Angle> | undefined;\n  private readonly yParser: Parser<Angle> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(identOutput?: Output<string>, xParser?: Parser<Angle>,\n              yParser?: Parser<Angle>, step?: number) {\n    super();\n    this.identOutput = identOutput;\n    this.xParser = xParser;\n    this.yParser = yParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<SkewTransform> {\n    return SkewTransformParser.parse(input, this.identOutput, this.xParser, this.yParser, this.step);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>, xParser?: Parser<Angle>,\n               yParser?: Parser<Angle>, step: number = 1): Parser<SkewTransform> {\n    let c = 0;\n    if (step === 1) {\n      identOutput = identOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input = input.step();\n        identOutput.write(c);\n      }\n      if (!input.isEmpty()) {\n        const ident = identOutput.bind();\n        switch (ident) {\n          case \"skewX\":\n          case \"skewY\":\n          case \"skew\": step = 2; break;\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 40/*'('*/) {\n        input.step();\n        step = 3;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"(\", input));\n      }\n    }\n    if (step === 3) {\n      if (xParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          xParser = AngleParser.parse(input, \"deg\");\n        }\n      } else {\n        xParser = xParser.feed(input);\n      }\n      if (xParser !== void 0) {\n        if (xParser.isDone()) {\n          step = 4;\n        } else if (xParser.isError()) {\n          return xParser.asError();\n        }\n      }\n    }\n    if (step === 4) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont()) {\n        c = input.head();\n        if (c === 41/*')'*/) {\n          input.step();\n          const ident = identOutput!.bind();\n          switch (ident) {\n            case \"skewX\": return Parser.done(new SkewTransform(xParser!.bind(), DegAngle.zero()));\n            case \"skewY\": return Parser.done(new SkewTransform(DegAngle.zero(), xParser!.bind()));\n            default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n          }\n        } else if (c === 44/*','*/) {\n          input.step();\n          step = 5;\n        } else {\n          return Parser.error(Diagnostic.expected(\",\", input));\n        }\n      } else if (input.isDone()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n    }\n    if (step === 5) {\n      if (yParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (!input.isEmpty()) {\n          yParser = AngleParser.parse(input, \"deg\");\n        }\n      } else {\n        yParser = yParser.feed(input);\n      }\n      if (yParser !== void 0) {\n        if (yParser.isDone()) {\n          step = 6;\n        } else if (yParser.isError()) {\n          return yParser.asError();\n        }\n      }\n    }\n    if (step === 6) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input.step();\n      }\n      if (input.isCont() && input.head() === 41/*')'*/) {\n        input.step();\n        const ident = identOutput!.bind();\n        switch (ident) {\n          case \"skew\": return Parser.done(new SkewTransform(xParser!.bind(), yParser!.bind()));\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\")\", input));\n      }\n    }\n    return new SkewTransformParser(identOutput, xParser, yParser, step);\n  }\n\n  /** @internal */\n  static parseRest(input: Input, identOutput?: Output<string>): Parser<SkewTransform> {\n    return SkewTransformParser.parse(input, identOutput, void 0, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\n\n/** @public */\nexport type AffineTransformLike = AffineTransform | string;\n\n/** @public */\nexport const AffineTransformLike = {\n  [Symbol.hasInstance](instance: unknown): instance is AffineTransformLike {\n    return instance instanceof AffineTransform\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class AffineTransform extends Transform {\n  constructor(x0: number, y0: number, x1: number, y1: number, tx: number, ty: number) {\n    super();\n    this.x0 = x0;\n    this.y0 = y0;\n    this.x1 = x1;\n    this.y1 = y1;\n    this.tx = tx;\n    this.ty = ty;\n    this.stringValue = void 0;\n  }\n\n  readonly x0: number;\n\n  readonly y0: number;\n\n  readonly x1: number;\n\n  readonly y1: number;\n\n  readonly tx: number;\n\n  readonly ty: number;\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      return new R2Point(this.x0 * (x as number) + this.x1 * y! + this.tx,\n                         this.y0 * (x as number) + this.y1 * y! + this.ty);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof Transform) {\n      return this.multiply(x.toAffine());\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    return this.x0 * x + this.x1 * y + this.tx;\n  }\n\n  override transformY(x: number, y: number): number {\n    return this.y0 * x + this.y1 * y + this.ty;\n  }\n\n  override inverse(): Transform {\n    const m00 = this.x0;\n    const m10 = this.y0;\n    const m01 = this.x1;\n    const m11 = this.y1;\n    const m02 = this.tx;\n    const m12 = this.ty;\n    const det = m00 * m11 - m01 * m10;\n    if (Math.abs(det) < Number.MIN_VALUE) {\n      throw new Error(\"non-invertible affine transform with determinant \" + det);\n    }\n    return new AffineTransform( m11 / det, -m10 / det,\n                               -m01 / det,  m00 / det,\n                               (m01 * m12 - m11 * m02) / det,\n                               (m10 * m02 - m00 * m12) / det);\n  }\n\n  multiply(that: AffineTransform): AffineTransform {\n    const x0 = this.x0 * that.x0 + this.x1 * that.y0;\n    const y0 = this.y0 * that.x0 + this.y1 * that.y0;\n    const x1 = this.x0 * that.x1 + this.x1 * that.y1;\n    const y1 = this.y0 * that.x1 + this.y1 * that.y1;\n    const tx = this.x0 * that.tx + this.x1 * that.ty;\n    const ty = this.y0 * that.tx + this.y1 * that.ty;\n    return new AffineTransform(x0, y0, x1, y1, tx, ty);\n  }\n\n  override toAffine(): AffineTransform {\n    return this;\n  }\n\n  override toMatrix(): DOMMatrix {\n    return new DOMMatrix([this.x0, this.y0, this.x1, this.y1, this.tx, this.ty]);\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSMatrixComponent(this.toMatrix());\n  }\n\n  override toValue(): Value {\n    return Record.create(1)\n                 .attr(\"matrix\", Record.create(6).item(this.x0).item(this.y0)\n                                                 .item(this.x1).item(this.y1)\n                                                 .item(this.tx).item(this.ty));\n  }\n\n  override interpolateTo(that: AffineTransform): Interpolator<AffineTransform>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof AffineTransform) {\n      return AffineTransformInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    return that instanceof AffineTransform;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (that instanceof AffineTransform) {\n      return Numbers.equivalent(this.x0, that.x0, epsilon)\n          && Numbers.equivalent(this.y0, that.y0, epsilon)\n          && Numbers.equivalent(this.x1, that.x1, epsilon)\n          && Numbers.equivalent(this.y1, that.y1, epsilon)\n          && Numbers.equivalent(this.tx, that.tx, epsilon)\n          && Numbers.equivalent(this.ty, that.ty, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (that instanceof AffineTransform) {\n      return this.x0 === that.x0 && this.y0 === that.y0\n          && this.x1 === that.x1 && this.y1 === that.y1\n          && this.tx === that.tx && this.ty === that.ty;\n    }\n    return false;\n  }\n\n  override hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Murmur3.mix(Murmur3.mix(Constructors.hash(AffineTransform),\n        Numbers.hash(this.x0)), Numbers.hash(this.y0)),\n        Numbers.hash(this.x1)), Numbers.hash(this.y1)),\n        Numbers.hash(this.tx)), Numbers.hash(this.ty)));\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"affine\").write(40/*'('*/)\n                   .debug(this.x0).write(\", \").debug(this.y0).write(\", \")\n                   .debug(this.x1).write(\", \").debug(this.y1).write(\", \")\n                   .debug(this.tx).write(\", \").debug(this.ty).write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      stringValue = \"matrix(\" + this.x0 + \",\" + this.y0 + \",\"\n                              + this.x1 + \",\" + this.y1 + \",\"\n                              + this.tx + \",\" + this.ty + \")\";\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  @Lazy\n  static override identity(): AffineTransform {\n    return new AffineTransform(1, 0, 0, 1, 0, 0);\n  }\n\n  static override fromLike<T extends AffineTransformLike | null | undefined>(value: T): AffineTransform | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends AffineTransformLike | null | undefined>(value: T): AffineTransform | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof AffineTransform) {\n      return value as AffineTransform | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return AffineTransform.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromMatrix(matrix: DOMMatrixReadOnly): AffineTransform {\n    return new AffineTransform(matrix.a, matrix.b, matrix.c, matrix.d, matrix.e, matrix.f);\n  }\n\n  static override fromCssTransformComponent(component: CSSMatrixComponent): AffineTransform {\n    return AffineTransform.fromMatrix(component.matrix);\n  }\n\n  static override fromValue(value: Value): AffineTransform | null {\n    const header = value.header(\"matrix\");\n    if (!header.isDefined()) {\n      return null;\n    }\n    let x0 = 0;\n    let y0 = 0;\n    let x1 = 0;\n    let y1 = 0;\n    let tx = 0;\n    let ty = 0;\n    header.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue();\n      if (key !== void 0) {\n        if (key === \"x0\") {\n          x0 = item.toValue().numberValue(x0);\n        } else if (key === \"y0\") {\n          y0 = item.toValue().numberValue(y0);\n        } else if (key === \"x1\") {\n          x1 = item.toValue().numberValue(x1);\n        } else if (key === \"y1\") {\n          y1 = item.toValue().numberValue(y1);\n        } else if (key === \"tx\") {\n          tx = item.toValue().numberValue(tx);\n        } else if (key === \"ty\") {\n          ty = item.toValue().numberValue(ty);\n        }\n      } else if (item instanceof Value) {\n        switch (index) {\n          case 0: x0 = item.numberValue(x0); break;\n          case 1: y0 = item.numberValue(y0); break;\n          case 2: x1 = item.numberValue(x1); break;\n          case 3: y1 = item.numberValue(y1); break;\n          case 4: tx = item.numberValue(tx); break;\n          case 5: ty = item.numberValue(ty); break;\n          default:\n        }\n      }\n    }, this);\n    return new AffineTransform(x0, y0, x1, y1, tx, ty);\n  }\n\n  static override parse(string: string): AffineTransform {\n    let input = Unicode.stringInput(string);\n    while (input.isCont() && Unicode.isWhitespace(input.head())) {\n      input = input.step();\n    }\n    let parser = AffineTransformParser.parse(input);\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isWhitespace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n}\n\n/** @internal */\nexport const AffineTransformInterpolator = (function (_super: typeof Interpolator) {\n  const AffineTransformInterpolator = function (f0: AffineTransform, f1: AffineTransform): Interpolator<AffineTransform> {\n    const interpolator = function (u: number): AffineTransform {\n      // TODO: interpolate and recompose matrices\n      const f0 = interpolator[0];\n      const f1 = interpolator[1];\n      const x0 = f0.x0 + u * (f1.x0 - f0.x0);\n      const y0 = f0.y0 + u * (f1.y0 - f0.y0);\n      const x1 = f0.x1 + u * (f1.x1 - f0.x1);\n      const y1 = f0.y1 + u * (f1.y1 - f0.y1);\n      const tx = f0.tx + u * (f1.tx - f0.tx);\n      const ty = f0.ty + u * (f1.ty - f0.ty);\n      return new AffineTransform(x0, y0, x1, y1, tx, ty);\n    } as Interpolator<AffineTransform>;\n    Object.setPrototypeOf(interpolator, AffineTransformInterpolator.prototype);\n    // TODO: decompose matrices\n    (interpolator as Mutable<typeof interpolator>)[0] = f0;\n    (interpolator as Mutable<typeof interpolator>)[1] = f1;\n    return interpolator;\n  } as {\n    (f0: AffineTransform, f1: AffineTransform): Interpolator<AffineTransform>;\n\n    /** @internal */\n    prototype: Interpolator<AffineTransform>;\n  };\n\n  AffineTransformInterpolator.prototype = Object.create(_super.prototype);\n  AffineTransformInterpolator.prototype.constructor = AffineTransformInterpolator;\n\n  return AffineTransformInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class AffineTransformParser extends Parser<AffineTransform> {\n  private readonly identOutput: Output<string> | undefined;\n  private readonly entries: number[] | undefined;\n  private readonly entryParser: Parser<number> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(identOutput?: Output<string>, entries?: number[],\n              entryParser?: Parser<number>, step?: number) {\n    super();\n    this.identOutput = identOutput;\n    this.entries = entries;\n    this.entryParser = entryParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<AffineTransform> {\n    return AffineTransformParser.parse(input, this.identOutput, this.entries, this.entryParser, this.step);\n  }\n\n  static parse(input: Input, identOutput?: Output<string>, entries: number[] = [],\n               entryParser?: Parser<number>, step: number = 1): Parser<AffineTransform> {\n    let c = 0;\n    if (step === 1) {\n      identOutput = identOutput || Unicode.stringOutput();\n      while (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input = input.step();\n        identOutput.write(c);\n      }\n      if (!input.isEmpty()) {\n        const ident = identOutput.bind();\n        switch (ident) {\n          case \"matrix\": step = 2; break;\n          default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n        }\n      }\n    }\n    if (step === 2) {\n      while (input.isCont() && (c = input.head(), Unicode.isSpace(c))) {\n        input = input.step();\n      }\n      if (input.isCont() && c === 40/*'('*/) {\n        input.step();\n        step = 3;\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.expected(\"(\", input));\n      }\n    }\n    do {\n      if (step === 3) {\n        if (entryParser === void 0) {\n          while (input.isCont() && Unicode.isSpace(input.head())) {\n            input.step();\n          }\n          if (!input.isEmpty()) {\n            entryParser = Base10.parseNumber(input);\n          }\n        } else {\n          entryParser = entryParser.feed(input);\n        }\n        if (entryParser !== void 0) {\n          if (entryParser.isDone()) {\n            entries.push(entryParser.bind());\n            entryParser = void 0;\n            step = 4;\n          } else if (entryParser.isError()) {\n            return entryParser.asError();\n          }\n        }\n      }\n      if (step === 4) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (input.isCont()) {\n          c = input.head();\n          if (c === 41/*')'*/) {\n            input.step();\n            const ident = identOutput!.bind();\n            switch (ident) {\n              case \"matrix\": return Parser.done(Transform.affine(...entries));\n              default: return Parser.error(Diagnostic.message(\"unknown transform function: \" + ident, input));\n            }\n          } else if (entries.length >= 6) {\n            return Parser.error(Diagnostic.expected(\")\", input));\n          } else if (c === 44/*','*/) {\n            input.step();\n            step = 3;\n            continue;\n          } else {\n            return Parser.error(Diagnostic.expected(\",\", input));\n          }\n        } else if (input.isDone()) {\n          return Parser.error(Diagnostic.unexpected(input));\n        }\n      }\n      break;\n    } while (true);\n    return new AffineTransformParser(identOutput, entries, entryParser, step);\n  }\n\n  /** @internal */\n  static parseRest(input: Input, identOutput?: Output<string>): Parser<AffineTransform> {\n    return AffineTransformParser.parse(input, identOutput, void 0, void 0, 2);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport type {Value} from \"@swim/structure\";\nimport {Record} from \"@swim/structure\";\nimport {R2Point} from \"./R2Point\";\nimport type {TransformLike} from \"./Transform\";\nimport {Transform} from \"./Transform\";\nimport {TransformParser} from \"./Transform\";\nimport {AffineTransform} from \"./AffineTransform\";\nimport {IdentityTransform} from \"./IdentityTransform\";\n\n/** @public */\nexport type TransformListLike = TransformList | string;\n\n/** @public */\nexport const TransformListLike = {\n  [Symbol.hasInstance](instance: unknown): instance is TransformListLike {\n    return instance instanceof TransformList\n        || typeof instance === \"string\";\n  },\n};\n\n/** @public */\nexport class TransformList extends Transform {\n  constructor(transforms: readonly Transform[]) {\n    super();\n    this.transforms = transforms;\n    this.stringValue = void 0;\n  }\n\n  readonly transforms: readonly Transform[];\n\n  override transform(that: Transform): Transform;\n  override transform(x: number, y: number): R2Point;\n  override transform(x: Transform | number, y?: number): Transform | R2Point {\n    if (arguments.length === 2) {\n      const transforms = this.transforms;\n      for (let i = 0; i < transforms.length; i += 1) {\n        const transform = transforms[i]!;\n        const xi = transform.transformX(x as number, y!);\n        const yi = transform.transformY(x as number, y!);\n        x = xi;\n        y = yi;\n      }\n      return new R2Point(x as number, y!);\n    } else if (x instanceof IdentityTransform) {\n      return this;\n    } else if (x instanceof Transform) {\n      return Transform.list(this, x);\n    }\n    throw new TypeError(\"\" + x);\n  }\n\n  override transformX(x: number, y: number): number {\n    const transforms = this.transforms;\n    for (let i = 0; i < transforms.length; i += 1) {\n      const transform = transforms[i]!;\n      const xi = transform.transformX(x, y);\n      const yi = transform.transformY(x, y);\n      x = xi;\n      y = yi;\n    }\n    return x;\n  }\n\n  override transformY(x: number, y: number): number {\n    const transforms = this.transforms;\n    for (let i = 0; i < transforms.length; i += 1) {\n      const transform = transforms[i]!;\n      const xi = transform.transformX(x, y);\n      const yi = transform.transformY(x, y);\n      x = xi;\n      y = yi;\n    }\n    return y;\n  }\n\n  override inverse(): Transform {\n    const transforms = this.transforms;\n    const n = transforms.length;\n    const inverseTransforms = new Array<Transform>(n);\n    for (let i = 0; i < n; i += 1) {\n      inverseTransforms[i] = transforms[n - i - 1]!.inverse();\n    }\n    return new TransformList(inverseTransforms);\n  }\n\n  override toAffine(): AffineTransform {\n    let matrix = AffineTransform.identity();\n    const transforms = this.transforms;\n    for (let i = 0; i < transforms.length; i += 1) {\n      matrix = matrix.multiply(transforms[i]!.toAffine());\n    }\n    return matrix;\n  }\n\n  override toCssTransformComponent(): CSSTransformComponent | null {\n    if (typeof CSSTranslate === \"undefined\") {\n      return null;\n    }\n    return new CSSMatrixComponent(this.toMatrix());\n  }\n\n  override toCssValue(): CSSStyleValue | null {\n    if (typeof CSSTransformValue === \"undefined\") {\n      return null;\n    }\n    const transforms = this.transforms;\n    const n = transforms.length;\n    const components = new Array<CSSTransformComponent>(n);\n    for (let i = 0; i < transforms.length; i += 1) {\n      const transform = transforms[i]!;\n      const component = transform.toCssTransformComponent();\n      if (component === null) {\n        return null;\n      }\n      components[i] = component;\n    }\n    return new CSSTransformValue(components);\n  }\n\n  override toValue(): Value {\n    const transforms = this.transforms;\n    const n = transforms.length;\n    const record = Record.create(n);\n    for (let i = 0; i < n; i += 1) {\n      record.push(transforms[i]!.toValue());\n    }\n    return record;\n  }\n\n  override interpolateTo(that: TransformList): Interpolator<TransformList>;\n  override interpolateTo(that: Transform): Interpolator<Transform>;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null;\n  override interpolateTo(that: unknown): Interpolator<Transform> | null {\n    if (that instanceof TransformList) {\n      return TransformListInterpolator(this, that);\n    }\n    return super.interpolateTo(that);\n  }\n\n  override conformsTo(that: Transform): boolean {\n    if (!(that instanceof TransformList)) {\n      return false;\n    }\n    const n = this.transforms.length;\n    if (n !== that.transforms.length) {\n      return false;\n    }\n    for (let i = 0; i < n; i += 1) {\n      if (!this.transforms[i]!.conformsTo(that.transforms[i]!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (!(that instanceof TransformList)) {\n      return false;\n    }\n    const n = this.transforms.length;\n    if (n !== that.transforms.length) {\n      return false;\n    }\n    for (let i = 0; i < n; i += 1) {\n      if (!this.transforms[i]!.equivalentTo(that.transforms[i]!, epsilon)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override equals(that: unknown): boolean {\n    if (!(that instanceof TransformList)) {\n      return false;\n    }\n    const n = this.transforms.length;\n    if (n !== that.transforms.length) {\n      return false;\n    }\n    for (let i = 0; i < n; i += 1) {\n      if (!this.transforms[i]!.equals(that.transforms[i]!)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  override hashCode(): number {\n    let hashValue = Constructors.hash(TransformList);\n    const transforms = this.transforms;\n    for (let i = 0; i < transforms.length; i += 1) {\n      hashValue = Murmur3.mix(hashValue, transforms[i]!.hashCode());\n    }\n    return Murmur3.mash(hashValue);\n  }\n\n  override debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"Transform\").write(46/*'.'*/).write(\"list\").write(40/*'('*/);\n    const transforms = this.transforms;\n    const n = transforms.length;\n    if (n > 0) {\n      output = output.debug(transforms[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(transforms[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @internal */\n  readonly stringValue: string | undefined;\n\n  override toString(): string {\n    let stringValue = this.stringValue;\n    if (stringValue === void 0) {\n      const transforms = this.transforms;\n      const n = transforms.length;\n      if (n === 0) {\n        stringValue = \"none\";\n      } else {\n        stringValue = transforms[0]!.toString();\n        for (let i = 1; i < n; i += 1) {\n          stringValue += \" \";\n          stringValue += transforms[i]!.toString();\n        }\n      }\n      (this as Mutable<this>).stringValue = stringValue;\n    }\n    return stringValue;\n  }\n\n  override toAttributeString(): string {\n    const transforms = this.transforms;\n    const n = transforms.length;\n    if (n === 0) {\n      return \"\";\n    }\n    let s = transforms[0]!.toAttributeString();\n    for (let i = 1; i < n; i += 1) {\n      s += \" \";\n      s += transforms[i]!.toAttributeString();\n    }\n    return s;\n  }\n\n  static override fromLike<T extends TransformListLike | null | undefined>(value: T): TransformList | Uninitable<T>;\n  static override fromLike<T extends TransformLike | null | undefined>(value: T): never;\n  static override fromLike<T extends TransformListLike | null | undefined>(value: T): TransformList | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof TransformList) {\n      return value as TransformList | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      return TransformList.parse(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static override fromValue(value: Value): TransformList | null {\n    const transforms: Transform[] = [];\n    value.forEach(function (item: Item) {\n      const transform = Transform.fromValue(item.toValue());\n      if (transform !== null) {\n        transforms.push(transform);\n      }\n    }, this);\n    if (transforms.length !== 0) {\n      return new TransformList(transforms);\n    }\n    return null;\n  }\n\n  static override parse(string: string): TransformList {\n    const transform = Transform.parse(string);\n    if (transform instanceof TransformList) {\n      return transform;\n    }\n    return new TransformList([transform]);\n  }\n}\n\n/** @internal */\nexport interface TransformListInterpolator extends Interpolator<TransformList> {\n  /** @internal */\n  readonly interpolators: readonly Interpolator<Transform>[];\n\n  readonly 0: TransformList;\n\n  readonly 1: TransformList;\n\n  equals(that: unknown): boolean;\n}\n\n/** @internal */\nexport const TransformListInterpolator = (function (_super: typeof Interpolator) {\n  const TransformListInterpolator = function (f0: TransformList, f1: TransformList): TransformListInterpolator {\n    const interpolator = function (u: number): TransformList {\n      const interpolators = interpolator.interpolators;\n      const interpolatorCount = interpolators.length;\n      const transforms = new Array<Transform>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        transforms[i] = interpolators[i]!(u);\n      }\n      return new TransformList(transforms);\n    } as TransformListInterpolator;\n    Object.setPrototypeOf(interpolator, TransformListInterpolator.prototype);\n    const transforms0 = f0.transforms;\n    const transforms1 = f1.transforms;\n    const interpolatorCount = Math.min(transforms0.length, transforms1.length);\n    const interpolators = new Array<Interpolator<Transform>>(interpolatorCount);\n    for (let i = 0; i < interpolatorCount; i += 1) {\n      interpolators[i] = transforms0[i]!.interpolateTo(transforms1[i]!);\n    }\n    (interpolator as Mutable<typeof interpolator>).interpolators = interpolators;\n    return interpolator;\n  } as {\n    (f0: TransformList, f1: TransformList): TransformListInterpolator;\n\n    /** @internal */\n    prototype: TransformListInterpolator;\n  };\n\n  TransformListInterpolator.prototype = Object.create(_super.prototype);\n  TransformListInterpolator.prototype.constructor = TransformListInterpolator;\n\n  Object.defineProperty(TransformListInterpolator.prototype, 0, {\n    get(this: TransformListInterpolator): TransformList {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const transforms = new Array<Transform>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        transforms[i] = interpolators[i]![0];\n      }\n      return new TransformList(transforms);\n    },\n    configurable: true,\n  });\n\n  Object.defineProperty(TransformListInterpolator.prototype, 1, {\n    get(this: TransformListInterpolator): TransformList {\n      const interpolators = this.interpolators;\n      const interpolatorCount = interpolators.length;\n      const transforms = new Array<Transform>(interpolatorCount);\n      for (let i = 0; i < interpolatorCount; i += 1) {\n        transforms[i] = interpolators[i]![1];\n      }\n      return new TransformList(transforms);\n    },\n    configurable: true,\n  });\n\n  TransformListInterpolator.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TransformListInterpolator) {\n      const n = this.interpolators.length;\n      if (n !== that.interpolators.length) {\n        return false;\n      }\n      for (let i = 0; i < n; i += 1) {\n        if (!this.interpolators[i]!.equals(that.interpolators[i]!)) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  };\n\n  return TransformListInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class TransformListParser extends Parser<Transform> {\n  private readonly transform: Transform | undefined;\n  private readonly transformParser: Parser<Transform> | undefined;\n\n  constructor(transform?: Transform, transformParser?: Parser<Transform>) {\n    super();\n    this.transform = transform;\n    this.transformParser = transformParser;\n  }\n\n  override feed(input: Input): Parser<Transform> {\n    return TransformListParser.parse(input, this.transform, this.transformParser);\n  }\n\n  static parse(input: Input, transform: Transform = Transform.identity(),\n               transformParser?: Parser<Transform>): Parser<Transform> {\n    do {\n      if (transformParser === void 0) {\n        while (input.isCont() && Unicode.isSpace(input.head())) {\n          input.step();\n        }\n        if (input.isCont()) {\n          transformParser = TransformParser.parse(input);\n        } else if (input.isDone()) {\n          return Parser.done(transform);\n        }\n      }\n      if (transformParser !== void 0) {\n        transformParser = transformParser.feed(input);\n        if (transformParser.isDone()) {\n          transform = transform.transform(transformParser.bind());\n          transformParser = void 0;\n          continue;\n        } else if (transformParser.isError()) {\n          return transformParser.asError();\n        }\n      }\n      break;\n    } while (true);\n    return new TransformListParser(transform, transformParser);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Objects} from \"@swim/util\";\nimport type {R2PointLike} from \"@swim/math\";\nimport type {R2Point} from \"@swim/math\";\nimport type {GeoPointLike} from \"./GeoPoint\";\nimport type {GeoPoint} from \"./GeoPoint\";\n\n/** @public */\nexport interface GeoProjection {\n  project(lnglat: GeoPointLike): R2Point;\n  project(lng: number, lat: number): R2Point;\n\n  unproject(point: R2PointLike): GeoPoint;\n  unproject(x: number, y: number): GeoPoint;\n}\n\n/** @public */\nexport const GeoProjection = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoProjection {\n    return Objects.hasAllKeys<GeoProjection>(instance, \"project\", \"unproject\");\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Equals} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {R2Shape} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport {GeoPointInit} from \"./\"; // forward import\nimport {GeoPointTuple} from \"./\"; // forward import\nimport {GeoPoint} from \"./\"; // forward import\nimport {GeoSegmentInit} from \"./\"; // forward import\nimport {GeoSegment} from \"./\"; // forward import\nimport {GeoSplinePoints} from \"./\"; // forward import\nimport {GeoSpline} from \"./\"; // forward import\nimport {GeoPathSplines} from \"./\"; // forward import\nimport {GeoPath} from \"./\"; // forward import\nimport {GeoBoxInit} from \"./\"; // forward import\nimport {GeoBox} from \"./\"; // forward import\nimport {GeoTileInit} from \"./\"; // forward import\nimport {GeoTileTuple} from \"./\"; // forward import\nimport {GeoTile} from \"./\"; // forward import\n\n/** @public */\nexport type GeoShapeLike = GeoShape\n                         | GeoPointInit\n                         | GeoPointTuple\n                         | GeoSegmentInit\n                         | GeoSplinePoints\n                         | GeoTileInit\n                         | GeoTileTuple\n                         | GeoBoxInit;\n\n/** @public */\nexport const GeoShapeLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoShapeLike {\n    return instance instanceof GeoShape\n        || GeoPointInit[Symbol.hasInstance](instance)\n        || GeoPointTuple[Symbol.hasInstance](instance)\n        || GeoSegmentInit[Symbol.hasInstance](instance)\n        || GeoSplinePoints[Symbol.hasInstance](instance)\n        || GeoPathSplines[Symbol.hasInstance](instance)\n        || GeoTileInit[Symbol.hasInstance](instance)\n        || GeoTileTuple[Symbol.hasInstance](instance)\n        || GeoBoxInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport abstract class GeoShape implements Equals, Equivalent {\n  /** @internal */\n  declare readonly typeid?: string;\n\n  likeType?(like: GeoPointInit\n                | GeoPointTuple\n                | GeoSegmentInit\n                | GeoSplinePoints\n                | GeoPathSplines\n                | GeoTileInit\n                | GeoTileTuple\n                | GeoBoxInit): void;\n\n  abstract isDefined(): boolean;\n\n  abstract readonly lngMin: number;\n\n  abstract readonly latMin: number;\n\n  abstract readonly lngMax: number;\n\n  abstract readonly latMax: number;\n\n  abstract contains(that: GeoShapeLike): boolean;\n\n  abstract contains(lng: number, lat: number): boolean;\n\n  abstract intersects(that: GeoShapeLike): boolean;\n\n  union(that: GeoShapeLike): GeoShape {\n    that = GeoShape.fromLike(that);\n    return new GeoBox(Math.min(this.lngMin, that.lngMin),\n                      Math.min(this.latMin, that.latMin),\n                      Math.max(this.lngMax, that.lngMax),\n                      Math.max(this.latMax, that.latMax));\n  }\n\n  abstract project(f: GeoProjection): R2Shape;\n\n  get bounds(): GeoBox {\n    return new GeoBox(this.lngMin, this.latMin, this.lngMax, this.latMax);\n  }\n\n  /** @override */\n  abstract equivalentTo(that: unknown, epsilon?: number): boolean\n\n  /** @override */\n  abstract equals(that: unknown): boolean;\n\n  static fromLike<T extends GeoShapeLike | null | undefined>(value: T): GeoShape | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoShape) {\n      return value as GeoShape | Uninitable<T>;\n    } else if (GeoPointInit[Symbol.hasInstance](value)) {\n      return GeoPoint.fromInit(value);\n    } else if (GeoPointTuple[Symbol.hasInstance](value)) {\n      return GeoPoint.fromTuple(value);\n    } else if (GeoSegmentInit[Symbol.hasInstance](value)) {\n      return GeoSegment.fromInit(value);\n    } else if (GeoSplinePoints[Symbol.hasInstance](value)) {\n      return GeoSpline.fromPoints(value);\n    } else if (GeoPathSplines[Symbol.hasInstance](value)) {\n      return GeoPath.fromSplines(value);\n    } else if (GeoTileInit[Symbol.hasInstance](value)) {\n      return GeoTile.fromInit(value);\n    } else if (GeoTileTuple[Symbol.hasInstance](value)) {\n      return GeoTile.fromTuple(value);\n    } else if (GeoBoxInit[Symbol.hasInstance](value)) {\n      return GeoBox.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Point} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\n\n/** @public */\nexport type GeoPointLike = GeoPoint | GeoPointInit | GeoPointTuple;\n\n/** @public */\nexport const GeoPointLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoPointLike {\n    return instance instanceof GeoPoint\n        || GeoPointInit[Symbol.hasInstance](instance)\n        || GeoPointTuple[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface GeoPointInit {\n  /** @internal */\n  readonly typeid?: \"GeoPointInit\";\n  lng: number;\n  lat: number;\n}\n\n/** @public */\nexport const GeoPointInit = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoPointInit {\n    return Objects.hasAllKeys<GeoPointInit>(instance, \"lng\", \"lat\");\n  },\n};\n\n/** @public */\nexport type GeoPointTuple = [number, number];\n\n/** @public */\nexport const GeoPointTuple = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoPointTuple {\n    return Array.isArray(instance) && instance.length === 2\n        && typeof instance[0] === \"number\"\n        && typeof instance[1] === \"number\";\n  },\n};\n\n/**\n * A geographic point represented by a WGS84 longitude and latitude.\n * @public\n */\nexport class GeoPoint extends GeoShape implements Interpolate<GeoPoint>, HashCode, Debug {\n  constructor(lng: number, lat: number) {\n    super();\n    this.lng = lng;\n    this.lat = lat;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoPoint\";\n\n  override likeType?(like: GeoPointInit | GeoPointTuple): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.lng) && isFinite(this.lat);\n  }\n\n  readonly lng: number;\n\n  readonly lat: number;\n\n  override get lngMin(): number {\n    return this.lng;\n  }\n\n  override get latMin(): number {\n    return this.lat;\n  }\n\n  override get lngMax(): number {\n    return this.lng;\n  }\n\n  override get latMax(): number {\n    return this.lat;\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(lng: number, lat: number): boolean;\n  override contains(that: GeoShapeLike | number, lat?: number): boolean {\n    if (typeof that === \"number\") {\n      return this.lng === that && this.lat === lat!;\n    }\n    that = GeoShape.fromLike(that);\n    if (that instanceof GeoPoint) {\n      return this.lng === that.lng && this.lat === that.lat;\n    } else if (that instanceof GeoShape) {\n      return this.lng <= that.lngMin && that.lngMax <= this.lng\n          && this.lat <= that.latMin && that.latMax <= this.lat;\n    }\n    return false;\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    that = GeoShape.fromLike(that);\n    return that.intersects(this);\n  }\n\n  override project(f: GeoProjection): R2Point {\n    return f.project(this);\n  }\n\n  normalized(): GeoPoint {\n    const oldLng = this.lng;\n    const oldLat = this.lat;\n    const newLng = GeoPoint.normalizeLng(oldLng);\n    const newLat = GeoPoint.normalizeLat(oldLat);\n    if (oldLng === newLng && oldLat === newLat) {\n      return this;\n    }\n    return new GeoPoint(newLng, newLat);\n  }\n\n  toLike(): GeoPointInit {\n    return {\n      lng: this.lng,\n      lat: this.lat,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: GeoPoint): Interpolator<GeoPoint>;\n  interpolateTo(that: unknown): Interpolator<GeoPoint> | null;\n  interpolateTo(that: unknown): Interpolator<GeoPoint> | null {\n    if (that instanceof GeoPoint) {\n      return GeoPointInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoPoint) {\n      return Numbers.equivalent(this.lng, that.lng, epsilon)\n          && Numbers.equivalent(this.lat, that.lat, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoPoint) {\n      return this.lng === that.lng && this.lat === that.lat;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(GeoPoint),\n        Numbers.hash(this.lng)), Numbers.hash(this.lat)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"GeoPoint\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.lng).write(\", \").debug(this.lat).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static undefined(): GeoPoint {\n    return new GeoPoint(NaN, NaN);\n  }\n\n  @Lazy\n  static origin(): GeoPoint {\n    return new GeoPoint(0, 0);\n  }\n\n  static of(lng: number, lat: number): GeoPoint {\n    return new GeoPoint(lng, lat);\n  }\n\n  static override fromLike<T extends GeoPointLike | null | undefined>(value: T): GeoPoint | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoPointLike | null | undefined>(value: T): GeoPoint | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoPoint) {\n      return value as GeoPoint | Uninitable<T>;\n    } else if (GeoPointInit[Symbol.hasInstance](value)) {\n      return GeoPoint.fromInit(value);\n    } else if (GeoPointTuple[Symbol.hasInstance](value)) {\n      return GeoPoint.fromTuple(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: GeoPointInit): GeoPoint {\n    return new GeoPoint(init.lng, init.lat);\n  }\n\n  static fromTuple(tuple: GeoPointTuple): GeoPoint {\n    return new GeoPoint(tuple[0], tuple[1]);\n  }\n\n  static normalized(lng: number, lat: number): GeoPoint {\n    lng = GeoPoint.normalizeLng(lng);\n    lat = GeoPoint.normalizeLat(lat);\n    return new GeoPoint(lng, lat);\n  }\n\n  /** @internal */\n  static normalizeLng(lng: number): number {\n    if (lng < -180) {\n      lng = 180 - (-lng + 180) % 360;\n    } else if (lng > 180) {\n      lng = -180 + (lng - 180) % 360;\n    }\n    return lng;\n  }\n\n  /** @internal */\n  static normalizeLat(lat: number): number {\n    lat = Math.min(Math.max(-90 + Equivalent.Epsilon, lat), 90 - Equivalent.Epsilon);\n    return lat;\n  }\n}\n\n/** @internal */\nexport const GeoPointInterpolator = (function (_super: typeof Interpolator) {\n  const GeoPointInterpolator = function (p0: GeoPoint, p1: GeoPoint): Interpolator<GeoPoint> {\n    const interpolator = function (u: number): GeoPoint {\n      const p0 = interpolator[0];\n      const lng0 = p0.lng;\n      const lat0 = p0.lat;\n      const p1 = interpolator[1];\n      const lng1 = p1.lng;\n      const lat1 = p1.lat;\n      let lng: number;\n      if (lng0 > 0 && lng1 < 0 && lng0 - lng1 > 180) {\n        // east across anti-meridian\n        const w = 180 - lng0;\n        const e = 180 + lng1;\n        const uw = w / (w + e);\n        if (u < uw) {\n          lng = lng0 + (u / uw) * w;\n        } else {\n          const ue = 1 - uw;\n          lng = -180 + ((u - uw) / ue) * e;\n        }\n      } else if (lng0 < 0 && lng1 > 0 && lng1 - lng0 > 180) {\n        // west across anti-meridian\n        const e = 180 + lng0;\n        const w = 180 - lng1;\n        const ue = e / (e + w);\n        if (u < ue) {\n          lng = lng0 - (u / ue) * e;\n        } else {\n          const uw = 1 - ue;\n          lng = 180 - ((u - ue) / uw) * w;\n        }\n      } else {\n        lng = lng0 + u * (lng1 - lng0);\n      }\n      const lat = lat0 + u * (lat1 - lat0);\n      return new GeoPoint(lng, lat);\n    } as Interpolator<GeoPoint>;\n    Object.setPrototypeOf(interpolator, GeoPointInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = p0.normalized();\n    (interpolator as Mutable<typeof interpolator>)[1] = p1.normalized();\n    return interpolator;\n  } as {\n    (p0: GeoPoint, p1: GeoPoint): Interpolator<GeoPoint>;\n\n    /** @internal */\n    prototype: Interpolator<GeoPoint>;\n  };\n\n  GeoPointInterpolator.prototype = Object.create(_super.prototype);\n  GeoPointInterpolator.prototype.constructor = GeoPointInterpolator;\n\n  return GeoPointInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {R2Curve} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport {GeoShape} from \"./GeoShape\";\nimport type {GeoPoint} from \"./GeoPoint\";\n\n/** @public */\nexport interface GeoCurveContext {\n  moveTo(lng: number, lat: number): void;\n\n  lineTo(lng: number, lat: number): void;\n}\n\n/** @public */\nexport abstract class GeoCurve extends GeoShape {\n  abstract interpolateLng(u: number): number;\n\n  abstract interpolateLat(u: number): number;\n\n  abstract interpolate(u: number): GeoPoint;\n\n  abstract split(u: number): [GeoCurve, GeoCurve];\n\n  abstract override project(f: GeoProjection): R2Curve;\n\n  abstract forEachCoord<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  abstract forEachCoord<R, S>(callback: (this: S, lng: number, lat: number) => R | void,\n                              thisArg: S): R | undefined;\n\n  abstract forEachCoordRest<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  abstract forEachCoordRest<R, S>(callback: (this: S, lng: number, lat: number) => R | void,\n                                  thisArg: S): R | undefined;\n\n  abstract override equals(that: unknown): boolean;\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {R2Segment} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport {GeoCurve} from \"./GeoCurve\";\n\n/** @public */\nexport type GeoSegmentLike = GeoSegment | GeoSegmentInit;\n\n/** @public */\nexport const GeoSegmentLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoSegmentLike {\n    return instance instanceof GeoSegment\n        || GeoSegmentInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface GeoSegmentInit {\n  /** @internal */\n  readonly typeid?: \"GeoSegmentInit\";\n  lng0: number;\n  lat0: number;\n  lng1: number;\n  lat1: number;\n}\n\n/** @public */\nexport const GeoSegmentInit = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoSegmentInit {\n    return Objects.hasAllKeys<GeoSegmentInit>(instance, \"lng0\", \"lat0\", \"lng1\", \"lat1\");\n  },\n};\n\n/** @public */\nexport class GeoSegment extends GeoCurve implements Interpolate<GeoSegment>, HashCode, Debug {\n  constructor(lng0: number, lat0: number, lng1: number, lat1: number) {\n    super();\n    this.lng0 = lng0;\n    this.lat0 = lat0;\n    this.lng1 = lng1;\n    this.lat1 = lat1;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoSegment\";\n\n  override likeType?(like: GeoSegmentInit): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.lng0) && isFinite(this.lat0)\n        && isFinite(this.lng1) && isFinite(this.lat1);\n  }\n\n  readonly lng0: number;\n\n  readonly lat0: number;\n\n  readonly lng1: number;\n\n  readonly lat1: number;\n\n  override get lngMin(): number {\n    return Math.min(this.lng0, this.lng1);\n  }\n\n  override get latMin(): number {\n    return Math.min(this.lat0, this.lat1);\n  }\n\n  override get lngMax(): number {\n    return Math.max(this.lng0, this.lng1);\n  }\n\n  override get latMax(): number {\n    return Math.max(this.lat0, this.lat1);\n  }\n\n  override interpolateLng(u: number): number {\n    return (1.0 - u) * this.lng0 + u * this.lng1;\n  }\n\n  override interpolateLat(u: number): number {\n   return (1.0 - u) * this.lat0 + u * this.lat1;\n  }\n\n  override interpolate(u: number): GeoPoint {\n    const v = 1.0 - u;\n    const lng01 = v * this.lng0 + u * this.lng1;\n    const lat01 = v * this.lat0 + u * this.lat1;\n    return new GeoPoint(lng01, lat01);\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(lng: number, lat: number): boolean;\n  override contains(that: GeoShapeLike | number, lat?: number): boolean {\n    if (typeof that === \"number\") {\n      return R2Segment.contains(this.lng0, this.lat0, this.lng1, this.lat1, that, lat!);\n    }\n    that = GeoShape.fromLike(that);\n    if (that instanceof GeoPoint) {\n      return this.containsPoint(that);\n    } else if (that instanceof GeoSegment) {\n      return this.containsSegment(that);\n    }\n    return false;\n  }\n\n  /** @internal */\n  containsPoint(that: GeoPoint): boolean {\n    return R2Segment.contains(this.lng0, this.lat0, this.lng1, this.lat1, that.lng, that.lat);\n  }\n\n  /** @internal */\n  containsSegment(that: GeoSegment): boolean {\n    return R2Segment.contains(this.lng0, this.lat0, this.lng1, this.lat1, that.lng0, that.lat0)\n        && R2Segment.contains(this.lng0, this.lat0, this.lng1, this.lat1, that.lng1, that.lat1);\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    that = GeoShape.fromLike(that);\n    if (that instanceof GeoPoint) {\n      return this.intersectsPoint(that);\n    } else if (that instanceof GeoSegment) {\n      return this.intersectsSegment(that);\n    } else {\n      return that.intersects(this);\n    }\n    return false;\n  }\n\n  /** @internal */\n  intersectsPoint(that: GeoPoint): boolean {\n    return R2Segment.contains(this.lng0, this.lat0, this.lng1, this.lat1, that.lng, that.lat);\n  }\n\n  /** @internal */\n  intersectsSegment(that: GeoSegment): boolean {\n    return R2Segment.intersects(this.lng0, this.lat0, this.lng1 - this.lat0, this.lng1 - this.lat0,\n                                that.lng0, that.lat0, that.lng1 - that.lat0, that.lng1 - that.lat0);\n  }\n\n  override split(u: number): [GeoSegment, GeoSegment] {\n    const v = 1.0 - u;\n    const lng01 = v * this.lng0 + u * this.lng1;\n    const lat01 = v * this.lat0 + u * this.lat1;\n    const c0 = new GeoSegment(this.lng0, this.lat0, lng01, lat01);\n    const c1 = new GeoSegment(lng01, lat01, this.lng1, this.lat1);\n    return [c0, c1];\n  }\n\n  override project(f: GeoProjection): R2Segment {\n    const p0 = f.project(this.lng0, this.lat0);\n    const p1 = f.project(this.lng1, this.lat1);\n    return new R2Segment(p0.x, p0.y, p1.x, p1.y);\n  }\n\n  override forEachCoord<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  override forEachCoord<R, S>(callback: (this: S, lng: number, lat: number) => R | void, thisArg: S): R | undefined;\n  override forEachCoord<R, S>(callback: (this: S | undefined, lng: number, lat: number) => R | undefined, thisArg?: S): R | undefined {\n    let result: R | void;\n    result = callback.call(thisArg, this.lng0, this.lat0);\n    if (result !== void 0) {\n      return result;\n    }\n    result = callback.call(thisArg, this.lng1, this.lat1);\n    if (result !== void 0) {\n      return result;\n    }\n    return void 0;\n  }\n\n  override forEachCoordRest<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  override forEachCoordRest<R, S>(callback: (this: S, lng: number, lat: number) => R | void, thisArg: S): R | undefined;\n  override forEachCoordRest<R, S>(callback: (this: S | undefined, lng: number, lat: number) => R | void, thisArg?: S): R | undefined {\n    const result = callback.call(thisArg, this.lng1, this.lat1);\n    if (result !== void 0) {\n      return result;\n    }\n    return void 0;\n  }\n\n  toLike(): GeoSegmentInit {\n    return {\n      lng0: this.lng0,\n      lat0: this.lat0,\n      lng1: this.lng1,\n      lat1: this.lat1,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: GeoSegment): Interpolator<GeoSegment>;\n  interpolateTo(that: unknown): Interpolator<GeoSegment> | null;\n  interpolateTo(that: unknown): Interpolator<GeoSegment> | null {\n    if (that instanceof GeoSegment) {\n      return GeoSegmentInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoSegment) {\n      return Numbers.equivalent(this.lng0, that.lng0, epsilon)\n          && Numbers.equivalent(this.lat0, that.lat0, epsilon)\n          && Numbers.equivalent(this.lng1, that.lng1, epsilon)\n          && Numbers.equivalent(this.lat1, that.lat1, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoSegment) {\n      return this.lng0 === that.lng0 && this.lat0 === that.lat0\n          && this.lng1 === that.lng1 && this.lat1 === that.lat1;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Constructors.hash(GeoSegment), Numbers.hash(this.lng0)), Numbers.hash(this.lat0)),\n        Numbers.hash(this.lng1)), Numbers.hash(this.lat1)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"GeoSegment\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.lng0).write(\", \").debug(this.lat0).write(\", \")\n                   .debug(this.lng1).write(\", \").debug(this.lat1).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static of(lng0: number, lat0: number, lng1: number, lat1: number): GeoSegment {\n    return new GeoSegment(lng0, lat0, lng1, lat1);\n  }\n\n  static override fromLike<T extends GeoSegmentLike | null | undefined>(value: T): GeoSegment | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoSegmentLike | null | undefined>(value: T): GeoSegment | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoSegment) {\n      return value as GeoSegment | Uninitable<T>;\n    } else if (GeoSegmentInit[Symbol.hasInstance](value)) {\n      return GeoSegment.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: GeoSegmentInit): GeoSegment {\n    return new GeoSegment(init.lng0, init.lat0, init.lng1, init.lat1);\n  }\n}\n\n/** @internal */\nexport const GeoSegmentInterpolator = (function (_super: typeof Interpolator) {\n  const GeoSegmentInterpolator = function (s0: GeoSegment, s1: GeoSegment): Interpolator<GeoSegment> {\n    const interpolator = function (u: number): GeoSegment {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const lng0 = s0.lng0 + u * (s1.lng0 - s0.lng0);\n      const lat0 = s0.lat0 + u * (s1.lat0 - s0.lat0);\n      const lng1 = s0.lng1 + u * (s1.lng1 - s0.lng1);\n      const lat1 = s0.lat1 + u * (s1.lat1 - s0.lat1);\n      return new GeoSegment(lng0, lat0, lng1, lat1);\n    } as Interpolator<GeoSegment>;\n    Object.setPrototypeOf(interpolator, GeoSegmentInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: GeoSegment, s1: GeoSegment): Interpolator<GeoSegment>;\n\n    /** @internal */\n    prototype: Interpolator<GeoSegment>;\n  };\n\n  GeoSegmentInterpolator.prototype = Object.create(_super.prototype);\n  GeoSegmentInterpolator.prototype.constructor = GeoSegmentInterpolator;\n\n  return GeoSegmentInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Curve} from \"@swim/math\";\nimport {R2Segment} from \"@swim/math\";\nimport {R2Spline} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoPointLike} from \"./GeoPoint\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport type {GeoCurveContext} from \"./GeoCurve\";\nimport {GeoCurve} from \"./GeoCurve\";\nimport {GeoSegment} from \"./GeoSegment\";\nimport {GeoBox} from \"./\"; // forward import\n\n/** @public */\nexport interface GeoSplineContext extends GeoCurveContext {\n  closePath(): void;\n}\n\n/** @public */\nexport type GeoSplineLike = GeoSpline | GeoSplinePoints;\n\n/** @public */\nexport const GeoSplineLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoSplineLike {\n    return instance instanceof GeoSpline\n        || GeoSplinePoints[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport type GeoSplinePoints = readonly GeoPointLike[];\n\n/** @public */\nexport const GeoSplinePoints = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoSplinePoints {\n    return Array.isArray(instance) && instance.length >= 2\n        && GeoPointLike[Symbol.hasInstance](instance[0]!);\n  },\n};\n\n/** @public */\nexport class GeoSpline extends GeoCurve implements Debug {\n  constructor(curves: readonly GeoCurve[], closed: boolean) {\n    super();\n    this.curves = curves;\n    this.closed = closed;\n    this.boundingBox = null;\n  }\n\n  override likeType?(like: GeoSplinePoints): void;\n\n  readonly curves: readonly GeoCurve[];\n\n  /** @internal */\n  readonly closed: boolean;\n\n  override isDefined(): boolean {\n    return this.curves.length !== 0;\n  }\n\n  isClosed(): boolean {\n    return this.closed;\n  }\n\n  override get lngMin(): number {\n    return this.bounds.lngMin;\n  }\n\n  override get latMin(): number {\n    return this.bounds.latMin;\n  }\n\n  override get lngMax(): number {\n    return this.bounds.lngMax;\n  }\n\n  override get latMax(): number {\n    return this.bounds.latMax;\n  }\n\n  override interpolateLng(u: number): number {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return curves[k]!.interpolateLng(v);\n  }\n\n  override interpolateLat(u: number): number {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return curves[k]!.interpolateLat(v);\n  }\n\n  override interpolate(u: number): GeoPoint {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return GeoPoint.undefined();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return curves[k]!.interpolate(v);\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(lng: number, lat: number): boolean;\n  override contains(that: GeoShapeLike | number, lat?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override split(u: number): [GeoSpline, GeoSpline] {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return [GeoSpline.empty(), GeoSpline.empty()];\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const [c0, c1] = curves[k]!.split(v);\n    const curves0 = new Array<GeoCurve>(k + 1);\n    const curves1 = new Array<GeoCurve>(n - k);\n    for (let i = 0; i < k; i += 1) {\n      curves0[i] = curves[i]!;\n    }\n    curves0[k] = c0;\n    curves1[0] = c1;\n    for (let i = k + 1; i < n; i += 1) {\n      curves1[i - k] = curves[i]!;\n    }\n    return [new GeoSpline(curves0, false), new GeoSpline(curves1, false)];\n  }\n\n  subdivide(u: number): GeoSpline {\n    const oldCurves = this.curves;\n    const n = oldCurves.length;\n    if (n === 0) {\n      return GeoSpline.empty();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const [c0, c1] = oldCurves[k]!.split(v);\n    const newCurves = new Array<GeoCurve>(n + 1);\n    for (let i = 0; i < k; i += 1) {\n      newCurves[i] = oldCurves[i]!;\n    }\n    newCurves[k] = c0;\n    newCurves[k + 1] = c1;\n    for (let i = k + 1; i < n; i += 1) {\n      newCurves[i + 1] = oldCurves[i]!;\n    }\n    return new GeoSpline(newCurves, this.closed);\n  }\n\n  override project(f: GeoProjection): R2Spline {\n    const oldCurves = this.curves;\n    const n = oldCurves.length;\n    if (n === 0) {\n      return R2Spline.empty();\n    }\n\n    let i = 0;\n    const newCurves = new Array<R2Curve>(n);\n\n    // project leading adjacent segments\n    let curve = oldCurves[0]!;\n    if (curve instanceof GeoSegment) {\n      // project first point\n      let p0 = f.project(curve.lng0, curve.lat0);\n      while (i < n) {\n        curve = oldCurves[i]!;\n        if (!(curve instanceof GeoSegment)) {\n          break;\n        }\n        // project next point\n        const p1 = f.project(curve.lng1, curve.lat1);\n        newCurves[i] = new R2Segment(p0.x, p0.y, p1.x, p1.y);\n        p0 = p1;\n        i += 1;\n      }\n    }\n\n    // project any remaining curves\n    while (i < n) {\n      curve = oldCurves[i]!;\n      newCurves[i] = curve.project(f);\n      i += 1;\n    }\n\n    return new R2Spline(newCurves, this.closed);\n  }\n\n  /** @internal */\n  readonly boundingBox: GeoBox | null;\n\n  override get bounds(): GeoBox {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let lngMin = Infinity;\n      let latMin = Infinity;\n      let lngMax = -Infinity;\n      let latMax = -Infinity;\n      const curves = this.curves;\n      for (let i = 0; i < curves.length; i += 1) {\n        const curve = curves[i]!;\n        lngMin = Math.min(lngMin, curve.lngMin);\n        latMin = Math.min(latMin, curve.latMin);\n        lngMax = Math.max(curve.lngMax, lngMax);\n        latMax = Math.max(curve.latMax, latMax);\n      }\n      boundingBox = new GeoBox(lngMin, latMin, lngMax, latMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  override forEachCoord<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  override forEachCoord<R, S>(callback: (this: S, lng: number, lat: number) => R | void, thisArg: S): R | undefined;\n  override forEachCoord<R, S>(callback: (this: S | undefined, lng: number, lat: number) => R | void, thisArg?: S): R | undefined {\n    const curves = this.curves;\n    const n = curves.length;\n    if (n === 0) {\n      return void 0;\n    }\n    let curve = curves[0]!;\n    let result = curve.forEachCoord(callback, thisArg);\n    if (result !== void 0) {\n      return result;\n    }\n    for (let i = 1; i < n; i += 1) {\n      curve = curves[i]!;\n      result = curve.forEachCoordRest(callback, thisArg);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override forEachCoordRest<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  override forEachCoordRest<R, S>(callback: (this: S, lng: number, lat: number) => R | void, thisArg: S): R | undefined;\n  override forEachCoordRest<R, S>(callback: (this: S | undefined, lng: number, lat: number) => R | void, thisArg?: S): R | undefined {\n    const curves = this.curves;\n    for (let i = 0; i < curves.length; i += 1) {\n      const curve = curves[i]!;\n      const result = curve.forEachCoordRest(callback, thisArg);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoSpline) {\n      return Arrays.equivalent(this.curves, that.curves, epsilon)\n          && this.closed === that.closed;\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoSpline) {\n      return Arrays.equal(this.curves, that.curves)\n          && this.closed === that.closed;\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const curves = this.curves;\n    const n = curves.length;\n    output = output.write(\"GeoSpline\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else if (n !== 0) {\n      output = output.write(this.closed ? \"closed\" : \"open\").write(40/*'('*/);\n      output = output.debug(curves[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(curves[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static builder(): GeoSplineBuilder {\n    return new GeoSplineBuilder();\n  }\n\n  @Lazy\n  static empty(): GeoSpline {\n    return new GeoSpline(Arrays.empty(), false);\n  }\n\n  static open(...curves: GeoCurve[]): GeoSpline {\n    return new GeoSpline(curves, false);\n  }\n\n  static closed(...curves: GeoCurve[]): GeoSpline {\n    return new GeoSpline(curves, true);\n  }\n\n  static override fromLike<T extends GeoSplineLike | null | undefined>(value: T): GeoSpline | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoSplineLike | null | undefined>(value: T): GeoSpline | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoSpline) {\n      return value as GeoSpline | Uninitable<T>;\n    } else if (GeoSplinePoints[Symbol.hasInstance](value)) {\n      return GeoSpline.fromPoints(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromPoints(points: GeoSplinePoints): GeoSpline {\n    const n = points.length;\n    if (n === 0 || n === 1) {\n      return GeoSpline.empty();\n    }\n    const curves = new Array<GeoCurve>(n - 1);\n    const p0 = GeoPoint.fromLike(points[0]!);\n    let p1 = p0;\n    for (let i = 1; i < n; i += 1) {\n      const p2 = GeoPoint.fromLike(points[i]!);\n      curves[i - 1] = new GeoSegment(p1.lng, p1.lat, p2.lng, p2.lat);\n      p1 = p2;\n    }\n    const closed = p0.equals(p1);\n    return new GeoSpline(curves, closed);\n  }\n}\n\n/** @public */\nexport class GeoSplineBuilder implements GeoSplineContext {\n  /** @internal */\n  curves: GeoCurve[];\n  /** @internal */\n  closed: boolean;\n  /** @internal */\n  aliased: boolean;\n  /** @internal */\n  lng0: number;\n  /** @internal */\n  lat0: number;\n  /** @internal */\n  lng: number;\n  /** @internal */\n  lat: number;\n\n  constructor() {\n    this.curves = [];\n    this.closed = false;\n    this.aliased = false;\n    this.lng0 = 0;\n    this.lat0 = 0;\n    this.lng = 0;\n    this.lat = 0;\n  }\n\n  private dealias(): void {\n    if (!this.aliased) {\n      return;\n    }\n    this.curves = this.curves.slice(0);\n    this.aliased = false;\n  }\n\n  moveTo(lng: number, lat: number): void {\n    if (this.aliased) {\n      this.curves = [];\n      this.aliased = false;\n    } else {\n      this.curves.length = 0;\n    }\n    this.closed = false;\n    this.lng0 = lng;\n    this.lat0 = lat;\n    this.lng = lng;\n    this.lat = lat;\n  }\n\n  closePath(): void {\n    this.dealias();\n    this.curves.push(new GeoSegment(this.lng, this.lat, this.lng0, this.lat0));\n    this.closed = true;\n    this.lng = this.lng0;\n    this.lat = this.lat0;\n  }\n\n  lineTo(lng: number, lat: number): void {\n    this.dealias();\n    this.curves.push(new GeoSegment(this.lng, this.lat, lng, lat));\n    this.lng = lng;\n    this.lat = lat;\n  }\n\n  build(): GeoSpline {\n    this.aliased = true;\n    return new GeoSpline(this.curves, this.closed);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Spline} from \"@swim/math\";\nimport {R2Path} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport type {GeoCurve} from \"./GeoCurve\";\nimport type {GeoSplineContext} from \"./GeoSpline\";\nimport {GeoSplineLike} from \"./GeoSpline\";\nimport {GeoSplinePoints} from \"./GeoSpline\";\nimport {GeoSplineBuilder} from \"./GeoSpline\";\nimport {GeoSpline} from \"./GeoSpline\";\nimport {GeoBox} from \"./\"; // forward import\n\n/** @public */\nexport interface GeoPathContext extends GeoSplineContext {\n}\n\n/** @public */\nexport type GeoPathLike = GeoPath | GeoPathSplines | GeoSplinePoints;\n\n/** @public */\nexport const GeoPathLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoPathLike {\n    return instance instanceof GeoPath\n        || GeoPathSplines[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport const GeoPathSplines = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoPathSplines {\n    return Array.isArray(instance) && instance.length !== 0\n        && GeoSplinePoints[Symbol.hasInstance](instance[0]!);\n  },\n};\n\n/** @public */\nexport type GeoPathSplines = readonly GeoSplineLike[];\n\n/** @public */\nexport class GeoPath extends GeoShape implements Debug {\n  constructor(splines: readonly GeoSpline[]) {\n    super();\n    this.splines = splines;\n    this.boundingBox = null;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoPath\";\n\n  override likeType?(like: GeoPathSplines | GeoSplinePoints): void;\n\n  override isDefined(): boolean {\n    return this.splines.length !== 0;\n  }\n\n  isClosed(): boolean {\n    const splines = this.splines;\n    if (splines.length === 0) {\n      return false;\n    }\n    for (let i = 0; i < splines.length; i += 1) {\n      const spline = splines[i]!;\n      if (!spline.isClosed()) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  readonly splines: readonly GeoSpline[];\n\n  override get lngMin(): number {\n    return this.bounds.lngMin;\n  }\n\n  override get latMin(): number {\n    return this.bounds.latMin;\n  }\n\n  override get lngMax(): number {\n    return this.bounds.lngMax;\n  }\n\n  override get latMax(): number {\n    return this.bounds.latMax;\n  }\n\n  interpolateLng(u: number): number {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolateLng(v);\n  }\n\n  interpolateLat(u: number): number {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return NaN;\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolateLat(v);\n  }\n\n  interpolate(u: number): GeoPoint {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return GeoPoint.undefined();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    return splines[k]!.interpolate(v);\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: GeoShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    return false; // TODO\n  }\n\n  split(u: number): [GeoPath, GeoPath] {\n    const splines = this.splines;\n    const n = splines.length;\n    if (n === 0) {\n      return [GeoPath.empty(), GeoPath.empty()];\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const [s0, s1] = splines[k]!.split(v);\n    const splines0 = new Array<GeoSpline>(k + 1);\n    const splines1 = new Array<GeoSpline>(n - k);\n    for (let i = 0; i < k; i += 1) {\n      splines0[i] = splines[i]!;\n    }\n    splines0[k] = s0;\n    splines1[0] = s1;\n    for (let i = k + 1; i < n; i += 1) {\n      splines1[i - k] = splines[i]!;\n    }\n    return [new GeoPath(splines0), new GeoPath(splines1)];\n  }\n\n  subdivide(u: number): GeoPath {\n    const oldSplines = this.splines;\n    const n = oldSplines.length;\n    if (n === 0) {\n      return GeoPath.empty();\n    }\n    const l = 1 / n;\n    const k = Math.min(Math.max(0, Math.floor(u / l)), n);\n    const v = u * n - k * l;\n    const newSplines = new Array<GeoSpline>(n);\n    for (let i = 0; i < k; i += 1) {\n      newSplines[i] = oldSplines[i]!;\n    }\n    newSplines[k] = oldSplines[k]!.subdivide(v);\n    for (let i = k + 1; i < n; i += 1) {\n      newSplines[i] = oldSplines[i]!;\n    }\n    return new GeoPath(newSplines);\n  }\n\n  override project(f: GeoProjection): R2Path {\n    const oldSplines = this.splines;\n    const n = oldSplines.length;\n    if (n === 0) {\n      return R2Path.empty();\n    }\n    const newSplines = new Array<R2Spline>(n);\n    for (let i = 0; i < n; i += 1) {\n      newSplines[i] = oldSplines[i]!.project(f);\n    }\n    return new R2Path(newSplines);\n  }\n\n  /** @internal */\n  readonly boundingBox: GeoBox | null;\n\n  override get bounds(): GeoBox {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let lngMin = Infinity;\n      let latMin = Infinity;\n      let lngMax = -Infinity;\n      let latMax = -Infinity;\n      const splines = this.splines;\n      for (let i = 0; i < splines.length; i += 1) {\n        const spline = splines[i]!;\n        lngMin = Math.min(lngMin, spline.lngMin);\n        latMin = Math.min(latMin, spline.latMin);\n        lngMax = Math.max(spline.lngMax, lngMax);\n        latMax = Math.max(spline.latMax, latMax);\n      }\n      boundingBox = new GeoBox(lngMin, latMin, lngMax, latMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  centroid(): GeoPoint {\n    let lngSum = 0;\n    let latSum = 0;\n    let n = 0;\n    this.forEachCoord(function (lng: number, lat: number): void {\n      lngSum += lng;\n      latSum += lat;\n      n += 1;\n    }, this);\n    if (n === 0) {\n      return GeoPoint.undefined();\n    }\n    return new GeoPoint(lngSum / n, latSum / n);\n  }\n\n  forEachCoord<R>(callback: (lng: number, lat: number) => R | void): R | undefined;\n  forEachCoord<R, S>(callback: (this: S, lng: number, lat: number) => R | void, thisArg: S): R | undefined;\n  forEachCoord<R, S>(callback: (this: S | undefined, lng: number, lat: number) => R | void, thisArg?: S): R | undefined {\n    const splines = this.splines;\n    for (let i = 0; i < splines.length; i += 1) {\n      const spline = splines[i]!;\n      const result = spline.forEachCoord(callback, thisArg);\n      if (result !== void 0) {\n        return result;\n      }\n    }\n    return void 0;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoPath) {\n      return Arrays.equivalent(this.splines, that.splines, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoPath) {\n      return Arrays.equal(this.splines, that.splines);\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const splines = this.splines;\n    const n = splines.length;\n    output = output.write(\"GeoPath\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else if (n === 1) {\n      const spline = splines[0]!;\n      output = output.write(spline.closed ? \"closed\" : \"open\").write(40/*'('*/);\n      const curves = spline.curves;\n      const m = curves.length;\n      if (m !== 0) {\n        output = output.debug(curves[0]!);\n        for (let i = 1; i < m; i += 1) {\n          output = output.write(\", \").debug(curves[i]!);\n        }\n      }\n    } else {\n      output = output.write(\"of\").write(40/*'('*/);\n      output = output.debug(splines[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(splines[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  static builder(): GeoPathBuilder {\n    return new GeoPathBuilder();\n  }\n\n  @Lazy\n  static empty(): GeoPath {\n    return new GeoPath(Arrays.empty());\n  }\n\n  static of(...splines: GeoSpline[]): GeoPath {\n    return new GeoPath(splines);\n  }\n\n  static open(...curves: GeoCurve[]): GeoPath {\n    return new GeoPath([new GeoSpline(curves, false)]);\n  }\n\n  static closed(...curves: GeoCurve[]): GeoPath {\n    return new GeoPath([new GeoSpline(curves, true)]);\n  }\n\n  static override fromLike<T extends GeoPathLike | null | undefined>(value: T): GeoPath | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoPathLike | null | undefined>(value: T): GeoPath | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoPath) {\n      return value as GeoPath | Uninitable<T>;\n    } else if (GeoPathSplines[Symbol.hasInstance](value)) {\n      return GeoPath.fromSplines(value);\n    } else if (GeoSplineLike[Symbol.hasInstance](value)) {\n      return GeoPath.of(GeoSpline.fromLike(value as GeoSplineLike));\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromSplines(values: GeoPathSplines): GeoPath {\n    const n = values.length;\n    const splines = new Array<GeoSpline>(n);\n    for (let i = 0; i < n; i += 1) {\n      splines[i] = GeoSpline.fromLike(values[i]!);\n    }\n    return new GeoPath(splines);\n  }\n\n  static fromPoints(points: GeoSplinePoints): GeoPath {\n    return new GeoPath([GeoSpline.fromPoints(points)]);\n  }\n}\n\n/** @public */\nexport class GeoPathBuilder implements GeoPathContext {\n  /** @internal */\n  splines: GeoSpline[];\n  /** @internal */\n  builder: GeoSplineBuilder | null;\n\n  constructor() {\n    this.splines = [];\n    this.builder = null;\n  }\n\n  moveTo(lng: number, lat: number): void {\n    let builder = this.builder;\n    if (builder !== null) {\n      const spline = builder.build();\n      if (spline.isDefined()) {\n        this.splines.push(spline);\n      }\n    }\n    builder = new GeoSplineBuilder();\n    this.builder = builder;\n    builder.moveTo(lng, lat);\n  }\n\n  closePath(): void {\n    const builder = this.builder;\n    if (builder === null) {\n      throw new Error();\n    }\n    builder.closePath();\n  }\n\n  lineTo(lng: number, lat: number): void {\n    const builder = this.builder;\n    if (builder === null) {\n      throw new Error();\n    }\n    builder.lineTo(lng, lat);\n  }\n\n  build(): GeoPath {\n    const splines = this.splines.slice(0);\n    const builder = this.builder;\n    if (builder !== null) {\n      const spline = builder.build();\n      if (spline.isDefined()) {\n        splines.push(spline);\n      }\n    }\n    return new GeoPath(splines);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {R2Box} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\nimport {GeoPointLike} from \"./GeoPoint\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport {GeoSegmentLike} from \"./GeoSegment\";\nimport {GeoSegment} from \"./GeoSegment\";\nimport {GeoBoxLike} from \"./\"; // forward import\nimport {GeoBox} from \"./\"; // forward import\n\n/** @public */\nexport type GeoTileLike = GeoTile | GeoTileInit | GeoTileTuple;\n\n/** @public */\nexport const GeoTileLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoTileLike {\n    return instance instanceof GeoTile\n        || GeoTileInit[Symbol.hasInstance](instance)\n        || GeoTileTuple[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface GeoTileInit {\n  /** @internal */\n  readonly typeid?: \"GeoTileInit\";\n  x: number;\n  y: number;\n  z: number;\n}\n\n/** @public */\nexport const GeoTileInit = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoTileInit {\n    return Objects.hasAllKeys<GeoTileInit>(instance, \"x\", \"y\", \"z\");\n  },\n};\n\n/** @public */\nexport type GeoTileTuple = [number, number, number];\n\n/** @public */\nexport const GeoTileTuple = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoTileTuple {\n    return Array.isArray(instance) && instance.length === 3;\n  },\n};\n\n/** @public */\nexport class GeoTile extends GeoShape implements HashCode, Debug {\n  constructor(x: number, y: number, z: number) {\n    super();\n    this.x = x;\n    this.y = y;\n    this.z = z;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoTile\";\n\n  override likeType?(like: GeoTileInit | GeoTileTuple): void;\n\n  override isDefined(): boolean {\n    return true;\n  }\n\n  readonly x: number;\n\n  readonly y: number;\n\n  readonly z: number;\n\n  override get lngMin(): number {\n    return GeoTile.unprojectX(this.x / (1 << this.z));\n  }\n\n  override get latMin(): number {\n    return GeoTile.unprojectY(this.y / (1 << this.z));\n  }\n\n  override get lngMax(): number {\n    return GeoTile.unprojectX((this.x + 1) / (1 << this.z));\n  }\n\n  override get latMax(): number {\n    return GeoTile.unprojectY((this.y + 1) / (1 << this.z));\n  }\n\n  get west(): number {\n    return this.lngMin;\n  }\n\n  get south(): number {\n    return this.latMin;\n  }\n\n  get east(): number {\n    return this.lngMax;\n  }\n\n  get north(): number {\n    return this.latMax;\n  }\n\n  get southWest(): GeoPoint {\n    return new GeoPoint(this.lngMin, this.latMin);\n  }\n\n  get northWest(): GeoPoint {\n    return new GeoPoint(this.lngMin, this.latMax);\n  }\n\n  get southEast(): GeoPoint {\n    return new GeoPoint(this.lngMax, this.latMin);\n  }\n\n  get northEast(): GeoPoint {\n    return new GeoPoint(this.lngMax, this.latMax);\n  }\n\n  get center(): GeoPoint {\n    return new GeoPoint((this.lngMin + this.lngMax) / 2,\n                        (this.latMin + this.latMax) / 2);\n  }\n\n  get southWestTile(): GeoTile {\n    return new GeoTile(this.x * 2, this.y * 2, this.z + 1);\n  }\n\n  get northWestTile(): GeoTile {\n    return new GeoTile(this.x * 2, this.y * 2 + 1, this.z + 1);\n  }\n\n  get southEastTile(): GeoTile {\n    return new GeoTile(this.x * 2 + 1, this.y * 2, this.z + 1);\n  }\n\n  get northEastTile(): GeoTile {\n    return new GeoTile(this.x * 2 + 1, this.y * 2 + 1, this.z + 1);\n  }\n\n  get parentTile(): GeoTile {\n    return new GeoTile(this.x >> 1, this.y >> 1, this.z - 1);\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(lng: number, lat: number): boolean;\n  override contains(that: GeoShapeLike | number, lat?: number): boolean {\n    if (typeof that === \"number\") {\n      return this.lngMin <= that && that <= this.lngMax\n          && this.latMin <= lat! && lat! <= this.latMax;\n    } else if (GeoPointLike[Symbol.hasInstance](that)) {\n      return this.containsPoint(GeoPoint.fromLike(that));\n    } else if (GeoSegmentLike[Symbol.hasInstance](that)) {\n      return this.containsSegment(GeoSegment.fromLike(that));\n    } else if (GeoTileLike[Symbol.hasInstance](that)) {\n      return this.containsTile(GeoTile.fromLike(that));\n    } else if (GeoBoxLike[Symbol.hasInstance](that)) {\n      return this.containsBox(GeoBox.fromLike(that));\n    }\n    throw new TypeError(\"\" + that);\n  }\n\n  /** @internal */\n  containsPoint(that: GeoPoint): boolean {\n    return this.lngMin <= that.lng && that.lng <= this.lngMax\n        && this.latMin <= that.lat && that.lat <= this.latMax;\n  }\n\n  /** @internal */\n  containsSegment(that: GeoSegment): boolean {\n    return this.lngMin <= that.lng0 && that.lng0 <= this.lngMax\n        && this.latMin <= that.lat0 && that.lat0 <= this.latMax\n        && this.lngMin <= that.lng1 && that.lng1 <= this.lngMax\n        && this.latMin <= that.lat1 && that.lat1 <= this.latMax;\n  }\n\n  /** @internal */\n  containsTile(that: GeoTile): boolean {\n    return this.lngMin <= that.lngMin && that.lngMax <= this.lngMax\n        && this.latMin <= that.latMin && that.latMax <= this.latMax;\n  }\n\n  /** @internal */\n  containsBox(that: GeoBox): boolean {\n    return this.lngMin <= that.lngMin && that.lngMax <= this.lngMax\n        && this.latMin <= that.latMin && that.latMax <= this.latMax;\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    if (GeoPointLike[Symbol.hasInstance](that)) {\n      return this.intersectsPoint(GeoPoint.fromLike(that));\n    } else if (GeoSegmentLike[Symbol.hasInstance](that)) {\n      return this.intersectsSegment(GeoSegment.fromLike(that));\n    } else if (GeoTileLike[Symbol.hasInstance](that)) {\n      return this.intersectsTile(GeoTile.fromLike(that));\n    } else if (GeoBoxLike[Symbol.hasInstance](that)) {\n      return this.intersectsBox(GeoBox.fromLike(that));\n    }\n    throw new TypeError(\"\" + that);\n  }\n\n  /** @internal */\n  intersectsPoint(that: GeoPoint): boolean {\n    return this.lngMin <= that.lng && that.lng <= this.lngMax\n        && this.latMin <= that.lat && that.lat <= this.latMax;\n  }\n\n  /** @internal */\n  intersectsSegment(that: GeoSegment): boolean {\n    const lngMin = this.lngMin;\n    const latMin = this.latMin;\n    const lngMax = this.lngMax;\n    const latMax = this.latMax;\n    const lng0 = that.lng0;\n    const lat0 = that.lat0;\n    const lng1 = that.lng1;\n    const lat1 = that.lat1;\n    if (lng0 < lngMin && lng1 < lngMin || lng0 > lngMax && lng1 > lngMax ||\n        lat0 < latMin && lat1 < latMin || lat0 > latMax && lat1 > latMax) {\n      return false;\n    } else if (lng0 > lngMin && lng0 < lngMax && lat0 > latMin && lat0 < latMax) {\n      return true;\n    } else if ((R2Box.intersectsSegment(lng0 - lngMin, lng1 - lngMin, lng0, lat0, lng1, lat1) && R2Box.hitY > latMin && R2Box.hitY < latMax)\n            || (R2Box.intersectsSegment(lat0 - latMin, lat1 - latMin, lng0, lat0, lng1, lat1) && R2Box.hitX > lngMin && R2Box.hitX < lngMax)\n            || (R2Box.intersectsSegment(lng0 - lngMax, lng1 - lngMax, lng0, lat0, lng1, lat1) && R2Box.hitY > latMin && R2Box.hitY < latMax)\n            || (R2Box.intersectsSegment(lat0 - latMax, lat1 - latMax, lng0, lat0, lng1, lat1) && R2Box.hitX > lngMin && R2Box.hitX < lngMax)) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @internal */\n  intersectsTile(that: GeoTile): boolean {\n    return this.lngMin <= that.lngMax && that.lngMin <= this.lngMax\n        && this.latMin <= that.latMax && that.latMin <= this.latMax;\n  }\n\n  /** @internal */\n  intersectsBox(that: GeoBox): boolean {\n    return this.lngMin <= that.lngMax && that.lngMin <= this.lngMax\n        && this.latMin <= that.latMax && that.latMin <= this.latMax;\n  }\n\n  override project(f: GeoProjection): R2Box {\n    const bottomLeft = f.project(this.lngMin, this.latMin);\n    const topRight = f.project(this.lngMax, this.latMax);\n    let xMin = bottomLeft.x;\n    let yMin = bottomLeft.y;\n    let xMax = topRight.x;\n    let yMax = topRight.y;\n    if (xMin > xMax) {\n      const x = xMin;\n      xMin = xMax;\n      xMax = x;\n    }\n    if (yMin > yMax) {\n      const y = yMin;\n      yMin = yMax;\n      yMax = y;\n    }\n    if (!isFinite(xMin)) {\n      xMin = -Infinity;\n    }\n    if (!isFinite(yMin)) {\n      yMin = -Infinity;\n    }\n    if (!isFinite(xMax)) {\n      xMax = Infinity;\n    }\n    if (!isFinite(yMax)) {\n      yMax = Infinity;\n    }\n    return new R2Box(xMin, yMin, xMax, yMax);\n  }\n\n  toLike(): GeoTileInit {\n    return {\n      x: this.x,\n      y: this.y,\n      z: this.z,\n    };\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoTile) {\n      return Numbers.equivalent(this.x, that.x, epsilon)\n          && Numbers.equivalent(this.y, that.y, epsilon)\n          && Numbers.equivalent(this.z, that.z, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoTile) {\n      return this.x === that.x && this.y === that.y && this.z === that.z;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Constructors.hash(GeoTile),\n        Numbers.hash(this.x)), Numbers.hash(this.y)), Numbers.hash(this.z)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"GeoTile\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.x).write(\", \").debug(this.y).write(\", \")\n                   .debug(this.z).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static root(): GeoTile {\n    return new GeoTile(0, 0, 0);\n  }\n\n  static of(x: number, y: number, z: number): GeoTile {\n    return new GeoTile(x, y, z);\n  }\n\n  static override fromLike<T extends GeoTileLike | null | undefined>(value: T): GeoTile | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoTileLike | null | undefined>(value: T): GeoTile | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoTile) {\n      return value as GeoTile | Uninitable<T>;\n    } else if (GeoTileInit[Symbol.hasInstance](value)) {\n      return GeoTile.fromInit(value);\n    } else if (GeoTileTuple[Symbol.hasInstance](value)) {\n      return GeoTile.fromTuple(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: GeoTileInit): GeoTile {\n    return new GeoTile(init.x, init.y, init.z);\n  }\n\n  static fromTuple(tuple: GeoTileTuple): GeoTile {\n    return new GeoTile(tuple[0], tuple[1], tuple[2]);\n  }\n\n  /** @internal */\n  static unprojectX(x: number): number {\n    return (x * Math.PI * 2 - Math.PI) * (180 / Math.PI);\n  }\n\n  /** @internal */\n  static unprojectY(y: number): number {\n    return (Math.atan(Math.exp(y * Math.PI * 2 - Math.PI)) * 2 - Math.PI / 2) * (180 / Math.PI);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport {R2Box} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\nimport {GeoPointLike} from \"./GeoPoint\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport {GeoSegmentLike} from \"./GeoSegment\";\nimport {GeoSegment} from \"./GeoSegment\";\nimport {GeoTileLike} from \"./GeoTile\";\nimport {GeoTile} from \"./GeoTile\";\n\n/** @public */\nexport type GeoBoxLike = GeoBox | GeoBoxInit;\n\n/** @public */\nexport const GeoBoxLike = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoBoxLike {\n    return instance instanceof GeoBox\n        || GeoBoxInit[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface GeoBoxInit {\n  /** @internal */\n  readonly typeid?: \"GeoBoxInit\";\n  lngMin: number;\n  latMin: number;\n  lngMax: number;\n  latMax: number;\n}\n\n/** @public */\nexport const GeoBoxInit = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoBoxInit {\n    return Objects.hasAllKeys<GeoBoxInit>(instance, \"lngMin\", \"latMin\", \"lngMax\", \"latMax\");\n  },\n};\n\n/** @public */\nexport class GeoBox extends GeoShape implements Interpolate<GeoBox>, HashCode, Debug {\n  constructor(lngMin: number, latMin: number, lngMax: number, latMax: number) {\n    super();\n    this.lngMin = lngMin;\n    this.latMin = latMin;\n    this.lngMax = lngMax;\n    this.latMax = latMax;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoBox\";\n\n  override likeType?(like: GeoBoxInit): void;\n\n  override isDefined(): boolean {\n    return isFinite(this.lngMin) && isFinite(this.latMin)\n        && isFinite(this.lngMax) && isFinite(this.latMax);\n  }\n\n  readonly lngMin: number;\n\n  readonly latMin: number;\n\n  readonly lngMax: number;\n\n  readonly latMax: number;\n\n  get west(): number {\n    return this.lngMin;\n  }\n\n  get south(): number {\n    return this.latMin;\n  }\n\n  get east(): number {\n    return this.lngMax;\n  }\n\n  get north(): number {\n    return this.latMax;\n  }\n\n  get southWest(): GeoPoint {\n    return new GeoPoint(this.lngMin, this.latMin);\n  }\n\n  get northWest(): GeoPoint {\n    return new GeoPoint(this.lngMin, this.latMax);\n  }\n\n  get southEast(): GeoPoint {\n    return new GeoPoint(this.lngMax, this.latMin);\n  }\n\n  get northEast(): GeoPoint {\n    return new GeoPoint(this.lngMax, this.latMax);\n  }\n\n  get center(): GeoPoint {\n    return new GeoPoint((this.lngMin + this.lngMax) / 2,\n                        (this.latMin + this.latMax) / 2);\n  }\n\n  override contains(that: GeoPointLike | GeoBoxLike): boolean;\n  override contains(lng: number, lat: number): boolean;\n  override contains(that: GeoPointLike | GeoBoxLike | number, y?: number): boolean {\n    if (typeof that === \"number\") {\n      return this.lngMin <= that && that <= this.lngMax\n          && this.latMin <= y! && y! <= this.latMax;\n    } else if (GeoPointLike[Symbol.hasInstance](that)) {\n      return this.containsPoint(GeoPoint.fromLike(that));\n    } else if (GeoSegmentLike[Symbol.hasInstance](that)) {\n      return this.containsSegment(GeoSegment.fromLike(that));\n    } else if (GeoTileLike[Symbol.hasInstance](that)) {\n      return this.containsTile(GeoTile.fromLike(that));\n    } else if (GeoBoxLike[Symbol.hasInstance](that)) {\n      return this.containsBox(GeoBox.fromLike(that));\n    }\n    throw new TypeError(\"\" + that);\n  }\n\n  /** @internal */\n  containsPoint(that: GeoPoint): boolean {\n    return this.lngMin <= that.lng && that.lng <= this.lngMax\n        && this.latMin <= that.lat && that.lat <= this.latMax;\n  }\n\n  /** @internal */\n  containsSegment(that: GeoSegment): boolean {\n    return this.lngMin <= that.lng0 && that.lng0 <= this.lngMax\n        && this.latMin <= that.lat0 && that.lat0 <= this.latMax\n        && this.lngMin <= that.lng1 && that.lng1 <= this.lngMax\n        && this.latMin <= that.lat1 && that.lat1 <= this.latMax;\n  }\n\n  /** @internal */\n  containsTile(that: GeoTile): boolean {\n    return this.lngMin <= that.lngMin && that.lngMax <= this.lngMax\n        && this.latMin <= that.latMin && that.latMax <= this.latMax;\n  }\n\n  /** @internal */\n  containsBox(that: GeoBox): boolean {\n    return this.lngMin <= that.lngMin && that.lngMax <= this.lngMax\n        && this.latMin <= that.latMin && that.latMax <= this.latMax;\n  }\n\n  override intersects(that: GeoPointLike | GeoBoxLike): boolean {\n    if (GeoPointLike[Symbol.hasInstance](that)) {\n      return this.intersectsPoint(GeoPoint.fromLike(that));\n    } else if (GeoSegmentLike[Symbol.hasInstance](that)) {\n      return this.intersectsSegment(GeoSegment.fromLike(that));\n    } else if (GeoTileLike[Symbol.hasInstance](that)) {\n      return this.intersectsTile(GeoTile.fromLike(that));\n    } else if (GeoBoxLike[Symbol.hasInstance](that)) {\n      return this.intersectsBox(GeoBox.fromLike(that));\n    }\n    throw new TypeError(\"\" + that);\n  }\n\n  /** @internal */\n  intersectsPoint(that: GeoPoint): boolean {\n    return this.lngMin <= that.lng && that.lng <= this.lngMax\n        && this.latMin <= that.lat && that.lat <= this.latMax;\n  }\n\n  /** @internal */\n  intersectsSegment(that: GeoSegment): boolean {\n    const lngMin = this.lngMin;\n    const latMin = this.latMin;\n    const lngMax = this.lngMax;\n    const latMax = this.latMax;\n    const lng0 = that.lng0;\n    const lat0 = that.lat0;\n    const lng1 = that.lng1;\n    const lat1 = that.lat1;\n    if (lng0 < lngMin && lng1 < lngMin || lng0 > lngMax && lng1 > lngMax ||\n        lat0 < latMin && lat1 < latMin || lat0 > latMax && lat1 > latMax) {\n      return false;\n    } else if (lng0 > lngMin && lng0 < lngMax && lat0 > latMin && lat0 < latMax) {\n      return true;\n    } else if ((R2Box.intersectsSegment(lng0 - lngMin, lng1 - lngMin, lng0, lat0, lng1, lat1) && R2Box.hitY > latMin && R2Box.hitY < latMax)\n            || (R2Box.intersectsSegment(lat0 - latMin, lat1 - latMin, lng0, lat0, lng1, lat1) && R2Box.hitX > lngMin && R2Box.hitX < lngMax)\n            || (R2Box.intersectsSegment(lng0 - lngMax, lng1 - lngMax, lng0, lat0, lng1, lat1) && R2Box.hitY > latMin && R2Box.hitY < latMax)\n            || (R2Box.intersectsSegment(lat0 - latMax, lat1 - latMax, lng0, lat0, lng1, lat1) && R2Box.hitX > lngMin && R2Box.hitX < lngMax)) {\n      return true;\n    }\n    return false;\n  }\n\n  /** @internal */\n  intersectsTile(that: GeoTile): boolean {\n    return this.lngMin <= that.lngMax && that.lngMin <= this.lngMax\n        && this.latMin <= that.latMax && that.latMin <= this.latMax;\n  }\n\n  /** @internal */\n  intersectsBox(that: GeoBox): boolean {\n    return this.lngMin <= that.lngMax && that.lngMin <= this.lngMax\n        && this.latMin <= that.latMax && that.latMin <= this.latMax;\n  }\n\n  override union(that: GeoShapeLike): GeoBox {\n    return super.union(that) as GeoBox;\n  }\n\n  override project(f: GeoProjection): R2Box {\n    const bottomLeft = f.project(this.lngMin, this.latMin);\n    const topRight = f.project(this.lngMax, this.latMax);\n    let xMin = bottomLeft.x;\n    let yMin = bottomLeft.y;\n    let xMax = topRight.x;\n    let yMax = topRight.y;\n    if (xMin > xMax) {\n      const x = xMin;\n      xMin = xMax;\n      xMax = x;\n    }\n    if (yMin > yMax) {\n      const y = yMin;\n      yMin = yMax;\n      yMax = y;\n    }\n    if (!isFinite(xMin)) {\n      xMin = -Infinity;\n    }\n    if (!isFinite(yMin)) {\n      yMin = -Infinity;\n    }\n    if (!isFinite(xMax)) {\n      xMax = Infinity;\n    }\n    if (!isFinite(yMax)) {\n      yMax = Infinity;\n    }\n    return new R2Box(xMin, yMin, xMax, yMax);\n  }\n\n  override get bounds(): GeoBox {\n    return this;\n  }\n\n  toLike(): GeoBoxInit {\n    return {\n      lngMin: this.lngMin,\n      latMin: this.latMin,\n      lngMax: this.lngMax,\n      latMax: this.latMax,\n    };\n  }\n\n  /** @override */\n  interpolateTo(that: GeoBox): Interpolator<GeoBox>;\n  interpolateTo(that: unknown): Interpolator<GeoBox> | null;\n  interpolateTo(that: unknown): Interpolator<GeoBox> | null {\n    if (that instanceof GeoBox) {\n      return GeoBoxInterpolator(this, that);\n    }\n    return null;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoBox) {\n      return Numbers.equivalent(this.lngMin, that.lngMin, epsilon)\n          && Numbers.equivalent(this.latMin, that.latMin, epsilon)\n          && Numbers.equivalent(this.lngMax, that.lngMax, epsilon)\n          && Numbers.equivalent(this.latMax, that.latMax, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoBox) {\n      return this.lngMin === that.lngMin && this.latMin === that.latMin\n          && this.lngMax === that.lngMax && this.latMax === that.latMax;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Murmur3.mix(Murmur3.mix(\n        Constructors.hash(GeoBox), Numbers.hash(this.lngMin)), Numbers.hash(this.latMin)),\n        Numbers.hash(this.lngMax)), Numbers.hash(this.latMax)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"GeoBox\").write(46/*'.'*/).write(\"of\").write(40/*'('*/)\n                   .debug(this.lngMin).write(\", \").debug(this.latMin).write(\", \")\n                   .debug(this.lngMax).write(\", \").debug(this.latMax).write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static undefined(): GeoBox {\n    return new GeoBox(Infinity, Infinity, -Infinity, -Infinity);\n  }\n\n  @Lazy\n  static globe(): GeoBox {\n    return new GeoBox(-180, -90, 180, 90);\n  }\n\n  static of(lngMin: number, latMin: number, lngMax?: number, latMax?: number): GeoBox {\n    if (lngMax === void 0) {\n      lngMax = lngMin;\n    }\n    if (latMax === void 0) {\n      latMax = latMin;\n    }\n    return new GeoBox(lngMin, latMin, lngMax, latMax);\n  }\n\n  static override fromLike<T extends GeoBoxLike | null | undefined>(value: T): GeoBox | Uninitable<T>;\n  static override fromLike<T extends GeoShapeLike | null | undefined>(value: T): never;\n  static override fromLike<T extends GeoBoxLike | null | undefined>(value: T): GeoBox | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof GeoBox) {\n      return value as GeoBox | Uninitable<T>;\n    } else if (GeoBoxInit[Symbol.hasInstance](value)) {\n      return GeoBox.fromInit(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: GeoBoxInit): GeoBox {\n    return new GeoBox(init.lngMin, init.latMin, init.lngMax, init.latMax);\n  }\n}\n\n/** @internal */\nexport const GeoBoxInterpolator = (function (_super: typeof Interpolator) {\n  const GeoBoxInterpolator = function (s0: GeoBox, s1: GeoBox): Interpolator<GeoBox> {\n    const interpolator = function (u: number): GeoBox {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const lngMin = s0.lngMin + u * (s1.lngMin - s0.lngMin);\n      const latMin = s0.latMin + u * (s1.latMin - s0.latMin);\n      const lngMax = s0.lngMax + u * (s1.lngMax - s0.lngMax);\n      const latMax = s0.latMax + u * (s1.latMax - s0.latMax);\n      return new GeoBox(lngMin, latMin, lngMax, latMax);\n    } as Interpolator<GeoBox>;\n    Object.setPrototypeOf(interpolator, GeoBoxInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: GeoBox, s1: GeoBox): Interpolator<GeoBox>;\n\n    /** @internal */\n    prototype: Interpolator<GeoBox>;\n  };\n\n  GeoBoxInterpolator.prototype = Object.create(_super.prototype);\n  GeoBoxInterpolator.prototype.constructor = GeoBoxInterpolator;\n\n  return GeoBoxInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Arrays} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {R2Shape} from \"@swim/math\";\nimport {R2Group} from \"@swim/math\";\nimport type {GeoProjection} from \"./GeoProjection\";\nimport type {GeoShapeLike} from \"./GeoShape\";\nimport {GeoShape} from \"./GeoShape\";\nimport {GeoBox} from \"./GeoBox\";\n\n/** @public */\nexport class GeoGroup<S extends GeoShape = GeoShape> extends GeoShape implements Debug {\n  constructor(shapes: readonly S[]) {\n    super();\n    this.shapes = shapes;\n    this.boundingBox = null;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"GeoGroup\";\n\n  isDefined(): boolean {\n    return this.shapes.length !== 0;\n  }\n\n  readonly shapes: readonly S[];\n\n  override get lngMin(): number {\n    return this.bounds.lngMin;\n  }\n\n  override get latMin(): number {\n    return this.bounds.latMin;\n  }\n\n  override get lngMax(): number {\n    return this.bounds.lngMax;\n  }\n\n  override get latMax(): number {\n    return this.bounds.latMax;\n  }\n\n  override contains(that: GeoShapeLike): boolean;\n  override contains(x: number, y: number): boolean;\n  override contains(that: GeoShapeLike | number, y?: number): boolean {\n    return false; // TODO\n  }\n\n  override intersects(that: GeoShapeLike): boolean {\n    return false; // TODO\n  }\n\n  override project(f: GeoProjection): R2Group {\n    const oldShapes = this.shapes;\n    const n = oldShapes.length;\n    if (n === 0) {\n      return R2Group.empty();\n    }\n    const newShapes = new Array<R2Shape>(n);\n    for (let i = 0; i < n; i += 1) {\n      newShapes[i] = oldShapes[i]!.project(f);\n    }\n    return new R2Group(newShapes);\n  }\n\n  /** @internal */\n  readonly boundingBox: GeoBox | null;\n\n  override get bounds(): GeoBox {\n    let boundingBox = this.boundingBox;\n    if (boundingBox === null) {\n      let lngMin = Infinity;\n      let latMin = Infinity;\n      let lngMax = -Infinity;\n      let latMax = -Infinity;\n      const shapes = this.shapes;\n      for (let i = 0; i < shapes.length; i += 1) {\n        const shape = shapes[i]!;\n        lngMin = Math.min(lngMin, shape.lngMin);\n        latMin = Math.min(latMin, shape.latMin);\n        lngMax = Math.max(shape.lngMax, lngMax);\n        latMax = Math.max(shape.latMax, latMax);\n      }\n      boundingBox = new GeoBox(lngMin, latMin, lngMax, latMax);\n      (this as Mutable<this>).boundingBox = boundingBox;\n    }\n    return boundingBox;\n  }\n\n  override equivalentTo(that: unknown, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoGroup) {\n      return Arrays.equivalent(this.shapes, that.shapes, epsilon);\n    }\n    return false;\n  }\n\n  override equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof GeoGroup) {\n      return Arrays.equal(this.shapes, that.shapes);\n    }\n    return false;\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    const shapes = this.shapes;\n    const n = shapes.length;\n    output = output.write(\"GeoGroup\").write(46/*'.'*/);\n    if (n === 0) {\n      output = output.write(\"empty\").write(40/*'('*/);\n    } else {\n      output = output.write(\"of\").write(40/*'('*/);\n      output = output.debug(shapes[0]!);\n      for (let i = 1; i < n; i += 1) {\n        output = output.write(\", \").debug(shapes[i]!);\n      }\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  override toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static empty<S extends GeoShape>(): GeoGroup<S> {\n    return new GeoGroup<S>(Arrays.empty());\n  }\n\n  static of<S extends GeoShape>(...shapes: S[]): GeoGroup<S> {\n    return new GeoGroup<S>(shapes);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {GeoShape} from \"./GeoShape\";\nimport {GeoPoint} from \"./GeoPoint\";\nimport type {GeoCurve} from \"./GeoCurve\";\nimport {GeoSegment} from \"./GeoSegment\";\nimport {GeoSpline} from \"./GeoSpline\";\nimport {GeoPath} from \"./GeoPath\";\nimport {GeoGroup} from \"./GeoGroup\";\n\n/** @public */\nexport type GeoJsonPosition = [number, number] | [number, number, number];\n\n/** @public */\nexport const GeoJsonPosition = {\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonPosition {\n    return Array.isArray(instance)\n        && ((instance.length === 2 && typeof instance[0] === \"number\" && typeof instance[1] === \"number\")\n         || (instance.length === 3 && typeof instance[0] === \"number\" && typeof instance[1] === \"number\" && typeof instance[2] === \"number\"));\n  },\n};\n\n/** @public */\nexport type GeoJsonBbox = [number, number, number, number]\n                        | [number, number, number, number, number, number];\n\n/** @public */\nexport type GeoJsonType = GeoJsonGeometryType\n                        | \"Feature\"\n                        | \"FeatureCollection\";\n\n/** @public */\nexport interface GeoJsonObject {\n  type: GeoJsonType;\n  bbox?: GeoJsonBbox;\n}\n\n/** @public */\nexport type GeoJson = GeoJsonGeometry\n                    | GeoJsonFeature\n                    | GeoJsonFeatureCollection;\n\n/** @public */\nexport const GeoJson = {\n  toShape: function (object: GeoJson): GeoShape | (GeoShape | null)[] | null {\n    if (object.type === \"Feature\") {\n      return GeoJsonFeature.toShape(object);\n    } else if (object.type === \"FeatureCollection\") {\n      return GeoJsonFeatureCollection.toShapes(object);\n    }\n    return GeoJsonGeometry.toShape(object);\n  } as {\n    (geometry: GeoJsonGeometry): GeoShape;\n    (feature: GeoJsonFeature): GeoShape | null;\n    (collection: GeoJsonFeatureCollection): (GeoShape | null)[] | null;\n    (object: GeoJson): GeoShape | (GeoShape | null)[] | null;\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJson {\n    return GeoJsonGeometry[Symbol.hasInstance](instance)\n        || GeoJsonFeature[Symbol.hasInstance](instance)\n        || GeoJsonFeatureCollection[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport type GeoJsonGeometryType = \"Point\"\n                                | \"MultiPoint\"\n                                | \"LineString\"\n                                | \"MultiLineString\"\n                                | \"Polygon\"\n                                | \"MultiPolygon\"\n                                | \"GeometryCollection\";\n\n/** @public */\nexport interface GeoJsonGeometryObject extends GeoJsonObject {\n  type: GeoJsonGeometryType;\n}\n\n/** @public */\nexport type GeoJsonGeometry = GeoJsonPoint\n                            | GeoJsonMultiPoint\n                            | GeoJsonLineString\n                            | GeoJsonMultiLineString\n                            | GeoJsonPolygon\n                            | GeoJsonMultiPolygon\n                            | GeoJsonGeometryCollection;\n\n/** @public */\nexport const GeoJsonGeometry = {\n  toShape(object: GeoJsonGeometry): GeoShape {\n    if (object.type === \"Point\") {\n      return GeoJsonPoint.toShape(object);\n    } else if (object.type === \"MultiPoint\") {\n      return GeoJsonMultiPoint.toShape(object);\n    } else if (object.type === \"LineString\") {\n      return GeoJsonLineString.toShape(object);\n    } else if (object.type === \"MultiLineString\") {\n      return GeoJsonMultiLineString.toShape(object);\n    } else if (object.type === \"Polygon\") {\n      return GeoJsonPolygon.toShape(object);\n    } else if (object.type === \"MultiPolygon\") {\n      return GeoJsonMultiPolygon.toShape(object);\n    } else if (object.type === \"GeometryCollection\") {\n      return GeoJsonGeometryCollection.toShape(object);\n    }\n    throw new TypeError(\"\" + object);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonGeometry {\n    return GeoJsonPoint[Symbol.hasInstance](instance)\n        || GeoJsonMultiPoint[Symbol.hasInstance](instance)\n        || GeoJsonLineString[Symbol.hasInstance](instance)\n        || GeoJsonMultiLineString[Symbol.hasInstance](instance)\n        || GeoJsonPolygon[Symbol.hasInstance](instance)\n        || GeoJsonMultiPolygon[Symbol.hasInstance](instance)\n        || GeoJsonGeometryCollection[Symbol.hasInstance](instance);\n  },\n};\n\n/** @public */\nexport interface GeoJsonPoint extends GeoJsonGeometryObject {\n  readonly type: \"Point\";\n  coordinates: GeoJsonPosition;\n}\n\n/** @public */\nexport const GeoJsonPoint = {\n  toShape(object: GeoJsonPoint): GeoPoint {\n    const position = object.coordinates;\n    return new GeoPoint(position[0], position[1]);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonPoint {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonPoint).type === \"Point\"\n        && GeoJsonPosition[Symbol.hasInstance]((instance as GeoJsonPoint).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonMultiPoint extends GeoJsonGeometryObject {\n  readonly type: \"MultiPoint\";\n  coordinates: GeoJsonPosition[];\n}\n\n/** @public */\nexport const GeoJsonMultiPoint = {\n  toShape(object: GeoJsonMultiPoint): GeoGroup<GeoPoint> {\n    const positions = object.coordinates;\n    const n = positions.length;\n    const shapes = new Array<GeoPoint>(n);\n    for (let i = 0; i < n; i += 1) {\n      const position = positions[i]!;\n      shapes[i] = new GeoPoint(position[0], position[1]);\n    }\n    return new GeoGroup(shapes);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonMultiPoint {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonMultiPoint).type === \"MultiPoint\"\n        && Array.isArray((instance as GeoJsonMultiPoint).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonLineString extends GeoJsonGeometryObject {\n  readonly type: \"LineString\";\n  coordinates: GeoJsonPosition[];\n}\n\n/** @public */\nexport const GeoJsonLineString = {\n  toShape(object: GeoJsonLineString): GeoSpline {\n    const lineString = object.coordinates;\n    const n = lineString.length;\n    if (n === 0) {\n      return GeoSpline.empty();\n    }\n    const curves = new Array<GeoCurve>(n - 1);\n    let position = lineString[0]!;\n    let lng = position[0];\n    let lat = position[1];\n    for (let i = 1; i < n; i += 1) {\n      position = lineString[i]!;\n      curves[i - 1] = new GeoSegment(lng, lat, (lng = position[0], lng), (lat = position[1], lat));\n    }\n    return new GeoSpline(curves, false);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonLineString {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonLineString).type === \"LineString\"\n        && Array.isArray((instance as GeoJsonLineString).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonMultiLineString extends GeoJsonGeometryObject {\n  readonly type: \"MultiLineString\";\n  coordinates: GeoJsonPosition[][];\n}\n\n/** @public */\nexport const GeoJsonMultiLineString = {\n  toShape(object: GeoJsonMultiLineString): GeoGroup<GeoSpline> {\n    const multiLineString = object.coordinates;\n    const n = multiLineString.length;\n    const shapes = new Array<GeoSpline>(n);\n    for (let i = 0; i < n; i += 1) {\n      const lineString = multiLineString[i]!;\n      const m = lineString.length;\n      if (m === 0) {\n        shapes[i] = GeoSpline.empty();\n        continue;\n      }\n      const curves = new Array<GeoCurve>(m - 1);\n      let position = lineString[0]!;\n      let lng = position[0];\n      let lat = position[1];\n      for (let j = 1; j < m; j += 1) {\n        position = lineString[j]!;\n        curves[j - 1] = new GeoSegment(lng, lat, (lng = position[0], lng), (lat = position[1], lat));\n      }\n      shapes[i] = new GeoSpline(curves, false);\n    }\n    return new GeoGroup(shapes);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonMultiLineString {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonMultiLineString).type === \"MultiLineString\"\n        && Array.isArray((instance as GeoJsonMultiLineString).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonPolygon extends GeoJsonGeometryObject {\n  readonly type: \"Polygon\";\n  coordinates: GeoJsonPosition[][];\n}\n\n/** @public */\nexport const GeoJsonPolygon = {\n  toShape(object: GeoJsonPolygon): GeoPath {\n    const polygons = object.coordinates;\n    const n = polygons.length;\n    const splines = new Array<GeoSpline>(n);\n    for (let i = 0; i < n; i += 1) {\n      const polygon = polygons[i]!;\n      const m = polygon.length;\n      if (m === 0) {\n        splines[i] = GeoSpline.empty();\n        continue;\n      }\n      const curves = new Array<GeoCurve>(m - 1);\n      let position = polygon[0]!;\n      let lng = position[0];\n      let lat = position[1];\n      for (let j = 1; j < m; j += 1) {\n        position = polygon[j]!;\n        curves[j - 1] = new GeoSegment(lng, lat, (lng = position[0], lng), (lat = position[1], lat));\n      }\n      splines[i] = new GeoSpline(curves, true);\n    }\n    return new GeoPath(splines);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonPolygon {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonPolygon).type === \"Polygon\"\n        && Array.isArray((instance as GeoJsonPolygon).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonMultiPolygon extends GeoJsonGeometryObject {\n  readonly type: \"MultiPolygon\";\n  coordinates: GeoJsonPosition[][][];\n}\n\n/** @public */\nexport const GeoJsonMultiPolygon = {\n  toShape(object: GeoJsonMultiPolygon): GeoGroup<GeoPath> {\n    const multiPolygon = object.coordinates;\n    const n = multiPolygon.length;\n    const shapes = new Array<GeoPath>(n);\n    for (let i = 0; i < n; i += 1) {\n      const polygons = multiPolygon[i]!;\n      const m = polygons.length;\n      const splines = new Array<GeoSpline>(m);\n      for (let j = 0; j < m; j += 1) {\n        const polygon = polygons[j]!;\n        const o = polygon.length;\n        if (o === 0) {\n          splines[j] = GeoSpline.empty();\n          continue;\n        }\n        const curves = new Array<GeoCurve>(o - 1);\n        let position = polygon[0]!;\n        let lng = position[0];\n        let lat = position[1];\n        for (let k = 1; k < o; k += 1) {\n          position = polygon[k]!;\n          curves[k - 1] = new GeoSegment(lng, lat, (lng = position[0], lng), (lat = position[1], lat));\n        }\n        splines[j] = new GeoSpline(curves, true);\n      }\n      shapes[i] = new GeoPath(splines);\n    }\n    return new GeoGroup(shapes);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonMultiPolygon {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonMultiPolygon).type === \"MultiPolygon\"\n        && Array.isArray((instance as GeoJsonMultiPolygon).coordinates);\n  },\n};\n\n/** @public */\nexport interface GeoJsonGeometryCollection extends GeoJsonGeometryObject {\n  readonly type: \"GeometryCollection\";\n  geometries: GeoJsonGeometry[];\n}\n\n/** @public */\nexport const GeoJsonGeometryCollection = {\n  toShape(object: GeoJsonGeometryCollection): GeoGroup {\n    const geometries = object.geometries;\n    const n = geometries.length;\n    const shapes = new Array<GeoShape>(n);\n    for (let i = 0; i < n; i += 1) {\n      shapes[i] = GeoJsonGeometry.toShape(geometries[i]!);\n    }\n    return new GeoGroup(shapes);\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonGeometryCollection {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonGeometryCollection).type === \"GeometryCollection\"\n        && Array.isArray((instance as GeoJsonGeometryCollection).geometries);\n  },\n};\n\n/** @public */\nexport type GeoJsonProperties = {[name: string]: unknown};\n\n/** @public */\nexport interface GeoJsonFeature<G extends GeoJsonGeometry = GeoJsonGeometry, P = GeoJsonProperties> extends GeoJsonObject {\n  type: \"Feature\";\n  geometry: G | null;\n  properties: P | null;\n  id?: string | number;\n}\n\n/** @public */\nexport const GeoJsonFeature = {\n  toShape(feature: GeoJsonFeature): GeoShape | null {\n    const geometry = feature.geometry;\n    return geometry !== null ? GeoJsonGeometry.toShape(geometry) : null;\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonFeature {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonFeature).type === \"Feature\"\n        && GeoJsonGeometry[Symbol.hasInstance]((instance as GeoJsonFeature).geometry)\n        && typeof (instance as GeoJsonFeature).properties === \"object\";\n  },\n};\n\n/** @public */\nexport interface GeoJsonFeatureCollection<G extends GeoJsonGeometry = GeoJsonGeometry, P = GeoJsonProperties> extends GeoJsonObject {\n  type: \"FeatureCollection\";\n  features: GeoJsonFeature<G, P>[];\n}\n\n/** @public */\nexport const GeoJsonFeatureCollection = {\n  toShapes(object: GeoJsonFeatureCollection): (GeoShape | null)[] {\n    const features = object.features;\n    const n = features.length;\n    const shapes = new Array<GeoShape | null>(n);\n    for (let i = 0; i < n; i += 1) {\n      shapes[i] = GeoJsonFeature.toShape(features[i]!);\n    }\n    return shapes;\n  },\n\n  [Symbol.hasInstance](instance: unknown): instance is GeoJsonFeatureCollection {\n    return instance !== null && typeof instance === \"object\"\n        && (instance as GeoJsonFeatureCollection).type === \"FeatureCollection\"\n        && Array.isArray((instance as GeoJsonFeatureCollection).features);\n  },\n};\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport type {Output} from \"@swim/codec\";\nimport type {Debug} from \"@swim/codec\";\nimport {Format} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport type {Value} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Num} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\n\n/** @public */\nexport type TimeZoneLike = TimeZone | string | number;\n\n/** @public */\nexport const TimeZoneLike = {\n  [Symbol.hasInstance](instance: unknown): instance is TimeZoneLike {\n    return instance instanceof TimeZone\n        || typeof instance === \"string\"\n        || typeof instance === \"number\";\n  },\n};\n\n/** @public */\nexport class TimeZone implements HashCode, Debug {\n  /** @internal */\n  private constructor(name: string | undefined, offset: number) {\n    this.name = name;\n    this.offset = offset;\n  }\n\n  likeType?(like: string | number): void;\n\n  readonly name: string | undefined;\n\n  readonly offset: number;\n\n  isUTC(): boolean {\n    return this.offset === 0;\n  }\n\n  isLocal(): boolean {\n    return this.offset === -new Date().getTimezoneOffset();\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimeZone) {\n      return this.offset === that.offset;\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Constructors.hash(TimeZone), Numbers.hash(this.offset)));\n  }\n\n  /** @override */\n  debug<T>(output: Output<T>): Output<T> {\n    output = output.write(\"TimeZone\").write(46/*'.'*/);\n    if (this.name === \"UTC\" && this.offset === 0) {\n      output = output.write(\"utc\").write(40/*'('*/);\n    } else if (this.name === void 0) {\n      output = output.write(\"forOffset\").write(40/*'('*/).debug(this.offset);\n    } else {\n      output = output.write(\"create\").write(40/*'('*/)\n                     .debug(this.name).write(\", \").debug(this.offset);\n    }\n    output = output.write(41/*')'*/);\n    return output;\n  }\n\n  /** @override */\n  toString(): string {\n    return Format.debug(this);\n  }\n\n  @Lazy\n  static utc(): TimeZone {\n    return new TimeZone(\"UTC\", 0);\n  }\n\n  @Lazy\n  static local(): TimeZone {\n    return this.forOffset(-new Date().getTimezoneOffset());\n  }\n\n  static create(name: string | undefined, offset: number): TimeZone {\n    if (name === \"UTC\" && offset === 0) {\n      return TimeZone.utc();\n    }\n    return new TimeZone(name, offset);\n  }\n\n  static forName(name: string): TimeZone | null {\n    switch (name) {\n      case \"UTC\": return TimeZone.utc();\n      default: return null;\n    }\n  }\n\n  static forOffset(offset: number): TimeZone {\n    switch (offset) {\n      case 0: return TimeZone.utc();\n      default: return new TimeZone(void 0, offset);\n    }\n  }\n\n  static fromLike<T extends TimeZoneLike | null | undefined>(value: T): TimeZone | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof TimeZone) {\n      return value as TimeZone | Uninitable<T>;\n    } else if (typeof value === \"string\") {\n      const zone = TimeZone.forName(value);\n      if (zone !== null) {\n        return zone;\n      }\n    } else if (typeof value === \"number\") {\n      return TimeZone.forOffset(value);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromValue(value: Value): TimeZone | null {\n    const name = value.stringValue(void 0);\n    if (name !== void 0) {\n      return TimeZone.forName(name);\n    }\n    const offset = value.numberValue(void 0);\n    if (offset !== void 0) {\n      return TimeZone.forOffset(offset);\n    }\n    return null;\n  }\n\n  @Lazy\n  static form(): Form<TimeZone, TimeZoneLike> {\n    return new TimeZoneForm(TimeZone.utc());\n  }\n}\n\n/** @internal */\nexport class TimeZoneForm extends Form<TimeZone, TimeZoneLike> {\n  constructor(unit: TimeZone | undefined) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: TimeZone | undefined;\n\n  override withUnit(unit: TimeZone | undefined): Form<TimeZone, TimeZoneLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new TimeZoneForm(unit);\n  }\n\n  override mold(zone: TimeZoneLike): Item {\n    zone = TimeZone.fromLike(zone);\n    const name = zone.name;\n    if (name !== void 0) {\n      return Text.from(name);\n    } else {\n      return Num.from(zone.offset);\n    }\n  }\n\n  override cast(item: Item): TimeZone | undefined {\n    const value = item.toValue();\n    const zone = TimeZone.fromValue(value);\n    return zone !== null ? zone : void 0;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Uninitable} from \"@swim/util\";\nimport type {Mutable} from \"@swim/util\";\nimport {Murmur3} from \"@swim/util\";\nimport {Lazy} from \"@swim/util\";\nimport type {HashCode} from \"@swim/util\";\nimport type {Equivalent} from \"@swim/util\";\nimport type {Compare} from \"@swim/util\";\nimport {Numbers} from \"@swim/util\";\nimport {Constructors} from \"@swim/util\";\nimport {Objects} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport type {Display} from \"@swim/codec\";\nimport type {Item} from \"@swim/structure\";\nimport {Value} from \"@swim/structure\";\nimport {Text} from \"@swim/structure\";\nimport {Form} from \"@swim/structure\";\nimport type {TimeZoneLike} from \"./TimeZone\";\nimport {TimeZone} from \"./TimeZone\";\nimport {DateTimeFormat} from \"./\"; // forward import\n\n/** @public */\nexport type DateTimeLike = DateTime | DateTimeInit | Date | string | number;\n\n/** @public */\nexport const DateTimeLike = {\n  [Symbol.hasInstance](instance: unknown): instance is DateTimeLike {\n    return instance instanceof DateTime\n        || instance instanceof Date\n        || DateTimeInit[Symbol.hasInstance](instance)\n        || typeof instance === \"string\"\n        || typeof instance === \"number\";\n  },\n};\n\n/** @public */\nexport interface DateTimeInit {\n  /** @internal */\n  readonly typeid?: \"DateTimeInit\";\n  time?: number,\n  year?: number;\n  month?: number;\n  day?: number;\n  hour?: number;\n  minute?: number;\n  second?: number;\n  millisecond?: number;\n  zone?: TimeZoneLike;\n}\n\n/** @public */\nexport const DateTimeInit = {\n  [Symbol.hasInstance](instance: unknown): instance is DateTimeInit {\n    return Objects.hasAnyKey<DateTimeInit>(instance, \"time\", \"year\", \"month\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\");\n  },\n};\n\n/** @public */\nexport class DateTime implements Interpolate<DateTime>, HashCode, Equivalent, Compare, Display {\n  constructor(time: number, zone: TimeZone = TimeZone.utc()) {\n    this.time = time;\n    this.zone = zone;\n  }\n\n  /** @internal */\n  declare readonly typeid?: \"DateTime\";\n\n  likeType?(like: DateTimeInit | Date | string | number): void;\n\n  isDefined(): boolean {\n    return isFinite(new Date(this.time).getTime());\n  }\n\n  readonly time: number;\n\n  readonly zone: TimeZone;\n\n  get year(): number {\n    return this.toUTCLocalDate().getUTCFullYear();\n  }\n\n  withYear(year: number, month?: number, day?: number, hour?: number, minute?: number,\n           second?: number, millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCFullYear(year);\n    if (month !== void 0) {\n      date.setUTCMonth(month);\n    }\n    if (day !== void 0) {\n      date.setUTCDate(day);\n    }\n    if (hour !== void 0) {\n      date.setUTCHours(hour);\n    }\n    if (minute !== void 0) {\n      date.setUTCMinutes(minute);\n    }\n    if (second !== void 0) {\n      date.setUTCSeconds(second);\n    }\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get month(): number {\n    return this.toUTCLocalDate().getUTCMonth();\n  }\n\n  withMonth(month: number, day?: number, hour?: number, minute?: number,\n            second?: number, millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCMonth(month);\n    if (day !== void 0) {\n      date.setUTCDate(day);\n    }\n    if (hour !== void 0) {\n      date.setUTCHours(hour);\n    }\n    if (minute !== void 0) {\n      date.setUTCMinutes(minute);\n    }\n    if (second !== void 0) {\n      date.setUTCSeconds(second);\n    }\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get day(): number {\n    return this.toUTCLocalDate().getUTCDate();\n  }\n\n  withDay(day: number, hour?: number, minute?: number, second?: number,\n          millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCDate(day);\n    if (hour !== void 0) {\n      date.setUTCHours(hour);\n    }\n    if (minute !== void 0) {\n      date.setUTCMinutes(minute);\n    }\n    if (second !== void 0) {\n      date.setUTCSeconds(second);\n    }\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get hour(): number {\n    return this.toUTCLocalDate().getUTCHours();\n  }\n\n  withHour(hour: number, minute?: number, second?: number, millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCHours(hour);\n    if (minute !== void 0) {\n      date.setUTCMinutes(minute);\n    }\n    if (second !== void 0) {\n      date.setUTCSeconds(second);\n    }\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get minute(): number {\n    return this.toUTCLocalDate().getUTCMinutes();\n  }\n\n  withMinute(minute: number, second?: number, millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCMinutes(minute);\n    if (second !== void 0) {\n      date.setUTCSeconds(second);\n    }\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get second(): number {\n    return this.toUTCLocalDate().getUTCSeconds();\n  }\n\n  withSecond(second: number, millisecond?: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCSeconds(second);\n    if (millisecond !== void 0) {\n      date.setUTCMilliseconds(millisecond);\n    }\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get millisecond(): number {\n    return this.toUTCLocalDate().getUTCMilliseconds();\n  }\n\n  withMillisecond(millisecond: number): DateTime {\n    const date = this.toUTCLocalDate();\n    date.setUTCMilliseconds(millisecond);\n    return DateTime.fromUTCLocalDate(date, this.zone);\n  }\n\n  get weekday(): number {\n    return this.toUTCLocalDate().getUTCDay();\n  }\n\n  /**\n   * Returns this date time shifted by the time zone offset.\n   * @internal\n   */\n  toUTCLocalDate(): Date {\n    return new Date(this.time + 60000 * this.zone.offset);\n  }\n\n  toDate(): Date {\n    return new Date(this.time);\n  }\n\n  valueOf(): number {\n    return this.time;\n  }\n\n  /** @override */\n  interpolateTo(that: DateTime): Interpolator<DateTime>;\n  interpolateTo(that: unknown): Interpolator<DateTime> | null;\n  interpolateTo(that: unknown): Interpolator<DateTime> | null {\n    if (that instanceof DateTime) {\n      return DateTimeInterpolator(this, that);\n    }\n    return null;\n  }\n\n  /** @override */\n  compareTo(that: unknown): number {\n    if (that instanceof DateTime) {\n      const x = this.time;\n      const y = that.time;\n      return x < y ? -1 : x > y ? 1 : x === y ? 0 : NaN;\n    }\n    return NaN;\n  }\n\n  /** @override */\n  equivalentTo(that: DateTimeLike, epsilon?: number): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DateTime) {\n      return Numbers.equivalent(this.time, that.time, epsilon);\n    }\n    return false;\n  }\n\n  /** @override */\n  equals(that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof DateTime) {\n      return this.time === that.time && this.zone.equals(that.zone);\n    }\n    return false;\n  }\n\n  /** @override */\n  hashCode(): number {\n    return Murmur3.mash(Murmur3.mix(Murmur3.mix(Constructors.hash(DateTime),\n        Numbers.hash(this.time)), this.zone.hashCode()));\n  }\n\n  /** @override */\n  display<T>(output: Output<T>, format: DateTimeFormat = DateTimeFormat.iso8601()): Output<T> {\n    output = format.writeDate(output, this);\n    return output;\n  }\n\n  /** @override */\n  toString(format: DateTimeFormat = DateTimeFormat.iso8601()): string {\n    return format.format(this);\n  }\n\n  static current(zone?: TimeZoneLike): DateTime {\n    zone = zone !== void 0 ? TimeZone.fromLike(zone) : TimeZone.local();\n    return new DateTime(Date.now(), zone);\n  }\n\n  /**\n   * Returns this date time shifted back by the time zone offset.\n   * @internal\n   */\n  static fromUTCLocalDate(date: Date, zone: TimeZone): DateTime {\n    return new DateTime(date.getTime() - 60000 * zone.offset, zone);\n  }\n\n  static fromLike<T extends DateTimeLike | null | undefined>(value: T, zone?: TimeZoneLike): DateTime | Uninitable<T> {\n    if (value === void 0 || value === null || value instanceof DateTime) {\n      return value as DateTime | Uninitable<T>;\n    } else if (value instanceof Date) {\n      zone = zone !== void 0 ? TimeZone.fromLike(zone) : TimeZone.utc();\n      return new DateTime(value.getTime(), zone);\n    } else if (typeof value === \"number\") {\n      zone = zone !== void 0 ? TimeZone.fromLike(zone) : TimeZone.utc();\n      return new DateTime(value, zone);\n    } else if (typeof value === \"string\") {\n      return DateTime.parse(value, zone);\n    } else if (DateTimeInit[Symbol.hasInstance](value)) {\n      return DateTime.fromInit(value, zone);\n    }\n    throw new TypeError(\"\" + value);\n  }\n\n  static fromInit(init: DateTimeInit, zone?: TimeZoneLike): DateTime {\n    let time = init.time;\n    if (time === void 0) {\n      time = Date.UTC(init.year !== void 0 ? init.year : 1970,\n                      init.month !== void 0 ? init.month : 0,\n                      init.day !== void 0 ? init.day : 1,\n                      init.hour !== void 0 ? init.hour : 0,\n                      init.minute !== void 0 ? init.minute : 0,\n                      init.second !== void 0 ? init.second : 0,\n                      init.millisecond !== void 0 ? init.millisecond : 0);\n    }\n    zone = TimeZone.fromLike(init.zone);\n    if (zone === void 0) {\n      zone = TimeZone.utc();\n    } else {\n      time += 60000 * zone.offset;\n    }\n    return new DateTime(time, zone);\n  }\n\n  static fromValue(value: Value): DateTime | null {\n    let positional: boolean;\n    const header = value.header(\"date\");\n    if (header.isDefined()) {\n      value = header;\n      positional = true;\n    } else {\n      positional = false;\n    }\n    const init: DateTimeInit = {};\n    value.forEach(function (item: Item, index: number) {\n      const key = item.key.stringValue(void 0);\n      if (key !== void 0) {\n        if (key === \"year\") {\n          init.year = item.toValue().numberValue(init.year);\n        } else if (key === \"month\") {\n          init.month = item.toValue().numberValue(init.month);\n        } else if (key === \"day\") {\n          init.day = item.toValue().numberValue(init.day);\n        } else if (key === \"hour\") {\n          init.hour = item.toValue().numberValue(init.hour);\n        } else if (key === \"minute\") {\n          init.minute = item.toValue().numberValue(init.minute);\n        } else if (key === \"second\") {\n          init.second = item.toValue().numberValue(init.second);\n        } else if (key === \"millisecond\") {\n          init.millisecond = item.toValue().numberValue(init.millisecond);\n        } else if (key === \"zone\") {\n          init.zone = item.toValue().cast(TimeZone.form(), init.zone);\n        }\n      } else if (item instanceof Value && positional) {\n        if (index === 0) {\n          init.year = item.numberValue(init.year);\n        } else if (index === 1) {\n          init.month = item.numberValue(init.month);\n        } else if (index === 2) {\n          init.day = item.numberValue(init.day);\n        } else if (index === 3) {\n          init.hour = item.numberValue(init.hour);\n        } else if (index === 4) {\n          init.minute = item.numberValue(init.minute);\n        } else if (index === 5) {\n          init.second = item.numberValue(init.second);\n        } else if (index === 6) {\n          init.millisecond = item.numberValue(init.millisecond);\n        } else if (index === 7) {\n          init.zone = item.cast(TimeZone.form(), init.zone);\n        }\n      }\n    });\n    if (DateTimeInit[Symbol.hasInstance](init)) {\n      return DateTime.fromInit(init);\n    }\n    return null;\n  }\n\n  static parse(date: string, zone?: TimeZoneLike): DateTime {\n    return DateTimeFormat.iso8601().parse(date);\n  }\n\n  static time(date: DateTimeLike): number {\n    if (date instanceof DateTime) {\n      return date.time;\n    } else if (date instanceof Date) {\n      return date.getTime();\n    } else if (typeof date === \"number\") {\n      return date;\n    } else if (typeof date === \"string\") {\n      return DateTime.parse(date).time;\n    } else if (DateTimeInit[Symbol.hasInstance](date)) {\n      return DateTime.fromInit(date).time;\n    }\n    throw new TypeError(\"\" + date);\n  }\n\n  static zone(date: DateTimeLike): TimeZone {\n    if (date instanceof DateTime) {\n      return date.zone;\n    }\n    return TimeZone.utc();\n  }\n\n  @Lazy\n  static form(): Form<DateTime, DateTimeLike> {\n    return new DateTimeForm(new DateTime(0));\n  }\n}\n\n/** @internal */\nexport const DateTimeInterpolator = (function (_super: typeof Interpolator) {\n  const DateTimeInterpolator = function (d0: DateTime, d1: DateTime): Interpolator<DateTime> {\n    const interpolator = function (u: number): DateTime {\n      const d0 = interpolator[0];\n      const d1 = interpolator[1];\n      return new DateTime(d0.time + u * (d1.time - d0.time), d1.zone);\n    } as Interpolator<DateTime>;\n    Object.setPrototypeOf(interpolator, DateTimeInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = d0;\n    (interpolator as Mutable<typeof interpolator>)[1] = d1;\n    return interpolator;\n  } as {\n    (d0: DateTime, d1: DateTime): Interpolator<DateTime>;\n\n    /** @internal */\n    prototype: Interpolator<DateTime>;\n  };\n\n  DateTimeInterpolator.prototype = Object.create(_super.prototype);\n  DateTimeInterpolator.prototype.constructor = DateTimeInterpolator;\n\n  return DateTimeInterpolator;\n})(Interpolator);\n\n/** @internal */\nexport class DateTimeForm extends Form<DateTime, DateTimeLike> {\n  constructor(unit: DateTime | undefined) {\n    super();\n    Object.defineProperty(this, \"unit\", {\n      value: unit,\n      enumerable: true,\n      configurable: true,\n    });\n  }\n\n  override readonly unit: DateTime | undefined;\n\n  override withUnit(unit: DateTime | undefined): Form<DateTime, DateTimeLike> {\n    if (unit === this.unit) {\n      return this;\n    }\n    return new DateTimeForm(unit);\n  }\n\n  override mold(date: DateTimeLike): Item {\n    date = DateTime.fromLike(date);\n    return Text.from(date.toString());\n  }\n\n  override cast(value: Value): DateTime | undefined {\n    let date: DateTime | null = null;\n    try {\n      date = DateTime.fromValue(value);\n      if (date === void 0) {\n        const millis = value.numberValue(void 0);\n        if (millis !== void 0) {\n          date = new DateTime(millis);\n        } else {\n          const string = value.stringValue(void 0);\n          if (string !== void 0) {\n            date = DateTime.parse(string);\n          }\n        }\n      }\n    } catch (e) {\n      // swallow\n    }\n    return date !== null ? date : void 0;\n  }\n}\n\n/** @internal */\nexport class DateTimeParser extends Parser<DateTime> {\n  private readonly dateParser: Parser<DateTimeInit>;\n\n  constructor(dateParser: Parser<DateTimeInit>) {\n    super();\n    this.dateParser = dateParser;\n  }\n\n  override feed(input: Input): Parser<DateTime> {\n    return DateTimeParser.parse(input, this.dateParser);\n  }\n\n  static parse(input: Input, dateParser: Parser<DateTimeInit>): Parser<DateTime> {\n    dateParser = dateParser.feed(input);\n    if (dateParser.isDone()) {\n      return Parser.done(DateTime.fromLike(dateParser.bind()));\n    } else if (dateParser.isError()) {\n      return dateParser.asError();\n    }\n    return new DateTimeParser(dateParser);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Lazy} from \"@swim/util\";\n\n/** @public */\nexport class DateTimeLocale {\n  readonly periods: readonly string[];\n  readonly weekdays: readonly string[];\n  readonly shortWeekdays: readonly string[];\n  readonly months: readonly string[];\n  readonly shortMonths: readonly string[];\n\n  constructor(periods: readonly string[] = DateTimeLocale.Periods,\n              weekdays: readonly string[] = DateTimeLocale.Weekdays,\n              shortWeekdays: readonly string[] = DateTimeLocale.ShortWeekdays,\n              months: readonly string[] = DateTimeLocale.Months,\n              shortMonths: readonly string[] = DateTimeLocale.ShortMonths) {\n    this.periods = periods;\n    this.weekdays = weekdays;\n    this.shortWeekdays = shortWeekdays;\n    this.months = months;\n    this.shortMonths = shortMonths;\n  }\n\n  /** @internal */\n  static readonly Periods: readonly string[] = [\n    \"AM\",\n    \"PM\",\n  ];\n\n  /** @internal */\n  static readonly Weekdays: readonly string[] = [\n    \"Sunday\",\n    \"Monday\",\n    \"Tuesday\",\n    \"Wednesday\",\n    \"Thursday\",\n    \"Friday\",\n    \"Saturday\",\n  ];\n\n  /** @internal */\n  static readonly ShortWeekdays: readonly string[] = [\n    \"Sun\",\n    \"Mon\",\n    \"Tue\",\n    \"Wed\",\n    \"Thu\",\n    \"Fri\",\n    \"Sat\",\n  ];\n\n  /** @internal */\n  static readonly Months: readonly string[] = [\n    \"January\",\n    \"February\",\n    \"March\",\n    \"April\",\n    \"May\",\n    \"June\",\n    \"July\",\n    \"August\",\n    \"September\",\n    \"October\",\n    \"November\",\n    \"December\",\n  ];\n\n  /** @internal */\n  static readonly ShortMonths: readonly string[] = [\n    \"Jan\",\n    \"Feb\",\n    \"Mar\",\n    \"Apr\",\n    \"May\",\n    \"Jun\",\n    \"Jul\",\n    \"Aug\",\n    \"Sep\",\n    \"Oct\",\n    \"Nov\",\n    \"Dec\",\n  ];\n\n  @Lazy\n  static standard(): DateTimeLocale {\n    return new DateTimeLocale();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {DateTimeLocale} from \"./DateTimeLocale\";\nimport {DateTimeFormat} from \"./\"; // forward import\n\n/** @public */\nexport interface DateTimeSpecifiers {\n  [symbol: string]: DateTimeFormat | undefined;\n  Y: DateTimeFormat;\n  m: DateTimeFormat;\n  B: DateTimeFormat;\n  b: DateTimeFormat;\n  d: DateTimeFormat;\n  e: DateTimeFormat;\n  A: DateTimeFormat;\n  a: DateTimeFormat;\n  H: DateTimeFormat;\n  I: DateTimeFormat;\n  i: DateTimeFormat;\n  p: DateTimeFormat;\n  M: DateTimeFormat;\n  S: DateTimeFormat;\n  L: DateTimeFormat;\n}\n\n/** @public */\nexport const DateTimeSpecifiers = (function () {\n  const DateTimeSpecifiers = {} as {\n    standard(locale?: DateTimeLocale): DateTimeSpecifiers;\n  };\n\n  let standard: DateTimeSpecifiers | null = null;\n\n  DateTimeSpecifiers.standard = function (locale?: DateTimeLocale): DateTimeSpecifiers {\n    let specifiers: DateTimeSpecifiers | null = null;\n    if (locale === void 0) {\n      locale = DateTimeLocale.standard();\n    }\n    if (locale === DateTimeLocale.standard()) {\n      specifiers = standard;\n    }\n    if (specifiers === null) {\n      specifiers = {\n        Y: DateTimeFormat.year(),\n        m: DateTimeFormat.monthOfYear(),\n        B: DateTimeFormat.month(locale),\n        b: DateTimeFormat.shortMonth(locale),\n        d: DateTimeFormat.dayOfMonth(48/*'0'*/),\n        e: DateTimeFormat.dayOfMonth(32/*' '*/),\n        A: DateTimeFormat.weekday(locale),\n        a: DateTimeFormat.shortWeekday(locale),\n        H: DateTimeFormat.hour24(),\n        I: DateTimeFormat.hour12(48/*'0'*/),\n        i: DateTimeFormat.hour12(32/*' '*/),\n        p: DateTimeFormat.period(locale),\n        M: DateTimeFormat.minute(),\n        S: DateTimeFormat.second(),\n        L: DateTimeFormat.millisecond(),\n      };\n      if (locale === DateTimeLocale.standard()) {\n        standard = specifiers;\n      }\n    }\n    return specifiers;\n  };\n\n  return DateTimeSpecifiers;\n})();\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Diagnostic} from \"@swim/codec\";\nimport type {Input} from \"@swim/codec\";\nimport type {Output} from \"@swim/codec\";\nimport {Parser} from \"@swim/codec\";\nimport {Unicode} from \"@swim/codec\";\nimport {Base10} from \"@swim/codec\";\nimport type {DateTimeLike} from \"./DateTime\";\nimport type {DateTimeInit} from \"./DateTime\";\nimport {DateTime} from \"./DateTime\";\nimport {DateTimeParser} from \"./DateTime\";\nimport {DateTimeLocale} from \"./DateTimeLocale\";\nimport {DateTimeSpecifiers} from \"./DateTimeSpecifiers\";\n\n/** @internal */\nexport interface DateNumberFactory {\n  term(value: number, date: DateTimeInit, input: Input): Parser<DateTimeInit>;\n  cont(date: DateTimeInit, value: number, step: number, input: Input): Parser<DateTimeInit>;\n}\n\n/** @internal */\nexport interface DateStringFactory {\n  term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit>;\n  cont(locale: DateTimeLocale, date: DateTimeInit, output: Output, input: Input): Parser<DateTimeInit>;\n}\n\n/** @public */\nexport abstract class DateTimeFormat {\n  withLocale(locale: DateTimeLocale): DateTimeFormat {\n    return this;\n  }\n\n  format(date: DateTimeLike): string {\n    date = DateTime.fromLike(date);\n    let output = Unicode.stringOutput();\n    output = this.writeDate(output, date);\n    return output.bind();\n  }\n\n  abstract writeDate<T>(output: Output<T>, date: DateTime): Output<T>;\n\n  parse(input: Input | string): DateTime {\n    if (typeof input === \"string\") {\n      input = Unicode.stringInput(input);\n    }\n    while (input.isCont() && Unicode.isSpace(input.head())) {\n      input = input.step();\n    }\n    let parser = this.parseDate(input, {});\n    if (parser.isDone()) {\n      while (input.isCont() && Unicode.isSpace(input.head())) {\n        input = input.step();\n      }\n    }\n    if (input.isCont() && !parser.isError()) {\n      parser = Parser.error(Diagnostic.unexpected(input));\n    }\n    return parser.bind();\n  }\n\n  /** @internal */\n  parseDate(input: Input, date: DateTimeInit): Parser<DateTime> {\n    const dateParser = this.parseDateTime(input, date);\n    if (dateParser.isDone()) {\n      return Parser.done(DateTime.fromLike(dateParser.bind()));\n    } else if (dateParser.isError()) {\n      return dateParser.asError();\n    }\n    return new DateTimeParser(dateParser);\n  }\n\n  /** @internal */\n  abstract parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit>;\n\n  /** @internal */\n  static Year: DateTimeFormat | null = null;\n  static year(): DateTimeFormat {\n    if (this.Year === null) {\n      this.Year = new YearFormat();\n    }\n    return this.Year;\n  }\n\n  /** @internal */\n  static MonthOfYear: DateTimeFormat | null = null;\n  static monthOfYear(): DateTimeFormat {\n    if (this.MonthOfYear === null) {\n      this.MonthOfYear = new MonthOfYearFormat();\n    }\n    return this.MonthOfYear;\n  }\n\n  /** @internal */\n  static Month: DateTimeFormat | null = null;\n  static month(locale?: DateTimeLocale): DateTimeFormat {\n    if (locale !== void 0 && locale !== DateTimeLocale.standard()) {\n      return new MonthFormat(locale);\n    } else if (this.Month === null) {\n      this.Month = new MonthFormat(DateTimeLocale.standard());\n    }\n    return this.Month;\n  }\n\n  /** @internal */\n  static ShortMonth: DateTimeFormat | null = null;\n  static shortMonth(locale?: DateTimeLocale): DateTimeFormat {\n    if (locale !== void 0 && locale !== DateTimeLocale.standard()) {\n      return new ShortMonthFormat(locale);\n    } else if (this.ShortMonth === null) {\n      this.ShortMonth = new ShortMonthFormat(DateTimeLocale.standard());\n    }\n    return this.ShortMonth;\n  }\n\n  /** @internal */\n  static DayOfMonthZeroPadded: DateTimeFormat | null = null;\n  /** @internal */\n  static DayOfMonthSpacePadded: DateTimeFormat | null = null;\n  static dayOfMonth(padChar?: number): DateTimeFormat {\n    if (padChar === void 0 || padChar === 48/*'0'*/) {\n      if (this.DayOfMonthZeroPadded === null) {\n        this.DayOfMonthZeroPadded = new DayOfMonthFormat(48/*'0'*/);\n      }\n      return this.DayOfMonthZeroPadded;\n    } else if (padChar === 32/*' '*/) {\n      if (this.DayOfMonthSpacePadded === null) {\n        this.DayOfMonthSpacePadded = new DayOfMonthFormat(32/*' '*/);\n      }\n      return this.DayOfMonthSpacePadded;\n    }\n    return new DayOfMonthFormat(padChar);\n  }\n\n  /** @internal */\n  static Weekday: DateTimeFormat | null = null;\n  static weekday(locale?: DateTimeLocale): DateTimeFormat {\n    if (locale !== void 0 && locale !== DateTimeLocale.standard()) {\n      return new WeekdayFormat(locale);\n    } else if (this.Weekday === null) {\n      this.Weekday = new WeekdayFormat(DateTimeLocale.standard());\n    }\n    return this.Weekday;\n  }\n\n  /** @internal */\n  static ShortWeekday: DateTimeFormat | null = null;\n  static shortWeekday(locale?: DateTimeLocale): DateTimeFormat {\n    if (locale !== void 0 && locale !== DateTimeLocale.standard()) {\n      return new ShortWeekdayFormat(locale);\n    } else if (this.ShortWeekday === null) {\n      this.ShortWeekday = new ShortWeekdayFormat(DateTimeLocale.standard());\n    }\n    return this.ShortWeekday;\n  }\n\n  /** @internal */\n  static Hour24: DateTimeFormat | null = null;\n  static hour24(): DateTimeFormat {\n    if (this.Hour24 === null) {\n      this.Hour24 = new Hour24Format();\n    }\n    return this.Hour24;\n  }\n\n  /** @internal */\n  static Hour12ZeroPadded: DateTimeFormat | null = null;\n  /** @internal */\n  static Hour12SpacePadded: DateTimeFormat | null = null;\n  static hour12(padChar?: number): DateTimeFormat {\n    if (padChar === void 0 || padChar === 48/*'0'*/) {\n      if (this.Hour12ZeroPadded === null) {\n        this.Hour12ZeroPadded = new Hour12Format(48/*'0'*/);\n      }\n      return this.Hour12ZeroPadded;\n    } else if (padChar === 32/*' '*/) {\n      if (this.Hour12SpacePadded === null) {\n        this.Hour12SpacePadded = new Hour12Format(32/*' '*/);\n      }\n      return this.Hour12SpacePadded;\n    }\n    return new Hour12Format(padChar);\n  }\n\n  /** @internal */\n  static Period: DateTimeFormat | null = null;\n  static period(locale?: DateTimeLocale): DateTimeFormat {\n    if (locale !== void 0 && locale !== DateTimeLocale.standard()) {\n      return new PeriodFormat(locale);\n    } else if (this.Period === null) {\n      this.Period = new PeriodFormat(DateTimeLocale.standard());\n    }\n    return this.Period;\n  }\n\n  /** @internal */\n  static Minute: DateTimeFormat | null = null;\n  static minute(): DateTimeFormat {\n    if (this.Minute === null) {\n      this.Minute = new MinuteFormat();\n    }\n    return this.Minute;\n  }\n\n  /** @internal */\n  static Second: DateTimeFormat | null = null;\n  static second(): DateTimeFormat {\n    if (this.Second === null) {\n      this.Second = new SecondFormat();\n    }\n    return this.Second;\n  }\n\n  /** @internal */\n  static Millisecond: DateTimeFormat | null = null;\n  static millisecond(): DateTimeFormat {\n    if (this.Millisecond === null) {\n      this.Millisecond = new MillisecondFormat();\n    }\n    return this.Millisecond;\n  }\n\n  static pattern(pattern: string, specifiers?: DateTimeSpecifiers | DateTimeLocale): DateTimeFormat {\n    if (specifiers === void 0 || specifiers instanceof DateTimeLocale) {\n      specifiers = DateTimeSpecifiers.standard(specifiers);\n    }\n    return new PatternFormat(pattern, specifiers);\n  }\n\n  /** @internal */\n  static Iso8601: DateTimeFormat | null = null;\n\n  static iso8601(): DateTimeFormat {\n    if (this.Iso8601 === null) {\n      this.Iso8601 = new PatternFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\", DateTimeSpecifiers.standard());\n    }\n    return this.Iso8601;\n  }\n\n  /** @internal */\n  static parseDateNumber(input: Input, factory: DateNumberFactory, desc: string,\n                         minDigits: number, maxDigits: number, date: DateTimeInit | undefined,\n                         value: number = 0, step: number = 0): Parser<DateTimeInit> {\n    let c = 0;\n    while (step < maxDigits) {\n      if (input.isCont() && (c = input.head(), Base10.isDigit(c))) {\n        input.step();\n        value = 10 * value + Base10.decodeDigit(c);\n        step += 1;\n        continue;\n      }\n      break;\n    }\n    if (!input.isEmpty()) {\n      if (step >= minDigits) {\n        return factory.term(value, date || {}, input);\n      } else {\n        return Parser.error(Diagnostic.expected(desc, input));\n      }\n    }\n    return factory.cont(date !== void 0 ? date : {}, value, step, input);\n  }\n\n  /** @internal */\n  static parseDateString(input: Input, factory: DateStringFactory, locale: DateTimeLocale,\n                         date?: DateTimeInit, output?: Output<string>): Parser<DateTimeInit> {\n    let c = 0;\n    output = output !== void 0 ? output : Unicode.stringOutput();\n    do {\n      if (input.isCont() && (c = input.head(), Unicode.isAlpha(c))) {\n        input.step();\n        output.write(c);\n        continue;\n      } else if (!input.isEmpty()) {\n        return factory.term(locale, output.bind(), date !== void 0 ? date : {}, input);\n      }\n      break;\n    } while (true);\n    return factory.cont(locale, date !== void 0 ? date : {}, output, input);\n  }\n\n  /** @internal */\n  static writeDateNumber2<T>(output: Output<T>, value: number, padChar?: number): Output<T> {\n    if (padChar === void 0) {\n      padChar = 48/*'0'*/;\n    }\n    const c1 = Math.floor(value % 10);\n    value /= 10;\n    const c0 = Math.floor(value % 10);\n    output = output.write(c0 !== 0 ? 48/*'0'*/ + c0 : padChar);\n    output = output.write(48/*'0'*/ + c1);\n    return output;\n  }\n\n  /** @internal */\n  static writeDateNumber3<T>(output: Output<T>, value: number, padChar?: number): Output<T> {\n    if (padChar === void 0) {\n      padChar = 48/*'0'*/;\n    }\n    const c2 = Math.floor(value % 10);\n    value /= 10;\n    const c1 = Math.floor(value % 10);\n    value /= 10;\n    const c0 = Math.floor(value % 10);\n    output = output.write(c0 !== 0 ? 48/*'0'*/ + c0 : padChar);\n    output = output.write(c1 !== 0 ? 48/*'0'*/ + c1 : padChar);\n    output = output.write(48/*'0'*/ + c2);\n    return output;\n  }\n\n  /** @internal */\n  static writeDateNumber4<T>(output: Output<T>, value: number, padChar?: number): Output<T> {\n    if (padChar === void 0) {\n      padChar = 48/*'0'*/;\n    }\n    const c3 = Math.floor(value % 10);\n    value /= 10;\n    const c2 = Math.floor(value % 10);\n    value /= 10;\n    const c1 = Math.floor(value % 10);\n    value /= 10;\n    const c0 = Math.floor(value % 10);\n    output = output.write(c0 !== 0 ? 48/*'0'*/ + c0 : padChar);\n    output = output.write(c1 !== 0 ? 48/*'0'*/ + c1 : padChar);\n    output = output.write(c2 !== 0 ? 48/*'0'*/ + c2 : padChar);\n    output = output.write(48/*'0'*/ + c3);\n    return output;\n  }\n}\n\n/** @internal */\nexport class YearFormat extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber4(output, date.year);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return YearParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class MonthOfYearFormat extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber2(output, date.month + 1);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return MonthOfYearParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class MonthFormat extends DateTimeFormat {\n  private readonly locale: DateTimeLocale;\n\n  constructor(locale: DateTimeLocale) {\n    super();\n    this.locale = locale;\n  }\n\n  override withLocale(locale: DateTimeLocale): DateTimeFormat {\n    if (locale === this.locale) {\n      return this;\n    }\n    return new MonthFormat(locale);\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = output.write(this.locale.months[date.month]!);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return MonthParser.parse(input, this.locale, date);\n  }\n}\n\n/** @internal */\nexport class ShortMonthFormat extends DateTimeFormat {\n  private readonly locale: DateTimeLocale;\n\n  constructor(locale: DateTimeLocale) {\n    super();\n    this.locale = locale;\n  }\n\n  override withLocale(locale: DateTimeLocale): DateTimeFormat {\n    if (locale === this.locale) {\n      return this;\n    }\n    return new ShortMonthFormat(locale);\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = output.write(this.locale.shortMonths[date.month]!);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return ShortMonthParser.parse(input, this.locale, date);\n  }\n}\n\n/** @internal */\nexport class DayOfMonthFormat extends DateTimeFormat {\n  constructor(padChar: number) {\n    super();\n    this.padChar = padChar;\n  }\n\n  readonly padChar: number;\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber2(output, date.day, this.padChar);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return DayOfMonthParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class WeekdayFormat extends DateTimeFormat {\n  private readonly locale: DateTimeLocale;\n\n  constructor(locale: DateTimeLocale) {\n    super();\n    this.locale = locale;\n  }\n\n  override withLocale(locale: DateTimeLocale): DateTimeFormat {\n    if (locale === this.locale) {\n      return this;\n    }\n    return new WeekdayFormat(locale);\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = output.write(this.locale.weekdays[date.weekday]!);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return WeekdayParser.parse(input, this.locale, date);\n  }\n}\n\n/** @internal */\nexport class ShortWeekdayFormat extends DateTimeFormat {\n  private readonly locale: DateTimeLocale;\n\n  constructor(locale: DateTimeLocale) {\n    super();\n    this.locale = locale;\n  }\n\n  override withLocale(locale: DateTimeLocale): DateTimeFormat {\n    if (locale === this.locale) {\n      return this;\n    }\n    return new ShortWeekdayFormat(locale);\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = output.write(this.locale.shortWeekdays[date.weekday]!);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return ShortWeekdayParser.parse(input, this.locale, date);\n  }\n}\n\n/** @internal */\nexport class Hour24Format extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber2(output, date.hour);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return Hour24Parser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class Hour12Format extends DateTimeFormat {\n  constructor(padChar: number) {\n    super();\n    this.padChar = padChar;\n  }\n\n  readonly padChar: number;\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    let hour = date.hour % 12;\n    if (hour === 0) {\n      hour = 12;\n    }\n    output = DateTimeFormat.writeDateNumber2(output, hour, this.padChar);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return Hour12Parser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class PeriodFormat extends DateTimeFormat {\n  private readonly locale: DateTimeLocale;\n\n  constructor(locale: DateTimeLocale) {\n    super();\n    this.locale = locale;\n  }\n\n  override withLocale(locale: DateTimeLocale): DateTimeFormat {\n    if (locale === this.locale) {\n      return this;\n    }\n    return new PeriodFormat(locale);\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = output.write(this.locale.periods[date.hour >= 12 ? 1 : 0]!);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return PeriodParser.parse(input, this.locale, date);\n  }\n}\n\n/** @internal */\nexport class MinuteFormat extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber2(output, date.minute);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return MinuteParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class SecondFormat extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber2(output, date.second);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return SecondParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class MillisecondFormat extends DateTimeFormat {\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    output = DateTimeFormat.writeDateNumber3(output, date.millisecond);\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return MillisecondParser.parse(input, date);\n  }\n}\n\n/** @internal */\nexport class PatternFormat extends DateTimeFormat {\n  private readonly pattern: string;\n  private readonly specifiers: DateTimeSpecifiers;\n\n  constructor(pattern: string, specifiers: DateTimeSpecifiers) {\n    super();\n    this.pattern = pattern;\n    this.specifiers = specifiers;\n  }\n\n  override writeDate<T>(output: Output<T>, date: DateTime): Output<T> {\n    const pattern = this.pattern;\n    const specifiers = this.specifiers;\n    let i = 0;\n    let j = 0;\n    while (j < pattern.length) {\n      if (pattern.charCodeAt(j) !== 37/*'%'*/) {\n        j += 1;\n        continue;\n      } else if (i !== j) {\n        output = output.write(pattern.slice(i, j));\n      }\n      const s = pattern.charAt(j + 1);\n      const f = specifiers[s];\n      if (f !== void 0) {\n        output = f.writeDate(output, date);\n      }\n      j += 2;\n      i = j;\n    }\n    if (i !== j) {\n      output = output.write(pattern.slice(i, j));\n    }\n    return output;\n  }\n\n  override parseDateTime(input: Input, date: DateTimeInit): Parser<DateTimeInit> {\n    return PatternParser.parse(input, this.pattern, this.specifiers, date);\n  }\n}\n\n/** @internal */\nexport class YearParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly year: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, year?: number, step?: number) {\n    super();\n    this.date = date;\n    this.year = year;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return YearParser.parse(input, this.date, this.year, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, year?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, YearParser, \"full year\", 4, 4, date, year, step);\n  }\n\n  static term(year: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.year = year;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, year: number, step: number): Parser<DateTimeInit> {\n    return new YearParser(date, year, step);\n  }\n}\n\n/** @internal */\nexport class MonthOfYearParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly month: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, month?: number, step?: number) {\n    super();\n    this.date = date;\n    this.month = month;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return MonthOfYearParser.parse(input, this.date, this.month, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, month?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, MonthOfYearParser, \"month number\", 2, 2, date, month, step);\n  }\n\n  static term(month: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.month = month - 1;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, month: number, step: number): Parser<DateTimeInit> {\n    return new MonthOfYearParser(date, month, step);\n  }\n}\n\n/** @internal */\nexport class MonthParser extends Parser<DateTimeInit> {\n  private readonly locale: DateTimeLocale;\n  private readonly date: DateTimeInit | undefined;\n  private readonly output: Output<string> | undefined;\n\n  constructor(locale: DateTimeLocale, date?: DateTimeInit, output?: Output<string>) {\n    super();\n    this.locale = locale;\n    this.date = date;\n    this.output = output;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return MonthParser.parse(input, this.locale, this.date, this.output);\n  }\n\n  static parse(input: Input, locale: DateTimeLocale, date?: DateTimeInit,\n               output?: Output<string>): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateString(input, MonthParser, locale, date, output);\n  }\n\n  static term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit> {\n    const month = locale.months.indexOf(value);\n    if (month < 0) {\n      return Parser.error(Diagnostic.message(\"expected month, but found \" + value, input));\n    }\n    date.month = month;\n    return Parser.done(date);\n  }\n\n  static cont(locale: DateTimeLocale, date: DateTimeInit, output: Output<string>): Parser<DateTimeInit> {\n    return new MonthParser(locale, date, output);\n  }\n}\n\n/** @internal */\nexport class ShortMonthParser extends Parser<DateTimeInit> {\n  private readonly locale: DateTimeLocale;\n  private readonly date: DateTimeInit | undefined;\n  private readonly output: Output<string> | undefined;\n\n  constructor(locale: DateTimeLocale, date?: DateTimeInit, output?: Output<string>) {\n    super();\n    this.locale = locale;\n    this.date = date;\n    this.output = output;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return ShortMonthParser.parse(input, this.locale, this.date, this.output);\n  }\n\n  static parse(input: Input, locale: DateTimeLocale, date?: DateTimeInit,\n               output?: Output<string>): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateString(input, ShortMonthParser, locale, date, output);\n  }\n\n  static term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit> {\n    const month = locale.shortMonths.indexOf(value);\n    if (month < 0) {\n      return Parser.error(Diagnostic.message(\"expected short month, but found \" + value, input));\n    }\n    date.month = month;\n    return Parser.done(date);\n  }\n\n  static cont(locale: DateTimeLocale, date: DateTimeInit, output: Output<string>): Parser<DateTimeInit> {\n    return new ShortMonthParser(locale, date, output);\n  }\n}\n\n/** @internal */\nexport class DayOfMonthParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly day: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, day?: number, step?: number) {\n    super();\n    this.date = date;\n    this.day = day;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return DayOfMonthParser.parse(input, this.date, this.day, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, day?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, DayOfMonthParser, \"day of month\", 2, 2, date, day, step);\n  }\n\n  static term(day: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.day = day;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, month: number, step: number): Parser<DateTimeInit> {\n    return new DayOfMonthParser(date, month, step);\n  }\n}\n\n/** @internal */\nexport class WeekdayParser extends Parser<DateTimeInit> {\n  private readonly locale: DateTimeLocale;\n  private readonly date: DateTimeInit | undefined;\n  private readonly output: Output<string> | undefined;\n\n  constructor(locale: DateTimeLocale, date?: DateTimeInit, output?: Output<string>) {\n    super();\n    this.locale = locale;\n    this.date = date;\n    this.output = output;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return WeekdayParser.parse(input, this.locale, this.date, this.output);\n  }\n\n  static parse(input: Input, locale: DateTimeLocale, date?: DateTimeInit,\n               output?: Output<string>): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateString(input, WeekdayParser, locale, date, output);\n  }\n\n  static term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit> {\n    const day = locale.weekdays.indexOf(value);\n    if (day < 0) {\n      return Parser.error(Diagnostic.message(\"expected weekday, but found \" + value, input));\n    }\n    return Parser.done(date);\n  }\n\n  static cont(locale: DateTimeLocale, date: DateTimeInit, output: Output<string>): Parser<DateTimeInit> {\n    return new WeekdayParser(locale, date, output);\n  }\n}\n\n/** @internal */\nexport class ShortWeekdayParser extends Parser<DateTimeInit> {\n  private readonly locale: DateTimeLocale;\n  private readonly date: DateTimeInit | undefined;\n  private readonly output: Output<string> | undefined;\n\n  constructor(locale: DateTimeLocale, date?: DateTimeInit, output?: Output<string>) {\n    super();\n    this.locale = locale;\n    this.date = date;\n    this.output = output;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return ShortWeekdayParser.parse(input, this.locale, this.date, this.output);\n  }\n\n  static parse(input: Input, locale: DateTimeLocale, date?: DateTimeInit,\n               output?: Output<string>): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateString(input, ShortWeekdayParser, locale, date, output);\n  }\n\n  static term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit> {\n    const day = locale.shortWeekdays.indexOf(value);\n    if (day < 0) {\n      return Parser.error(Diagnostic.message(\"expected short weekday, but found \" + value, input));\n    }\n    return Parser.done(date);\n  }\n\n  static cont(locale: DateTimeLocale, date: DateTimeInit, output: Output<string>): Parser<DateTimeInit> {\n    return new ShortWeekdayParser(locale, date, output);\n  }\n}\n\n/** @internal */\nexport class Hour24Parser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly hour: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, hour?: number, step?: number) {\n    super();\n    this.date = date;\n    this.hour = hour;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return Hour24Parser.parse(input, this.date, this.hour, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, hour?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, Hour24Parser, \"hour (24)\", 2, 2, date, hour, step);\n  }\n\n  static term(hour: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.hour = hour;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, hour: number, step: number): Parser<DateTimeInit> {\n    return new Hour24Parser(date, hour, step);\n  }\n}\n\n/** @internal */\nexport class Hour12Parser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly hour: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, hour?: number, step?: number) {\n    super();\n    this.date = date;\n    this.hour = hour;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return Hour12Parser.parse(input, this.date, this.hour, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, hour?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, Hour12Parser, \"hour (12)\", 2, 2, date, hour, step);\n  }\n\n  static term(hour: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.hour = (date.hour !== void 0 ? date.hour : 0) + hour;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, hour: number, step: number): Parser<DateTimeInit> {\n    return new Hour12Parser(date, hour, step);\n  }\n}\n\n/** @internal */\nexport class PeriodParser extends Parser<DateTimeInit> {\n  private readonly locale: DateTimeLocale;\n  private readonly date: DateTimeInit | undefined;\n  private readonly output: Output<string> | undefined;\n\n  constructor(locale: DateTimeLocale, date?: DateTimeInit, output?: Output<string>) {\n    super();\n    this.locale = locale;\n    this.date = date;\n    this.output = output;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return PeriodParser.parse(input, this.locale, this.date, this.output);\n  }\n\n  static parse(input: Input, locale: DateTimeLocale, date?: DateTimeInit,\n               output?: Output<string>): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateString(input, PeriodParser, locale, date, output);\n  }\n\n  static term(locale: DateTimeLocale, value: string, date: DateTimeInit, input: Input): Parser<DateTimeInit> {\n    const period = locale.months.indexOf(value);\n    if (period < 0) {\n      return Parser.error(Diagnostic.message(\"expected period of day, but found \" + value, input));\n    }\n    date.hour = (date.hour || 0) + 12 * period;\n    return Parser.done(date);\n  }\n\n  static cont(locale: DateTimeLocale, date: DateTimeInit, output: Output<string>): Parser<DateTimeInit> {\n    return new PeriodParser(locale, date, output);\n  }\n}\n\n/** @internal */\nexport class MinuteParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly minute: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, minute?: number, step?: number) {\n    super();\n    this.date = date;\n    this.minute = minute;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return MinuteParser.parse(input, this.date, this.minute, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, minute?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, MinuteParser, \"minute\", 2, 2, date, minute, step);\n  }\n\n  static term(minute: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.minute = minute;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, minute: number, step: number): Parser<DateTimeInit> {\n    return new MinuteParser(date, minute, step);\n  }\n}\n\n/** @internal */\nexport class SecondParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly second: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, second?: number, step?: number) {\n    super();\n    this.date = date;\n    this.second = second;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return SecondParser.parse(input, this.date, this.second, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, second?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, SecondParser, \"second\", 2, 2, date, second, step);\n  }\n\n  static term(second: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.second = second;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, second: number, step: number): Parser<DateTimeInit> {\n    return new SecondParser(date, second, step);\n  }\n}\n\n/** @internal */\nexport class MillisecondParser extends Parser<DateTimeInit> {\n  private readonly date: DateTimeInit | undefined;\n  private readonly millisecond: number | undefined;\n  private readonly step: number | undefined;\n\n  constructor(date?: DateTimeInit, millisecond?: number, step?: number) {\n    super();\n    this.date = date;\n    this.millisecond = millisecond;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return MillisecondParser.parse(input, this.date, this.millisecond, this.step);\n  }\n\n  static parse(input: Input, date?: DateTimeInit, millisecond?: number, step?: number): Parser<DateTimeInit> {\n    return DateTimeFormat.parseDateNumber(input, MillisecondParser, \"millisecond\", 1, 3, date, millisecond, step);\n  }\n\n  static term(millisecond: number, date: DateTimeInit): Parser<DateTimeInit> {\n    date.millisecond = millisecond;\n    return Parser.done(date);\n  }\n\n  static cont(date: DateTimeInit, millisecond: number, step: number): Parser<DateTimeInit> {\n    return new MillisecondParser(date, millisecond, step);\n  }\n}\n\n/** @internal */\nexport class PatternParser extends Parser<DateTimeInit> {\n  private readonly pattern: string;\n  private readonly specifiers: DateTimeSpecifiers;\n  private readonly date: DateTimeInit | undefined;\n  private readonly dateParser: Parser<DateTimeInit> | undefined;\n  private readonly step: number | undefined;\n\n  constructor(pattern: string, specifiers: DateTimeSpecifiers, date?: DateTimeInit,\n              dateParser?: Parser<DateTimeInit>, step?: number) {\n    super();\n    this.pattern = pattern;\n    this.specifiers = specifiers;\n    this.date = date;\n    this.dateParser = dateParser;\n    this.step = step;\n  }\n\n  override feed(input: Input): Parser<DateTimeInit> {\n    return PatternParser.parse(input, this.pattern, this.specifiers, this.date,\n                                     this.dateParser, this.step);\n  }\n\n  static parse(input: Input, pattern: string, specifiers: DateTimeSpecifiers,\n               date: DateTimeInit = {}, dateParser?: Parser<DateTimeInit>,\n               step: number = 0): Parser<DateTimeInit> {\n    let c = 0;\n    const n = pattern.length;\n    while (step < n) {\n      const p = pattern.charCodeAt(step);\n      if (p === 37/*'%'*/) {\n        if (dateParser === void 0) {\n          const s = pattern.charAt(step + 1);\n          const format = specifiers[s];\n          if (format !== void 0) {\n            dateParser = format.parseDateTime(input, date);\n          } else {\n            return Parser.error(Diagnostic.message(\"unknown format specifier: \" + s, input));\n          }\n        } else {\n          dateParser = dateParser.feed(input);\n        }\n        if (dateParser.isDone()) {\n          date = dateParser.bind();\n          dateParser = void 0;\n          step += 2;\n          continue;\n        } else if (dateParser.isError()) {\n          return dateParser.asError();\n        }\n      } else if (input.isCont()) {\n        c = input.head();\n        if (c === p) {\n          input.step();\n          step += 1;\n          continue;\n        } else {\n          return Parser.error(Diagnostic.expected(p, input));\n        }\n      } else if (!input.isEmpty()) {\n        return Parser.error(Diagnostic.unexpected(input));\n      }\n      break;\n    }\n    if (step === n) {\n      return Parser.done(date);\n    }\n    return new PatternParser(pattern, specifiers, date, dateParser, step);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {DateTimeLike} from \"./DateTime\";\nimport {DateTime} from \"./DateTime\";\n\n/** @public */\nexport abstract class TimeInterval {\n  abstract offset(d: DateTimeLike, k?: number): DateTime;\n\n  next(d: DateTimeLike, k?: number): DateTime {\n    return this.floor(this.offset(d, k));\n  }\n\n  abstract floor(d: DateTimeLike): DateTime;\n\n  ceil(d: DateTimeLike): DateTime {\n    if (d instanceof DateTime) {\n      d = new DateTime(d.time - 1, d.zone);\n    } else {\n      d = DateTime.time(d) - 1;\n    }\n    return this.next(this.floor(d), 1);\n  }\n\n  round(t: DateTimeLike): DateTime {\n    const d = DateTime.fromLike(t);\n    const d0 = this.floor(d);\n    const d1 = this.ceil(d);\n    return d.time - d0.time < d1.time - d.time ? d0 : d1;\n  }\n\n  range(t0: DateTimeLike, t1: DateTimeLike, step?: number): DateTime[] {\n    let d0 = this.ceil(t0);\n    const d1 = DateTime.time(t1);\n    const ds: DateTime[] = [];\n    step = typeof step === \"number\" ? Math.floor(step) : 1;\n    if (step > 0) {\n      while (d0.isDefined() && d0.time < d1) {\n        ds.push(d0);\n        d0 = this.next(d0, step);\n      }\n    }\n    return ds;\n  }\n\n  filter(predicate: (d: DateTime) => boolean): TimeInterval {\n    return new FilterTimeInterval(this, predicate);\n  }\n\n  /** @internal */\n  static Year: YearInterval | null = null;\n  static get year(): UnitTimeInterval {\n    if (this.Year === null) {\n      this.Year = new YearInterval();\n    }\n    return this.Year;\n  }\n\n  /** @internal */\n  static Month: MonthInterval | null = null;\n  static get month(): UnitTimeInterval {\n    if (this.Month === null) {\n      this.Month = new MonthInterval();\n    }\n    return this.Month;\n  }\n\n  /** @internal */\n  static Week: WeekInterval | null = null;\n  static get week(): TimeInterval {\n    if (this.Week === null) {\n      this.Week = new WeekInterval();\n    }\n    return this.Week;\n  }\n\n  /** @internal */\n  static Day: DayInterval | null = null;\n  static get day(): UnitTimeInterval {\n    if (this.Day === null) {\n      this.Day = new DayInterval();\n    }\n    return this.Day;\n  }\n\n  /** @internal */\n  static Hour: HourInterval | null = null;\n  static get hour(): UnitTimeInterval {\n    if (this.Hour === null) {\n      this.Hour = new HourInterval();\n    }\n    return this.Hour;\n  }\n\n  /** @internal */\n  static Minute: MinuteInterval | null = null;\n  static get minute(): UnitTimeInterval {\n    if (this.Minute === null) {\n      this.Minute = new MinuteInterval();\n    }\n    return this.Minute;\n  }\n\n  /** @internal */\n  static Second: SecondInterval | null = null;\n  static get second(): UnitTimeInterval {\n    if (this.Second === null) {\n      this.Second = new SecondInterval();\n    }\n    return this.Second;\n  }\n\n  /** @internal */\n  static Millisecond: MillisecondInterval | null = null;\n  static get millisecond(): UnitTimeInterval {\n    if (this.Millisecond === null) {\n      this.Millisecond = new MillisecondInterval();\n    }\n    return this.Millisecond;\n  }\n\n  static years(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.year.range(d0, d1, step);\n  }\n\n  static months(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.month.range(d0, d1, step);\n  }\n\n  static weeks(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.week.range(d0, d1, step);\n  }\n\n  static days(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.day.range(d0, d1, step);\n  }\n\n  static hours(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.hour.range(d0, d1, step);\n  }\n\n  static minutes(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.minute.range(d0, d1, step);\n  }\n\n  static seconds(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.second.range(d0, d1, step);\n  }\n\n  static milliseconds(d0: DateTimeLike, d1: DateTimeLike, step?: number): DateTime[] {\n    return TimeInterval.millisecond.range(d0, d1, step);\n  }\n\n  /** @internal */\n  static readonly MillisPerSecond: number = 1000;\n  /** @internal */\n  static readonly MillisPerMinute: number = 60 * this.MillisPerSecond;\n  /** @internal */\n  static readonly MillisPerHour: number = 60 * this.MillisPerMinute;\n}\n\n/** @public */\nexport abstract class UnitTimeInterval extends TimeInterval {\n  abstract every(k: number): TimeInterval;\n}\n\n/** @internal */\nexport class FilterTimeInterval extends TimeInterval {\n  constructor(unit: TimeInterval, predicate: (d: DateTime) => boolean) {\n    super();\n    this.unit = unit;\n    this.predicate = predicate;\n  }\n\n  /** @internal */\n  readonly unit: TimeInterval;\n  /** @internal */\n  readonly predicate: (d: DateTime) => boolean;\n\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    while (k < 0) {\n      do {\n        d = this.unit.offset(d, -1);\n      } while (d.isDefined() && !this.predicate(d));\n      k += 1;\n    }\n    while (k > 0) {\n      do {\n        d = this.unit.offset(d, 1);\n      } while (d.isDefined() && !this.predicate(d));\n      k -= 1;\n    }\n    return d;\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    while (d = this.unit.floor(d), d.isDefined() && !this.predicate(d)) {\n      d = new DateTime(d.time - 1, d.zone);\n    }\n    return d;\n  }\n}\n\n/** @internal */\nexport class YearInterval extends UnitTimeInterval {\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = d.withYear(d.year + k);\n    return d;\n  }\n\n  override next(t: DateTimeLike, k?: number): DateTime {\n    const d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    return d.withYear(d.year + k).withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    const d = DateTime.fromLike(t);\n    return d.withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n\n  override ceil(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = new DateTime(d.time - 1, d.zone);\n    d = d.withMonth(0, 1).withHour(0, 0, 0, 0);\n    d = d.withYear(d.year + 1);\n    return d.withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new YearsInterval(k);\n    }\n    throw new Error(\"\" + k);\n  }\n}\n\n/** @internal */\nexport class YearsInterval extends TimeInterval {\n  private readonly stride: number;\n\n  constructor(stride: number) {\n    super();\n    this.stride = stride;\n  }\n\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    const d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    return d.withYear(d.year + k * this.stride);\n  }\n\n  override next(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = d.withYear(Math.floor((d.year + k * this.stride) / this.stride) * this.stride);\n    return d.withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = d.withYear(Math.floor(d.year / this.stride) * this.stride);\n    return d.withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n\n  override ceil(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = new DateTime(d.time - 1, d.zone);\n    d = d.withYear(Math.floor(d.year / this.stride) * this.stride);\n    d = d.withMonth(0, 1).withHour(0, 0, 0, 0);\n    d = d.withYear(Math.floor((d.year + this.stride) / this.stride) * this.stride);\n    return d.withMonth(0, 1).withHour(0, 0, 0, 0);\n  }\n}\n\n/** @internal */\nexport class MonthInterval extends UnitTimeInterval {\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    const d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    return d.withMonth(d.month + k);\n  }\n\n  override next(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = d.withMonth(d.month + k);\n    return d.withDay(1).withHour(0, 0, 0, 0);\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    const d = DateTime.fromLike(t);\n    return d.withDay(1).withHour(0, 0, 0, 0);\n  }\n\n  override ceil(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = new DateTime(d.time - 1, d.zone);\n    d = d.withDay(1).withHour(0, 0, 0, 0);\n    d = d.withMonth(d.month + 1);\n    return d.withDay(1).withHour(0, 0, 0, 0);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new FilterTimeInterval(this, MonthInterval.modulo.bind(void 0, k));\n    }\n    throw new Error(\"\" + k);\n  }\n\n  /** @internal */\n  static modulo(k: number, d: DateTime): boolean {\n    const month = d.month;\n    return isFinite(month) && month % k === 0;\n  }\n}\n\n/** @internal */\nexport class WeekInterval extends TimeInterval {\n  readonly day: number;\n\n  constructor(day: number = 0) {\n    super();\n    this.day = day;\n  }\n\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    const d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    return d.withDay(d.day + 7 * k);\n  }\n\n  override next(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = d.withDay(d.day + 7 * k);\n    d = d.withDay(d.day - (d.weekday + 7 - this.day) % 7);\n    return d.withHour(0, 0, 0, 0);\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = d.withDay(d.day - (d.weekday + 7 - this.day) % 7);\n    return d.withHour(0, 0, 0, 0);\n  }\n\n  override ceil(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = new DateTime(d.time - 1, d.zone);\n    d = d.withDay(d.day - (d.weekday + 7 - this.day) % 7);\n    d = d.withHour(0, 0, 0, 0);\n    d = d.withDay(d.day + 7);\n    return d.withHour(0, 0, 0, 0);\n  }\n}\n\n/** @internal */\nexport class DayInterval extends UnitTimeInterval {\n  override offset(t: DateTimeLike, k?: number): DateTime {\n    const d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    return d.withDay(d.day + k);\n  }\n\n  override next(t: DateTimeLike, k?: number): DateTime {\n    let d = DateTime.fromLike(t);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = d.withDay(d.day + k);\n    return d.withHour(0, 0, 0, 0);\n  }\n\n  override floor(t: DateTimeLike): DateTime {\n    const d = DateTime.fromLike(t);\n    return d.withHour(0, 0, 0, 0);\n  }\n\n  override ceil(t: DateTimeLike): DateTime {\n    let d = DateTime.fromLike(t);\n    d = new DateTime(d.time - 1, d.zone);\n    d = d.withHour(0, 0, 0, 0);\n    d = d.withDay(d.day + 1);\n    return d.withHour(0, 0, 0, 0);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new FilterTimeInterval(this, DayInterval.modulo.bind(void 0, k));\n    }\n    throw new Error(\"\" + k);\n  }\n\n  /** @internal */\n  static modulo(k: number, d: DateTime): boolean {\n    const day = d.day;\n    return isFinite(day) && day % k === 0;\n  }\n}\n\n/** @internal */\nexport class HourInterval extends UnitTimeInterval {\n  override offset(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * TimeInterval.MillisPerHour;\n    return new DateTime(d, z);\n  }\n\n  override next(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * TimeInterval.MillisPerHour;\n    let dtz = z.offset * TimeInterval.MillisPerMinute % TimeInterval.MillisPerHour;\n    if (dtz < 0) {\n      dtz += TimeInterval.MillisPerHour;\n    }\n    d = Math.floor((d - dtz) / TimeInterval.MillisPerHour) * TimeInterval.MillisPerHour + dtz;\n    return new DateTime(d, z);\n  }\n\n  override floor(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    let dtz = z.offset * TimeInterval.MillisPerMinute % TimeInterval.MillisPerHour;\n    if (dtz < 0) {\n      dtz += TimeInterval.MillisPerHour;\n    }\n    d = Math.floor((d - dtz) / TimeInterval.MillisPerHour) * TimeInterval.MillisPerHour + dtz;\n    return new DateTime(d, z);\n  }\n\n  override ceil(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    d -= 1;\n    let dtz = z.offset * TimeInterval.MillisPerMinute % TimeInterval.MillisPerHour;\n    if (dtz < 0) {\n      dtz += TimeInterval.MillisPerHour;\n    }\n    d = (Math.floor((d - dtz) / TimeInterval.MillisPerHour) * TimeInterval.MillisPerHour + dtz) + TimeInterval.MillisPerHour;\n    d = Math.floor((d - dtz) / TimeInterval.MillisPerHour) * TimeInterval.MillisPerHour + dtz;\n    return new DateTime(d, z);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new FilterTimeInterval(this, HourInterval.modulo.bind(void 0, k));\n    }\n    throw new Error(\"\" + k);\n  }\n\n  /** @internal */\n  static modulo(k: number, d: DateTime): boolean {\n    const hour = d.hour;\n    return isFinite(hour) && hour % k === 0;\n  }\n}\n\n/** @internal */\nexport class MinuteInterval extends UnitTimeInterval {\n  override offset(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * TimeInterval.MillisPerMinute;\n    return new DateTime(d, z);\n  }\n\n  override next(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d = Math.floor((d + k * TimeInterval.MillisPerMinute) / TimeInterval.MillisPerMinute) * TimeInterval.MillisPerMinute;\n    return new DateTime(d, z);\n  }\n\n  override floor(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    d = Math.floor(d / TimeInterval.MillisPerMinute) * TimeInterval.MillisPerMinute;\n    return new DateTime(d, z);\n  }\n\n  override ceil(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    d = Math.floor(((Math.floor((d - 1) / TimeInterval.MillisPerMinute) * TimeInterval.MillisPerMinute) + TimeInterval.MillisPerMinute) / TimeInterval.MillisPerMinute) * TimeInterval.MillisPerMinute;\n    return new DateTime(d, z);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new FilterTimeInterval(this, MinuteInterval.modulo.bind(void 0, k));\n    }\n    throw new Error(\"\" + k);\n  }\n\n  /** @internal */\n  static modulo(k: number, d: DateTime): boolean {\n    const minute = d.minute;\n    return isFinite(minute) && minute % k === 0;\n  }\n}\n\n/** @internal */\nexport class SecondInterval extends UnitTimeInterval {\n  override offset(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * TimeInterval.MillisPerSecond;\n    return new DateTime(d, z);\n  }\n\n  override next(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * TimeInterval.MillisPerSecond;\n    d = Math.floor(d / TimeInterval.MillisPerSecond) * TimeInterval.MillisPerSecond;\n    return new DateTime(d, z);\n  }\n\n  override floor(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    d = Math.floor(d / TimeInterval.MillisPerSecond) * TimeInterval.MillisPerSecond;\n    return new DateTime(d, z);\n  }\n\n  override ceil(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    d = Math.floor(((Math.floor((d - 1) / TimeInterval.MillisPerSecond) * TimeInterval.MillisPerSecond) + TimeInterval.MillisPerSecond) / TimeInterval.MillisPerSecond) * TimeInterval.MillisPerSecond;\n    return new DateTime(d, z);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new FilterTimeInterval(this, SecondInterval.modulo.bind(void 0, k));\n    }\n    throw new Error('' + k);\n  }\n\n  /** @internal */\n  static modulo(k: number, d: DateTime): boolean {\n    const second = d.second;\n    return isFinite(second) && second % k === 0;\n  }\n}\n\n/** @internal */\nexport class MillisecondInterval extends UnitTimeInterval {\n  override offset(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k;\n    return new DateTime(d, z);\n  }\n\n  override next(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k;\n    return new DateTime(d, z);\n  }\n\n  override floor(d: DateTimeLike): DateTime {\n    return DateTime.fromLike(d);\n  }\n\n  override ceil(d: DateTimeLike): DateTime {\n    return DateTime.fromLike(d);\n  }\n\n  override every(k: number): TimeInterval {\n    if (k === 1) {\n      return this;\n    } else if (isFinite(k) && k >= 1) {\n      return new MillisecondsInterval(k);\n    }\n    throw new Error(\"\" + k);\n  }\n}\n\n/** @internal */\nexport class MillisecondsInterval extends TimeInterval {\n  private readonly stride: number;\n\n  constructor(stride: number) {\n    super();\n    if (!isFinite(stride)) {\n      stride = 1;\n    }\n    this.stride = stride;\n  }\n\n  override offset(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    d += k * this.stride;\n    return new DateTime(d, z);\n  }\n\n  override next(d: DateTimeLike, k?: number): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    k = Math.max(1, typeof k === \"number\" ? Math.floor(k) : 1);\n    const stride = this.stride;\n    d = Math.floor((d + k * stride) / stride) * stride;\n    return new DateTime(d, z);\n  }\n\n  override floor(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    const stride = this.stride;\n    d = Math.floor(d / stride) * stride;\n    return new DateTime(d, z);\n  }\n\n  override ceil(d: DateTimeLike): DateTime {\n    const z = DateTime.zone(d);\n    d = DateTime.time(d);\n    const stride = this.stride;\n    d = Math.floor(((Math.floor((d - 1) / stride) * stride) + stride) / stride) * stride;\n    return new DateTime(d, z);\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Domain} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport type {DateTimeLike} from \"./DateTime\";\nimport {DateTime} from \"./DateTime\";\nimport {TimeRange} from \"./\"; // forward import\n\n/** @public */\nexport interface TimeDomain extends Domain<DateTime>, Interpolate<TimeDomain> {\n  /** @override */\n  readonly 0: DateTime;\n\n  /** @override */\n  readonly 1: DateTime;\n\n  readonly inverse: TimeRange;\n\n  /** @override */\n  contains(t: DateTimeLike): boolean;\n\n  /** @override */\n  union(that: Domain<DateTime>): TimeDomain;\n\n  /** @override */\n  interpolateTo(that: TimeDomain): Interpolator<TimeDomain>;\n  interpolateTo(that: unknown): Interpolator<TimeDomain> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const TimeDomain = (function (_super: typeof Domain) {\n  const TimeDomain = function (x0: DateTime, x1: DateTime): TimeDomain {\n    const domain = function (t: DateTime): number {\n      const t0 = domain[0].time;\n      const t1 = domain[1].time;\n      const dt = t1 - t0;\n      return dt !== 0 ? (t.time - t0) / dt : 0;\n    } as TimeDomain;\n    Object.setPrototypeOf(domain, TimeDomain.prototype);\n    (domain as Mutable<typeof domain>)[0] = x0;\n    (domain as Mutable<typeof domain>)[1] = x1;\n    return domain;\n  } as {\n    (x0: DateTime, x1: DateTime): TimeDomain;\n\n    /** @internal */\n    prototype: TimeDomain;\n  };\n\n  TimeDomain.prototype = Object.create(_super.prototype);\n  TimeDomain.prototype.constructor = TimeDomain;\n\n  Object.defineProperty(TimeDomain.prototype, \"inverse\", {\n    get(this: TimeDomain): TimeRange {\n      return TimeRange(this[0], this[1]);\n    },\n    configurable: true,\n  });\n\n  TimeDomain.prototype.contains = function (t: DateTimeLike): boolean {\n    t = DateTime.time(t);\n    return this[0].time <= t && t <= this[1].time;\n  };\n\n  TimeDomain.prototype.union = function (that: Domain<DateTime>): TimeDomain {\n    const t0Min = this[0];\n    const t0Max = this[1];\n    const t1Min = that[0];\n    const t1Max = that[1];\n    const tMin = t0Min.time <= t1Min.time ? t0Min : t1Min;\n    const tMax = t0Max.time >= t1Max.time ? t0Max : t1Max;\n    return TimeDomain(tMin, tMax);\n  };\n\n  TimeDomain.prototype.interpolateTo = function (this: TimeDomain, that: unknown): Interpolator<TimeDomain> | null {\n    if (that instanceof TimeDomain) {\n      return TimeDomainInterpolator(this, that);\n    }\n    return null;\n  } as typeof TimeDomain.prototype.interpolateTo;\n\n  TimeDomain.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof TimeDomain;\n  };\n\n  TimeDomain.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimeDomain) {\n      return that.canEqual(this) && this[0].equals(that[0]) && this[1].equals(that[1]);\n    }\n    return false;\n  };\n\n  TimeDomain.prototype.toString = function (): string {\n    return \"TimeDomain(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  return TimeDomain;\n})(Domain);\n\n/** @internal */\nexport const TimeDomainInterpolator = (function (_super: typeof Interpolator) {\n  const TimeDomainInterpolator = function (x0: TimeDomain, x1: TimeDomain): Interpolator<TimeDomain> {\n    const interpolator = function (u: number): TimeDomain {\n      const x0 = interpolator[0];\n      const x00 = x0[0];\n      const x01 = x0[1];\n      const x1 = interpolator[1];\n      const x10 = x1[0];\n      const x11 = x1[1];\n      return TimeDomain(new DateTime(x00.time + u * (x10.time - x00.time), u === 0 ? x00.zone : x10.zone),\n                        new DateTime(x01.time + u * (x11.time - x01.time), u === 0 ? x01.zone : x11.zone));\n    } as Interpolator<TimeDomain>;\n    Object.setPrototypeOf(interpolator, TimeDomainInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = x0;\n    (interpolator as Mutable<typeof interpolator>)[1] = x1;\n    return interpolator;\n  } as {\n    (x0: TimeDomain, x1: TimeDomain): Interpolator<TimeDomain>;\n\n    /** @internal */\n    prototype: Interpolator<TimeDomain>;\n  };\n\n  TimeDomainInterpolator.prototype = Object.create(_super.prototype);\n  TimeDomainInterpolator.prototype.constructor = TimeDomainInterpolator;\n\n  return TimeDomainInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Range} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {DateTime} from \"./DateTime\";\nimport {TimeDomain} from \"./TimeDomain\";\n/** @public */\nexport interface TimeRange extends Range<DateTime>, Interpolate<TimeRange> {\n  /** @override */\n  readonly 0: DateTime;\n\n  /** @override */\n  readonly 1: DateTime;\n\n  readonly inverse: TimeDomain;\n\n  /** @override */\n  union(that: Range<DateTime>): TimeRange;\n\n  /** @override */\n  interpolateTo(that: TimeRange): Interpolator<TimeRange>;\n  interpolateTo(that: unknown): Interpolator<TimeRange> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const TimeRange = (function (_super: typeof Range) {\n  const TimeRange = function (y0: DateTime, y1: DateTime): TimeRange {\n    const range = function (u: number): DateTime {\n      const t0 = range[0].time;\n      const t1 = range[1].time;\n      return new DateTime(t0 + u * (t1 - t0), u === 0 ? range[0].zone : range[1].zone);\n    } as TimeRange;\n    Object.setPrototypeOf(range, TimeRange.prototype);\n    (range as Mutable<typeof range>)[0] = y0;\n    (range as Mutable<typeof range>)[1] = y1;\n    return range;\n  } as {\n    (y0: DateTime, y1: DateTime): TimeRange;\n\n    /** @internal */\n    prototype: TimeRange;\n  };\n\n  TimeRange.prototype = Object.create(_super.prototype);\n  TimeRange.prototype.constructor = TimeRange;\n\n  Object.defineProperty(TimeRange.prototype, \"inverse\", {\n    get(this: TimeRange): TimeDomain {\n      return TimeDomain(this[0], this[1]);\n    },\n    configurable: true,\n  });\n\n  TimeRange.prototype.union = function (that: Range<DateTime>): TimeRange {\n    const t00 = this[0];\n    const t01 = this[1];\n    const t10 = that[0];\n    const t11 = that[1];\n    let t0: DateTime;\n    let t1: DateTime;\n    if (t00.time <= t01.time && t10.time <= t11.time) {\n      t0 = t00.time <= t10.time ? t00 : t10;\n      t1 = t01.time >= t11.time ? t01 : t11;\n    } else if (t00.time >= t01.time && t10.time >= t11.time) {\n      t0 = t00.time >= t10.time ? t00 : t10;\n      t1 = t01.time <= t11.time ? t01 : t11;\n    } else if (t00.time <= t01.time && t10.time >= t11.time) {\n      t0 = t00.time <= t11.time ? t00 : t11;\n      t1 = t01.time >= t10.time ? t01 : t10;\n    } else { // t00.time >= t01.time && t10.time <= t11.time\n      t0 = t01.time <= t10.time ? t01 : t10;\n      t1 = t00.time >= t11.time ? t00 : t11;\n    }\n    return TimeRange(t0, t1);\n  };\n\n  TimeRange.prototype.interpolateTo = function (this: TimeRange, that: unknown): Interpolator<TimeRange> | null {\n    if (that instanceof TimeRange) {\n      return TimeRangeInterpolator(this, that);\n    }\n    return null;\n  } as typeof TimeRange.prototype.interpolateTo;\n\n  TimeRange.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof TimeRange;\n  };\n\n  TimeRange.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimeRange) {\n      return that.canEqual(this) && this[0].equals(that[0]) && this[1].equals(that[1]);\n    }\n    return false;\n  };\n\n  TimeRange.prototype.toString = function (): string {\n    return \"TimeRange(\" + this[0] + \", \" + this[1] + \")\";\n  };\n\n  return TimeRange;\n})(Range);\n\n/** @internal */\nexport const TimeRangeInterpolator = (function (_super: typeof Interpolator) {\n  const TimeRangeInterpolator = function (y0: TimeRange, y1: TimeRange): Interpolator<TimeRange> {\n    const interpolator = function (u: number): TimeRange {\n      const y0 = interpolator[0];\n      const y00 = y0[0];\n      const y01 = y0[1];\n      const y1 = interpolator[1];\n      const y10 = y1[0];\n      const y11 = y1[1];\n      return TimeRange(new DateTime(y00.time + u * (y10.time - y00.time), u === 0 ? y00.zone : y10.zone),\n                       new DateTime(y01.time + u * (y11.time - y01.time), u === 0 ? y01.zone : y11.zone));\n    } as Interpolator<TimeRange>;\n    Object.setPrototypeOf(interpolator, TimeRangeInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = y0;\n    (interpolator as Mutable<typeof interpolator>)[1] = y1;\n    return interpolator;\n  } as {\n    (y0: TimeRange, y1: TimeRange): Interpolator<TimeRange>;\n\n    /** @internal */\n    prototype: Interpolator<TimeRange>;\n  };\n\n  TimeRangeInterpolator.prototype = Object.create(_super.prototype);\n  TimeRangeInterpolator.prototype.constructor = TimeRangeInterpolator;\n\n  return TimeRangeInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport {Mapping} from \"@swim/util\";\nimport type {Interpolate} from \"@swim/util\";\nimport {Interpolator} from \"@swim/util\";\nimport {LinearRange} from \"@swim/util\";\nimport {ContinuousScale} from \"@swim/util\";\nimport type {DateTimeLike} from \"./DateTime\";\nimport {DateTime} from \"./DateTime\";\nimport {TimeDomain} from \"./TimeDomain\";\n\n/** @public */\nexport interface TimeScale extends ContinuousScale<DateTime, number>, Interpolate<TimeScale> {\n  /** @override */\n  readonly domain: TimeDomain;\n\n  /** @override */\n  readonly range: LinearRange;\n\n  /** @override */\n  readonly inverse: Mapping<number, DateTime>;\n\n  /** @override */\n  withDomain(domain: TimeDomain): TimeScale;\n  withDomain(x0: DateTimeLike, x1: DateTimeLike): TimeScale;\n\n  /** @override */\n  overRange(range: LinearRange): TimeScale;\n  overRange(y0: number, y1: number): TimeScale;\n\n  /** @override */\n  clampDomain(xMin: DateTime | undefined, xMax: DateTime | undefined,\n              zMin: number | undefined, zMax: number | undefined,\n              epsilon?: number): TimeScale;\n\n  /** @override */\n  solveDomain(x1: DateTime, y1: number, x2?: DateTime, y2?: number,\n              reflect?: boolean, epsilon?: number): TimeScale;\n\n  /** @override */\n  interpolateTo(that: TimeScale): Interpolator<TimeScale>;\n  interpolateTo(that: unknown): Interpolator<TimeScale> | null;\n\n  /** @override */\n  canEqual(that: unknown): boolean;\n\n  /** @override */\n  equals(that: unknown): boolean;\n\n  /** @override */\n  toString(): string;\n}\n\n/** @public */\nexport const TimeScale = (function (_super: typeof ContinuousScale) {\n  const TimeScale = function (domain: TimeDomain, range: LinearRange): TimeScale {\n    const scale = function (x: DateTime): number {\n      return scale.range(scale.domain(x));\n    } as TimeScale;\n    Object.setPrototypeOf(scale, TimeScale.prototype);\n    (scale as Mutable<typeof scale>).domain = domain;\n    (scale as Mutable<typeof scale>).range = range;\n    return scale;\n  } as {\n    (domain: TimeDomain, range: LinearRange): TimeScale;\n\n    /** @internal */\n    prototype: TimeScale;\n  };\n\n  TimeScale.prototype = Object.create(_super.prototype);\n  TimeScale.prototype.constructor = TimeScale;\n\n  Object.defineProperty(TimeScale.prototype, \"inverse\", {\n    get(this: TimeScale): Mapping<number, DateTime> {\n      return Mapping(this.range.inverse, this.domain.inverse);\n    },\n    configurable: true,\n  });\n\n  TimeScale.prototype.withDomain = function (x0: TimeDomain | DateTimeLike, x1?: DateTimeLike): TimeScale {\n    let domain: TimeDomain;\n    if (arguments.length === 1) {\n      domain = x0 as TimeDomain;\n    } else {\n      x0 = DateTime.fromLike(x0 as DateTimeLike);\n      x1 = DateTime.fromLike(x1!);\n      domain = TimeDomain(x0, x1);\n    }\n    return TimeScale(domain, this.range);\n  };\n\n  TimeScale.prototype.overRange = function (y0: LinearRange | number, y1?: number): TimeScale {\n    let range: LinearRange;\n    if (arguments.length === 1) {\n      range = y0 as LinearRange;\n    } else {\n      range = LinearRange(y0 as number, y1!);\n    }\n    return TimeScale(this.domain, range);\n  };\n\n  TimeScale.prototype.clampDomain = function (xMin: DateTime | undefined, xMax: DateTime | undefined,\n                                              zMin: number | undefined, zMax: number | undefined,\n                                              epsilon?: number): TimeScale {\n    if (epsilon === void 0) {\n      epsilon = Equivalent.Epsilon;\n    }\n    const x0 = this.domain[0];\n    const x1 = this.domain[1];\n    let t0 = x0.time;\n    let t1 = x1.time;\n    const tMin = xMin !== void 0 ? xMin.time : void 0;\n    const tMax = xMax !== void 0 ? xMax.time : void 0;\n    if (tMin !== void 0 && tMax !== void 0 && Math.abs(t1 - t0) > tMax - tMin) {\n      if (t0 < t1) {\n        t0 = tMin;\n        t1 = tMax;\n      } else {\n        t1 = tMin;\n        t0 = tMax;\n      }\n    } else if (tMin !== void 0) {\n      if (t0 < t1 && t0 < tMin) {\n        t1 += tMin - t0;\n        t0 = tMin;\n      } else if (t1 < t0 && t1 < tMin) {\n        t0 += tMin - t1;\n        t1 = tMin;\n      }\n    }\n    if (tMax !== void 0) {\n      if (t0 < t1 && t1 > tMax) {\n        t0 -= t1 - tMax;\n        t1 = tMax;\n      } else if (t1 < t0 && t0 > tMax) {\n        t1 -= t0 - tMax;\n        t0 = tMax;\n      }\n    }\n\n    const y0 = this(x0);\n    const y1 = this(x1);\n    const dy = y0 < y1 ? y1 - y0 : y0 - y1;\n    const z = Math.abs(dy / (t1 - t0));\n    if (zMin !== void 0 && z < 1 / zMin) {\n      const dz = dy * zMin;\n      const tSum = t0 + t1;\n      t0 = (tSum - dz) / 2;\n      t1 = (tSum + dz) / 2;\n    } else if (zMax !== void 0 && z > 1 / zMax) {\n      const dz = dy * zMax;\n      const tSum = t0 + t1;\n      t0 = (tSum - dz) / 2;\n      t1 = (tSum + dz) / 2;\n    }\n\n    if (Math.abs(t0 - x0.time) < epsilon && Math.abs(t1 - x1.time) < epsilon) {\n      return this;\n    }\n    return TimeScale(TimeDomain(new DateTime(t0, x0.zone), new DateTime(t1, x1.zone)), this.range);\n  };\n\n  TimeScale.prototype.solveDomain = function (x1: DateTime, y1: number, x2?: DateTime, y2?: number,\n                                              reflect?: boolean, epsilon?: number): TimeScale {\n    if (epsilon === void 0) {\n      epsilon = Equivalent.Epsilon;\n    }\n    const dt = this.domain[1].time - this.domain[0].time;\n    const y0 = this.range[0];\n    const y3 = this.range[1];\n    const t1 = x1.time;\n    const t2 = x2 !== void 0 ? x2.time : void 0;\n    let m: number;\n    if (t2 === void 0 || y2 === void 0 || Math.abs(t2 - t1) < epsilon || Math.abs(y2 - y1) < epsilon) {\n      m = (y3 - y0) / (dt !== 0 ? dt : epsilon);\n    } else {\n      m = (y2 - y1) / (t2 - t1);\n      if ((reflect === void 0 || !reflect) && (m < 0 !== (y3 - y0) / dt < 0)) {\n        m = -m;\n      }\n    }\n    const b = y1 - m * t1;\n    const t0 = (y0 - b) / m;\n    const t3 = (y3 - b) / m;\n\n    if (Math.abs(t0 - this.domain[0].time) < epsilon && Math.abs(t3 - this.domain[1].time) < epsilon) {\n      return this;\n    }\n    return TimeScale(TimeDomain(new DateTime(t0, this.domain[0].zone), new DateTime(t3, this.domain[1].zone)), this.range);\n  };\n\n  TimeScale.prototype.interpolateTo = function (this: TimeScale, that: unknown): Interpolator<TimeScale> | null {\n    if (that instanceof TimeScale) {\n      return TimeScaleInterpolator(this, that);\n    }\n    return null;\n  } as typeof TimeScale.prototype.interpolateTo;\n\n  TimeScale.prototype.canEqual = function (that: unknown): boolean {\n    return that instanceof TimeScale;\n  };\n\n  TimeScale.prototype.equals = function (that: unknown): boolean {\n    if (this === that) {\n      return true;\n    } else if (that instanceof TimeScale) {\n      return this.domain.equals(that.domain) && this.range.equals(that.range);\n    }\n    return false;\n  };\n\n  TimeScale.prototype.toString = function (): string {\n    return \"TimeScale(\" + this.domain + \", \" + this.range + \")\";\n  };\n\n  return TimeScale;\n})(ContinuousScale);\n\n/** @internal */\nexport const TimeScaleInterpolator = (function (_super: typeof Interpolator) {\n  const TimeScaleInterpolator = function (s0: TimeScale, s1: TimeScale): Interpolator<TimeScale> {\n    const interpolator = function (u: number): TimeScale {\n      const s0 = interpolator[0];\n      const s1 = interpolator[1];\n      const x0 = s0.domain;\n      const x00 = x0[0].time;\n      const x01 = x0[1].time;\n      const x1 = s1.domain;\n      const x10 = x1[0].time;\n      const x11 = x1[1].time;\n      const domain = TimeDomain(new DateTime(x00 + u * (x10 - x00), u === 0 ? x0[0].zone : x1[0].zone),\n                                new DateTime(x01 + u * (x11 - x01), u === 0 ? x0[1].zone : x1[1].zone));\n      const y0 = s0.range;\n      const y00 = y0[0];\n      const y01 = y0[1];\n      const y1 = s1.range;\n      const y10 = y1[0];\n      const y11 = y1[1];\n      const range = LinearRange(y00 + u * (y10 - y00), y01 + u * (y11 - y01));\n      return TimeScale(domain, range);\n    } as Interpolator<TimeScale>;\n    Object.setPrototypeOf(interpolator, TimeScaleInterpolator.prototype);\n    (interpolator as Mutable<typeof interpolator>)[0] = s0;\n    (interpolator as Mutable<typeof interpolator>)[1] = s1;\n    return interpolator;\n  } as {\n    (s0: TimeScale, s1: TimeScale): Interpolator<TimeScale>;\n\n    /** @internal */\n    prototype: Interpolator<TimeScale>;\n  };\n\n  TimeScaleInterpolator.prototype = Object.create(_super.prototype);\n  TimeScaleInterpolator.prototype.constructor = TimeScaleInterpolator;\n\n  return TimeScaleInterpolator;\n})(Interpolator);\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintRelation} from \"./Constraint\";\nimport type {ConstraintStrengthLike} from \"./Constraint\";\nimport {ConstraintStrength} from \"./Constraint\";\nimport {Constraint} from \"./Constraint\";\nimport type {ConstraintScope} from \"./ConstraintScope\";\n\n/** @beta */\nexport class ConstraintGroup {\n  constructor(scope: ConstraintScope) {\n    this.scope = scope;\n    this.constraints = [];\n    this.constrained = false;\n  }\n\n  readonly scope: ConstraintScope;\n\n  constraint(lhs: ConstraintExpressionLike, relation: ConstraintRelation,\n             rhs?: ConstraintExpressionLike, strength?: ConstraintStrengthLike): Constraint {\n    lhs = ConstraintExpression.fromLike(lhs);\n    rhs = ConstraintExpression.fromLike(rhs);\n    const expression = rhs !== void 0 ? lhs.minus(rhs) : lhs;\n    if (strength === void 0) {\n      strength = ConstraintStrength.Required;\n    } else {\n      strength = ConstraintStrength.fromLike(strength);\n    }\n    const constraint = new Constraint(this.scope, expression, relation, strength);\n    this.addConstraint(constraint);\n    return constraint;\n  }\n\n  readonly constraints: readonly Constraint[];\n\n  hasConstraint(constraint: Constraint): boolean {\n    const constraints = this.constraints;\n    return constraints.indexOf(constraint) >= 0;\n  }\n\n  addConstraint(constraint: Constraint): void {\n    const constraints = this.constraints as Constraint[];\n    if (constraints.indexOf(constraint) < 0) {\n      constraints.push(constraint);\n      constraint.constrain(this.constrained);\n    }\n  }\n\n  removeConstraint(constraint: Constraint): void {\n    const constraints = this.constraints as Constraint[];\n    if (constraints === void 0) {\n      return;\n    }\n    const index = constraints.indexOf(constraint);\n    if (index >= 0) {\n      constraints.splice(index, 1);\n      constraint.constrain(false);\n    }\n  }\n\n  /** @internal */\n  enableConstraints(): void {\n    const constraints = this.constraints;\n    for (let i = 0; i < constraints.length; i += 1) {\n      constraints[i]!.constrain(true);\n    }\n  }\n\n  /** @internal */\n  disableConstraints(): void {\n    const constraints = this.constraints;\n    for (let i = 0; i < constraints.length; i += 1) {\n      constraints[i]!.constrain(false);\n    }\n  }\n\n  /** @internal */\n  readonly constrained: boolean;\n\n  isConstrained(): boolean {\n    return this.constrained;\n  }\n\n  constrain(constrained: boolean = true): this {\n    if (constrained && !this.constrained) {\n      (this as Mutable<this>).constrained = true;\n      this.enableConstraints();\n    } else if (!constrained && this.constrained) {\n      (this as Mutable<this>).constrained = false;\n      this.disableConstraints();\n    }\n    return this;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {Mutable} from \"@swim/util\";\nimport {Equivalent} from \"@swim/util\";\nimport {ConstraintSymbol} from \"./ConstraintSymbol\";\nimport {ConstraintSlack} from \"./ConstraintSymbol\";\nimport {ConstraintError} from \"./ConstraintSymbol\";\nimport {ConstraintDummy} from \"./ConstraintSymbol\";\nimport type {ConstraintExpressionLike} from \"./ConstraintExpression\";\nimport {ConstraintExpression} from \"./ConstraintExpression\";\nimport type {ConstraintVariable} from \"./ConstraintVariable\";\nimport {ConstraintProperty} from \"./ConstraintProperty\";\nimport type {ConstraintRelation} from \"./Constraint\";\nimport type {ConstraintStrengthLike} from \"./Constraint\";\nimport {ConstraintStrength} from \"./Constraint\";\nimport {Constraint} from \"./Constraint\";\nimport type {ConstraintScope} from \"./ConstraintScope\";\nimport {ConstraintRow} from \"./ConstraintRow\";\n\n/** @internal */\nexport interface ConstraintTag {\n  readonly marker: ConstraintSymbol;\n  readonly other: ConstraintSymbol;\n}\n\n/** @internal */\nexport interface ConstraintVariableBinding {\n  readonly constraint: Constraint;\n  readonly tag: ConstraintTag;\n  state: number;\n}\n\n/** @public */\nexport class ConstraintSolver implements ConstraintScope {\n  constructor() {\n    this.constraints = new Map();\n    this.constraintVariables = new Map();\n    this.rows = new Map();\n    this.infeasible = [];\n    this.objective = new ConstraintRow(this, null, new Map(), 0);\n    this.artificial = null;\n    this.invalidated = new Map();\n  }\n\n  /** @internal */\n  readonly constraints: Map<Constraint, ConstraintTag>;\n\n  /** @internal */\n  readonly constraintVariables: Map<ConstraintVariable, ConstraintVariableBinding>;\n\n  /** @internal */\n  readonly rows: Map<ConstraintSymbol, ConstraintRow>;\n\n  /** @internal */\n  readonly infeasible: ConstraintSymbol[];\n\n  /** @internal */\n  readonly objective: ConstraintRow;\n\n  /** @internal */\n  readonly artificial: ConstraintRow | null;\n\n  /** @internal */\n  readonly invalidated: Map<ConstraintSymbol, ConstraintRow | null>;\n\n  constraint(lhs: ConstraintExpressionLike, relation: ConstraintRelation,\n             rhs?: ConstraintExpressionLike, strength?: ConstraintStrengthLike): Constraint {\n    lhs = ConstraintExpression.fromLike(lhs);\n    rhs = ConstraintExpression.fromLike(rhs);\n    const expression = rhs !== void 0 ? lhs.minus(rhs) : lhs;\n    if (strength === void 0) {\n      strength = ConstraintStrength.Required;\n    } else {\n      strength = ConstraintStrength.fromLike(strength);\n    }\n    const constraint = new Constraint(this, expression, relation, strength);\n    this.addConstraint(constraint);\n    return constraint;\n  }\n\n  hasConstraint(constraint: Constraint): boolean {\n    return this.constraints.has(constraint);\n  }\n\n  addConstraint(constraint: Constraint): void {\n    if (this.constraints.has(constraint)) {\n      return;\n    }\n\n    for (const variable of constraint.expression.terms.keys()) {\n      variable.addConstraintCondition(constraint, this);\n    }\n\n    // Creating a row causes symbols to be reserved for the variables in the constraint.\n    const {row, tag} = this.createRow(constraint);\n\n    this.addConstraintRow(constraint, row, tag);\n  }\n\n  /** @internal */\n  protected addConstraintRow(constraint: Constraint, row: ConstraintRow, tag: ConstraintTag): void {\n    this.willAddConstraint(constraint);\n\n    let subject = this.chooseSubject(row, tag);\n\n    // If chooseSubject couldn't find a valid entering symbol, one last option\n    // is available if the entire row is composed of dummy variables. If the\n    // constant of the row is zero, then this represents redundant constraints\n    // and the new dummy marker can enter the basis. If the constant is\n    // non-zero, then it represents an unsatisfiable constraint.\n    if (subject.isInvalid() && row.isDummy()) {\n      if (Math.abs(row.constant) >= Equivalent.Epsilon) {\n        throw new Error(\"unsatisfiable constraint\");\n      }\n      subject = tag.marker;\n    }\n\n    // If an entering symbol still isn't found, then the row must be added\n    // using an artificial variable. If that fails, then the row represents\n    // an unsatisfiable constraint.\n    if (subject.isInvalid()) {\n      if (!this.addWithArtificialVariable(row)) {\n        throw new Error(\"unsatisfiable constraint\");\n      }\n    } else {\n      row.setSymbol(subject);\n      row.solveFor(subject);\n      this.substitute(subject, row);\n      this.rows.set(subject, row);\n    }\n\n    this.constraints.set(constraint, tag);\n\n    // Optimizing after each constraint is added performs less aggregate work\n    // due to a smaller average system size. It also ensures the solver remains\n    // in a consistent state.\n    this.optimize(this.objective);\n\n    this.didAddConstraint(constraint);\n\n    this.updateSolution();\n  }\n\n  protected willAddConstraint(constraint: Constraint): void {\n    // hook\n  }\n\n  protected didAddConstraint(constraint: Constraint): void {\n    // hook\n  }\n\n  removeConstraint(constraint: Constraint): void {\n    const tag = this.constraints.get(constraint);\n    if (tag === void 0) {\n      return;\n    }\n\n    this.removeConstraintRow(constraint);\n\n    for (const variable of constraint.expression.terms.keys()) {\n      variable.removeConstraintCondition(constraint, this);\n    }\n  }\n\n  /** @internal */\n  protected removeConstraintRow(constraint: Constraint): void {\n    const tag = this.constraints.get(constraint);\n    if (tag === void 0) {\n      return;\n    }\n\n    this.willRemoveConstraint(constraint);\n\n    this.constraints.delete(constraint);\n\n    // Remove the error effects from the objective function *before* pivoting,\n    // or substitutions into the objective will lead to incorrect solver results.\n    this.removeConstraintEffects(constraint, tag);\n\n    // If the marker is basic, simply drop the row. Otherwise pivot the marker\n    // into the basis and then drop the row.\n    const marker = tag.marker;\n    if (!this.rows.delete(marker)) {\n      const leaving = this.getMarkerLeavingSymbol(marker);\n      if (leaving.isInvalid()) {\n        throw new Error(\"failed to find leaving row\");\n      }\n      const row = this.rows.get(leaving)!;\n      this.rows.delete(leaving);\n      row.solveForEx(leaving, marker);\n      this.substitute(marker, row);\n    }\n\n    // Optimizing after each constraint is removed ensures that the solver\n    // remains consistent. It makes the solver API easier to use at a small\n    // trade-off for speed.\n    this.optimize(this.objective);\n\n    this.didRemoveConstraint(constraint);\n\n    this.updateSolution();\n  }\n\n  protected willRemoveConstraint(constraint: Constraint): void {\n    // hook\n  }\n\n  protected didRemoveConstraint(constraint: Constraint): void {\n    // hook\n  }\n\n  constraintVariable(name: string, value?: number, strength?: ConstraintStrengthLike): ConstraintProperty<unknown, number> {\n    if (value === void 0) {\n      value = 0;\n    }\n    if (strength !== void 0) {\n      strength = ConstraintStrength.fromLike(strength);\n    } else {\n      strength = ConstraintStrength.Strong;\n    }\n    const property = ConstraintProperty.create(this) as ConstraintProperty<unknown, number>;\n    Object.defineProperty(property, \"name\", {\n      value: name,\n      configurable: true,\n    });\n    if (value !== void 0) {\n      property.setValue(value);\n    }\n    property.setStrength(strength);\n    property.mount();\n    return property;\n  }\n\n  hasConstraintVariable(variable: ConstraintVariable): boolean {\n    return this.constraintVariables.has(variable);\n  }\n\n  addConstraintVariable(variable: ConstraintVariable): void {\n    if (this.constraintVariables.has(variable)) {\n      return;\n    }\n\n    const strength = ConstraintStrength.clip(variable.strength);\n    if (strength === ConstraintStrength.Required) {\n      throw new Error(\"invalid variable strength\");\n    }\n\n    this.willAddConstraintVariable(variable);\n\n    const constraint = new Constraint(this, variable, \"eq\", strength);\n    const {row, tag} = this.createRow(constraint);\n    this.constraintVariables.set(variable, {constraint, tag, state: 0});\n\n    this.addConstraintRow(constraint, row, tag);\n\n    this.didAddConstraintVariable(variable);\n  }\n\n  protected willAddConstraintVariable(variable: ConstraintVariable): void {\n    // hook\n  }\n\n  protected didAddConstraintVariable(variable: ConstraintVariable): void {\n    // hook\n  }\n\n  removeConstraintVariable(variable: ConstraintVariable): void {\n    const binding = this.constraintVariables.get(variable);\n    if (binding === void 0) {\n      return;\n    }\n\n    this.willRemoveConstraintVariable(variable);\n\n    this.constraintVariables.delete(variable);\n    this.removeConstraintRow(binding.constraint);\n\n    this.didRemoveConstraintVariable(variable);\n  }\n\n  protected willRemoveConstraintVariable(variable: ConstraintVariable): void {\n    // hook\n  }\n\n  protected didRemoveConstraintVariable(variable: ConstraintVariable): void {\n    // hook\n  }\n\n  setConstraintVariable(variable: ConstraintVariable, newState: number): void {\n    const binding = this.constraintVariables.get(variable);\n    if (binding === void 0) {\n      throw new Error(\"unbound variable\");\n    }\n    const oldState = binding.state;\n    if (oldState === newState) {\n      return;\n    }\n\n    binding.state = newState;\n    const delta = newState - oldState;\n\n    this.willSetConstraintVariable(variable, newState, oldState);\n\n    // Check first if the positive error variable is basic.\n    const marker = binding.tag.marker;\n    let row = this.rows.get(marker);\n    if (row !== void 0) {\n      if (row.add(-delta) < 0) {\n        this.infeasible.push(marker);\n      }\n      this.dualOptimize();\n      return;\n    }\n\n    // Check next if the negative error variable is basic.\n    const other = binding.tag.other;\n    row = this.rows.get(other);\n    if (row !== void 0) {\n      if (row.add(delta) < 0) {\n        this.infeasible.push(other);\n      }\n      this.dualOptimize();\n      return;\n    }\n\n    // Otherwise update each row where the error variables exist.\n    for (const [symbol, row] of this.rows) {\n      const coefficient = row.coefficientFor(marker);\n      if (coefficient !== 0 && row.add(delta * coefficient) < 0 && !symbol.isExternal()) {\n        this.infeasible.push(symbol);\n      }\n    }\n    this.dualOptimize();\n\n    this.didSetConstraintVariable(variable, newState, oldState);\n\n    this.updateSolution();\n  }\n\n  protected willSetConstraintVariable(variable: ConstraintVariable, newState: number, oldState: number): void {\n    // hook\n  }\n\n  protected didSetConstraintVariable(variable: ConstraintVariable, newState: number, oldState: number): void {\n    // hook\n  }\n\n  /** @internal */\n  invalidate(symbol: ConstraintSymbol, row: ConstraintRow | null = null): void {\n    if (symbol.isExternal()) {\n      this.invalidated.set(symbol, row);\n    }\n  }\n\n  /** @internal */\n  updateSolution(): void {\n    const invalidated = this.invalidated;\n    if (invalidated.size === 0) {\n      return;\n    }\n    (this as Mutable<this>).invalidated = new Map();\n    for (const symbol of invalidated.keys()) {\n      const row = this.rows.get(symbol);\n      if (row !== void 0) {\n        symbol.updateConstraintSolution(row.constant);\n      }\n    }\n  }\n\n  // Returns a new row for the given constraint.\n  //\n  // The terms in the constraint will be converted to cells in the row.\n  // Any term in the constraint with a coefficient of zero is ignored.\n  // If the symbol for a given cell variable is basic, the cell variable\n  // will be substituted with the basic row.\n  //\n  // The necessary slack and error variables will be added to the row.\n  // If the constant for the row is negative, the sign for the row will\n  // be inverted so the constant becomes positive.\n  private createRow(constraint: Constraint): {row: ConstraintRow, tag: ConstraintTag} {\n    const expression = constraint.expression;\n    const row = new ConstraintRow(this, null, new Map(), expression.constant);\n\n    // Substitute the current basic variables into the row.\n    for (const [variable, coefficient] of expression.terms) {\n      if (Math.abs(coefficient) < Equivalent.Epsilon) {\n        continue;\n      }\n      const basic = this.rows.get(variable);\n      if (basic !== void 0) {\n        row.insertRow(basic, coefficient);\n      } else {\n        row.insertSymbol(variable, coefficient);\n      }\n    }\n\n    // Add the necessary slack, error, and dummy variables.\n    const objective = this.objective;\n    const relation = constraint.relation;\n    const strength = constraint.strength;\n    const tag = {marker: ConstraintSymbol.invalid(), other: ConstraintSymbol.invalid()};\n    if (relation === \"le\" || relation === \"ge\") {\n      const coefficient = relation === \"le\" ? 1 : -1;\n      const slack = new ConstraintSlack();\n      tag.marker = slack;\n      row.insertSymbol(slack, coefficient);\n      if (strength < ConstraintStrength.Required) {\n        const error = new ConstraintError();\n        tag.other = error;\n        row.insertSymbol(error, -coefficient);\n        objective.insertSymbol(error, strength);\n      }\n    } else if (strength < ConstraintStrength.Required) {\n      const eplus = new ConstraintError();\n      const eminus = new ConstraintError();\n      tag.marker = eplus;\n      tag.other = eminus;\n      row.insertSymbol(eplus, -1); // v = eplus - eminus\n      row.insertSymbol(eminus, 1); // v - eplus + eminus = 0\n      objective.insertSymbol(eplus, strength);\n      objective.insertSymbol(eminus, strength);\n    } else {\n      const dummy = new ConstraintDummy();\n      tag.marker = dummy;\n      row.insertSymbol(dummy);\n    }\n\n    // Ensure the row has a positive constant.\n    if (row.constant < 0) {\n      row.negate();\n    }\n\n    return {row, tag};\n  }\n\n  // Returns the symbol to use for solving for the row.\n  //\n  // This method will choose the best subject to use as the solve target for\n  // the row. An invalid symbol will be returned if there is no valid target.\n  //\n  // The symbols are chosen according to the following precedence:\n  //\n  // 1) The first symbol representing an external variable.\n  // 2) A negative slack or error tag variable.\n  //\n  // If a subject cannot be found, an invalid symbol will be returned.\n  private chooseSubject(row: ConstraintRow, tag: ConstraintTag): ConstraintSymbol {\n    for (const symbol of row.cells.keys()) {\n      if (symbol.isExternal()) {\n        return symbol;\n      }\n    }\n    if (tag.marker instanceof ConstraintSlack || tag.marker instanceof ConstraintError) {\n      if (row.coefficientFor(tag.marker) < 0) {\n        return tag.marker;\n      }\n    }\n    if (tag.other instanceof ConstraintSlack || tag.other instanceof ConstraintError) {\n      if (row.coefficientFor(tag.other) < 0) {\n        return tag.other;\n      }\n    }\n    return ConstraintSymbol.invalid();\n  }\n\n  // Adds the row to the tableau using an artificial variable; returns `false`\n  // if the constraint cannot be satisfied.\n  private addWithArtificialVariable(row: ConstraintRow): boolean {\n    // Create and add the artificial variable to the tableau.\n    const artificial = new ConstraintSlack();\n    this.rows.set(artificial, row.clone());\n    (this as Mutable<this>).artificial = row.clone();\n\n    // Optimize the artificial objective. This is successful\n    // only if the artificial objective is optimized to zero.\n    this.optimize(this.artificial!);\n    const success = Math.abs(this.artificial!.constant) < Equivalent.Epsilon;\n    (this as Mutable<this>).artificial = null;\n\n    // If the artificial variable is basic, pivot the row so that\n    // it becomes non-basic. If the row is constant, exit early.\n    const basic = this.rows.get(artificial);\n    if (basic !== void 0) {\n      this.rows.delete(artificial);\n      if (basic.isConstant()) {\n        return success;\n      }\n      const entering = this.anyPivotableSymbol(basic);\n      if (entering.isInvalid()) {\n        return false; // unsatisfiable (will this ever happen?)\n      }\n      basic.setSymbol(entering);\n      basic.solveForEx(artificial, entering);\n      this.substitute(entering, basic);\n      this.rows.set(entering, basic);\n    }\n\n    // Remove the artificial variable from the tableau.\n    for (const row of this.rows.values()) {\n      row.removeSymbol(artificial);\n    }\n    this.objective.removeSymbol(artificial);\n    return success;\n  }\n\n  // Substitutes all instances of the parametric symbol in the tableau\n  // and the objective function with the given row.\n  private substitute(symbol: ConstraintSymbol, row: ConstraintRow): void {\n    for (const [key, value] of this.rows) {\n      value.substitute(symbol, row);\n      if (value.constant < 0 && !key.isExternal()) {\n        this.infeasible.push(key);\n      }\n    }\n    this.objective.substitute(symbol, row);\n    if (this.artificial !== null) {\n      this.artificial.substitute(symbol, row);\n    }\n  }\n\n  // Optimizes the system for the given objective function.\n  //\n  // Performs iterations of Phase 2 of the simplex method until the objective\n  // function reaches a minimum.\n  private optimize(objective: ConstraintRow): void {\n    do {\n      const entering = this.getEnteringSymbol(objective);\n      if (entering.isInvalid()) {\n        return;\n      }\n      const leaving = this.getLeavingSymbol(entering);\n      if (leaving.isInvalid()) {\n        throw new Error(\"objective is unbounded\");\n      }\n      // Pivot the entering symbol into the basis.\n      const row = this.rows.get(leaving)!;\n      this.rows.delete(leaving);\n      row.setSymbol(entering);\n      row.solveForEx(leaving, entering);\n      this.substitute(entering, row);\n      this.rows.set(entering, row);\n    } while (true);\n  }\n\n  // Optimizes the system using the dual of the simplex method.\n  //\n  // The current state of the system should be such that the objective\n  // function is optimal, but not feasible. This method will perform\n  // an iteration of the dual simplex method to make the solution both\n  // optimal and feasible.\n  private dualOptimize(): void {\n    let leaving: ConstraintSymbol | undefined;\n    while ((leaving = this.infeasible.pop(), leaving !== void 0)) {\n      const row = this.rows.get(leaving);\n      if (row === void 0 || row.constant >= 0) {\n        continue;\n      }\n      const entering = this.getDualEnteringSymbol(row);\n      if (entering.isInvalid()) {\n        throw new Error(\"dual optimize failed\");\n      }\n      // Pivot the entering symbol into the basis.\n      this.rows.delete(leaving);\n      row.setSymbol(entering);\n      row.solveForEx(leaving, entering);\n      this.substitute(entering, row);\n      this.rows.set(entering, row);\n    }\n  }\n\n  // Returns the entering variable for a pivot operation.\n  //\n  // Returns the first symbol in the objective function which is non-dummy and\n  // has a coefficient less than zero. If no symbol meets the criteria then the\n  // objective function is at a minimum, and an invalid symbol is returned.\n  private getEnteringSymbol(objective: ConstraintRow): ConstraintSymbol {\n    for (const [symbol, value] of objective.cells) {\n      if (value < 0 && !symbol.isDummy()) {\n        return symbol;\n      }\n    }\n    return ConstraintSymbol.invalid();\n  }\n\n  // Returns the entering symbol for the dual optimize operation.\n  //\n  // Returns the symbol in the row which has a positive coefficient and yields\n  // the minimum ratio for its respective symbol in the objective function.\n  // The provided row *must* be infeasible. If no symbol is found which meets\n  // the criteria, an invalid symbol is returned.\n  private getDualEnteringSymbol(row: ConstraintRow): ConstraintSymbol {\n    let ratio = Number.MAX_VALUE;\n    let entering = ConstraintSymbol.invalid();\n    for (const [symbol, value] of row.cells) {\n      if (value <= 0 || symbol.isDummy()) {\n        continue;\n      }\n      const coefficient = this.objective.coefficientFor(symbol);\n      const coratio = coefficient / value;\n      if (coratio < ratio) {\n        ratio = coratio;\n        entering = symbol;\n      }\n    }\n    return entering;\n  }\n\n  // Returns the symbol for the pivot exit row. If no appropriate exit symbol\n  // is found, an invalid symbol will be returned, indicating that the\n  // objective function is unbounded.\n  private getLeavingSymbol(entering: ConstraintSymbol): ConstraintSymbol {\n    let ratio = Number.MAX_VALUE;\n    let found = ConstraintSymbol.invalid();\n    for (const [symbol, row] of this.rows) {\n      if (symbol.isExternal()) {\n        continue;\n      }\n      const coefficient = row.coefficientFor(entering);\n      if (coefficient >= 0) {\n        continue;\n      }\n      const coratio = -row.constant / coefficient;\n      if (coratio < ratio) {\n        ratio = coratio;\n        found = symbol;\n      }\n    }\n    return found;\n  }\n\n  // Returns a symbol corresponding to a basic row which holds the given marker\n  // variable. The row will be chosen according to the following precedence:\n  //\n  // 1) The row with a restricted basic variable and a negative coefficient\n  //    for the marker with the smallest ratio of `-constant / coefficient`.\n  // 2) The row with a restricted basic variable and the smallest ratio of\n  //    `constant / coefficient`.\n  // 3) The last unrestricted row which contains the marker.\n  //\n  // If the marker does not exist in any row, an invalid symbol will be\n  // returned, indicating an internal solver error since the marker *should*\n  // exist somewhere in the tableau.\n  private getMarkerLeavingSymbol(marker: ConstraintSymbol): ConstraintSymbol {\n    let r1 = Number.MAX_VALUE;\n    let r2 = Number.MAX_VALUE;\n    let first = ConstraintSymbol.invalid();\n    let second = ConstraintSymbol.invalid();\n    let third = ConstraintSymbol.invalid();\n    for (const [symbol, row] of this.rows) {\n      const coefficient = row.coefficientFor(marker);\n      if (coefficient === 0) {\n        continue;\n      }\n      if (symbol.isExternal()) {\n        third = symbol;\n      } else if (coefficient < 0) {\n        const ratio = -row.constant / coefficient;\n        if (ratio < r1) {\n          r1 = ratio;\n          first = symbol;\n        }\n      } else {\n        const ratio = row.constant / coefficient;\n        if (ratio < r2) {\n          r2 = ratio;\n          second = symbol;\n        }\n      }\n    }\n    if (!first.isInvalid()) {\n      return first;\n    } else if (!second.isInvalid()) {\n      return second;\n    } else {\n      return third;\n    }\n  }\n\n  // Removes the effects of a constraint on the objective function.\n  private removeConstraintEffects(constraint: Constraint, tag: ConstraintTag): void {\n    if (tag.marker instanceof ConstraintError) {\n      this.removeMarkerEffects(tag.marker, constraint.strength);\n    }\n    if (tag.other instanceof ConstraintError) {\n      this.removeMarkerEffects(tag.other, constraint.strength);\n    }\n  }\n\n  // Removes the effects of an error marker on the objective function.\n  private removeMarkerEffects(marker: ConstraintSymbol, strength: ConstraintStrength): void {\n    const row = this.rows.get(marker);\n    if (row !== void 0) {\n      this.objective.insertRow(row, -strength);\n    } else {\n      this.objective.insertSymbol(marker, -strength);\n    }\n  }\n\n  // Returns the first Slack or Error symbol in the row. If no such symbol\n  // is present, an invalid symbol will be returned.\n  private anyPivotableSymbol(row: ConstraintRow): ConstraintSymbol {\n    for (const symbol of row.cells.keys()) {\n      if (symbol instanceof ConstraintSlack || symbol instanceof ConstraintError) {\n        return symbol;\n      }\n    }\n    return ConstraintSymbol.invalid();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport type {UriLike} from \"./Uri\";\nimport {Uri} from \"./Uri\";\n\n/** @public */\nexport class UriCache {\n  constructor(base: Uri, capacity: number = 128) {\n    this.base = base;\n    this.capacity = capacity;\n    this.resolveCache = new Map<string, Uri>();\n    this.unresolveCache = new Map<string, Uri>();\n  }\n\n  readonly base: Uri;\n\n  readonly capacity: number;\n\n  /** @internal */\n  readonly resolveCache: Map<string, Uri>;\n\n  /** @internal */\n  readonly unresolveCache: Map<string, Uri>;\n\n  resolve(relative: UriLike): Uri {\n    if (typeof relative !== \"string\") {\n      relative = Uri.fromLike(relative).toString();\n    }\n\n    const resolveCache = this.resolveCache;\n    let absolute = resolveCache.get(relative);\n    if (absolute === void 0) {\n      absolute = this.base.resolve(relative);\n    } else {\n      resolveCache.delete(relative);\n    }\n    resolveCache.set(relative, absolute);\n\n    const capacity = this.capacity;\n    let size = resolveCache.size;\n    if (size > capacity) {\n      const keys = resolveCache.keys();\n      let next: IteratorResult<string>;\n      while (size > capacity && (next = keys.next()).done !== true) {\n        resolveCache.delete(next.value);\n        size -= 1;\n      }\n    }\n\n    return absolute;\n  }\n\n  unresolve(absolute: UriLike): Uri {\n    if (typeof absolute !== \"string\") {\n      absolute = Uri.fromLike(absolute).toString();\n    }\n\n    const unresolveCache = this.unresolveCache;\n    let relative = unresolveCache.get(absolute);\n    if (relative === void 0) {\n      relative = this.base.unresolve(absolute);\n    } else {\n      unresolveCache.delete(absolute);\n    }\n    unresolveCache.set(absolute, relative);\n\n    const capacity = this.capacity;\n    let size = unresolveCache.size;\n    if (size > capacity) {\n      const keys = unresolveCache.keys();\n      let next: IteratorResult<string>;\n      while (size > capacity && (next = keys.next()).done !== true) {\n        unresolveCache.delete(next.value);\n        size -= 1;\n      }\n    }\n\n    return relative;\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport type {Value} from \"../Value\";\nimport type {Form} from \"../form/Form\";\n\n/** @internal */\nexport class ValueCursor<V> extends Cursor<V> {\n  constructor(cursor: Cursor<Value>, form: Form<V, unknown>) {\n    super();\n    this.cursor = cursor;\n    this.form = form;\n  }\n\n  /** @internal */\n  readonly cursor: Cursor<Value>;\n\n  /** @internal */\n  readonly form: Form<V, unknown>;\n\n  override isEmpty(): boolean {\n    return this.cursor.isEmpty();\n  }\n\n  override head(): V {\n    const value = this.cursor.head();\n    return value.coerce(this.form);\n  }\n\n  override step(): void {\n    this.cursor.step();\n  }\n\n  override skip(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  override hasNext(): boolean {\n    return this.cursor.hasNext();\n  }\n\n  override nextIndex(): number {\n    return this.cursor.nextIndex();\n  }\n\n  override next(): IteratorResult<V> {\n    const next = this.cursor.next();\n    if (next.done === true) {\n      return next;\n    }\n    return {done: false, value: next.value.coerce(this.form)};\n  }\n\n  override hasPrevious(): boolean {\n    return this.cursor.hasPrevious();\n  }\n\n  override previousIndex(): number {\n    return this.cursor.previousIndex();\n  }\n\n  override previous(): IteratorResult<V> {\n    const previous = this.cursor.previous();\n    if (previous.done === true) {\n      return previous;\n    }\n    return {done: false, value: previous.value.coerce(this.form)};\n  }\n\n  override delete(): void {\n    this.cursor.delete();\n  }\n}\n","// Copyright 2015-2023 Swim.inc\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\nimport {Cursor} from \"@swim/util\";\nimport type {Value} from \"../Value\";\nimport type {Form} from \"../form/Form\";\n\n/** @internal */\nexport class ValueEntryCursor<K, V> extends Cursor<[K, V]> {\n  constructor(cursor: Cursor<[Value, Value]>, keyForm: Form<K, unknown>, valueForm: Form<V, unknown>) {\n    super();\n    this.cursor = cursor;\n    this.keyForm = keyForm;\n    this.valueForm = valueForm;\n  }\n\n  /** @internal */\n  readonly cursor: Cursor<[Value, Value]>;\n\n  /** @internal */\n  readonly keyForm: Form<K, unknown>;\n\n  /** @internal */\n  readonly valueForm: Form<V, unknown>;\n\n  override isEmpty(): boolean {\n    return this.cursor.isEmpty();\n  }\n\n  override head(): [K, V] {\n    const pair = this.cursor.head();\n    return [pair[0].coerce(this.keyForm), pair[1].coerce(this.valueForm)];\n  }\n\n  override step(): void {\n    this.cursor.step();\n  }\n\n  override skip(count: number): void {\n    this.cursor.skip(count);\n  }\n\n  override hasNext(): boolean {\n    return this.cursor.hasNext();\n  }\n\n  override nextIndex(): number {\n    return this.cursor.nextIndex();\n  }\n\n  override next(): IteratorResult<[K, V]> {\n    const next = this.cursor.next();\n    if (next.done === true) {\n      return next;\n    }\n    return {done: false, value: [next.value[0].coerce(this.keyForm), next.value[1].coerce(this.valueForm)]};\n  }\n\n  override hasPrevious(): boolean {\n    return this.cursor.hasPrevious();\n  }\n\n  override previousIndex(): number {\n    return this.cursor.previousIndex();\n  }\n\n  override previous(): IteratorResult<[K, V]> {\n    const previous = this.cursor.previous();\n    if (previous.done === true) {\n      return previous;\n    }\n    return {done: false, value: [previous.value[0].coerce(this.keyForm), previous.value[1].coerce(this.valueForm)]};\n  }\n\n  override delete(): void {\n    this.cursor.delete();\n  }\n}\n"],"names":["__esDecorate","ctor","descriptorIn","decorators","contextIn","initializers","extraInitializers","accept","f","TypeError","_","kind","key","target","prototype","descriptor","Object","getOwnPropertyDescriptor","name","done","i","length","context","p","access","addInitializer","push","result","get","set","init","unshift","defineProperty","__runInitializers","thisArg","value","useValue","arguments","call","SuppressedError","Random","fillBytes","window","crypto","array","getRandomValues","msCrypto","Int8Array","Math","round","random","Uint8Array","Int16Array","Uint16Array","Int32Array","Uint32Array","ByteOrder","BigEndian","LittleEndian","NativeEndian","NativeOrder","this","bom","ArrayBuffer","b","Error","Murmur3","mix","code","rotl","mixUint8Array","mixUint8ArrayBE","mixUInt8ArrayLE","offset","limit","word","mixString","string","mixStringBE","mixStringLE","k","n","utf8Length","c","codePointAt","charCodeAt","Strings","offsetByCodePoints","mash","distance","Lazy","defined","Equals","x","y","Symbol","hasInstance","equals","instance","enumerable","configurable","HashCode","hashCode","Equivalent","epsilon","equivalentTo","Compare","compareTo","NaN","Identity","compare","xh","hash","yh","codes","nextCode","WeakMap","fromLike","Booleans","Boolean","Numbers","equal","isNaN","equivalent","abs","Epsilon","hashArrayBuffer","hashFloat64Array","hashInt32Array","Float64Array","Number","index","c1","c2","count","String","Identifiers","isStartChar","isPartChar","isValid","identifier","isReserved","Functions","Constructors","Arrays","empty","freeze","inserted","newElement","oldArray","newArray","Array","element","removed","oldElement","Values","q","order","min","Objects","isEmpty","hasOwnProperty","hasAnyKey","object","keys","hasAllKeys","newObject","oldKey","oldValue","getFirstKey","getFirstValue","getNextKey","mark","getNextValue","xKeys","yKeys","xKey","yKey","Date","getTime","isArray","FromLike","type","likeness","ToLike","toLike","Creatable","create","Observable","observe","unobserve","Consumable","consume","unconsume","Cursor","newValue","iterator","EmptyCursor","unary","UnaryCursor","ArrayCursor","cursor","KeysCursor","values","ValuesCursor","_a","_static_empty_decorators","static","private","has","obj","_staticExtraInitializers","head","step","skip","hasNext","nextIndex","next","hasPrevious","previousIndex","previous","constructor","super","max","delete","Mapping","_super","domain","range","mapping","setPrototypeOf","canEqual","that","toString","Function","Piecewise","intervals","piecewise","interval","union","lo","hi","mid","u","s","Domain","x0","x1","Range","unit","contains","x00","x01","x10","x11","LinearDomain","y0","y1","y00","y01","y10","y11","y0Order","y1Order","LinearRange","Constant","Interpolate","interpolateTo","Interpolator","interpolator","IdentityInterpolator","NumberInterpolator","ArrayInterpolator","StepInterpolator","map","transform","InterpolatorMap","InterpolatorInterpolator","phase","interpolators","interpolatorCount","Timing","easing","t0","t1","timing","t","withDomain","withDuration","dt","overRange","Tweening","fromInit","Easing","linear","quadIn","quadOut","quadInOut","cubicIn","cubicOut","cubicInOut","quartIn","quartOut","quartInOut","expoIn","expoOut","expoInOut","circIn","circOut","circInOut","backIn","backOut","backInOut","elasticIn","elasticOut","elasticInOut","bounceIn","bounceOut","bounceInOut","v","pow","sqrt","st","m","PI","asin","sin","st1","invert","tweening","Scale","ContinuousScale","dx","LinearDomainInterpolator","LinearRangeInterpolator","LinearScale","scale","inverse","clampDomain","xMin","xMax","zMin","zMax","dy","z","dz","xSum","solveDomain","x2","y2","reflect","y3","x3","LinearScaleInterpolator","s0","s1","AssertException","message","Assert","condition","ok","notOk","lhs","rhs","notEqual","identical","notIdentical","lessThan","lessThanOrEqual","greaterThan","greaterThanOrEqual","notLessThan","notLessThanOrEqual","notGreaterThan","notGreaterThanOrEqual","instanceOf","notInstanceOf","compareLessThan","compareNotLessThan","compareLessThanOrEqual","compareNotLessThanOrEqual","compareEqual","compareNotEqual","compareGreaterThanOrEqual","compareNotGreaterThanOrEqual","compareGreaterThan","compareNotGreaterThan","Severity","level","label","isTrace","TraceLevel","isDebug","DebugLevel","isInfo","InfoLevel","isNote","NoteLevel","isWarning","WarningLevel","isError","ErrorLevel","isAlert","AlertLevel","isFatal","FatalLevel","localeCompare","trace","debug","info","note","warning","error","alert","fatal","TraceLabel","Trace","DebugLabel","Debug","InfoLabel","Info","NoteLabel","Note","WarningLabel","Warning","ErrorLabel","AlertLabel","Alert","FatalLabel","Fatal","Tag","Mark","line","column","withNote","at","start","end","Span","from","shift","display","output","Format","displayNumber","write","debugNumber","debugString","zero","_static_get_zero_decorators","tmp","OutputStyle","settings","isStyled","OutputSettings","lineSeparator","pretty","styled","precision","withLineSeparator","copy","isPretty","asPretty","asStyled","withPrecision","standard","prettyStyled","_static_standard_decorators","_static_pretty_decorators","_static_styled_decorators","_static_prettyStyled_decorators","InputException","InputSettings","stripped","isStripped","asStripped","_static_stripped_decorators","Input","trap","InputEmpty","InputDone","InputError","_static_done_decorators","id","isCont","isDone","isPart","asPart","part","seek","withId","withMark","withSettings","clone","StringInput","OutputException","Output","writeln","displayAny","debugAny","flush","tokens","full","OutputFull","OutputDone","OutputError","_static_full_decorators","StringOutput","isFull","token","fromCharCode","concat","bind","WriterException","Writer","feed","input","fork","asDone","asError","andThen","WriterSequence","WriterEnd","WriterDone","WriterError","_static_end_decorators","StringWriter","pull","Unicode","isSpace","isNewline","os","EOL","stringOutput","isFinite","floor","digits","decimal","debugChar","encodeHex","stringInput","prefix","prefixes","exponential","toExponential","exponentIndex","indexOf","exponent","slice","power","scaled","trimTrailingZeros","toFixed","i1","i0","duration","millis","separator","SECOND","MINUTE","HOUR","DAY","WEEK","weeks","days","hours","minutes","seconds","Base10","size","Base10NumberParser","parse","Base10IntegerWriter","Diagnostic","tag","severity","cause","lineDigits","countDigits","contextLines","displayMessage","displayAnchor","cont","displayContext","formatSeverity","reset","bold","displayLineLeadArrow","displayLineLead","causeOrder","displayLineLeadEllipsis","displayLines","displayNote","startLine","endLine","consumeLineText","displayLine","displayLineComment","displaySingleLine","displayStartLine","displayEndLine","displayMidLine","displayLineLeadNumber","displayLineText","comment","displayLineLeadComment","blueBold","padding","redBold","yellowBold","greenBold","cyanBold","magentaBold","source","unexpected","expected","InputBuffer","InputBufferEmpty","InputBufferDone","InputBufferError","withIndex","withLimit","capacity","remaining","tokenOrString","OutputBuffer","OutputBufferFull","OutputBufferDone","OutputBufferError","ParserException","diagnostic","Parser","ParserDone","ParserError","tail","ByteOutput","expand","toUint8Array","cloneArray","ByteOutputUint8Array","ByteOutputBuffer","buffer","Binary","initialCapacity","UtfErrorMode","isReplacement","UtfErrorModeFatal","fatalNonZero","replacement","UtfErrorModeReplacement","replacementNonZero","_static_fatal_decorators","_static_fatalNonZero_decorators","_static_replacement_decorators","_static_replacementNonZero_decorators","nonZero","replacementChar","isNonZero","asNonZero","Base16","alphabet","encodeDigit","uint8ArrayWriter","Base16Writer","writeUint8Array","writeInteger","width","Base16IntegerWriter","writeIntegerLiteral","writeLiteral","lowercase","uppercase","isDigit","decodeDigit","writeQuantum","parser","Base16Parser","parseUint8Array","_static_get_lowercase_decorators","_static_get_uppercase_decorators","Utf8DecodedOutput","errorMode","c3","have","c4","invalid","base16","Utf8EncodedOutput","Utf8","sizeOf","decodedOutput","sign","mode","Base10DecimalParser","Base64","w","Base64Parser","Base64Writer","standardPadded","Base64Standard","standardUnpadded","padded","urlPadded","Base64Url","urlUnpadded","url","_static_get_standardPadded_decorators","_static_get_standardUnpadded_decorators","_static_get_urlPadded_decorators","_static_get_urlUnpadded_decorators","isPadded","asPadded","base64","r","Affinity","Transient","Inherited","Intrinsic","Extrinsic","Reflexive","Shift","Mask","FastenerContextMetaclass","classMap","slotMap","slots","initFastenerClass","baseClass","template","fastenerName","fastenerSlot","fastenerClass","fastenerSuperclass","define","getFastenerClass","getFastenerSlot","tryFastener","owner","fastener","contextClass","contextMetaclass","metaclasses","getOrCreate","Fastener","classTemplate","decorate","fastenerType","binds","flagsInit","setFlags","flags","incrementVersion","version","setCoherentTime","coherentTime","parentType","parent","inheritName","getParentFastener","inheritInlet","inlet","InheritsFlag","willBindInlet","attachOutlet","inletVersion","onBindInlet","didBindInlet","bindInlet","setInherits","recohere","performance","now","uninheritInlet","willUnbindInlet","detachOutlet","onUnbindInlet","didUnbindInlet","unbindInlet","setDerived","outlet","inherits","willSetInherits","onSetInherits","didSetInherits","derived","DerivedFlag","affinity","hasAffinity","initAffinity","minAffinity","newAffinity","oldAffinity","willSetAffinity","onSetAffinity","didSetAffinity","setAffinity","decohere","coherent","DecoherentFlag","setCoherent","requireRecohere","decohereFastener","inletKeys","resolveInlets","inlets","inletKey","getFastener","attachInlets","inletVersions","detachInlets","contextType","attachFastener","mounted","mount","requireUpdate","updateFlags","getTransition","initFasteners","instanceInitializers","fieldInitializers","mountFasteners","metaclass","fastenerSlots","unmountFasteners","unmount","MountedFlag","willMount","onMount","didMount","willUnmount","onUnmount","didUnmount","construct","declare","className","implement","extends","specialize","refine","fastenerPrototype","extend","extendsClass","getter","decorateField","decorateGetter","defineField","defineGetter","FlagShift","FlagMask","Property","inletValue","getOutletValue","getInletValue","getInletValueOr","elseValue","outlets","Set","add","decohereOutlets","setValue","setIntrinsic","valueType","initValue","getPrototypeOf","getValue","getValueOr","transformValue","equalValues","willSetValue","onSetValue","didSetValue","transition","deriveValue","inletValues","derivedValue","definedValue","tryValue","property","propertyClass","tryValueOr","propertyPrototype","valueDescriptor","Animator","inletState","getOutletState","getInletState","getInletStateOr","elseState","state","setState","getState","getStateOr","transformState","newState","oldState","tweened","willSetState","TweeningFlag","DivergedFlag","InterruptFlag","onSetState","didSetState","startTweening","didInterrupt","stopTweening","setInterpolatedValue","stateChanged","tweenInherited","tween","willTransition","didTransition","willStartTweening","onStartTweening","didStartTweening","willStopTweening","onStopTweening","didStopTweening","animator","animatorClass","animatorPrototype","transitionDescriptor","Timer","fire","delay","initDelay","setDelay","elapsed","deadline","scheduled","timeout","schedule","willSchedule","setTimeout","onSchedule","didSchedule","throttle","debounce","willCancel","clearTimeout","onCancel","didCancel","cancel","expire","willExpire","onExpire","didExpire","callback","EventHandler","bindsOwner","eventType","initEventType","initTarget","getTarget","setTarget","newTarget","oldTarget","willDetachTarget","onDetachTarget","didDetachTarget","willAttachTarget","onAttachTarget","didAttachTarget","EnabledFlag","attachEvents","detachEvents","options","attachEvent","addEventListener","detachEvent","removeEventListener","handle","event","enabled","willEnable","onEnable","didEnable","willDisable","onDisable","didDisable","bindComponent","component","detectComponent","unbindComponent","targetDescriptor","EventTimer","defer","Provider","serviceType","observes","creates","setService","service","inletService","getInletService","serviceKey","getService","newService","oldService","willDetachService","unmountService","onDetachService","deinitService","didDetachService","willAttachService","mountService","onAttachService","initService","didAttachService","parentService","parentProvider","insertChild","child","createService","global","Service","ManagedFlag","mountRootService","unmountRootService","remove","tryService","provider","providerClass","providerPrototype","serviceKeyDescriptor","Component","uid","nextSibling","previousSibling","firstChild","lastChild","childMap","decoherent","recohering","observers","componentType","setKey","attachParent","willAttachParent","setNextSibling","setPreviousSibling","setLastChild","setFirstChild","cascadeMount","onAttachParent","didAttachParent","detachParent","willDetachParent","cascadeUnmount","onDetachParent","didDetachParent","reattachParent","newNextSibling","oldNextSibling","oldPreviousSibling","newPreviousSibling","getNextSibling","siblingType","getPreviousSibling","getFirstChild","childType","getLastChild","forEachChild","insertChildMap","removeChildMap","getChild","setChild","newChild","oldChild","RemovingFlag","willRemoveChild","onRemoveChild","didRemoveChild","InsertingFlag","willInsertChild","onInsertChild","didInsertChild","cascadeInsert","appendChild","removeChild","prependChild","replaceChild","insertChildFlags","InsertChildFlags","inserting","bindChildFasteners","removeChildFlags","RemoveChildFlags","removing","unbindChildFasteners","removeChildren","reinsertChildFlags","ReinsertChildFlags","reinsertChild","willReinsertChild","onReinsertChild","didReinsertChild","sortChildren","comparator","children","sort","getTargetChild","getAncestor","ancestorType","ancestor","getRoot","rootType","base","isAncestorOf","descendant","commonAncestor","relative","mountFlags","MountFlags","mountChildren","unmountChildren","prev","immediate","bindFastener","bindChildFastener","ComponentRelation","unbindChildFastener","properties","enqueueFastener","recohereFasteners","observer","willObserve","onObserve","didObserve","willUnobserve","onUnobserve","didUnobserve","callObservers","args","method","nextId","initComponent","willAttachComponent","onAttachComponent","didAttachComponent","deinitComponent","willDetachComponent","onDetachComponent","didDetachComponent","parentComponent","createComponent","ComponentRef","inletComponent","getInletComponent","setComponent","componentKey","getComponent","newComponent","oldComponent","attachComponent","detachComponent","insertComponent","removeComponent","deleteComponent","tryComponent","componentRef","componentKeyDescriptor","ComponentSet","insertComponentMap","components","OrderedFlag","removeComponentMap","hasComponent","addComponent","componentCount","addComponents","newComponents","componentId","setComponents","orderedComponents","targetComponent","attachComponents","detachComponents","insertComponents","removeComponents","deleteComponents","reinsertComponent","SortedFlag","ordered","sorted","willSort","onSort","didSort","compareChildren","compareTargetChild","a","Global","NodeCursor","pages","childIndex","childCursor","pageCursor","page","pageSize","reversePageCursor","BTreeContext","pageSplitSize","pageShouldSplit","arity","pageShouldMerge","BTree","root","BTreePage","getEntry","firstKey","entry","firstEntry","firstValue","lastKey","lastEntry","lastValue","nextKey","nextEntry","nextValue","previousKey","previousEntry","previousValue","oldRoot","newRoot","updated","balanced","drop","lower","take","upper","clear","cleared","reduced","identity","accumulator","combiner","fold","forEach","forEachKey","forEachValue","entries","reverseKeys","reverseValues","reverseEntries","tree","toStringTag","BTreeLeaf","minKey","maxKey","lookup","updatedSlot","insertedSlot","oldSlots","newSlots","removedSlot","split","newPages","newLeftPage","splitLeft","newRightPage","splitRight","newKnots","BTreeNode","slot","knots","oldPage","newPage","updatedPageSplit","updatedPage","oldKnots","newSize","oldPages","updatedPageMerge","midPages","midKnots","replacedPage","removedPage","newArity","newNode","BTreeNodeCursor","STreeContext","identify","STree","STreePage","RangeError","insert","newValues","pop","move","fromIndex","toIndex","splice","deleteCount","deleted","STreeLeaf","updatedItem","oldItems","oldSlot","insertedItem","STreeNode","subIndex","STreeNodeCursor","ConstraintSymbol","ConstraintInvalid","ConstraintSlack","isExternal","isDummy","isInvalid","addConstraintCondition","constraint","solver","removeConstraintCondition","updateConstraintSolution","ConstraintDummy","ConstraintError","ConstraintExpressionLike","ConstraintExpression","ConstraintConstant","constant","sum","expressions","terms","Map","expression","ConstraintTerm","variable","coefficient","ConstraintSum","product","ConstraintProduct","isConstant","plus","negative","minus","times","scalar","divide","ConstraintProperty","evaluateConstraintVariable","constrained","toNumber","initStrength","strength","ConstraintStrength","Strong","setStrength","ConstrainedFlag","constrain","conditionCount","stopConstraining","startConstraining","updateConstraintVariable","constraining","ConstrainingFlag","willStartConstraining","onStartConstraining","didStartConstraining","constraintScope","ConstraintScope","addConstraintVariable","willStopConstraining","onStopConstraining","didStopConstraining","removeConstraintVariable","setConstraintVariable","strengthDescriptor","ConstraintAnimator","Required","Medium","Weak","Unbound","clip","Constraint","scope","relation","isConstrained","hasConstraint","addConstraint","removeConstraint","ConstraintContext","ConstraintRow","symbol","cells","setSymbol","invalidate","setConstant","insertSymbol","insertRow","removeSymbol","negate","solveFor","solveForEx","coefficientFor","substitute","row","Item","record","Record","updatedAttr","setAttr","setSlot","appended","items","prepended","item","lt","Bool","absent","le","eq","ne","ge","gt","invoke","filter","predicate","selector","Selector","literal","evaluate","interpreter","cast","form","orElse","coerce","precedence","ItemInterpolator","extant","Extant","Absent","Value","globalScope","MathModule","commit","_static_globalScope_decorators","Field","isDefined","isDistinct","isDefinite","toValue","flattened","unflattened","of","header","headers","body","getAttr","getSlot","getField","getItem","conditional","thenTerm","elseTerm","or","and","lambda","stringValue","numberValue","booleanValue","FieldInterpolator","Text","Attr","Slot","field","$key","$value","ImmutableFlag","keyInterpolator","valueInterpolator","updatedValue","bitwiseOr","Expression","BitwiseOrOperator","bitwiseXor","BitwiseXorOperator","bitwiseAnd","BitwiseAndOperator","PlusOperator","MinusOperator","TimesOperator","DivideOperator","modulo","ModuloOperator","not","bitwiseNot","positive","Interpreter","isAliased","isMutable","alias","branch","AttrInterpolator","typeOrder","keyEquals","SlotInterpolator","LtOperator","LeOperator","EqOperator","NeOperator","GeOperator","GtOperator","LambdaFunc","builder","ValueBuilder","Num","Data","wrap","fromArray","fromObject","pushField","pushValue","build","fieldCount","isObject","valueCount","member","modified","lastIndexOf","subRecord","attr","pushScope","changed","oldItem","newItem","popScope","recordString","itemString","toArray","toObject","RecordCursor","RecordInterpolator","xs","ys","hashValue","RecordMap","AliasedFlag","direction","setItem","table","writable","RecordMapView","hashTable","setAliased","pushAliased","setMutable","updateMutable","pushMutable","put","setAttrAliased","setAttrMutable","updateAttrMutable","setSlotAliased","setSlotMutable","updateSlotMutable","setItemAliased","setItemMutable","newItems","spliceAliased","spliceMutable","deleteAliased","deleteMutable","j","itemCount","clearAliased","clearMutable","l","getByte","setByte","setByteAliased","setByteMutable","addByte","addByteAliased","addByteMutable","addData","data","addUint8Array","addUint8ArrayAliased","addUint8ArrayMutable","asUint8Array","byteOffset","writeBase16","toBase16","writeBase64","toBase64","xn","yn","writer","fromBase16","fromBase64","DataOutput","valueOf","TextOutput","isInfinite","isUint32","Uint32Flag","isUint64","Uint64Flag","ceil","NumInterpolator","negativeZero","one","negativeOne","nan","uint32","uint64","Infinity","num","_static_zero_decorators","_static_negativeZero_decorators","_static_one_decorators","_static_negativeOne_decorators","_static_nan_decorators","TypeMask","true","false","_static_true_decorators","_static_false_decorators","_static_extant_decorators","_static_absent_decorators","ConditionalOperator","OrOperator","AndOperator","NotOperator","BitwiseNotOperator","NegativeOperator","PositiveOperator","Operator","binary","operand1","operator","operand2","operand","BinaryOperator","BinaryOperatorInterpolator","operand1Interpolator","operand2Interpolator","UnaryOperator","UnaryOperatorInterpolator","operandInterpolator","ifTerm","willOperate","didOperate","ConditionalOperatorInterpolator","ifTermInterpolator","thenTermInterpolator","elseTermInterpolator","InterpreterException","InterpreterSettings","maxScopeDepth","withMaxScopeDepth","scopeStack","scopeDepth","peekScope","getScope","oldScopeStack","newScopeStack","swapScope","newScope","oldScope","willSelect","didSelect","willTransform","didTransform","objects","scopes","argument1","argument2","InvokeOperator","func","Func","InvokeOperatorInterpolator","funcInterpolator","argsInterpolator","selected","forSelected","GetSelector","GetAttrSelector","GetItemSelector","descendants","FilterSelector","debugThen","IdentitySelector","KeysSelector","ValuesSelector","ChildrenSelector","DescendantsSelector","LiteralSelector","_static_identity_decorators","_static_keys_decorators","_static_values_decorators","_static_children_decorators","_static_descendants_decorators","then","mapSelected","oldField","newKey","filterSelected","bindings","params","binding","arg","BridgeFunc","MaxFunc","MinFunc","AbsFunc","CeilFunc","FloorFunc","RoundFunc","SqrtFunc","PowFunc","RateFunc","RandomFunc","rate","period","v0","dv","FormException","Form","withTag","TagForm","withUnit","UnitForm","forString","StringForm","forNumber","NumberForm","forBoolean","BooleanForm","forAny","AnyForm","forItem","ItemForm","forValue","ValueForm","_static_forString_decorators","_static_forNumber_decorators","_static_forBoolean_decorators","_static_forAny_decorators","_static_forItem_decorators","_static_forValue_decorators","mold","Recon","structureParser","ReconStructureParser","structureWriter","ReconStructureWriter","recon","parseBlockString","blockParser","sizeOfItem","sizeOfBlock","sizeOfBlockItem","writeItem","writeBlock","writeBlockItem","toBlockString","toData","encodedOutput","toBlockData","isWhitespace","isIdentStartChar","isIdentChar","toRecon","toReconBlock","parseRecon","BlockParser","keyParser","valueParser","block","valueBuilder","parseBlockExpression","AttrParser","parseString","parseIdent","parseBlock","BlockItemParser","fieldParser","parseAttr","recordBuilder","parseRecord","parseMarkup","parseRawString","parseNumber","parseData","parseSelector","InlineItemParser","RecordParser","MarkupParser","textOutput","parseInlineItem","DataParser","base64Parser","dataOutput","IdentParser","ident","StringParser","quote","RawStringParser","NumberParser","DecimalParser","HexadecimalParser","parseInteger","parseDecimal","LambdaFuncParser","bindingsParser","templateParser","parseConditionalOperator","ConditionalOperatorParser","ifParser","thenParser","elseParser","parseOrOperator","OrOperatorParser","lhsParser","rhsParser","parseAndOperator","AndOperatorParser","parseBitwiseOrOperator","BitwiseOrOperatorParser","parseBitwiseXorOperator","BitwiseXorOperatorParser","parseBitwiseAndOperator","BitwiseAndOperatorParser","parseComparisonOperator","ComparisonOperatorParser","parseAttrExpression","AttrExpressionParser","parseAdditiveOperator","AdditiveOperatorParser","parseMultiplicativeOperator","MultiplicativeOperatorParser","parsePrefixOperator","PrefixOperatorParser","operandParser","parseInvokeOperator","InvokeOperatorParser","exprParser","argsParser","parsePrimary","expr","PrimaryParser","parseLiteral","LiteralParser","SelectorParser","ReconParser","parseBlockItem","parseLambdaFunc","bool","AttrWriter","sizeOfValue","isExtant","sizeOfBlockValue","writeValue","writeBlockValue","SlotWriter","BlockWriter","inBlock","inMarkup","inBraces","inBrackets","first","markupSafe","isExpression","isAttr","isText","sizeOfMarkupText","isRecord","isMarkupSafe","isField","isBool","isValue","isIdent","isNum","sizeOfSlot","writeMarkupText","writeSlot","PrimaryWriter","inParens","MarkupTextWriter","text","escape","DataWriter","IdentWriter","LambdaFuncWriter","sizeOfPrimary","writePrimary","ConditionalOperatorWriter","InfixOperatorWriter","writeString","PrefixOperatorWriter","InvokeOperatorWriter","LiteralSelectorWriter","sizeOfThen","writeThen","GetSelectorWriter","GetAttrSelectorWriter","GetItemSelectorWriter","KeysSelectorWriter","ValuesSelectorWriter","ChildrenSelectorWriter","DescendantsSelectorWriter","FilterSelectorWriter","ReconWriter","sizeOfAttr","writeAttr","isBlockSafe","sizeOfRecord","writeRecord","sizeOfData","writeData","sizeOfText","writeText","sizeOfNum","writeNum","sizeOfUint32","writeUint32","sizeOfUint64","writeUint64","sizeOfBool","writeBool","sizeOfLambdaFunc","writeLambdaFunc","sizeOfConditionalOperator","writeConditionalOperator","sizeOfInfixOperator","writeInfixOperator","sizeOfPrefixOperator","writePrefixOperator","sizeOfInvokeOperator","writeInvokeOperator","sizeOfIdentitySelector","writeIdentitySelector","sizeOfThenIdentitySelector","writeThenIdentitySelector","sizeOfLiteralSelector","writeLiteralSelector","sizeOfThenLiteralSelector","writeThenLiteralSelector","sizeOfGetSelector","writeGetSelector","sizeOfThenGetSelector","writeThenGetSelector","sizeOfGetAttrSelector","writeGetAttrSelector","sizeOfThenGetAttrSelector","writeThenGetAttrSelector","sizeOfGetItemSelector","writeGetItemSelector","sizeOfThenGetItemSelector","writeThenGetItemSelector","sizeOfKeysSelector","writeKeysSelector","sizeOfThenKeysSelector","writeThenKeysSelector","sizeOfValuesSelector","writeValuesSelector","sizeOfThenValuesSelector","writeThenValuesSelector","sizeOfChildrenSelector","writeChildrenSelector","sizeOfThenChildrenSelector","writeThenChildrenSelector","sizeOfDescendantsSelector","writeDescendantsSelector","sizeOfThenDescendantsSelector","writeThenDescendantsSelector","sizeOfFilterSelector","writeFilterSelector","sizeOfThenFilterSelector","writeThenFilterSelector","sizeOfExtant","writeExtant","sizeOfAbsent","writeAbsent","isSlot","sizeOfSelector","sizeOfOperator","sizeOfFunc","writeSelector","writeOperator","writeFunc","UriLike","Uri","UriInit","scheme","authority","path","query","fragment","withScheme","UriScheme","schemePart","withSchemePart","schemeName","withSchemeName","withAuthority","UriAuthority","authorityPart","withAuthorityPart","user","withUser","userPart","withUserPart","username","withUsername","password","withPassword","host","withHost","hostPart","withHostPart","hostAddress","hostName","withHostName","hostIPv4","withHostIPv4","hostIPv6","withHostIPv6","port","withPort","portPart","withPortPart","portNumber","withPortNumber","withPath","UriPath","pathPart","withPathPart","pathName","withPathName","withName","parentPath","basePath","appendedPath","appendedSlash","appendedSegment","segment","prependedPath","prependedSlash","prependedSegment","withQuery","UriQuery","queryPart","withQueryPart","updatedQuery","removedQuery","appendedQuery","prependedQuery","withFragment","UriFragment","fragmentPart","withFragmentPart","fragmentIdentifier","withFragmentIdentifier","endpoint","resolve","removeDotSegments","isAbsolute","merge","unresolve","absolute","undefined","unmerge","uri","parseCache","UriParser","ParseCacheCapacity","pathBuilder","UriPathBuilder","queryBuilder","UriQueryBuilder","UriForm","isUnreservedChar","isSubDelimChar","isSchemeChar","isUserInfoChar","isUserChar","isHostChar","isPathChar","isQueryChar","isParamChar","isFragmentChar","isAlpha","toLowerCase","writeScheme","writeUserInfo","userInfo","writeEncoded","writeUser","writeHost","address","writeHostLiteral","writePathSegment","writeQuery","writeParam","param","writeFragment","writePctEncoded","_static_parseCache_decorators","_static_form_decorators","schemeParser","authorityParser","pathParser","queryParser","fragmentParser","look","UriSchemeParser","addSlash","UriPathParser","slash","UriAuthorityParser","UriQueryParser","UriFragmentParser","UriSchemeLike","_static_undefined_decorators","decodedString","UriAuthorityLike","UriAuthorityInit","UriUser","UriHost","hostname","ipv4","ipv6","hostIPv5","UriPort","number","userParser","hostParser","portParser","UriUserParser","UriHostParser","UriPortParser","UriUserLike","UriUserInit","usernameOutput","passwordOutput","UriHostLike","UriHostUndefined","UriHostName","UriHostIPv4","UriHostIPv6","UriHostLiteralParser","UriHostAddressParser","UriPortLike","UriPathLike","isRelative","addPath","addSegment","isSegment","foot","isSubpathOf","UriPathSlash","rest","relativeTo","difference","commonSlash","UriPathEmpty","UriPathSegment","pathForm","UriPathForm","_static_pathForm_decorators","setTail","dealias","_static_slash_decorators","_staticExtraInitializers_1","last","aliased","xi","UriQueryLike","addParam","addQuery","UriQueryUndefined","UriQueryParam","keyOutput","valueOutput","UriFragmentLike","LengthLike","Length","units","basis","combine","emValue","pxValue","emUnit","remValue","remUnit","pctValue","pctUnit","px","PxLength","em","EmLength","rem","RemLength","pct","PctLength","to","LengthInterpolator","UnitlessLength","unitless","fromCssValue","CSSUnitValue","defaultUnits","fromValue","LengthParser","LengthForm","Node","node","Element","fontSize","getComputedStyle","parseFloat","parentNode","document","documentElement","toCssValue","_staticExtraInitializers_2","_staticExtraInitializers_3","_staticExtraInitializers_4","_staticExtraInitializers_5","l0","l1","e","unitsOutput","AngleLike","Angle","norm","total","deg","DegAngle","degValue","rad","RadAngle","radValue","grad","GradAngle","gradValue","turn","TurnAngle","turnValue","AngleInterpolator","AngleParser","AngleForm","a0","a1","angle","R2VectorLike","R2Vector","R2VectorInit","R2VectorInterpolator","v1","R2ShapeLike","R2Shape","R2PointInit","R2PointTuple","R2SegmentInit","R2BoxInit","R2Circle","R2Box","yMin","yMax","bounds","R2Point","fromTuple","R2Segment","R2CircleInit","R2Path","R2PointLike","vector","intersects","transformX","transformY","R2PointInterpolator","origin","tuple","_static_origin_decorators","p0","p1","R2Curve","draw","drawMove","drawRest","transformDraw","transformDrawMove","transformDrawRest","writePath","writeMove","writeRest","toPathString","outputSettings","quadratic","R2QuadraticCurve","cubic","R2CubicCurve","elliptic","cx","cy","rx","ry","phi","da","R2EllipticCurve","R2CurveParser","R2BezierCurve","x0Parser","y0Parser","command","R2SegmentParser","R2QuadraticCurveParser","R2CubicCurveParser","R2EllipticCurveParser","parseRest","R2SegmentLike","interpolateX","interpolateY","interpolate","containsPoint","containsSegment","ax","ay","bx","by","intersectsPoint","intersectsSegment","py","qx","qy","sx","sy","pqx","pqy","pqr","rs","rr","sr","moveTo","lineTo","R2SegmentInterpolator","x1Parser","y1Parser","x12","y12","x02","y02","quadraticCurveTo","x2Parser","y2Parser","x23","y23","x13","y13","x03","y03","bezierCurveTo","x3Parser","y3Parser","cos","a0x","a0y","a1x","a1y","b0x","b0y","b1x","b1y","b0","atan2","b1","db","toEndpoints","ellipse","ccw","large","sweep","cosPhi","sinPhi","cosA0","sinA0","cosA1","sinA1","fromEndpoints","x0p","y0p","rx2","ry2","x0p2","y0p2","sp","cxp","cyp","ux","uy","vx","vy","uv","uu","vv","acos","rxParser","ryParser","phiParser","R2Spline","curves","closed","boundingBox","pathString","isClosed","c0","curves0","curves1","subdivide","oldCurves","newCurves","curve","closePath","R2SplineBuilder","open","R2SplineParser","arcTo","dx01","dy01","dx12","dy12","r0x","r0y","r1x","r1y","r0x0","r0y0","r0x1","r0y1","r1x1","r1y1","r1x2","r1y2","intersection","arc","rect","h","xParser","yParser","curveParser","prevCurve","R2PathLike","splines","splines0","splines1","oldSplines","newSplines","spline","toAttributeString","R2PathBuilder","R2PathParser","splineParser","R2CircleLike","containsBox","containsCircle","dx0","dy0","dx1","dy1","r2","dxMin","dyMin","dxMax","dyMax","intersectsBox","intersectsCircle","unitX","unitY","d","dcx0","dcy0","dcx1","dcy1","uc","u0","u1","R2CircleInterpolator","R2BoxLike","height","top","right","bottom","left","center","hitY","hitX","d0","d1","R2BoxInterpolator","R2Group","shapes","oldShapes","newShapes","shape","TransformLike","Transform","translate","translateX","translateY","scaleX","scaleY","rotate","skew","skewX","skewY","toMatrix","toAffine","toCssTransformComponent","CSSTransformValue","AffineTransformInterpolator","IdentityTransform","TranslateTransform","ScaleTransform","RotateTransform","SkewTransform","affine","tx","ty","AffineTransform","list","transforms","TransformList","fromCssTransform","fromCssTransformComponent","CSSTranslate","CSSRotate","CSSScale","CSSSkew","CSSMatrixComponent","TransformListParser","TransformForm","TransformParser","identOutput","TranslateTransformParser","ScaleTransformParser","RotateTransformParser","SkewTransformParser","AffineTransformParser","CSSKeywordValue","conformsTo","TranslateTransformLike","TranslateTransformInterpolator","f0","f1","zParser","ScaleTransformLike","ScaleTransformInterpolator","RotateTransformLike","cosA","sinA","RotateTransformInterpolator","angleParser","SkewTransformLike","tan","SkewTransformInterpolator","AffineTransformLike","multiply","m00","m10","m01","m11","m02","m12","det","MIN_VALUE","DOMMatrix","fromMatrix","matrix","entryParser","TransformListLike","yi","inverseTransforms","TransformListInterpolator","transforms0","transforms1","transformParser","GeoProjection","GeoShapeLike","GeoShape","GeoPointInit","GeoPointTuple","GeoSegmentInit","GeoSplinePoints","GeoPathSplines","GeoTileInit","GeoTileTuple","GeoBoxInit","GeoBox","lngMin","latMin","lngMax","latMax","GeoPoint","GeoSegment","GeoSpline","fromPoints","GeoPath","fromSplines","GeoTile","GeoPointLike","lng","lat","project","normalized","oldLng","oldLat","newLng","normalizeLng","newLat","normalizeLat","GeoPointInterpolator","lng0","lat0","lng1","lat1","uw","ue","GeoCurve","GeoSegmentLike","interpolateLng","interpolateLat","lng01","lat01","forEachCoord","forEachCoordRest","GeoSegmentInterpolator","GeoSplineLike","GeoSplineBuilder","points","p2","GeoPathLike","centroid","lngSum","latSum","GeoPathBuilder","GeoTileLike","unprojectX","unprojectY","west","south","east","north","southWest","northWest","southEast","northEast","southWestTile","northWestTile","southEastTile","northEastTile","parentTile","containsTile","GeoBoxLike","intersectsTile","bottomLeft","topRight","atan","exp","_static_root_decorators","GeoBoxInterpolator","globe","_static_globe_decorators","GeoGroup","GeoJsonPosition","GeoJson","toShape","GeoJsonFeature","GeoJsonFeatureCollection","toShapes","GeoJsonGeometry","GeoJsonPoint","GeoJsonMultiPoint","GeoJsonLineString","GeoJsonMultiLineString","GeoJsonPolygon","GeoJsonMultiPolygon","GeoJsonGeometryCollection","position","coordinates","positions","lineString","multiLineString","polygons","polygon","multiPolygon","o","geometries","feature","geometry","features","TimeZoneLike","TimeZone","isUTC","isLocal","getTimezoneOffset","utc","local","forOffset","forName","zone","TimeZoneForm","_static_utc_decorators","_static_local_decorators","DateTimeLike","DateTime","DateTimeInit","time","year","toUTCLocalDate","getUTCFullYear","withYear","month","day","hour","minute","second","millisecond","date","setUTCFullYear","setUTCMonth","setUTCDate","setUTCHours","setUTCMinutes","setUTCSeconds","setUTCMilliseconds","fromUTCLocalDate","getUTCMonth","withMonth","getUTCDate","withDay","getUTCHours","withHour","getUTCMinutes","withMinute","getUTCSeconds","withSecond","getUTCMilliseconds","withMillisecond","weekday","getUTCDay","toDate","DateTimeInterpolator","format","DateTimeFormat","iso8601","writeDate","current","UTC","positional","DateTimeForm","DateTimeParser","dateParser","DateTimeLocale","periods","Periods","weekdays","Weekdays","shortWeekdays","ShortWeekdays","months","Months","shortMonths","ShortMonths","DateTimeSpecifiers","locale","specifiers","Y","monthOfYear","B","shortMonth","dayOfMonth","A","shortWeekday","H","hour24","I","hour12","M","S","L","withLocale","parseDate","parseDateTime","Year","YearFormat","MonthOfYear","MonthOfYearFormat","MonthFormat","Month","ShortMonthFormat","ShortMonth","padChar","DayOfMonthZeroPadded","DayOfMonthFormat","DayOfMonthSpacePadded","WeekdayFormat","Weekday","ShortWeekdayFormat","ShortWeekday","Hour24","Hour24Format","Hour12ZeroPadded","Hour12Format","Hour12SpacePadded","PeriodFormat","Period","Minute","MinuteFormat","Second","SecondFormat","Millisecond","MillisecondFormat","pattern","PatternFormat","Iso8601","parseDateNumber","factory","desc","minDigits","maxDigits","term","parseDateString","writeDateNumber2","writeDateNumber3","writeDateNumber4","YearParser","MonthOfYearParser","MonthParser","ShortMonthParser","DayOfMonthParser","WeekdayParser","ShortWeekdayParser","Hour24Parser","Hour12Parser","PeriodParser","MinuteParser","SecondParser","MillisecondParser","charAt","PatternParser","TimeInterval","ds","FilterTimeInterval","YearInterval","MonthInterval","week","Week","WeekInterval","Day","DayInterval","Hour","HourInterval","MinuteInterval","SecondInterval","MillisecondInterval","years","milliseconds","MillisPerSecond","MillisPerMinute","MillisPerHour","UnitTimeInterval","every","YearsInterval","stride","dtz","MillisecondsInterval","TimeDomain","TimeRange","t0Min","t0Max","t1Min","t1Max","tMin","tMax","TimeDomainInterpolator","t00","t01","t10","t11","TimeRangeInterpolator","TimeScale","tSum","t2","t3","TimeScaleInterpolator","ConstraintGroup","constraints","enableConstraints","disableConstraints","ConstraintSolver","constraintVariables","rows","infeasible","objective","artificial","invalidated","createRow","addConstraintRow","willAddConstraint","subject","chooseSubject","marker","addWithArtificialVariable","optimize","didAddConstraint","updateSolution","removeConstraintRow","willRemoveConstraint","removeConstraintEffects","leaving","getMarkerLeavingSymbol","didRemoveConstraint","constraintVariable","hasConstraintVariable","willAddConstraintVariable","didAddConstraintVariable","willRemoveConstraintVariable","didRemoveConstraintVariable","delta","willSetConstraintVariable","dualOptimize","other","didSetConstraintVariable","basic","slack","eplus","eminus","dummy","success","entering","anyPivotableSymbol","getEnteringSymbol","getLeavingSymbol","getDualEnteringSymbol","ratio","MAX_VALUE","coratio","found","r1","third","removeMarkerEffects","UriCache","resolveCache","unresolveCache","keyForm","valueForm","pair"],"mappings":"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"}